is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,15, limitations under the License.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,3,* contributor license agreements. See the NOTICE file distributed with this
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,4,* work for additional information regarding copyright ownership. The ASF
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,5,"* licenses this file to You under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,6,"* ""License""); you may not use this file except in compliance with the License."
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,7,* You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,8,* http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,9,"* or agreed to in writing, software distributed under the License is"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,10,"* distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,11,"* KIND, either express or implied. See the License for the specific language"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,12,* governing permissions and limitations under the License.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,29, @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,26,"* @version $Revision$ $Date: 2009-09-05 12:36:48 -0500 (Sat, 05 Sep"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,27,*          2009) $
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,31,ublic class BinomialDistributionImpl
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,32,xtends AbstractIntegerDistribution
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,33,"mplements BinomialDistribution, Serializable {"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,29,public class BinomialDistributionImpl extends AbstractIntegerDistribution
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,30,"implements BinomialDistribution, Serializable {"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,76,         number of trials.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,77,*             number of trials.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,81,"number of trials must be non-negative ({0})"", trials);"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,82,"""number of trials must be non-negative ({0})"", trials);"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,90,         probability.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,92,*             probability.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,95,"{0} out of [{1}, {2}] range"", p, 0.0, 1.0);"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,97,"""{0} out of [{1}, {2}] range"", p, 0.0, 1.0);"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,105," @return domain value lower bound, i.e."
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,106,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,107,"* @return domain value lower bound, i.e. P(X &lt; <i>lower bound</i>) &lt;"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,108,*         <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,118," @return domain value upper bound, i.e."
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,119,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,120,"* @return domain value upper bound, i.e. P(X &lt; <i>upper bound</i>) &gt;"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,121,*         <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,130, @throws MathException if the cumulative probability can not be
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,131,            computed due to convergence or other numerical errors.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,133,* @throws MathException if the cumulative probability can not be computed
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,134,*             due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,141,et =
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,142,.0 - Beta.regularizedBeta(
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,143,"etProbabilityOfSuccess(),"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,144," + 1.0,"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,145,etNumberOfTrials() - x);
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,144,"ret = 1.0 - Beta.regularizedBeta(getProbabilityOfSuccess(),"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,145,"x + 1.0, getNumberOfTrials() - x);"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,161,et = MathUtils.binomialCoefficientDouble(
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,162,"etNumberOfTrials(), x) *"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,163,"ath.pow(getProbabilityOfSuccess(), x) *"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,164,"ath.pow(1.0 - getProbabilityOfSuccess(),"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,165,etNumberOfTrials() - x);
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,161,"ret = Math.exp(SaddlePointExpansion.logBinomialProbability(x,"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,162,"numberOfTrials, probabilityOfSuccess,"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,163,1.0 - probabilityOfSuccess));
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,171," For this distribution, X, this method returns the largest x, such"
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,172, that P(X &le; x) &le; <code>p</code>.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,169,"* For this distribution, X, this method returns the largest x, such that"
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,170,* P(X &le; x) &le; <code>p</code>.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,175, p=1.</p>
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,173,* p=1.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,174,* </p>
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,180,            computed due to convergence or other numerical errors.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,179,*             computed due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,184,ublic int inverseCumulativeProbability(final double p) throws MathException {
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,183,public int inverseCumulativeProbability(final double p)
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,184,throws MathException {
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,15, limitations under the License.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,3,* contributor license agreements. See the NOTICE file distributed with this
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,4,* work for additional information regarding copyright ownership. The ASF
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,5,"* licenses this file to You under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,6,"* ""License""); you may not use this file except in compliance with the License."
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,7,* You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,8,* http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,9,"* or agreed to in writing, software distributed under the License is"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,10,"* distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,11,"* KIND, either express or implied. See the License for the specific language"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,12,* governing permissions and limitations under the License.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,28, @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,25,"* @version $Revision$ $Date: 2009-09-05 12:36:48 -0500 (Sat, 05 Sep"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,26,*          2009) $
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,31,"mplements HypergeometricDistribution, Serializable"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,29,"implements HypergeometricDistribution, Serializable {"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,54,"nt numberOfSuccesses, int sampleSize) {"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,52,"int numberOfSuccesses, int sampleSize) {"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,57,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,58,"number of successes ({0}) must be less than or equal to population size ({1})"","
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,59,"umberOfSuccesses, populationSize);"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,55,throw MathRuntimeException
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,56,.createIllegalArgumentException(
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,57,"""number of successes ({0}) must be less than or equal to population size ({1})"","
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,58,"numberOfSuccesses, populationSize);"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,62,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,63,"sample size ({0}) must be less than or equal to population size ({1})"","
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,64,"ampleSize, populationSize);"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,61,throw MathRuntimeException
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,62,.createIllegalArgumentException(
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,63,"""sample size ({0}) must be less than or equal to population size ({1})"","
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,64,"sampleSize, populationSize);"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,87, else if(x >= domain[1]) {
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,88,} else if (x >= domain[1]) {
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,104,"rivate int[] getDomain(int n, int m, int k){"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,105,eturn new int[]{
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,106,"etLowerDomain(n, m, k),"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,107,"etUpperDomain(m, k)"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,106,"private int[] getDomain(int n, int m, int k) {"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,107,"return new int[] { getLowerDomain(n, m, k), getUpperDomain(m, k) };"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,116," @return domain value lower bound, i.e."
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,117,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,115,"* @return domain value lower bound, i.e. P(X &lt; <i>lower bound</i>) &lt;"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,116,*         <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,122,etSampleSize());
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,121,getSampleSize());
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,130," @return domain value upper bound, i.e."
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,131,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,129,"* @return domain value upper bound, i.e. P(X &lt; <i>upper bound</i>) &gt;"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,130,*         <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,181,"rivate int getUpperDomain(int m, int k){"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,185,"private int getUpperDomain(int m, int k) {"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,194,nt n = getPopulationSize();
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,195,nt m = getNumberOfSuccesses();
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,198,int m = getPopulationSize();
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,199,int s = getNumberOfSuccesses();
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,200,int f = m - s;
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,198,"nt[] domain = getDomain(n, m, k);"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,199,f(x < domain[0] || x > domain[1]){
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,203,"int[] domain = getDomain(m, s, k);"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,204,if (x < domain[0] || x > domain[1]) {
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,202,"et = probability(n, m, k, x);"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,207,double p = (double) sampleSize / (double) m;
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,208,double q = (double) (m - sampleSize) / (double) m;
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,209,"double p1 = SaddlePointExpansion.logBinomialProbability(x,"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,210,"numberOfSuccesses, p, q);"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,211,double p2 = SaddlePointExpansion.logBinomialProbability(sampleSize
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,212,"- x, f, p, q);"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,213,"double p3 = SaddlePointExpansion.logBinomialProbability(sampleSize,"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,214,"m, p, q);"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,215,ret = Math.exp(p1 + p2 - p3);
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,219,"eturn Math.exp(MathUtils.binomialCoefficientLog(m, x) +"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,220,"athUtils.binomialCoefficientLog(n - m, k - x) -"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,221,"athUtils.binomialCoefficientLog(n, k));"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,232,"return Math.exp(MathUtils.binomialCoefficientLog(m, x)"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,233,"+ MathUtils.binomialCoefficientLog(n - m, k - x)"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,234,"- MathUtils.binomialCoefficientLog(n, k));"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,230,f(num < 0){
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,244,if (num < 0) {
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,232,"number of successes must be non-negative ({0})"","
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,233,um);
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,246,"""number of successes must be non-negative ({0})"", num);"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,244,f(size <= 0){
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,258,if (size <= 0) {
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,246,"population size must be positive ({0})"","
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,247,ize);
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,260,"""population size must be positive ({0})"", size);"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,260,"sample size must be positive ({0})"","
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,261,ize);
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,274,"""sample size must be positive ({0})"", size);"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,282, else if(x > domain[1]) {
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,296,} else if (x > domain[1]) {
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,292," For this distribution, X, this method returns P(x0 &le; X &le; x1).  This"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,306,"* For this distribution, X, this method returns P(x0 &le; X &le; x1). This"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,298,           0 indicates summing from x1 to x0.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,313,*            0 indicates summing from x1 to x0.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,304,rivate double innerCumulativeProbability(
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,305,"nt x0, int x1, int dx, int n, int m, int k)"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,319,"private double innerCumulativeProbability(int x0, int x1, int dx, int n,"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,320,"int m, int k) {"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,15, limitations under the License.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,3,* contributor license agreements. See the NOTICE file distributed with this
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,4,* work for additional information regarding copyright ownership. The ASF
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,5,"* licenses this file to You under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,6,"* ""License""); you may not use this file except in compliance with the License."
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,7,* You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,8,* http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,9,"* or agreed to in writing, software distributed under the License is"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,10,"* distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,11,"* KIND, either express or implied. See the License for the specific language"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,12,* governing permissions and limitations under the License.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,29, @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,26,"* @version $Revision$ $Date: 2009-09-05 12:36:48 -0500 (Sat, 05 Sep"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,27,*          2009) $
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,46, Create a new Poisson distribution with the given the mean.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,47, The mean value must be positive; otherwise an
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,48, <code>IllegalArgument</code> is thrown.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,44,* Create a new Poisson distribution with the given the mean. The mean value
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,45,* must be positive; otherwise an <code>IllegalArgument</code> is thrown.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,58, Create a new Poisson distribution with the given the mean.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,59, The mean value must be positive; otherwise an
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,60, <code>IllegalArgument</code> is thrown.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,55,* Create a new Poisson distribution with the given the mean. The mean value
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,56,* must be positive; otherwise an <code>IllegalArgument</code> is thrown.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,83, Set the Poisson mean for the distribution.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,84, The mean value must be positive; otherwise an
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,85, <code>IllegalArgument</code> is thrown.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,79,* Set the Poisson mean for the distribution. The mean value must be
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,80,* positive; otherwise an <code>IllegalArgument</code> is thrown.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,93,"the Poisson mean must be positive ({0})"","
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,94,);
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,88,"""the Poisson mean must be positive ({0})"", p);"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,104, @param x the value at which the probability density function is evaluated.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,98,* @param x the value at which the probability density function is
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,99,*            evaluated.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,103,double ret;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,109,eturn 0;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,105,ret = 0.0;
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,106,} else if (x == 0) {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,107,ret = Math.exp(-mean);
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,108,} else {
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,109,ret = Math.exp(-SaddlePointExpansion.getStirlingError(x)
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,110,"- SaddlePointExpansion.getDeviancePart(x, mean))"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,111,/ Math.sqrt(2.0 * Math.PI * x); // TODO make MathUtils.PI
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,112,// public
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,111,"eturn Math.pow(getMean(), x) /"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,112,athUtils.factorialDouble(x) * Math.exp(-mean);
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,114,return ret;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,116, The probability distribution function P(X <= x) for a Poisson distribution.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,118,* The probability distribution function P(X <= x) for a Poisson
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,119,* distribution.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,120, @throws MathException if the cumulative probability can not be
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,121,            computed due to convergence or other numerical errors.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,123,* @throws MathException if the cumulative probability can not be computed
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,124,*             due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,131,"eturn Gamma.regularizedGammaQ((double)x + 1, mean,"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,132,"E-12, Integer.MAX_VALUE);"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,134,"return Gamma.regularizedGammaQ((double) x + 1, mean, 1E-12,"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,135,Integer.MAX_VALUE);
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,137," approximation.  The <code>N(mean, sqrt(mean))</code>"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,138, distribution is used to approximate the Poisson distribution.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,140,"* approximation. The <code>N(mean, sqrt(mean))</code> distribution is used"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,141,* to approximate the Poisson distribution.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,141, distribution function at <code>x + 0.5</code></p>
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,144,* distribution function at <code>x + 0.5</code>
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,145,* </p>
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,144, @return the distribution function value calculated using a normal approximation
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,145, @throws MathException if an error occurs computing the normal approximation
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,148,* @return the distribution function value calculated using a normal
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,149,*         approximation
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,150,* @throws MathException if an error occurs computing the normal
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,151,*             approximation
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,154, bracket a CDF root.  This method is used by
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,160,* bracket a CDF root. This method is used by
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,167, bracket a CDF root.  This method is used by
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,173,* bracket a CDF root. This method is used by
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,179, Modify the normal distribution used to compute normal approximations.
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,180, The caller is responsible for insuring the normal distribution has the
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,181, proper parameter settings.
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,185,* Modify the normal distribution used to compute normal approximations. The
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,186,* caller is responsible for insuring the normal distribution has the proper
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,187,* parameter settings.
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,1,package org.apache.commons.math.distribution;
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,3,import org.apache.commons.math.special.Gamma;
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,6,* <p>
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,7,* Utility class used by various distributions to accurately compute their
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,8,* respective probability mass functions. The implementation for this class is
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,9,"* based on the Catherine Loader's <a target=""_blank"""
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,10,"* href=""http://www.herine.net/stat/software/dbinom.html"">dbinom</a> routines."
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,11,* </p>
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,12,* <p>
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,13,* This class is not intended to be called directly.
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,14,* </p>
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,15,* <p>
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,16,* References:
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,17,* <ol>
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,18,"* <li>Catherine Loader (2000). ""Fast and Accurate Computation of Binomial"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,19,"* Probabilities."". <a target=""_blank"""
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,20,"* href=""http://www.herine.net/stat/papers/dbinom.pdf"">"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,21,* http://www.herine.net/stat/papers/dbinom.pdf</a></li>
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,22,* </ol>
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,23,* </p>
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,25,* @since 1.2
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,26,* @version $Revision: 1.3 $ $Date: 2007/11/18 23:51:21 $
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,28,final class SaddlePointExpansion {
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,30,/** 2 &#960;. */
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,31,private static double PI_2 = 2.0 * Math.PI;
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,33,/** 1/2 * log(2 &#960;). */
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,34,private static double HALF_LOG_2_PI = 0.5 * Math.log(PI_2);
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,36,/** exact striling expansion error for certain values. */
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,37,"private static final double[] EXACT_STIRLING_ERRORS = { 0.0, /* 0.0 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,38,"0.1534264097200273452913848, /* 0.5 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,39,"0.0810614667953272582196702, /* 1.0 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,40,"0.0548141210519176538961390, /* 1.5 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,41,"0.0413406959554092940938221, /* 2.0 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,42,"0.03316287351993628748511048, /* 2.5 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,43,"0.02767792568499833914878929, /* 3.0 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,44,"0.02374616365629749597132920, /* 3.5 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,45,"0.02079067210376509311152277, /* 4.0 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,46,"0.01848845053267318523077934, /* 4.5 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,47,"0.01664469118982119216319487, /* 5.0 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,48,"0.01513497322191737887351255, /* 5.5 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,49,"0.01387612882307074799874573, /* 6.0 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,50,"0.01281046524292022692424986, /* 6.5 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,51,"0.01189670994589177009505572, /* 7.0 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,52,"0.01110455975820691732662991, /* 7.5 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,53,"0.010411265261972096497478567, /* 8.0 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,54,"0.009799416126158803298389475, /* 8.5 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,55,"0.009255462182712732917728637, /* 9.0 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,56,"0.008768700134139385462952823, /* 9.5 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,57,"0.008330563433362871256469318, /* 10.0 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,58,"0.007934114564314020547248100, /* 10.5 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,59,"0.007573675487951840794972024, /* 11.0 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,60,"0.007244554301320383179543912, /* 11.5 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,61,"0.006942840107209529865664152, /* 12.0 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,62,"0.006665247032707682442354394, /* 12.5 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,63,"0.006408994188004207068439631, /* 13.0 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,64,"0.006171712263039457647532867, /* 13.5 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,65,"0.005951370112758847735624416, /* 14.0 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,66,"0.005746216513010115682023589, /* 14.5 */"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,67,0.005554733551962801371038690 /* 15.0 */
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,71,* Default constructor.
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,73,private SaddlePointExpansion() {
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,74,super();
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,78,* Compute the error of Stirling's series at the given value.
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,79,* <p>
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,80,* References:
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,81,* <ol>
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,82,"* <li>Eric W. Weisstein. ""Stirling's Series."" From MathWorld--A Wolfram Web"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,83,"* Resource. <a target=""_blank"""
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,84,"* href=""http://mathworld.wolfram.com/StirlingsSeries.html"">"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,85,* http://mathworld.wolfram.com/StirlingsSeries.html</a></li>
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,86,* </ol>
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,87,* </p>
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,89,* @param z the value.
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,90,* @return the Striling's series error.
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,92,static double getStirlingError(double z) {
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,93,double ret;
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,94,if (z < 15.0) {
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,95,double z2 = 2.0 * z;
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,96,if (Math.floor(z2) == z2) {
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,97,ret = EXACT_STIRLING_ERRORS[(int) z2];
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,98,} else {
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,99,ret = Gamma.logGamma(z + 1.0) - (z + 0.5) * Math.log(z) + z
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,100,- HALF_LOG_2_PI;
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,102,} else {
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,103,double z2 = z * z;
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,104,ret = (0.083333333333333333333 - (0.00277777777777777777778 - (0.00079365079365079365079365 - (0.000595238095238095238095238 - 0.0008417508417508417508417508 / z2)
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,105,/ z2)
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,106,/ z2)
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,107,/ z2)
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,108,/ z;
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,110,return ret;
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,114,* A part of the deviance portion of the saddle point approximation.
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,115,* <p>
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,116,* References:
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,117,* <ol>
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,118,"* <li>Catherine Loader (2000). ""Fast and Accurate Computation of Binomial"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,119,"* Probabilities."". <a target=""_blank"""
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,120,"* href=""http://www.herine.net/stat/papers/dbinom.pdf"">"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,121,* http://www.herine.net/stat/papers/dbinom.pdf</a></li>
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,122,* </ol>
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,123,* </p>
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,125,* @param x the x value.
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,126,* @param mu the average.
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,127,* @return a part of the deviance.
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,129,"static double getDeviancePart(double x, double mu) {"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,130,double ret;
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,131,if (Math.abs(x - mu) < 0.1 * (x + mu)) {
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,132,double d = (x - mu);
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,133,double v = d / (x + mu);
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,134,double s1 = v * d;
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,135,double s = Double.NaN;
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,136,double ej = 2.0 * x * v;
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,137,v = v * v;
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,138,int j = 1;
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,139,while (s1 != s) {
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,140,s = s1;
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,141,ej *= v;
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,142,s1 = s + ej / ((j * 2) + 1);
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,143,++j;
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,145,ret = s1;
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,146,} else {
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,147,ret = x * Math.log(x / mu) + mu - x;
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,149,return ret;
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,153,* Compute the PMF for a binomial distribution using the saddle point
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,154,* expansion.
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,156,* @param x the value at which the probability is evaluated.
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,157,* @param n the number of trials.
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,158,* @param p the probability of success.
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,159,* @param q the probability of failure (1 - p).
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,160,* @return log(p(x)).
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,162,"static double logBinomialProbability(int x, int n, double p, double q) {"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,163,double ret;
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,164,if (x == 0) {
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,165,if (p < 0.1) {
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,166,"ret = -getDeviancePart(n, n * q) - n * p;"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,167,} else {
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,168,ret = n * Math.log(q);
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,170,} else if (x == n) {
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,171,if (q < 0.1) {
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,172,"ret = -getDeviancePart(n, n * p) - n * q;"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,173,} else {
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,174,ret = n * Math.log(p);
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,176,} else {
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,177,ret = getStirlingError(n) - getStirlingError(x)
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,178,"- getStirlingError(n - x) - getDeviancePart(x, n * p)"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,179,"- getDeviancePart(n - x, n * q);"
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,180,double f = (PI_2 * x * (n - x)) / n;
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,181,ret = -0.5 * Math.log(f) + ret;
True,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java,183,return ret;
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,14, See the License for the specific language governing permissions and
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,15, limitations under the License.
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,3,* contributor license agreements. See the NOTICE file distributed with this
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,4,* work for additional information regarding copyright ownership. The ASF
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,5,"* licenses this file to You under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,6,"* ""License""); you may not use this file except in compliance with the License."
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,7,* You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,9,"* or agreed to in writing, software distributed under the License is"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,10,"* distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,11,"* KIND, either express or implied. See the License for the specific language"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,12,* governing permissions and limitations under the License.
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,20, Test cases for BinomialDistribution.
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,21, Extends IntegerDistributionAbstractTest.  See class javadoc for
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,22, IntegerDistributionAbstractTest for details.
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,24, @version $Revision$ $Date$
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,17,* Test cases for BinomialDistribution. Extends IntegerDistributionAbstractTest.
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,18,* See class javadoc for IntegerDistributionAbstractTest for details.
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,20,"* @version $Revision$ $Date: 2009-09-05 12:36:48 -0500 (Sat, 05 Sep"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,21,*          2009) $
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,36,/-------------- Implementations for abstract methods -----------------------
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,34,// -------------- Implementations for abstract methods
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,41,"eturn new BinomialDistributionImpl(10,0.70);"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,40,"return new BinomialDistributionImpl(10, 0.70);"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,47,"eturn new int[] {-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,46,"return new int[] { -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,53,"eturn new double[] {0d, 0.0000d, 0.0001d, 0.0014d, 0.0090d, 0.0368d, 0.1029d,"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,54,".2001d, 0.2668d, 0.2335d, 0.1211d, 0.0282d, 0d};"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,52,"return new double[] { 0d, 0.0000059049d, 0.000137781d, 0.0014467d,"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,53,"0.00900169d, 0.0367569d, 0.102919d, 0.200121d, 0.266828d,"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,54,"0.233474d, 0.121061d, 0.0282475d, 0d };"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,66,"eturn new double[] {0d, 0.0000d, 0.0001d, 0.0016d, 0.0106d, 0.0473d,"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,67,".1503d, 0.3504d, 0.6172d, 0.8507d, 0.9718d, 1d, 1d};"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,66,"return new double[] { 0d, 0.0000d, 0.0001d, 0.0016d, 0.0106d, 0.0473d,"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,67,"0.1503d, 0.3504d, 0.6172d, 0.8507d, 0.9718d, 1d, 1d };"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,73,"eturn new double[] {0, 0.001d, 0.010d, 0.025d, 0.050d, 0.100d, 0.999d,"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,74,".990d, 0.975d, 0.950d, 0.900d,1};"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,73,"return new double[] { 0, 0.001d, 0.010d, 0.025d, 0.050d, 0.100d,"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,74,"0.999d, 0.990d, 0.975d, 0.950d, 0.900d, 1 };"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,77,** Creates the default inverse cumulative probability density test expected values */
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,78,* Creates the default inverse cumulative probability density test expected
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,79,* values
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,80,"eturn new int[] {-1, 1, 2, 3, 4, 4, 9, 9, 9, 8, 8, Integer.MAX_VALUE};"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,83,"return new int[] { -1, 1, 2, 3, 4, 4, 9, 9, 9, 8, 8, Integer.MAX_VALUE };"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,83,/----------------- Additional test cases ---------------------------------
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,86,// ----------------- Additional test cases ---------------------------------
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,85,** Test degenerate case p = 0   */
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,88,/** Test degenerate case p = 0 */
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,87,"etDistribution(new BinomialDistributionImpl(5,0.0d));"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,88,"etCumulativeTestPoints(new int[] {-1, 0, 1, 5, 10 });"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,89,"etCumulativeTestValues(new double[] {0d, 1d, 1d, 1d, 1d});"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,90,"etDensityTestPoints(new int[] {-1, 0, 1, 10, 11});"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,91,"etDensityTestValues(new double[] {0d, 1d, 0d, 0d, 0d});"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,92,"etInverseCumulativeTestPoints(new double[] {0.1d, 0.5d});"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,93,"etInverseCumulativeTestValues(new int[] {-1, -1});"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,90,"setDistribution(new BinomialDistributionImpl(5, 0.0d));"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,91,"setCumulativeTestPoints(new int[] { -1, 0, 1, 5, 10 });"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,92,"setCumulativeTestValues(new double[] { 0d, 1d, 1d, 1d, 1d });"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,93,"setDensityTestPoints(new int[] { -1, 0, 1, 10, 11 });"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,94,"setDensityTestValues(new double[] { 0d, 1d, 0d, 0d, 0d });"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,95,"setInverseCumulativeTestPoints(new double[] { 0.1d, 0.5d });"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,96,"setInverseCumulativeTestValues(new int[] { -1, -1 });"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,99,** Test degenerate case p = 1   */
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,102,/** Test degenerate case p = 1 */
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,101,"etDistribution(new BinomialDistributionImpl(5,1.0d));"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,102,"etCumulativeTestPoints(new int[] {-1, 0, 1, 2, 5, 10 });"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,103,"etCumulativeTestValues(new double[] {0d, 0d, 0d, 0d, 1d, 1d});"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,104,"etDensityTestPoints(new int[] {-1, 0, 1, 2, 5, 10});"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,105,"etDensityTestValues(new double[] {0d, 0d, 0d, 0d, 1d, 0d});"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,106,"etInverseCumulativeTestPoints(new double[] {0.1d, 0.5d});"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,107,"etInverseCumulativeTestValues(new int[] {4, 4});"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,104,"setDistribution(new BinomialDistributionImpl(5, 1.0d));"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,105,"setCumulativeTestPoints(new int[] { -1, 0, 1, 2, 5, 10 });"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,106,"setCumulativeTestValues(new double[] { 0d, 0d, 0d, 0d, 1d, 1d });"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,107,"setDensityTestPoints(new int[] { -1, 0, 1, 2, 5, 10 });"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,108,"setDensityTestValues(new double[] { 0d, 0d, 0d, 0d, 1d, 0d });"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,109,"setInverseCumulativeTestPoints(new double[] { 0.1d, 0.5d });"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,110,"setInverseCumulativeTestValues(new int[] { 4, 4 });"

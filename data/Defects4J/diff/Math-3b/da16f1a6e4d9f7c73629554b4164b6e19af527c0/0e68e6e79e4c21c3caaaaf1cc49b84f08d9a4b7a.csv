is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,31,import org.apache.commons.math.analysis.solvers.BrentSolver;
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,32,import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,126,"ventsStates.add(new EventState(handler, maxCheckInterval, convergence, maxIterationCount));"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,128,"addEventHandler(handler, maxCheckInterval, convergence,"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,129,"maxIterationCount, new BrentSolver(convergence));"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,132,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,133,"public void addEventHandler(final EventHandler handler,"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,134,"final double maxCheckInterval,"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,135,"final double convergence,"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,136,"final int maxIterationCount,"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,137,final UnivariateRealSolver solver) {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,138,"eventsStates.add(new EventState(handler, maxCheckInterval, convergence,"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,139,"maxIterationCount, solver));"
True,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,22,import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;
True,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,23,import org.apache.commons.math.analysis.solvers.BrentSolver;
False,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,65,** Add an event handler to the integrator.
True,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,67,/** Add an event handler to the integrator. Uses a {@link BrentSolver}
True,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,68,"* with an absolute accuracy equal to the given convergence threshold,"
True,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,69,* as root-finding algorithm to detect the state events.
True,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,83,/** Add an event handler to the integrator.
True,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,84,* @param handler event handler
True,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,85,* @param maxCheckInterval maximal time interval between switching
True,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,86,* function checks (this interval prevents missing sign changes in
True,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,87,* case the integration steps becomes very large)
True,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,88,* @param convergence convergence threshold in the event time search
True,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,89,* @param maxIterationCount upper limit of the iteration count in
True,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,90,* the event time search
True,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,91,* @param solver The root-finding algorithm to use to detect the state
True,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,92,* events.
True,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,93,* @see #getEventHandlers()
True,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,94,* @see #clearEventHandlers()
True,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,96,"void addEventHandler(EventHandler handler, double maxCheckInterval,"
True,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,97,"double convergence, int maxIterationCount,"
True,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,src/main/java/org/apache/commons/math/ode/ODEIntegrator.java,98,UnivariateRealSolver solver);
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,22,mport org.apache.commons.math.analysis.solvers.BrentSolver;
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,22,import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,84,/** Root-finding algorithm to use to detect state events. */
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,85,private final UnivariateRealSolver solver;
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,95,* @param solver Root-finding algorithm to use to detect state events
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,94,"inal double convergence, final int maxIterationCount) {"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,98,"final double convergence, final int maxIterationCount,"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,99,final UnivariateRealSolver solver) {
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,104,this.solver            = solver;
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,238,inal BrentSolver solver = new BrentSolver(convergence);
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,20,import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,350,inal int maxIterationCount) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,351,"uper.addEventHandler(function, maxCheckInterval, convergence, maxIterationCount);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,351,"final int maxIterationCount,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,352,final UnivariateRealSolver solver) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,353,"super.addEventHandler(function, maxCheckInterval, convergence,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,354,"maxIterationCount, solver);"
True,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,22,import org.apache.commons.math.analysis.solvers.BrentSolver;
False,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,50,"ventState es = new EventState(closeEventsGenerator, 1.5 * gap, tolerance, 10);"
True,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,51,"EventState es = new EventState(closeEventsGenerator, 1.5 * gap,"
True,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,52,"tolerance, 10,"
True,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,53,new BrentSolver(tolerance));

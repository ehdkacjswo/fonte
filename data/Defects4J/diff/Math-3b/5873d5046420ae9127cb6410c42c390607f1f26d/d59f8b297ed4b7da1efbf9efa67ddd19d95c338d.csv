is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,67,/** Default bin count */
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,68,public static final int DEFAULT_BIN_COUNT = 1000;
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,94,** RandomData instance to use in repeated calls to getNext() */
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,97,/** RandomDataImpl instance to use in repeated calls to getNext() */
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,101,"his(1000, null);"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,104,"this(DEFAULT_BIN_COUNT, new RandomDataImpl());"
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,110,"his(binCount, null);"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,113,"this(binCount, new RandomDataImpl());"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,131,* Creates a new EmpiricalDistribution with default bin count using the
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,132,* provided {@link RandomGenerator} as the source of random data.
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,134,"* @param generator random data generator (may be null, resulting in default JDK generator)"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,135,* @since 3.0
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,137,public EmpiricalDistributionImpl(RandomGenerator generator) {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,138,"this(DEFAULT_BIN_COUNT, generator);"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,142,* Creates a new EmpiricalDistribution with the specified bin count using the
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,143,* provided {@link RandomDataImpl} instance as the source of random data.
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,145,* @param binCount number of bins
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,146,"* @param randomData random data generator (may be null, resulting in default JDK generator)"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,147,* @since 3.0
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,149,"public EmpiricalDistributionImpl(int binCount, RandomDataImpl randomData) {"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,150,this.binCount = binCount;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,151,this.randomData = randomData;
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,152,binStats = new ArrayList<SummaryStatistics>();
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,156,* Creates a new EmpiricalDistribution with default bin count using the
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,157,* provided {@link RandomDataImpl} as the source of random data.
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,159,"* @param randomData random data generator (may be null, resulting in default JDK generator)"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,160,* @since 3.0
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,162,public EmpiricalDistributionImpl(RandomDataImpl randomData) {
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,163,"this(DEFAULT_BIN_COUNT, randomData);"
False,src/main/java/org/apache/commons/math/random/ValueServer.java,src/main/java/org/apache/commons/math/random/ValueServer.java,88,rivate final RandomData randomData;
True,src/main/java/org/apache/commons/math/random/ValueServer.java,src/main/java/org/apache/commons/math/random/ValueServer.java,88,private final RandomDataImpl randomData;
False,src/main/java/org/apache/commons/math/random/ValueServer.java,src/main/java/org/apache/commons/math/random/ValueServer.java,98, Construct a ValueServer instance using a RandomData as its source
True,src/main/java/org/apache/commons/math/random/ValueServer.java,src/main/java/org/apache/commons/math/random/ValueServer.java,98,* Construct a ValueServer instance using a RandomDataImpl as its source
False,src/main/java/org/apache/commons/math/random/ValueServer.java,src/main/java/org/apache/commons/math/random/ValueServer.java,101, @param randomData the RandomData instance used to source random data
False,src/main/java/org/apache/commons/math/random/ValueServer.java,src/main/java/org/apache/commons/math/random/ValueServer.java,102, @since 1.1
True,src/main/java/org/apache/commons/math/random/ValueServer.java,src/main/java/org/apache/commons/math/random/ValueServer.java,101,* @param randomData the RandomDataImpl instance used to source random data
True,src/main/java/org/apache/commons/math/random/ValueServer.java,src/main/java/org/apache/commons/math/random/ValueServer.java,102,* @since 3.0
False,src/main/java/org/apache/commons/math/random/ValueServer.java,src/main/java/org/apache/commons/math/random/ValueServer.java,104,ublic ValueServer(RandomData randomData) {
True,src/main/java/org/apache/commons/math/random/ValueServer.java,src/main/java/org/apache/commons/math/random/ValueServer.java,104,public ValueServer(RandomDataImpl randomData) {
False,src/main/java/org/apache/commons/math/random/ValueServer.java,src/main/java/org/apache/commons/math/random/ValueServer.java,173,mpiricalDistribution = new EmpiricalDistributionImpl();
False,src/main/java/org/apache/commons/math/random/ValueServer.java,src/main/java/org/apache/commons/math/random/ValueServer.java,174,mpiricalDistribution.load(valuesFileURL);
True,src/main/java/org/apache/commons/math/random/ValueServer.java,src/main/java/org/apache/commons/math/random/ValueServer.java,173,computeDistribution(EmpiricalDistributionImpl.DEFAULT_BIN_COUNT);
False,src/main/java/org/apache/commons/math/random/ValueServer.java,src/main/java/org/apache/commons/math/random/ValueServer.java,193,mpiricalDistribution = new EmpiricalDistributionImpl(binCount);
True,src/main/java/org/apache/commons/math/random/ValueServer.java,src/main/java/org/apache/commons/math/random/ValueServer.java,192,"empiricalDistribution = new EmpiricalDistributionImpl(binCount, randomData);"
True,src/main/java/org/apache/commons/math/random/ValueServer.java,src/main/java/org/apache/commons/math/random/ValueServer.java,302,* Reseeds the random data generator.
True,src/main/java/org/apache/commons/math/random/ValueServer.java,src/main/java/org/apache/commons/math/random/ValueServer.java,304,* @param seed Value with which to reseed the {@link RandomDataImpl}
True,src/main/java/org/apache/commons/math/random/ValueServer.java,src/main/java/org/apache/commons/math/random/ValueServer.java,305,* used to generate random data.
True,src/main/java/org/apache/commons/math/random/ValueServer.java,src/main/java/org/apache/commons/math/random/ValueServer.java,307,public void reSeed(long seed) {
True,src/main/java/org/apache/commons/math/random/ValueServer.java,src/main/java/org/apache/commons/math/random/ValueServer.java,308,randomData.reSeed(seed);
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,227,"ist = new EmpiricalDistributionImpl(5, null);"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,227,"dist = new EmpiricalDistributionImpl(5, (RandomGenerator) null);"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,21,import java.util.Arrays;
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,53,ublic void testNextDigest() throws Exception{
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,54,public void testNextDigest() throws Exception {
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,81,"* Verify that when provided with fixed seeds, stochastic modes"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,82,* generate fixed sequences.  Verifies the fix for MATH-654.
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,84,@Test
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,85,public void testFixedSeed() throws Exception {
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,86,ValueServer valueServer = new ValueServer();
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,87,"URL url = getClass().getResource(""testData.txt"");"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,88,valueServer.setValuesFileURL(url);
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,89,valueServer.computeDistribution();
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,90,"checkFixedSeed(valueServer, ValueServer.DIGEST_MODE);"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,91,"checkFixedSeed(valueServer, ValueServer.EXPONENTIAL_MODE);"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,92,"checkFixedSeed(valueServer, ValueServer.GAUSSIAN_MODE);"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,93,"checkFixedSeed(valueServer, ValueServer.UNIFORM_MODE);"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,97,* Do the check for {@link #testFixedSeed()}
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,98,* @param mode ValueServer mode
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,100,"private void checkFixedSeed(ValueServer valueServer, int mode) throws Exception {"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,101,valueServer.reSeed(1000);
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,102,valueServer.setMode(mode);
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,103,double[][] values = new double[2][100];
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,104,for (int i = 0; i < 100; i++) {
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,105,values[0][i] = valueServer.getNext();
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,107,valueServer.reSeed(1000);
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,108,for (int i = 0; i < 100; i++) {
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,109,values[1][i] = valueServer.getNext();
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,111,"Assert.assertTrue(Arrays.equals(values[0], values[1]));"

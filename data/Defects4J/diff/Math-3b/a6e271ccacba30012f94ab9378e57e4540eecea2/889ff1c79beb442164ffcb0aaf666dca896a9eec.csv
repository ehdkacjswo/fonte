is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,103,decompose(qrt);
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,107,/** Decompose matrix.
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,108,* @param qrt transposed matrix
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,110,protected void decompose(double[][] qrt) {
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,111,"for (int minor = 0; minor < FastMath.min(qrt.length, qrt[0].length); minor++) {"
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,112,"performHouseholderReflection(minor, qrt);"
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,116,"/** Perform Householder reflection for a minor A(minor, minor) of A."
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,117,* @param minor minor index
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,118,* @param qrt transposed matrix
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,120,"protected void performHouseholderReflection(int minor, double[][] qrt) {"
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,122,final double[] qrtMinor = qrt[minor];
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,104, The QR decomposition of a matrix A is calculated using Householder
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,105, reflectors by repeating the following operations to each minor
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,106," A(minor,minor) of A:"
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,125,"* Let x be the first column of the minor, and a^2 = |x|^2."
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,126,* x will be in the positions qr[minor][minor] through qr[m][minor].
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,127,"* The first column of the transformed minor will be (a,0,0,..)'"
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,128,* The sign of a is chosen to be opposite to the sign of the first
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,129,* component of x. Let's find a:
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,108,"or (int minor = 0; minor < FastMath.min(m, n); minor++) {"
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,131,double xNormSqr = 0;
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,132,for (int row = minor; row < qrtMinor.length; row++) {
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,133,final double c = qrtMinor[row];
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,134,xNormSqr += c * c;
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,136,final double a = (qrtMinor[minor] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,137,rDiag[minor] = a;
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,110,inal double[] qrtMinor = qrt[minor];
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,139,if (a != 0.0) {
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,113," Let x be the first column of the minor, and a^2 = |x|^2."
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,114, x will be in the positions qr[minor][minor] through qr[m][minor].
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,115," The first column of the transformed minor will be (a,0,0,..)'"
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,116, The sign of a is chosen to be opposite to the sign of the first
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,117, component of x. Let's find a:
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,142,* Calculate the normalized reflection vector v and transform
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,143,* the first column. We know the norm of v beforehand: v = x-ae
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,144,"* so |v|^2 = <x-ae,x-ae> = <x,x>-2a<x,e>+a^2<e,e> ="
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,145,"* a^2+a^2-2a<x,e> = 2a*(a - <x,e>)."
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,146,"* Here <x, e> is now qr[minor][minor]."
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,147,* v = x-ae is stored in the column at qr:
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,119,ouble xNormSqr = 0;
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,120,or (int row = minor; row < m; row++) {
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,121,inal double c = qrtMinor[row];
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,122,NormSqr += c * c;
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,124,inal double a = (qrtMinor[minor] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,125,Diag[minor] = a;
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,127,f (a != 0.0) {
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,130, Calculate the normalized reflection vector v and transform
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,131, the first column. We know the norm of v beforehand: v = x-ae
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,132," so |v|^2 = <x-ae,x-ae> = <x,x>-2a<x,e>+a^2<e,e> ="
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,133," a^2+a^2-2a<x,e> = 2a*(a - <x,e>)."
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,134," Here <x, e> is now qr[minor][minor]."
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,135, v = x-ae is stored in the column at qr:
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,137,rtMinor[minor] -= a; // now |v|^2 = -2a*(qr[minor][minor])
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,140, Transform the rest of the columns of the minor:
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,141, They will be transformed by the matrix H = I-2vv'/|v|^2.
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,142," If x is a column vector of the minor, then"
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,143," Hx = (I-2vv'/|v|^2)x = x-2vv'x/|v|^2 = x - 2<x,v>/|v|^2 v."
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,144, Therefore the transformation is easily calculated by
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,145," subtracting the column vector (2<x,v>/|v|^2)v from x."
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,147," Let 2<x,v>/|v|^2 = alpha. From above we have"
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,148," |v|^2 = -2a*(qr[minor][minor]), so"
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,149," alpha = -<x,v>/(a*qr[minor][minor])"
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,151,or (int col = minor+1; col < n; col++) {
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,152,inal double[] qrtCol = qrt[col];
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,153,ouble alpha = 0;
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,154,or (int row = minor; row < m; row++) {
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,155,lpha -= qrtCol[row] * qrtMinor[row];
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,157,lpha /= a * qrtMinor[minor];
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,149,qrtMinor[minor] -= a; // now |v|^2 = -2a*(qr[minor][minor])
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,159,/ Subtract the column vector alpha*v from x.
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,160,or (int row = minor; row < m; row++) {
False,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,161,rtCol[row] -= alpha * qrtMinor[row];
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,152,* Transform the rest of the columns of the minor:
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,153,* They will be transformed by the matrix H = I-2vv'/|v|^2.
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,154,"* If x is a column vector of the minor, then"
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,155,"* Hx = (I-2vv'/|v|^2)x = x-2vv'x/|v|^2 = x - 2<x,v>/|v|^2 v."
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,156,* Therefore the transformation is easily calculated by
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,157,"* subtracting the column vector (2<x,v>/|v|^2)v from x."
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,159,"* Let 2<x,v>/|v|^2 = alpha. From above we have"
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,160,"* |v|^2 = -2a*(qr[minor][minor]), so"
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,161,"* alpha = -<x,v>/(a*qr[minor][minor])"
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,163,for (int col = minor+1; col < qrt.length; col++) {
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,164,final double[] qrtCol = qrt[col];
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,165,double alpha = 0;
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,166,for (int row = minor; row < qrtCol.length; row++) {
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,167,alpha -= qrtCol[row] * qrtMinor[row];
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,169,alpha /= a * qrtMinor[minor];
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,171,// Subtract the column vector alpha*v from x.
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,172,for (int row = minor; row < qrtCol.length; row++) {
True,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,src/main/java/org/apache/commons/math3/linear/QRDecomposition.java,173,qrtCol[row] -= alpha * qrtMinor[row];
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,18,package org.apache.commons.math3.linear;
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,20,import org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,24,"* Calculates the rank-revealing QR-decomposition of a matrix, with column pivoting."
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,25,"* <p>The rank-revealing QR-decomposition of a matrix A consists of three matrices Q,"
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,26,"* R and P such that AP=QR.  Q is orthogonal (Q<sup>T</sup>Q = I), and R is upper triangular."
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,27,"* If A is m&times;n, Q is m&times;m and R is m&times;n and P is n&times;n.</p>"
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,28,* <p>QR decomposition with column pivoting produces a rank-revealing QR
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,29,* decomposition and the {@link #getRank(double)} method may be used to return the rank of the
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,30,* input matrix A.</p>
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,31,* <p>This class compute the decomposition using Householder reflectors.</p>
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,32,"* <p>For efficiency purposes, the decomposition in packed form is transposed."
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,33,"* This allows inner loop to iterate inside rows, which is much more cache-efficient"
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,34,* in Java.</p>
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,35,* <p>This class is based on the class with similar name from the
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,36,"* <a href=""http://math.nist.gov/javanumerics/jama/"">JAMA</a> library, with the"
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,37,* following changes:</p>
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,38,* <ul>
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,39,"*   <li>a {@link #getQT() getQT} method has been added,</li>"
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,40,*   <li>the {@code solve} and {@code isFullRank} methods have been replaced
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,41,*   by a {@link #getSolver() getSolver} method and the equivalent methods
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,42,*   provided by the returned {@link DecompositionSolver}.</li>
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,43,* </ul>
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,45,"* @see <a href=""http://mathworld.wolfram.com/QRDecomposition.html"">MathWorld</a>"
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,46,"* @see <a href=""http://en.wikipedia.org/wiki/QR_decomposition"">Wikipedia</a>"
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,48,* @version $Id$
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,49,* @since 3.2
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,51,public class RRQRDecomposition extends QRDecomposition {
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,53,/** An array to record the column pivoting for later creation of P. */
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,54,private int[] p;
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,56,/** Cached value of P. */
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,57,private RealMatrix cachedP;
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,61,* Calculates the QR-decomposition of the given matrix.
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,62,* The singularity threshold defaults to zero.
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,64,* @param matrix The matrix to decompose.
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,66,"* @see #QRDecomposition(RealMatrix,double)"
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,68,public RRQRDecomposition(RealMatrix matrix) {
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,69,"this(matrix, 0d);"
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,73,* Calculates the QR-decomposition of the given matrix.
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,75,* @param matrix The matrix to decompose.
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,76,* @param threshold Singularity threshold.
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,78,"public RRQRDecomposition(RealMatrix matrix,  double threshold) {"
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,79,"super(matrix, threshold);"
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,82,/** Decompose matrix.
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,83,* @param qrt transposed matrix
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,85,protected void decompose(double[][] qrt) {
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,86,p = new int[qrt.length];
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,87,for (int i = 0; i < p.length; i++) {
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,88,p[i] = i;
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,90,super.decompose(qrt);
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,93,"/** Perform Householder reflection for a minor A(minor, minor) of A."
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,94,* @param minor minor index
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,95,* @param qrt transposed matrix
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,97,"protected void performHouseholderReflection(int minor, double[][] qrt) {"
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,99,double l2NormSquaredMax = 0;
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,100,// Find the unreduced column with the greatest L2-Norm
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,101,int l2NormSquaredMaxIndex = minor;
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,102,for (int i = minor; i < qrt.length; i++) {
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,103,double l2NormSquared = 0;
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,104,for (int j = 0; j < qrt[i].length; j++) {
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,105,l2NormSquared += qrt[i][j] * qrt[i][j];
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,107,if (l2NormSquared > l2NormSquaredMax) {
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,108,l2NormSquaredMax = l2NormSquared;
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,109,l2NormSquaredMaxIndex = i;
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,112,// swap the current column with that with the greated L2-Norm and record in p
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,113,if (l2NormSquaredMaxIndex != minor) {
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,114,double[] tmp1 = qrt[minor];
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,115,qrt[minor] = qrt[l2NormSquaredMaxIndex];
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,116,qrt[l2NormSquaredMaxIndex] = tmp1;
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,117,int tmp2 = p[minor];
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,118,p[minor] = p[l2NormSquaredMaxIndex];
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,119,p[l2NormSquaredMaxIndex] = tmp2;
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,122,"super.performHouseholderReflection(minor, qrt);"
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,128,"* Returns the pivot matrix, P, used in the QR Decomposition of matrix A such that AP = QR."
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,130,* If no pivoting is used in this decomposition then P is equal to the identity matrix.
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,132,* @return a permutation matrix.
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,134,public RealMatrix getP() {
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,135,if (cachedP == null) {
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,136,int n = p.length;
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,137,"cachedP = MatrixUtils.createRealMatrix(n,n);"
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,138,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,139,"cachedP.setEntry(p[i], i, 1);"
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,142,return cachedP ;
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,146,* Return the effective numerical matrix rank.
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,147,* <p>The effective numerical rank is the number of non-negligible
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,148,* singular values.</p>
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,149,* <p>This implementation looks at Frobenius norms of the sequence of
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,150,"* bottom right submatrices.  When a large fall in norm is seen,"
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,151,* the rank is returned. The drop is computed as:</p>
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,152,* <pre>
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,153,*   (thisNorm/lastNorm) * rNorm < dropThreshold
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,154,* </pre>
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,155,* <p>
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,156,"* where thisNorm is the Frobenius norm of the current submatrix,"
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,157,"* lastNorm is the Frobenius norm of the previous submatrix,"
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,158,* rNorm is is the Frobenius norm of the complete matrix
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,159,* </p>
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,161,* @param dropThreshold threshold triggering rank computation
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,162,* @return effective numerical matrix rank
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,164,public int getRank(final double dropThreshold) {
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,165,RealMatrix r    = getR();
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,166,int rows        = r.getRowDimension();
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,167,int columns     = r.getColumnDimension();
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,168,int rank        = 1;
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,169,double lastNorm = r.getFrobeniusNorm();
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,170,double rNorm    = lastNorm;
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,171,"while (rank < FastMath.min(rows, columns)) {"
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,172,"double thisNorm = r.getSubMatrix(rank, rows - 1, rank, columns - 1).getFrobeniusNorm();"
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,173,if (thisNorm == 0 || (thisNorm / lastNorm) * rNorm < dropThreshold) {
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,174,break;
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,176,lastNorm = thisNorm;
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,177,rank++;
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,179,return rank;
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,183,* Get a solver for finding the A &times; X = B solution in least square sense.
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,184,* @return a solver
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,186,public DecompositionSolver getSolver() {
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,187,"return new Solver(super.getSolver(), this.getP());"
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,190,/** Specialized solver. */
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,191,private static class Solver implements DecompositionSolver {
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,193,/** Upper level solver. */
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,194,private final DecompositionSolver upper;
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,196,/** A permutation matrix for the pivots used in the QR decomposition */
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,197,private RealMatrix p;
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,200,* Build a solver from decomposed matrix.
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,202,* @param upper upper level solver.
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,203,* @param p permutation matrix
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,205,"private Solver(final DecompositionSolver upper, final RealMatrix p) {"
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,206,this.upper = upper;
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,207,this.p     = p;
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,210,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,211,public boolean isNonSingular() {
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,212,return upper.isNonSingular();
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,215,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,216,public RealVector solve(RealVector b) {
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,217,return p.operate(upper.solve(b));
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,220,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,221,public RealMatrix solve(RealMatrix b) {
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,222,return p.multiply(upper.solve(b));
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,225,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,226,public RealMatrix getInverse() {
True,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java,227,return solve(MatrixUtils.createRealIdentityMatrix(p.getRowDimension()));
False,src/test/java/org/apache/commons/math3/linear/QRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/QRDecompositionTest.java,249,inal RealMatrix inv = qr.getSolver().getInverse();
True,src/test/java/org/apache/commons/math3/linear/QRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/QRDecompositionTest.java,248,qr.getSolver().getInverse();
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,18,package org.apache.commons.math3.linear;
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,20,import java.util.Random;
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,23,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,26,public class RRQRDecompositionTest {
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,27,private double[][] testData3x3NonSingular = {
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,28,"{ 12, -51, 4 },"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,29,"{ 6, 167, -68 },"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,30,"{ -4, 24, -41 }, };"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,32,private double[][] testData3x3Singular = {
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,33,"{ 1, 4, 7, },"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,34,"{ 2, 5, 8, },"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,35,"{ 3, 6, 9, }, };"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,37,private double[][] testData3x4 = {
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,38,"{ 12, -51, 4, 1 },"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,39,"{ 6, 167, -68, 2 },"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,40,"{ -4, 24, -41, 3 }, };"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,42,private double[][] testData4x3 = {
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,43,"{ 12, -51, 4, },"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,44,"{ 6, 167, -68, },"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,45,"{ -4, 24, -41, },"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,46,"{ -5, 34, 7, }, };"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,48,private static final double entryTolerance = 10e-16;
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,50,private static final double normTolerance = 10e-14;
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,52,/** test dimensions */
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,53,@Test
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,54,public void testDimensions() {
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,55,checkDimension(MatrixUtils.createRealMatrix(testData3x3NonSingular));
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,57,checkDimension(MatrixUtils.createRealMatrix(testData4x3));
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,59,checkDimension(MatrixUtils.createRealMatrix(testData3x4));
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,61,Random r = new Random(643895747384642l);
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,62,int    p = (5 * BlockRealMatrix.BLOCK_SIZE) / 4;
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,63,int    q = (7 * BlockRealMatrix.BLOCK_SIZE) / 4;
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,64,"checkDimension(createTestMatrix(r, p, q));"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,65,"checkDimension(createTestMatrix(r, q, p));"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,69,private void checkDimension(RealMatrix m) {
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,70,int rows = m.getRowDimension();
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,71,int columns = m.getColumnDimension();
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,72,RRQRDecomposition qr = new RRQRDecomposition(m);
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,73,"Assert.assertEquals(rows,    qr.getQ().getRowDimension());"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,74,"Assert.assertEquals(rows,    qr.getQ().getColumnDimension());"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,75,"Assert.assertEquals(rows,    qr.getR().getRowDimension());"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,76,"Assert.assertEquals(columns, qr.getR().getColumnDimension());"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,79,/** test AP = QR */
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,80,@Test
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,81,public void testAPEqualQR() {
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,82,checkAPEqualQR(MatrixUtils.createRealMatrix(testData3x3NonSingular));
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,84,checkAPEqualQR(MatrixUtils.createRealMatrix(testData3x3Singular));
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,86,checkAPEqualQR(MatrixUtils.createRealMatrix(testData3x4));
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,88,checkAPEqualQR(MatrixUtils.createRealMatrix(testData4x3));
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,90,Random r = new Random(643895747384642l);
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,91,int    p = (5 * BlockRealMatrix.BLOCK_SIZE) / 4;
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,92,int    q = (7 * BlockRealMatrix.BLOCK_SIZE) / 4;
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,93,"checkAPEqualQR(createTestMatrix(r, p, q));"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,95,"checkAPEqualQR(createTestMatrix(r, q, p));"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,99,private void checkAPEqualQR(RealMatrix m) {
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,100,RRQRDecomposition rrqr = new RRQRDecomposition(m);
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,101,double norm = rrqr.getQ().multiply(rrqr.getR()).subtract(m.multiply(rrqr.getP())).getNorm();
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,102,"Assert.assertEquals(0, norm, normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,105,/** test the orthogonality of Q */
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,106,@Test
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,107,public void testQOrthogonal() {
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,108,checkQOrthogonal(MatrixUtils.createRealMatrix(testData3x3NonSingular));
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,110,checkQOrthogonal(MatrixUtils.createRealMatrix(testData3x3Singular));
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,112,checkQOrthogonal(MatrixUtils.createRealMatrix(testData3x4));
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,114,checkQOrthogonal(MatrixUtils.createRealMatrix(testData4x3));
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,116,Random r = new Random(643895747384642l);
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,117,int    p = (5 * BlockRealMatrix.BLOCK_SIZE) / 4;
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,118,int    q = (7 * BlockRealMatrix.BLOCK_SIZE) / 4;
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,119,"checkQOrthogonal(createTestMatrix(r, p, q));"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,121,"checkQOrthogonal(createTestMatrix(r, q, p));"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,125,private void checkQOrthogonal(RealMatrix m) {
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,126,RRQRDecomposition qr = new RRQRDecomposition(m);
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,127,RealMatrix eye = MatrixUtils.createRealIdentityMatrix(m.getRowDimension());
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,128,double norm = qr.getQT().multiply(qr.getQ()).subtract(eye).getNorm();
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,129,"Assert.assertEquals(0, norm, normTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,132,/** test that R is upper triangular */
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,133,@Test
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,134,public void testRUpperTriangular() {
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,135,RealMatrix matrix = MatrixUtils.createRealMatrix(testData3x3NonSingular);
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,136,checkUpperTriangular(new RRQRDecomposition(matrix).getR());
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,138,matrix = MatrixUtils.createRealMatrix(testData3x3Singular);
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,139,checkUpperTriangular(new RRQRDecomposition(matrix).getR());
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,141,matrix = MatrixUtils.createRealMatrix(testData3x4);
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,142,checkUpperTriangular(new RRQRDecomposition(matrix).getR());
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,144,matrix = MatrixUtils.createRealMatrix(testData4x3);
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,145,checkUpperTriangular(new RRQRDecomposition(matrix).getR());
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,147,Random r = new Random(643895747384642l);
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,148,int    p = (5 * BlockRealMatrix.BLOCK_SIZE) / 4;
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,149,int    q = (7 * BlockRealMatrix.BLOCK_SIZE) / 4;
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,150,"matrix = createTestMatrix(r, p, q);"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,151,checkUpperTriangular(new RRQRDecomposition(matrix).getR());
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,153,"matrix = createTestMatrix(r, p, q);"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,154,checkUpperTriangular(new RRQRDecomposition(matrix).getR());
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,158,private void checkUpperTriangular(RealMatrix m) {
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,159,m.walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,160,@Override
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,161,"public void visit(int row, int column, double value) {"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,162,if (column < row) {
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,163,"Assert.assertEquals(0.0, value, entryTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,169,/** test that H is trapezoidal */
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,170,@Test
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,171,public void testHTrapezoidal() {
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,172,RealMatrix matrix = MatrixUtils.createRealMatrix(testData3x3NonSingular);
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,173,checkTrapezoidal(new RRQRDecomposition(matrix).getH());
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,175,matrix = MatrixUtils.createRealMatrix(testData3x3Singular);
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,176,checkTrapezoidal(new RRQRDecomposition(matrix).getH());
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,178,matrix = MatrixUtils.createRealMatrix(testData3x4);
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,179,checkTrapezoidal(new RRQRDecomposition(matrix).getH());
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,181,matrix = MatrixUtils.createRealMatrix(testData4x3);
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,182,checkTrapezoidal(new RRQRDecomposition(matrix).getH());
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,184,Random r = new Random(643895747384642l);
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,185,int    p = (5 * BlockRealMatrix.BLOCK_SIZE) / 4;
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,186,int    q = (7 * BlockRealMatrix.BLOCK_SIZE) / 4;
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,187,"matrix = createTestMatrix(r, p, q);"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,188,checkTrapezoidal(new RRQRDecomposition(matrix).getH());
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,190,"matrix = createTestMatrix(r, p, q);"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,191,checkTrapezoidal(new RRQRDecomposition(matrix).getH());
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,195,private void checkTrapezoidal(RealMatrix m) {
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,196,m.walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,197,@Override
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,198,"public void visit(int row, int column, double value) {"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,199,if (column > row) {
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,200,"Assert.assertEquals(0.0, value, entryTolerance);"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,206,@Test(expected=SingularMatrixException.class)
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,207,public void testNonInvertible() {
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,208,RRQRDecomposition qr =
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,209,"new RRQRDecomposition(MatrixUtils.createRealMatrix(testData3x3Singular), 3.0e-16);"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,210,qr.getSolver().getInverse();
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,213,"private RealMatrix createTestMatrix(final Random r, final int rows, final int columns) {"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,214,"RealMatrix m = MatrixUtils.createRealMatrix(rows, columns);"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,215,m.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor(){
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,216,@Override
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,217,"public double visit(int row, int column, double value) {"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,218,return 2.0 * r.nextDouble() - 1.0;
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,221,return m;
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,224,/** test the rank is returned correctly */
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,225,@Test
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,226,public void testRank() {
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,227,"double[][] d = { { 1, 1, 1 }, { 0, 0, 0 }, { 1, 2, 3 } };"
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,228,RealMatrix m = new Array2DRowRealMatrix(d);
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,229,RRQRDecomposition qr = new RRQRDecomposition(m);
True,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java,230,"Assert.assertEquals(2, qr.getRank(1.0e-16));"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,18,package org.apache.commons.math3.linear;
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,20,import java.util.Random;
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,22,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,24,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,25,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,27,public class RRQRSolverTest {
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,28,double[][] testData3x3NonSingular = {
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,29,"{ 12, -51,   4 },"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,30,"{  6, 167, -68 },"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,31,"{ -4,  24, -41 }"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,34,double[][] testData3x3Singular = {
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,35,"{ 1, 2,  2 },"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,36,"{ 2, 4,  6 },"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,37,"{ 4, 8, 12 }"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,40,double[][] testData3x4 = {
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,41,"{ 12, -51,   4, 1 },"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,42,"{  6, 167, -68, 2 },"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,43,"{ -4,  24, -41, 3 }"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,46,double[][] testData4x3 = {
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,47,"{ 12, -51,   4 },"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,48,"{  6, 167, -68 },"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,49,"{ -4,  24, -41 },"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,50,"{ -5,  34,   7 }"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,53,/** test rank */
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,54,@Test
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,55,public void testRank() {
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,56,DecompositionSolver solver =
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,57,"new RRQRDecomposition(MatrixUtils.createRealMatrix(testData3x3NonSingular), 1.0e-16).getSolver();"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,58,Assert.assertTrue(solver.isNonSingular());
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,60,"solver = new RRQRDecomposition(MatrixUtils.createRealMatrix(testData3x3Singular), 1.0e-16).getSolver();"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,61,Assert.assertFalse(solver.isNonSingular());
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,63,"solver = new RRQRDecomposition(MatrixUtils.createRealMatrix(testData3x4), 1.0e-16).getSolver();"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,64,Assert.assertTrue(solver.isNonSingular());
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,66,"solver = new RRQRDecomposition(MatrixUtils.createRealMatrix(testData4x3), 1.0e-16).getSolver();"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,67,Assert.assertTrue(solver.isNonSingular());
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,71,/** test solve dimension errors */
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,72,@Test
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,73,public void testSolveDimensionErrors() {
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,74,DecompositionSolver solver =
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,75,new RRQRDecomposition(MatrixUtils.createRealMatrix(testData3x3NonSingular)).getSolver();
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,76,RealMatrix b = MatrixUtils.createRealMatrix(new double[2][2]);
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,77,try {
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,78,solver.solve(b);
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,79,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,80,} catch (MathIllegalArgumentException iae) {
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,81,// expected behavior
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,83,try {
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,84,solver.solve(b.getColumnVector(0));
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,85,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,86,} catch (MathIllegalArgumentException iae) {
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,87,// expected behavior
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,92,/** test solve rank errors */
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,93,@Test
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,94,public void testSolveRankErrors() {
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,95,DecompositionSolver solver =
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,96,"new RRQRDecomposition(MatrixUtils.createRealMatrix(testData3x3Singular), 1.0e-16).getSolver();"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,97,RealMatrix b = MatrixUtils.createRealMatrix(new double[3][2]);
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,98,try {
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,99,solver.solve(b);
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,100,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,101,} catch (SingularMatrixException iae) {
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,102,// expected behavior
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,104,try {
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,105,solver.solve(b.getColumnVector(0));
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,106,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,107,} catch (SingularMatrixException iae) {
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,108,// expected behavior
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,113,/** test solve */
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,114,@Test
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,115,public void testSolve() {
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,116,RealMatrix b = MatrixUtils.createRealMatrix(new double[][] {
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,117,"{ -102, 12250 }, { 544, 24500 }, { 167, -36750 }"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,119,RealMatrix xRef = MatrixUtils.createRealMatrix(new double[][] {
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,120,"{ 1, 2515 }, { 2, 422 }, { -3, 898 }"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,124,RRQRDecomposition decomposition = new RRQRDecomposition(MatrixUtils.createRealMatrix(testData3x3NonSingular));
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,125,DecompositionSolver solver = decomposition.getSolver();
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,127,// using RealMatrix
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,128,"Assert.assertEquals(0, solver.solve(b).subtract(xRef).getNorm(), 3.0e-16 * xRef.getNorm());"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,130,// using ArrayRealVector
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,131,for (int i = 0; i < b.getColumnDimension(); ++i) {
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,132,final RealVector x = solver.solve(b.getColumnVector(i));
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,133,final double error = x.subtract(xRef.getColumnVector(i)).getNorm();
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,134,"Assert.assertEquals(0, error, 3.0e-16 * xRef.getColumnVector(i).getNorm());"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,137,// using RealVector with an alternate implementation
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,138,for (int i = 0; i < b.getColumnDimension(); ++i) {
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,139,ArrayRealVectorTest.RealVectorTestImpl v =
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,140,new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(i));
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,141,final RealVector x = solver.solve(v);
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,142,final double error = x.subtract(xRef.getColumnVector(i)).getNorm();
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,143,"Assert.assertEquals(0, error, 3.0e-16 * xRef.getColumnVector(i).getNorm());"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,148,@Test
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,149,public void testOverdetermined() {
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,150,final Random r    = new Random(5559252868205245l);
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,151,int          p    = (7 * BlockRealMatrix.BLOCK_SIZE) / 4;
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,152,int          q    = (5 * BlockRealMatrix.BLOCK_SIZE) / 4;
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,153,"RealMatrix   a    = createTestMatrix(r, p, q);"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,154,"RealMatrix   xRef = createTestMatrix(r, q, BlockRealMatrix.BLOCK_SIZE + 3);"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,156,// build a perturbed system: A.X + noise = B
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,157,RealMatrix b = a.multiply(xRef);
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,158,final double noise = 0.001;
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,159,b.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,160,@Override
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,161,"public double visit(int row, int column, double value) {"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,162,return value * (1.0 + noise * (2 * r.nextDouble() - 1));
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,166,"// despite perturbation, the least square solution should be pretty good"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,167,RealMatrix x = new RRQRDecomposition(a).getSolver().solve(b);
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,168,"Assert.assertEquals(0, x.subtract(xRef).getNorm(), 0.01 * noise * p * q);"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,172,@Test
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,173,public void testUnderdetermined() {
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,174,final Random r    = new Random(42185006424567123l);
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,175,int          p    = (5 * BlockRealMatrix.BLOCK_SIZE) / 4;
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,176,int          q    = (7 * BlockRealMatrix.BLOCK_SIZE) / 4;
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,177,"RealMatrix   a    = createTestMatrix(r, p, q);"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,178,"RealMatrix   xRef = createTestMatrix(r, q, BlockRealMatrix.BLOCK_SIZE + 3);"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,179,RealMatrix   b    = a.multiply(xRef);
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,180,RRQRDecomposition rrqrd = new RRQRDecomposition(a);
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,181,RealMatrix   x = rrqrd.getSolver().solve(b);
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,183,"// too many equations, the system cannot be solved at all"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,184,Assert.assertTrue(x.subtract(xRef).getNorm() / (p * q) > 0.01);
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,186,// the last permuted unknown should have been set to 0
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,187,RealMatrix permuted = rrqrd.getP().transpose().multiply(x);
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,188,"Assert.assertEquals(0.0, permuted.getSubMatrix(p, q - 1, 0, permuted.getColumnDimension() - 1).getNorm(), 0);"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,192,"private RealMatrix createTestMatrix(final Random r, final int rows, final int columns) {"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,193,"RealMatrix m = MatrixUtils.createRealMatrix(rows, columns);"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,194,m.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,195,@Override
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,196,"public double visit(int row, int column, double value) {"
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,197,return 2.0 * r.nextDouble() - 1.0;
True,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java,200,return m;

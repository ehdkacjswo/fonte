is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,21,mport org.apache.commons.math3.analysis.MultivariateVectorFunction;
True,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,23,import org.apache.commons.math3.analysis.MultivariateVectorFunction;
False,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,24,mport org.apache.commons.math3.optim.MaxEval;
True,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,26,import org.apache.commons.math3.optim.MaxEval;
False,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,27,mport org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;
True,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,30,import org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;
False,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,31,mport org.apache.commons.math3.optim.nonlinear.vector.Weight;
True,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,32,import org.apache.commons.math3.optim.nonlinear.vector.NonCorrelatedWeight;
False,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,177,"ew Weight(weights),"
True,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,178,"new NonCorrelatedWeight(weights),"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,19,mport java.util.Collections;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,20,mport java.util.List;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,20,import java.util.Collections;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,22,import java.util.List;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,25,mport org.apache.commons.math3.linear.RealMatrix;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,26,mport org.apache.commons.math3.linear.RealVector;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,28,mport org.apache.commons.math3.random.RandomVectorGenerator;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,27,import org.apache.commons.math3.linear.RealVector;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,30,import org.apache.commons.math3.random.RandomVectorGenerator;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,101,rivate final RealMatrix weight = optimizer.getWeight();
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,101,private final double[] weight   = optimizer.getNonCorrelatedWeight();
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,117,eturn r.dotProduct(weight.operate(r));
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,117,double sum = 0;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,118,for (int i = 0; i < r.getDimension(); ++i) {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,119,final double ri = r.getEntry(i);
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,120,sum += ri * weight[i] * ri;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java,122,return sum;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,20,mport org.apache.commons.math3.exception.TooManyEvaluationsException;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,21,mport org.apache.commons.math3.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,23,mport org.apache.commons.math3.optim.OptimizationData;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,21,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,22,import org.apache.commons.math3.exception.TooManyEvaluationsException;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,23,import org.apache.commons.math3.linear.RealMatrix;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,26,import org.apache.commons.math3.optim.OptimizationData;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,27,mport org.apache.commons.math3.linear.RealMatrix;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,28,import org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,39,** Weight matrix. */
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,40,/** Weight matrix.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,41,"* @deprecated as of 3.1.1, replaced by weight"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,43,@Deprecated
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,45,/** Weight vector. */
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,46,private double[] weight;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,74,* <p>
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,75,"* Note that for version 3.1 of Apache Commons Math, a general <code>Weight</code>"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,76,"* data was looked for, which could hold arbitrary square matrices and not only"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,77,* vector as the current {@link NonCorrelatedWeight} does. This was flawed as some
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,78,* optimizers like {@link GaussNewtonOptimizer} only considered the diagonal elements.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,79,* This feature was deprecated. If users need non-diagonal weights to handle correlated
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,80,"* observations, they will have to implement it by themselves using pre-multiplication"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,81,* by a matrix in both their function implementation and observation vectors. There is
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,82,* no direct support for this anymore in the Apache Commons Math library. The only
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,83,"* feature that is supported here is a convenience feature for non-correlated observations,"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,84,* with vector only weights (i.e. weight[i] is the weight for observation i).
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,85,* </p>
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,75,  <li>{@link Weight}</li>
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,92,*  <li>{@link NonCorrelatedWeight}</li>
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,116,"* @deprecated as of 3.1.1, replaced by {@link #getNonCorrelatedWeight()}"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,118,@Deprecated
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,124,* Gets the weights of the observations.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,126,* @return the weights.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,127,* @since 3.1.1
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,129,public double[] getNonCorrelatedWeight() {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,130,return weight.clone();
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,129,  <li>{@link Weight}</li>
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,158,*  <li>{@link NonCorrelatedWeight}</li>
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,174,if (data instanceof NonCorrelatedWeight) {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,175,weight = ((NonCorrelatedWeight) data).getWeight();
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,176,continue;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,178,"// TODO: remove this for 4.0, when the Weight class will be removed"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,181,weight = new double[weightMatrix.getColumnDimension()];
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,182,for (int i = 0; i < weight.length; ++i) {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,183,// extract the diagonal of the matrix
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,184,"weight[i] = weightMatrix.getEntry(i, i);"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,156, {@link #weightMatrix} have inconsistent dimensions.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,195,* {@link #weight} have inconsistent dimensions.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,159,f (target.length != weightMatrix.getColumnDimension()) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,160,"hrow new DimensionMismatchException(target.length,"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,161,eightMatrix.getColumnDimension());
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,198,if (target.length != weight.length) {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java,199,"throw new DimensionMismatchException(target.length, weight.length);"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,17,package org.apache.commons.math3.optim.nonlinear.vector;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,19,import org.apache.commons.math3.optim.OptimizationData;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,22,"* Weight of the residuals between model and observations, when"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,23,* observations are non-correlated.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,24,* <br/>
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,25,* Immutable class.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,27,* @version $Id$
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,28,* @since 3.1.1
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,30,public class NonCorrelatedWeight implements OptimizationData {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,32,/** Weight. */
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,33,private final double[] weight;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,36,* Creates a weight vector.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,38,* @param weight weight of the observations
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,40,public NonCorrelatedWeight(final double[] weight) {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,41,this.weight = weight.clone();
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,45,* Gets the weight.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,47,* @return a fresh copy of the weight.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,49,public double[] getWeight() {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/NonCorrelatedWeight.java,50,return weight.clone();
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,31,"* @deprecated as of 3.1.1, replaced by {@link NonCorrelatedWeight}"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,33,@Deprecated
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,37, Creates a diagonal weight matrix.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,39,* Creates a weight matrix.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,39, @param weight List of the values of the diagonal.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,41,* @param weight matrix elements.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,41,ublic Weight(double[] weight) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,42,inal int dim = weight.length;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,43,"eightMatrix = MatrixUtils.createRealMatrix(dim, dim);"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,44,or (int i = 0; i < dim; i++) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,45,"eightMatrix.setEntry(i, i, weight[i]);"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,43,public Weight(double[][] weight) {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,44,weightMatrix = MatrixUtils.createRealMatrix(weight);
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,64, Gets the initial guess.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,62,* Gets the weight.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,66, @return the initial guess.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,64,* @return a fresh copy of the weight.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,22,mport org.apache.commons.math3.linear.RealMatrix;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,23,import org.apache.commons.math3.linear.EigenDecomposition;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,26,mport org.apache.commons.math3.linear.EigenDecomposition;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,27,mport org.apache.commons.math3.optim.OptimizationData;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,26,import org.apache.commons.math3.linear.RealMatrix;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,28,import org.apache.commons.math3.optim.OptimizationData;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,30,mport org.apache.commons.math3.optim.nonlinear.vector.Weight;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,31,import org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,32,import org.apache.commons.math3.optim.nonlinear.vector.NonCorrelatedWeight;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,33,import org.apache.commons.math3.optim.nonlinear.vector.Weight;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,43,** Square-root of the weight matrix. */
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,45,/** Square-root of the weight matrix.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,46,"* @deprecated as of 3.1.1, replaced by {@link #weight}"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,48,@Deprecated
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,50,/** Square-root of the weight vector. */
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,51,private double[] weightSquareRoot;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,64,eturn weightMatrixSqrt.multiply(MatrixUtils.createRealMatrix(computeJacobian(params)));
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,72,final double[][] jacobian = computeJacobian(params);
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,74,if (weightSquareRoot != null) {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,75,for (int i = 0; i < jacobian.length; ++i) {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,76,final double wi = weightSquareRoot[i];
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,77,final double[] row = jacobian[i];
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,78,for (int j = 0; j < row.length; ++j) {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,79,row[j] *= wi;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,82,return MatrixUtils.createRealMatrix(jacobian);
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,83,} else {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,84,"// TODO: remove for 4.0, when the {@link Weight} class will be removed"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,85,return weightMatrixSqrt.multiply(MatrixUtils.createRealMatrix(jacobian));
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,76,eturn FastMath.sqrt(r.dotProduct(getWeight().operate(r)));
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,99,final double[] weight = getNonCorrelatedWeight();
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,100,double sum = 0;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,101,for (int i = 0; i < r.getDimension(); ++i) {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,102,final double ri = r.getEntry(i);
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,103,sum += ri * weight[i] * ri;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,105,return FastMath.sqrt(sum);
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,137,"* @deprecated as of 3.1.1, replaced with {@link MultivariateVectorOptimizer#getNonCorrelatedWeight()}"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,139,@Deprecated
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,186,  <li>{@link org.apache.commons.math3.optim.nonlinear.vector.Weight}</li>
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,217,*  <li>{@link org.apache.commons.math3.optim.nonlinear.vector.NonCorrelatedWeight}</li>
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,238," If the weight matrix is specified, the {@link #weightMatrixSqrt}"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,239, field is recomputed.
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,269,"* If the weight is specified, the {@link #weightSquareRoot} field is recomputed."
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,251,eightMatrixSqrt = squareRoot(((Weight) data).getWeight());
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,252,"/ If more data must be parsed, this statement _must_ be"
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,253,"/ changed to ""continue""."
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,254,reak;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,281,"// TODO: remove for 4.0, when the {@link Weight} class will be removed"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,282,weightSquareRoot = null;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,283,final RealMatrix w = ((Weight) data).getWeight();
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,284,final EigenDecomposition dec = new EigenDecomposition(w);
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,285,weightMatrixSqrt = dec.getSquareRoot();
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,286,} else if (data instanceof NonCorrelatedWeight) {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,287,weightSquareRoot = ((NonCorrelatedWeight) data).getWeight();
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,288,for (int i = 0; i < weightSquareRoot.length; ++i) {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,289,weightSquareRoot[i] = FastMath.sqrt(weightSquareRoot[i]);
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,291,weightMatrixSqrt = null;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,260, Computes the square-root of the weight matrix.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,262," @param m Symmetric, positive-definite (weight) matrix."
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,263, @return the square-root of the weight matrix.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,265,rivate RealMatrix squareRoot(RealMatrix m) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,266,inal EigenDecomposition dec = new EigenDecomposition(m);
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java,267,eturn dec.getSquareRoot();
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,20,mport org.apache.commons.math3.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,21,import org.apache.commons.math3.exception.NullArgumentException;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,86,inal RealMatrix weightMatrix = getWeight();
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,87,/ Diagonal of the weight matrix.
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,88,inal double[] residualsWeights = new double[nR];
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,89,or (int i = 0; i < nR; i++) {
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,90,"esidualsWeights[i] = weightMatrix.getEntry(i, i);"
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java,86,final double[] residualsWeights = getNonCorrelatedWeight();
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,22,mport org.apache.commons.math3.optim.PointVectorValuePair;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,23,mport org.apache.commons.math3.optim.ConvergenceChecker;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,25,mport org.apache.commons.math3.util.Precision;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,24,import org.apache.commons.math3.optim.ConvergenceChecker;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,25,import org.apache.commons.math3.optim.PointVectorValuePair;
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,27,import org.apache.commons.math3.util.Precision;
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,303,inal RealMatrix weightMatrixSqrt = getWeightSquareRoot();
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,304,final double[] weight = getNonCorrelatedWeight();
False,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,323,eightedResidual = weightMatrixSqrt.operate(currentResiduals);
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,324,weightedResidual = new double[currentResiduals.length];
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,325,for (int i = 0; i < weightedResidual.length; ++i) {
True,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,326,weightedResidual[i] = FastMath.sqrt(weight[i]) * currentResiduals[i];
True,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,223,@Test
True,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,224,public void testLargeSample() {
True,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,225,Random randomizer = new Random(0x5551480dca5b369bl);
True,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,226,double maxError = 0;
True,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,227,for (int degree = 0; degree < 10; ++degree) {
True,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,228,"PolynomialFunction p = buildRandomPolynomial(degree, randomizer);"
True,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,230,PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());
True,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,231,for (int i = 0; i < 40000; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,232,double x = -1.0 + i / 20000.0;
True,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,233,"fitter.addObservedPoint(1.0, x,"
True,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,234,p.value(x) + 0.1 * randomizer.nextGaussian());
True,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,237,final double[] init = new double[degree + 1];
True,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,238,PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));
True,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,240,for (double x = -1.0; x < 1.0; x += 0.01) {
True,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,241,double error = FastMath.abs(p.value(x) - fitted.value(x)) /
True,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,242,(1.0 + FastMath.abs(p.value(x)));
True,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,243,"maxError = FastMath.max(maxError, error);"
True,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,244,Assert.assertTrue(FastMath.abs(error) < 0.01);
True,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,247,Assert.assertTrue(maxError > 0.001);
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,19,mport org.apache.commons.math3.analysis.MultivariateVectorFunction;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,21,mport org.apache.commons.math3.exception.MathIllegalStateException;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,20,import org.apache.commons.math3.analysis.MultivariateVectorFunction;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,24,mport org.apache.commons.math3.optim.MaxEval;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,24,import org.apache.commons.math3.optim.MaxEval;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,133,"ew Weight(new double[] { 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,132,"new NonCorrelatedWeight(new double[] { 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,164,"ew Weight(new double[] { 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java,163,"new NonCorrelatedWeight(new double[] { 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,20,mport java.io.Serializable;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,22,mport org.apache.commons.math3.analysis.MultivariateVectorFunction;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,23,import org.apache.commons.math3.analysis.MultivariateVectorFunction;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,26,mport org.apache.commons.math3.exception.NumberIsTooSmallException;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,30,mport org.apache.commons.math3.optim.PointVectorValuePair;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,33,mport org.apache.commons.math3.optim.nonlinear.vector.Target;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,34,mport org.apache.commons.math3.optim.nonlinear.vector.Weight;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,31,import org.apache.commons.math3.optim.PointVectorValuePair;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,34,import org.apache.commons.math3.optim.nonlinear.vector.Target;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,35,import org.apache.commons.math3.optim.nonlinear.vector.NonCorrelatedWeight;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,118,"ew Weight(new double[] { 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,117,"new NonCorrelatedWeight(new double[] { 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,138,"ew Weight(new double[] { 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,137,"new NonCorrelatedWeight(new double[] { 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,164,"ew Weight(new double[] { 1, 1, 1, 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,163,"new NonCorrelatedWeight(new double[] { 1, 1, 1, 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,186,"ew Weight(new double[] { 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,185,"new NonCorrelatedWeight(new double[] { 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,212,"ew Weight(new double[] { 1, 1, 1, 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,211,"new NonCorrelatedWeight(new double[] { 1, 1, 1, 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,238,"ew Weight(new double[] { 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,237,"new NonCorrelatedWeight(new double[] { 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,256,"ew Weight(new double[] { 1, 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,255,"new NonCorrelatedWeight(new double[] { 1, 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,275,"ew Weight(new double[] { 1, 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,274,"new NonCorrelatedWeight(new double[] { 1, 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,298,"ew Weight(new double[] { 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,297,"new NonCorrelatedWeight(new double[] { 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,319,"ew Weight(new double[] { 1, 1, 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,318,"new NonCorrelatedWeight(new double[] { 1, 1, 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,342,"ew Weight(new double[] { 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,341,"new NonCorrelatedWeight(new double[] { 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,362,"ew Weight(new double[] { 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,361,"new NonCorrelatedWeight(new double[] { 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,378,"ew Weight(new double[] { 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,377,"new NonCorrelatedWeight(new double[] { 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,388,"ew Weight(new double[] { 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,387,"new NonCorrelatedWeight(new double[] { 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,403,"ew Weight(new double[] { 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,402,"new NonCorrelatedWeight(new double[] { 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,413,"ew Weight(new double[] { 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,412,"new NonCorrelatedWeight(new double[] { 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,431,"ew Weight(new double[] { 1, 1, 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,430,"new NonCorrelatedWeight(new double[] { 1, 1, 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,459,"ew Weight(weights),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,458,"new NonCorrelatedWeight(weights),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,485,"ew Weight(weights),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,484,"new NonCorrelatedWeight(weights),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,512,"ew Weight(weights),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,511,"new NonCorrelatedWeight(weights),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,566,"ew Weight(w),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java,565,"new NonCorrelatedWeight(w),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,18,mport org.apache.commons.math3.optim.PointVectorValuePair;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,21,import org.apache.commons.math3.optim.PointVectorValuePair;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,22,mport org.apache.commons.math3.optim.nonlinear.vector.Weight;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,23,import org.apache.commons.math3.optim.nonlinear.vector.NonCorrelatedWeight;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,24,mport org.junit.Test;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,26,import org.junit.Test;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,59,"ew Weight(w),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,60,"new NonCorrelatedWeight(w),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,84,"ew Weight(w),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,85,"new NonCorrelatedWeight(w),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,113,"ew Weight(w),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java,114,"new NonCorrelatedWeight(w),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,16,import java.awt.geom.Point2D;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,17,import java.util.ArrayList;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,18,mport java.util.ArrayList;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,19,mport java.awt.geom.Point2D;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,20,mport org.apache.commons.math3.optim.PointVectorValuePair;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,23,import org.apache.commons.math3.optim.PointVectorValuePair;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,24,mport org.apache.commons.math3.optim.nonlinear.vector.Weight;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,25,mport org.apache.commons.math3.stat.descriptive.SummaryStatistics;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,25,import org.apache.commons.math3.optim.nonlinear.vector.NonCorrelatedWeight;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,27,import org.apache.commons.math3.stat.descriptive.SummaryStatistics;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,28,mport org.junit.Test;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,30,import org.junit.Test;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,127,"ew Weight(problem.weight()),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,128,"new NonCorrelatedWeight(problem.weight()),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,308,"ew Weight(w),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java,309,"new NonCorrelatedWeight(w),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,23,mport org.apache.commons.math3.optim.SimpleVectorValueChecker;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,26,import org.apache.commons.math3.optim.SimpleVectorValueChecker;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,27,mport org.apache.commons.math3.optim.nonlinear.vector.Weight;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,28,mport org.apache.commons.math3.optim.nonlinear.vector.ModelFunction;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,29,mport org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,28,import org.apache.commons.math3.optim.nonlinear.vector.NonCorrelatedWeight;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,136,"ew Weight(new double[] { 1, 1, 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java,135,"new NonCorrelatedWeight(new double[] { 1, 1, 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,20,mport java.io.Serializable;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,23,mport org.apache.commons.math3.optim.PointVectorValuePair;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,24,mport org.apache.commons.math3.optim.InitialGuess;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,25,mport org.apache.commons.math3.optim.MaxEval;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,26,mport org.apache.commons.math3.optim.nonlinear.vector.Target;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,27,mport org.apache.commons.math3.optim.nonlinear.vector.Weight;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,28,mport org.apache.commons.math3.optim.nonlinear.vector.ModelFunction;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,29,mport org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,30,mport org.apache.commons.math3.analysis.MultivariateVectorFunction;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,32,mport org.apache.commons.math3.exception.ConvergenceException;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,24,import org.apache.commons.math3.analysis.MultivariateVectorFunction;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,29,import org.apache.commons.math3.optim.InitialGuess;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,30,import org.apache.commons.math3.optim.MaxEval;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,31,import org.apache.commons.math3.optim.PointVectorValuePair;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,32,import org.apache.commons.math3.optim.nonlinear.vector.ModelFunction;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,33,import org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,34,import org.apache.commons.math3.optim.nonlinear.vector.Target;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,35,import org.apache.commons.math3.optim.nonlinear.vector.NonCorrelatedWeight;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,41,mport org.junit.Ignore;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,131,"ew Weight(new double[] { 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,129,"new NonCorrelatedWeight(new double[] { 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,177,"ew Weight(new double[] { 1, 1, 1, 1, 1 }),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,175,"new NonCorrelatedWeight(new double[] { 1, 1, 1, 1, 1 }),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,232,"ew Weight(weights),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,230,"new NonCorrelatedWeight(weights),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,296,"ew Weight(circle.weight()),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java,294,"new NonCorrelatedWeight(circle.weight()),"
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,20,mport java.io.Serializable;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,22,mport org.apache.commons.math3.exception.TooManyEvaluationsException;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,23,mport org.apache.commons.math3.analysis.MultivariateVectorFunction;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,25,mport org.apache.commons.math3.optim.PointVectorValuePair;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,23,import org.apache.commons.math3.analysis.MultivariateVectorFunction;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,24,import org.apache.commons.math3.exception.TooManyEvaluationsException;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,28,mport org.apache.commons.math3.optim.nonlinear.vector.Target;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,29,mport org.apache.commons.math3.optim.nonlinear.vector.Weight;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,27,import org.apache.commons.math3.optim.PointVectorValuePair;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,30,import org.apache.commons.math3.optim.nonlinear.vector.Target;
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,31,import org.apache.commons.math3.optim.nonlinear.vector.NonCorrelatedWeight;
False,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,515,"ew Weight(function.getWeight()),"
True,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java,515,"new NonCorrelatedWeight(function.getWeight()),"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,23,import org.apache.commons.math3.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,24,import org.apache.commons.math3.exception.NumberIsTooLargeException;
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,23,mport org.apache.commons.math3.exception.MathUnsupportedOperationException;
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,26,import org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,27,import org.apache.commons.math3.util.MathUtils;
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,28,import org.apache.commons.math3.util.Precision;
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,27, <br/>
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,28, Caveat: This implementation is minimal; it is currently solely aimed
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,29, at solving issue MATH-924. In particular many methods just throw
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,30, {@code MathUnsupportedOperationException}.
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,34,* @since 3.1.1
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,79,* @exception NullArgumentException if d is null
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,78,"ublic DiagonalMatrix(final double[] d, final boolean copyArray) {"
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,81,"public DiagonalMatrix(final double[] d, final boolean copyArray)"
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,82,throws NullArgumentException {
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,83,MathUtils.checkNotNull(d);
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,101,ublic RealMatrix copy() {
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,106,public DiagonalMatrix copy() {
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,217,** {@inheritDoc}
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,218, @throws MathUnsupportedOperationException
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,220,Override
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,221,"ublic void setSubMatrix(final double[][] subMatrix,"
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,222,"inal int row,"
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,223,inal int column)
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,224,hrows MathUnsupportedOperationException {
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,225,hrow new MathUnsupportedOperationException();
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,237, @throws MathUnsupportedOperationException if {@code row != column}.
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,231,* @throws NumberIsTooLargeException if {@code row != column} and value is non-zero.
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,241,"hrows OutOfRangeException,"
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,242,athUnsupportedOperationException {
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,243,f (row != column) {
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,244,hrow new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,235,"throws OutOfRangeException, NumberIsTooLargeException {"
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,236,if (row == column) {
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,237,"MatrixUtils.checkRowIndex(this, row);"
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,238,data[row] = value;
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,239,} else {
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,240,ensureZero(value);
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,246,"atrixUtils.checkMatrixIndex(this, row, column);"
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,247,ata[row] = value;
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,251, @throws MathUnsupportedOperationException if {@code row != column}.
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,245,* @throws NumberIsTooLargeException if {@code row != column} and increment is non-zero.
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,257,"hrows OutOfRangeException,"
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,258,athUnsupportedOperationException {
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,259,f (row != column) {
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,260,hrow new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,251,"throws OutOfRangeException, NumberIsTooLargeException {"
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,252,if (row == column) {
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,253,"MatrixUtils.checkRowIndex(this, row);"
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,254,data[row] += increment;
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,255,} else {
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,256,ensureZero(increment);
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,262,"atrixUtils.checkMatrixIndex(this, row, column);"
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,263,ata[row] += increment;
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,266,** {@inheritDoc}
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,267, @throws MathUnsupportedOperationException if {@code row != column}.
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,260,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,273,"hrows OutOfRangeException,"
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,274,athUnsupportedOperationException {
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,275,f (row != column) {
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,276,hrow new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,265,throws OutOfRangeException {
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,266,// we don't care about non-diagonal elements for multiplication
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,267,if (row == column) {
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,268,"MatrixUtils.checkRowIndex(this, row);"
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,269,data[row] *= factor;
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,278,"atrixUtils.checkMatrixIndex(this, row, column);"
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,279,ata[row] *= factor;
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,285,eturn data == null ? 0 : data.length;
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,276,return data.length;
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,291,eturn getRowDimension();
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,282,return data.length;
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,308,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,309,Override
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,310,ublic double walkInRowOrder(final RealMatrixChangingVisitor visitor)
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,311,hrows MathUnsupportedOperationException {
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,312,hrow new MathUnsupportedOperationException();
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,315,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,316,Override
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,317,ublic double walkInRowOrder(final RealMatrixPreservingVisitor visitor)
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,318,hrows MathUnsupportedOperationException {
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,319,hrow new MathUnsupportedOperationException();
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,322,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,323,Override
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,324,"ublic double walkInRowOrder(final RealMatrixChangingVisitor visitor,"
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,325,"inal int startRow, final int endRow,"
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,326,"inal int startColumn, final int endColumn)"
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,327,hrows MathUnsupportedOperationException {
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,328,hrow new MathUnsupportedOperationException();
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,331,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,332,Override
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,333,"ublic double walkInRowOrder(final RealMatrixPreservingVisitor visitor,"
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,334,"inal int startRow, final int endRow,"
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,335,"inal int startColumn, final int endColumn)"
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,336,hrows MathUnsupportedOperationException {
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,337,hrow new MathUnsupportedOperationException();
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,340,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,341,Override
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,342,ublic double walkInColumnOrder(final RealMatrixChangingVisitor visitor)
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,343,hrows MathUnsupportedOperationException {
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,344,hrow new MathUnsupportedOperationException();
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,347,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,348,Override
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,349,ublic double walkInColumnOrder(final RealMatrixPreservingVisitor visitor)
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,350,hrows MathUnsupportedOperationException {
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,351,hrow new MathUnsupportedOperationException();
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,354,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,355,Override
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,356,"ublic double walkInColumnOrder(final RealMatrixChangingVisitor visitor,"
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,357,"inal int startRow, final int endRow,"
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,358,"inal int startColumn, final int endColumn)"
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,359,hrows MathUnsupportedOperationException {
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,360,hrow new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,299,/** Ensure a value is zero.
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,300,* @param value value to check
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,301,* @exception NumberIsTooLargeException if value is not zero
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,303,private void ensureZero(final double value) throws NumberIsTooLargeException {
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,304,"if (!Precision.equals(0.0, value, 1)) {"
True,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,305,"throw new NumberIsTooLargeException(FastMath.abs(value), 0, true);"
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,363,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,364,Override
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,365,"ublic double walkInColumnOrder(final RealMatrixPreservingVisitor visitor,"
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,366,"inal int startRow, final int endRow,"
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,367,"inal int startColumn, final int endColumn)"
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,368,hrows MathUnsupportedOperationException {
False,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java,369,hrow new MathUnsupportedOperationException();
False,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,19,mport org.junit.Test;
False,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,20,mport org.junit.Assert;
False,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,22,mport org.apache.commons.math3.exception.MathUnsupportedOperationException;
False,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,23,mport org.apache.commons.math3.exception.OutOfRangeException;
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,20,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,21,import org.apache.commons.math3.exception.NullArgumentException;
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,22,import org.apache.commons.math3.exception.NumberIsTooLargeException;
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,23,import org.apache.commons.math3.exception.OutOfRangeException;
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,24,import org.apache.commons.math3.util.Precision;
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,25,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,26,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,79,@Test(expected=DimensionMismatchException.class)
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,80,public void testCreateError() {
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,81,"final double[] d = { -1.2, 3.4, 5 };"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,82,"final DiagonalMatrix m = new DiagonalMatrix(d, false);"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,83,"m.createMatrix(5, 3);"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,86,@Test
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,87,public void testCreate() {
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,88,"final double[] d = { -1.2, 3.4, 5 };"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,89,"final DiagonalMatrix m = new DiagonalMatrix(d, false);"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,90,"final RealMatrix p = m.createMatrix(5, 5);"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,91,Assert.assertTrue(p instanceof DiagonalMatrix);
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,92,"Assert.assertEquals(5, p.getRowDimension());"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,93,"Assert.assertEquals(5, p.getColumnDimension());"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,96,@Test
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,97,public void testCopy() {
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,98,"final double[] d = { -1.2, 3.4, 5 };"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,99,"final DiagonalMatrix m = new DiagonalMatrix(d, false);"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,100,final DiagonalMatrix p = m.copy();
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,101,for (int i = 0; i < m.getRowDimension(); ++i) {
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,102,"Assert.assertEquals(m.getEntry(i, i), p.getEntry(i, i), 1.0e-20);"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,150,@Test
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,151,public void testSubtract() {
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,152,"final double[] data1 = { -1.2, 3.4, 5 };"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,153,final DiagonalMatrix m1 = new DiagonalMatrix(data1);
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,155,"final double[] data2 = { 10.1, 2.3, 45 };"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,156,final DiagonalMatrix m2 = new DiagonalMatrix(data2);
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,158,final DiagonalMatrix result = m1.subtract(m2);
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,159,"Assert.assertEquals(m1.getRowDimension(), result.getRowDimension());"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,160,for (int i = 0; i < result.getRowDimension(); i++) {
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,161,for (int j = 0; j < result.getRowDimension(); j++) {
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,162,if (i == j) {
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,163,"Assert.assertEquals(data1[i] - data2[i], result.getEntry(i, j), 0d);"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,164,} else {
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,165,"Assert.assertEquals(0d, result.getEntry(i, j), 0d);"
False,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,150,inal DiagonalMatrix result = m1.multiply(m2);
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,200,final DiagonalMatrix result = (DiagonalMatrix) m1.multiply((RealMatrix) m2);
False,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,211,Test(expected=MathUnsupportedOperationException.class)
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,261,@Test(expected=NumberIsTooLargeException.class)
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,267,@Test
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,268,public void testSetNonDiagonalZero() {
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,269,final DiagonalMatrix diag = new DiagonalMatrix(3);
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,270,"diag.setEntry(1, 2, 0.0);"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,271,"Assert.assertEquals(0.0, diag.getEntry(1, 2), Precision.SAFE_MIN);"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,274,@Test(expected=NumberIsTooLargeException.class)
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,275,public void testAddNonDiagonalEntry() {
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,276,final DiagonalMatrix diag = new DiagonalMatrix(3);
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,277,"diag.addToEntry(1, 2, 3.4);"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,280,@Test
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,281,public void testAddNonDiagonalZero() {
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,282,final DiagonalMatrix diag = new DiagonalMatrix(3);
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,283,"diag.addToEntry(1, 2, 0.0);"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,284,"Assert.assertEquals(0.0, diag.getEntry(1, 2), Precision.SAFE_MIN);"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,287,@Test
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,288,public void testMultiplyNonDiagonalEntry() {
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,289,final DiagonalMatrix diag = new DiagonalMatrix(3);
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,290,"diag.multiplyEntry(1, 2, 3.4);"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,291,"Assert.assertEquals(0.0, diag.getEntry(1, 2), Precision.SAFE_MIN);"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,294,@Test
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,295,public void testMultiplyNonDiagonalZero() {
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,296,final DiagonalMatrix diag = new DiagonalMatrix(3);
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,297,"diag.multiplyEntry(1, 2, 0.0);"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,298,"Assert.assertEquals(0.0, diag.getEntry(1, 2), Precision.SAFE_MIN);"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,307,@Test(expected=NullArgumentException.class)
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,308,public void testNull() {
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,309,"new DiagonalMatrix(null, false);"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,312,@Test(expected=NumberIsTooLargeException.class)
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,313,public void testSetSubMatrixError() {
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,314,"final double[] data = { -1.2, 3.4, 5 };"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,315,final DiagonalMatrix diag = new DiagonalMatrix(data);
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,316,"diag.setSubMatrix(new double[][] { {1.0, 1.0}, {1.0, 1.0}}, 1, 1);"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,319,@Test
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,320,public void testSetSubMatrix() {
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,321,"final double[] data = { -1.2, 3.4, 5 };"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,322,final DiagonalMatrix diag = new DiagonalMatrix(data);
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,323,"diag.setSubMatrix(new double[][] { {0.0, 5.0, 0.0}, {0.0, 0.0, 6.0}}, 1, 0);"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,324,"Assert.assertEquals(-1.2, diag.getEntry(0, 0), 1.0e-20);"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,325,"Assert.assertEquals( 5.0, diag.getEntry(1, 1), 1.0e-20);"
True,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java,326,"Assert.assertEquals( 6.0, diag.getEntry(2, 2), 1.0e-20);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,18,ackage org.apache.commons.math.optimization.direct;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,20,mport java.util.ArrayList;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,21,mport java.util.Arrays;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,22,mport java.util.List;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,24,mport org.apache.commons.math.analysis.MultivariateRealFunction;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,25,mport org.apache.commons.math.exception.MultiDimensionMismatchException;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,26,mport org.apache.commons.math.exception.NoDataException;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,27,mport org.apache.commons.math.exception.NotPositiveException;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,28,mport org.apache.commons.math.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,29,mport org.apache.commons.math.exception.TooManyEvaluationsException;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,30,mport org.apache.commons.math.linear.Array2DRowRealMatrix;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,31,mport org.apache.commons.math.linear.EigenDecomposition;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,32,mport org.apache.commons.math.linear.EigenDecompositionImpl;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,33,mport org.apache.commons.math.linear.MatrixUtils;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,34,mport org.apache.commons.math.linear.RealMatrix;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,35,mport org.apache.commons.math.optimization.GoalType;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,36,mport org.apache.commons.math.optimization.MultivariateRealOptimizer;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,37,mport org.apache.commons.math.optimization.RealPointValuePair;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,38,mport org.apache.commons.math.random.MersenneTwister;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,39,mport org.apache.commons.math.random.RandomGenerator;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,40,mport org.apache.commons.math.util.MathUtils;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,43, CMA-ES algorithm. This code is translated and adapted from the Matlab version
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,44, of this algorithm as implemented in module {@code cmaes.m} version 3.51.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,46, Implements the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,47," for non-linear, non-convex, non-smooth, global function minimization."
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,48, The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,49," which should be applied, if derivative based methods, e.g. quasi-Newton BFGS or"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,50," conjugate gradient, fail due to a rugged search landscape (e.g. noise, local"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,51," optima, outlier, etc.)  of the objective function. Like a"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,52, quasi-Newton method the CMA-ES learns and applies a variable metric
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,53, of the underlying search space. Unlike a quasi-Newton method the
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,54," CMA-ES does neither estimate nor use gradients, making it considerably more"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,55," reliable in terms of finding a good, or even close to optimal, solution, finally."
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,57," <p>In general, on smooth objective functions the CMA-ES is roughly ten times"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,58," slower than BFGS (counting objective function evaluations, no gradients provided)."
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,59, For up to <math>N=10</math> variables also the derivative-free simplex
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,60," direct search method (Nelder and Mead) can be faster, but it is"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,61, far less reliable than CMA-ES.</p>
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,63, <p>The CMA-ES is particularly well suited for non-separable
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,64, and/or badly conditioned problems.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,65, To observe the advantage of CMA compared to a conventional
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,66," evolution strategy, it will usually take about <math>30 N</math> function"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,67, evaluations. On difficult problems the complete
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,68, optimization (a single run) is expected to take <em>roughly</em> between
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,69, <math>30 N</math> and <math>300 N<sup>2</sup></math>
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,70, function evaluations.</p>
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,72," For more information, please refer to the following links:"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,73, <ul>
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,74,"  <li><a href=""http://www.lri.fr/~hansen/cmaes.m"">Matlab code</a></li>"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,75,"  <li><a href=""http://www.lri.fr/~hansen/cmaesintro.html"">Introduction to CMA-ES</a></li>"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,76,"  <li><a href=""http://en.wikipedia.org/wiki/CMA-ES"">Wikipedia</a></li>"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,77, </ul>
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,79, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,80, @since 3.0
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,83,ublic class CMAESOptimizer extends
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,84,aseAbstractScalarOptimizer<MultivariateRealFunction> implements
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,85,ultivariateRealOptimizer {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,87,** Default value for {@link #checkFeasableCount}: {@value}. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,88,ublic static final int DEFAULT_CHECKFEASABLECOUNT = 0;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,89,** Default value for {@link #stopfitness}: {@value}. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,90,ublic static final double DEFAULT_STOPFITNESS = 0;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,91,** Default value for {@link #isActiveCMA}: {@value}. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,92,ublic static final boolean DEFAULT_ISACTIVECMA = true;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,93,** Default value for {@link #maxIterations}: {@value}. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,94,ublic static final int DEFAULT_MAXITERATIONS = 30000;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,95,** Default value for {@link #diagonalOnly}: {@value}. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,96,ublic static final int DEFAULT_DIAGONALONLY = 0;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,97,** Default value for {@link #random}. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,98,ublic static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,100,/ global search parameters
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,102," Population size, offspring number. The primary strategy parameter to play"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,103," with, which can be increased from its default value. Increasing the"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,104, population size improves global search properties in exchange to speed.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,105," Speed decreases, as a rule, at most linearely with increasing population"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,106, size. It is advisable to begin with the default small population size.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,108,rivate int lambda; // population size
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,110," Covariance update mechanism, default is active CMA. isActiveCMA = true"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,111," turns on ""active CMA"" with a negative update of the covariance matrix and"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,112, checks for positive definiteness. OPTS.CMA.active = 2 does not check for
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,113, pos. def. and is numerically faster. Active CMA usually speeds up the
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,114, adaptation.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,116,rivate boolean isActiveCMA;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,118, Determines how often a new random offspring is generated in case it is
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,119," not feasible / beyond the defined limits, default is 0. Only relevant if"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,120, boundaries != null.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,122,rivate int checkFeasableCount;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,124, Lower and upper boundaries of the objective variables. boundaries == null
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,125, means no boundaries.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,127,rivate double[][] boundaries;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,129, Individual sigma values - initial search volume. inputSigma determines
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,130, the initial coordinate wise standard deviations for the search. Setting
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,131, SIGMA one third of the initial search region is appropriate.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,133,rivate double[] inputSigma;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,134,** Number of objective variables/problem dimension */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,135,rivate int dimension;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,137," Defines the number of initial iterations, where the covariance matrix"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,138, remains diagonal and the algorithm has internally linear time complexity.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,139, diagonalOnly = 1 means keeping the covariance matrix always diagonal and
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,140, this setting also exhibits linear space complexity. This can be
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,141, particularly useful for dimension > 100.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,142," @see <a href=""http://hal.archives-ouvertes.fr/inria-00287367/en"">A Simple Modification in CMA-ES</a> ."
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,144,rivate int diagonalOnly = 0;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,145,** Number of objective variables/problem dimension */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,146,rivate boolean isMinimize = true;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,147,** Indicates whether statistic data is collected. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,148,rivate boolean generateStatistics = false;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,150,/ termination criteria
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,151,** Maximal number of iterations allowed. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,152,rivate int maxIterations;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,153,** Limit for fitness value. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,154,rivate double stopfitness;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,155,** Stop if x-changes larger stopTolUpX. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,156,rivate double stopTolUpX;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,157,** Stop if x-change smaller stopTolX. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,158,rivate double stopTolX;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,159,** Stop if fun-changes smaller stopTolFun. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,160,rivate double stopTolFun;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,161,** Stop if back fun-changes smaller stopTolHistFun. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,162,rivate double stopTolHistFun;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,164,/ selection strategy parameters
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,165,** Number of parents/points for recombination. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,166,rivate int mu; //
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,167,"** log(mu + 0.5), stored for efficiency. */"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,168,rivate double logMu2;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,169,** Array for weighted recombination. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,170,rivate RealMatrix weights;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,171,** Variance-effectiveness of sum w_i x_i. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,172,rivate double mueff; //
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,174,/ dynamic strategy parameters and constants
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,175,** Overall standard deviation - search volume. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,176,rivate double sigma;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,177,** Cumulation constant. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,178,rivate double cc;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,179,** Cumulation constant for step-size. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,180,rivate double cs;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,181,** Damping for step-size. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,182,rivate double damps;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,183,** Learning rate for rank-one update. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,184,rivate double ccov1;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,185,** Learning rate for rank-mu update' */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,186,rivate double ccovmu;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,187,"** Expectation of ||N(0,I)|| == norm(randn(N,1)). */"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,188,rivate double chiN;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,189,** Learning rate for rank-one update - diagonalOnly */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,190,rivate double ccov1Sep;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,191,** Learning rate for rank-mu update - diagonalOnly */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,192,rivate double ccovmuSep;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,194,/ CMA internal values - updated each generation
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,195,** Objective variables. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,196,rivate RealMatrix xmean;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,197,** Evolution path. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,198,rivate RealMatrix pc;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,199,** Evolution path for sigma. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,200,rivate RealMatrix ps;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,201,"** Norm of ps, stored for efficiency. */"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,202,rivate double normps;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,203,** Coordinate system. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,204,rivate RealMatrix B;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,205,** Scaling. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,206,rivate RealMatrix D;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,207,"** B*D, stored for efficiency. */"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,208,rivate RealMatrix BD;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,209,"** Diagonal of sqrt(D), stored for efficiency. */"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,210,rivate RealMatrix diagD;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,211,** Covariance matrix. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,212,rivate RealMatrix C;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,213,"** Diagonal of C, used for diagonalOnly. */"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,214,rivate RealMatrix diagC;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,215,** Number of iterations already performed. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,216,rivate int iterations;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,218,** History queue of best values. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,219,rivate double[] fitnessHistory;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,220,** Size of history queue of best values. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,221,rivate int historySize;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,223,** Random generator. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,224,rivate RandomGenerator random;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,226,** History of sigma values. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,227,rivate List<Double> statisticsSigmaHistory = new ArrayList<Double>();
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,228,** History of mean matrix. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,229,rivate List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,230,** History of fitness values. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,231,rivate List<Double> statisticsFitnessHistory = new ArrayList<Double>();
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,232,** History of D matrix. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,233,rivate List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,236," Default constructor, uses default parameters"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,238,ublic CMAESOptimizer() {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,239,his(0);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,243, @param lambda
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,244,            Population size.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,246,ublic CMAESOptimizer(int lambda) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,247,"his(lambda, null, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,248,"EFAULT_ISACTIVECMA, DEFAULT_DIAGONALONLY,"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,249,"EFAULT_CHECKFEASABLECOUNT, DEFAULT_RANDOMGENERATOR, false);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,253, @param lambda
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,254,            Population size.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,255, @param inputSigma
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,256,            Initial search volume - sigma of offspring objective
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,257,            variables.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,258, @param boundaries
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,259,            Boundaries for objective variables.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,261,"ublic CMAESOptimizer(int lambda, double[] inputSigma,"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,262,ouble[][] boundaries) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,263,"his(lambda, inputSigma, boundaries, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,264,"EFAULT_ISACTIVECMA, DEFAULT_DIAGONALONLY,"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,265,"EFAULT_CHECKFEASABLECOUNT, DEFAULT_RANDOMGENERATOR, false);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,269, @param lambda
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,270,            Population size.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,271, @param inputSigma
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,272,            Initial search volume - sigma of offspring objective
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,273,            variables.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,274, @param boundaries
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,275,            Boundaries for objective variables.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,276, @param maxIterations
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,277,            Maximal number of iterations.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,278, @param stopfitness
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,279,            stop if objective function value < stopfitness.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,280, @param isActiveCMA
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,281,            Chooses the covariance matrix update method.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,282, @param diagonalOnly
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,283,"            Number of initial iterations, where the covariance matrix"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,284,            remains diagonal.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,285, @param checkFeasableCount
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,286,            Determines how often new. random objective variables are
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,287,            generated in case they are out of bounds.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,288, @param random
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,289,            Used random generator.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,290, @param generateStatistics
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,291,            Indicates whether statistic data is collected.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,293,"ublic CMAESOptimizer(int lambda, double[] inputSigma,"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,294,"ouble[][] boundaries, int maxIterations, double stopfitness,"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,295,"oolean isActiveCMA, int diagonalOnly, int checkFeasableCount,"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,296,"andomGenerator random, boolean generateStatistics) {"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,297,his.lambda = lambda;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,298,his.inputSigma = inputSigma;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,299,his.boundaries = boundaries;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,300,his.maxIterations = maxIterations;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,301,his.stopfitness = stopfitness;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,302,his.isActiveCMA = isActiveCMA;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,303,his.diagonalOnly = diagonalOnly;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,304,his.checkFeasableCount = checkFeasableCount;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,305,his.random = random;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,306,his.generateStatistics = generateStatistics;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,310, @return History of sigma values.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,312,ublic List<Double> getStatisticsSigmaHistory() {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,313,eturn statisticsSigmaHistory;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,317, @return History of mean matrix.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,319,ublic List<RealMatrix> getStatisticsMeanHistory() {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,320,eturn statisticsMeanHistory;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,324, @return History of fitness values.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,326,ublic List<Double> getStatisticsFitnessHistory() {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,327,eturn statisticsFitnessHistory;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,331, @return History of D matrix.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,333,ublic List<RealMatrix> getStatisticsDHistory() {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,334,eturn statisticsDHistory;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,337,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,338,Override
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,339,rotected RealPointValuePair doOptimize() {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,340,heckParameters();
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,341,/ -------------------- Initialization --------------------------------
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,342,sMinimize = getGoalType().equals(GoalType.MINIMIZE);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,343,"inal FitnessFunction fitfun = new FitnessFunction(boundaries,"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,344,sMinimize);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,345,inal double[] guess = fitfun.encode(getStartPoint());
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,346,/ number of objective variables/problem dimension
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,347,imension = guess.length;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,348,nitializeCMA(guess);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,349,terations = 0;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,350,ouble bestValue = fitfun.value(guess);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,351,"ush(fitnessHistory, bestValue);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,352,"ealPointValuePair optimum = new RealPointValuePair(getStartPoint(),"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,353,sMinimize ? bestValue : -bestValue);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,354,ealPointValuePair lastResult = null;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,356,/ -------------------- Generation Loop --------------------------------
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,358,enerationLoop:
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,359,or (iterations = 1; iterations <= maxIterations; iterations++) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,360,/ Generate and evaluate lambda offspring
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,361,"ealMatrix arz = randn1(dimension, lambda);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,362,"ealMatrix arx = zeros(dimension, lambda);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,363,ouble[] fitness = new double[lambda];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,364,/ generate random offspring
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,365,or (int k = 0; k < lambda; k++) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,366,ealMatrix arxk = null;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,367,or (int i = 0; i < checkFeasableCount+1; i++) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,368,f (diagonalOnly <= 0)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,369,rxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,370,"scalarMultiply(sigma)); // m + sig * Normal(0,C)"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,371,lse
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,372,"rxk = xmean.add(times(diagD,arz.getColumnMatrix(k))"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,373,scalarMultiply(sigma));
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,374,f (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0)))
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,375,reak;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,376,/ regenerate random arguments for row
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,377,"rz.setColumn(k, randn(dimension));"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,379,"opyColumn(arxk, 0, arx, k);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,380,ry {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,381,itness[k] = fitfun.value(arx.getColumn(k)); // compute fitness
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,382, catch (TooManyEvaluationsException e) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,383,reak generationLoop;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,386,/ Sort by fitness and compute weighted mean into xmean
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,387,nt[] arindex = sortedIndices(fitness);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,388,"/ Calculate new xmean, this is selection and recombination"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,389,ealMatrix xold = xmean; // for speed up of Eq. (2) and (3)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,390,"ealMatrix bestArx = selectColumns(arx, MathUtils.copyOf(arindex, mu));"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,391,mean = bestArx.multiply(weights);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,392,"ealMatrix bestArz = selectColumns(arz, MathUtils.copyOf(arindex, mu));"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,393,ealMatrix zmean = bestArz.multiply(weights);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,394,"oolean hsig = updateEvolutionPaths(zmean, xold);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,395,f (diagonalOnly <= 0)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,396,"pdateCovariance(hsig, bestArx, arz, arindex, xold);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,397,lse
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,398,"pdateCovarianceDiagonalOnly(hsig, bestArz, xold);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,399,/ Adapt step size sigma - Eq. (5)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,400,"igma *= Math.exp(Math.min(1.0,(normps/chiN - 1.)*cs/damps));"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,401,ouble bestFitness = fitness[arindex[0]];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,402,ouble worstFitness = fitness[arindex[arindex.length-1]];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,403,f (bestValue > bestFitness) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,404,estValue = bestFitness;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,405,astResult = optimum;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,406,ptimum = new RealPointValuePair(
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,407,"itfun.decode(bestArx.getColumn(0)),"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,408,sMinimize ? bestFitness : -bestFitness);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,409,f (getConvergenceChecker() != null && lastResult != null) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,410,f (getConvergenceChecker().converged(
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,411,"terations, optimum, lastResult))"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,412,reak generationLoop;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,415,/ handle termination criteria
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,416,"/ Break, if fitness is good enough"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,417,f (stopfitness != 0) { // only if stopfitness is defined
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,418,f (bestFitness < (isMinimize ? stopfitness : -stopfitness))
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,419,reak generationLoop;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,421,ouble[] sqrtDiagC = sqrt(diagC).getColumn(0);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,422,ouble[] pcCol = pc.getColumn(0);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,423,or (int i = 0; i < dimension; i++) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,424,"f (sigma*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > stopTolX)"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,425,reak;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,426,f (i >= dimension-1)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,427,reak generationLoop;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,429,or (int i = 0; i < dimension; i++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,430,f (sigma*sqrtDiagC[i] > stopTolUpX)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,431,reak generationLoop;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,432,ouble historyBest = min(fitnessHistory);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,433,ouble historyWorst = max(fitnessHistory);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,434,"f (iterations > 2 && Math.max(historyWorst, worstFitness) -"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,435,"ath.min(historyBest, bestFitness) < stopTolFun)"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,436,reak generationLoop;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,437,f (iterations > fitnessHistory.length &&
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,438,istoryWorst-historyBest < stopTolHistFun)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,439,reak generationLoop;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,440,/ condition number of the covariance matrix exceeds 1e14
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,441,f (max(diagD)/min(diagD) > 1e7)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,442,reak generationLoop;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,443,/ user defined termination
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,444,f (getConvergenceChecker() != null) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,445,ealPointValuePair current =
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,446,"ew RealPointValuePair(bestArx.getColumn(0),"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,447,sMinimize ? bestFitness : -bestFitness);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,448,f (lastResult != null &&
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,449,etConvergenceChecker().converged(
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,450,"terations, current, lastResult))"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,451,reak generationLoop;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,452,astResult = current;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,454,/ Adjust step size in case of equal function values (flat fitness)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,455,f (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]])
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,456,igma = sigma * Math.exp(0.2+cs/damps);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,457,"f (iterations > 2 && Math.max(historyWorst, bestFitness) -"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,458,"ath.min(historyBest, bestFitness) == 0)"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,459,igma = sigma * Math.exp(0.2+cs/damps);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,460,/ store best in history
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,461,"ush(fitnessHistory,bestFitness);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,462,itfun.setValueRange(worstFitness-bestFitness);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,463,f (generateStatistics) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,464,tatisticsSigmaHistory.add(sigma);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,465,tatisticsFitnessHistory.add(bestFitness);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,466,tatisticsMeanHistory.add(xmean.transpose());
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,467,tatisticsDHistory.add(diagD.transpose().scalarMultiply(1E5));
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,470,eturn optimum;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,474, Checks dimensions and values of boundaries and inputSigma if defined.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,476,rivate void checkParameters() {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,477,ouble[] init = getStartPoint();
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,478,f (boundaries != null) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,479,f (boundaries.length != 2)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,480,hrow new MultiDimensionMismatchException(
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,481,"ew Integer[] { boundaries.length },"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,482,ew Integer[] { 2 });
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,483,f (boundaries[0] == null || boundaries[1] == null)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,484,hrow new NoDataException();
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,485,f (boundaries[0].length != init.length)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,486,hrow new MultiDimensionMismatchException(
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,487,"ew Integer[] { boundaries[0].length },"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,488,ew Integer[] { init.length });
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,489,f (boundaries[1].length != init.length)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,490,hrow new MultiDimensionMismatchException(
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,491,"ew Integer[] { boundaries[1].length },"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,492,ew Integer[] { init.length });
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,493,or (int i = 0; i < init.length; i++) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,494,f (boundaries[0][i] > init[i] || boundaries[1][i] < init[i])
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,495,"hrow new OutOfRangeException(init[i], boundaries[0][i],"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,496,oundaries[1][i]);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,499,f (inputSigma != null) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,500,f (inputSigma.length != init.length)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,501,hrow new MultiDimensionMismatchException(
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,502,"ew Integer[] { inputSigma.length },"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,503,ew Integer[] { init.length });
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,504,or (int i = 0; i < init.length; i++) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,505,f (inputSigma[i] < 0)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,506,hrow new NotPositiveException(inputSigma[i]);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,507,f (boundaries != null) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,508,f (inputSigma[i] > 1.0)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,509,"hrow new OutOfRangeException(inputSigma[i], 0, 1.0);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,516, Initialization of the dynamic search parameters
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,518, @param guess
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,519,            initial guess for the arguments of the fitness function
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,522,rivate void initializeCMA(double[] guess) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,523,f (lambda <= 0)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,524,ambda = 4 + (int) (3. * Math.log(dimension));
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,525,/ initialize sigma
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,526,ouble[][] sigmaArray = new double[guess.length][1];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,527,or (int i = 0; i < guess.length; i++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,528,igmaArray[i][0] = inputSigma != null ? inputSigma[i] : 0.3;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,529,"ealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,530,igma = max(insigma); // overall standard deviation
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,532,/ initialize termination criteria
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,533,topTolUpX = 1e3 * max(insigma);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,534,topTolX = 1e-11 * max(insigma);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,535,topTolFun = 1e-12;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,536,topTolHistFun = 1e-13;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,538,/ initialize selection strategy parameters
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,539,u = lambda / 2; // number of parents/points for recombination
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,540,ogMu2 = Math.log(mu + 0.5);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,541,"eights = log(sequence(1, mu, 1)).scalarMultiply(-1.).scalarAdd(logMu2);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,542,ouble sumw = 0;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,543,ouble sumwq = 0;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,544,or (int i = 0; i < mu; i++) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,545,"ouble w = weights.getEntry(i, 0);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,546,umw += w;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,547,umwq += w * w;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,549,eights = weights.scalarMultiply(1. / sumw);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,550,ueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,552,/ initialize dynamic strategy parameters and constants
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,553,c = (4. + mueff / dimension) /
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,554,dimension + 4. + 2. * mueff / dimension);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,555,s = (mueff + 2.) / (dimension + mueff + 3.);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,556,"amps = (1. + 2. * Math.max(0, Math.sqrt((mueff - 1.) /"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,557,dimension + 1.)) - 1.)) *
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,558,"ath.max(0.3, 1. - dimension /"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,559,"1e-6 + Math.min(maxIterations, getMaxEvaluations() /"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,560,ambda))) + cs; // minor increment
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,561,cov1 = 2. / ((dimension + 1.3) * (dimension + 1.3) + mueff);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,562,"covmu = Math.min(1 - ccov1, 2. * (mueff - 2. + 1. / mueff) /"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,563,(dimension + 2.) * (dimension + 2.) + mueff));
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,564,"cov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3.);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,565,"covmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3.);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,566,hiN = Math.sqrt(dimension) *
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,567,1. - 1. / (4. * dimension) + 1 / (21. * dimension * dimension));
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,568,/ intialize CMA internal values - updated each generation
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,569,mean = MatrixUtils.createColumnRealMatrix(guess); // objective
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,570,/ variables
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,571,iagD = insigma.scalarMultiply(1. / sigma);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,572,iagC = square(diagD);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,573,"c = zeros(dimension, 1); // evolution paths for C and sigma"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,574,"s = zeros(dimension, 1); // B defines the coordinate system"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,575,ormps = norm(ps);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,577," = eye(dimension, dimension);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,578," = ones(dimension, 1); // diagonal D defines the scaling"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,579,"D = times(B, repmat(diagD.transpose(), dimension, 1));"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,580, = B.multiply(diag(square(D)).multiply(B.transpose())); // covariance
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,581,istorySize = 10 + (int) (3. * 10. * dimension / lambda);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,582,itnessHistory = new double[historySize]; // history of fitness values
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,583,or (int i = 0; i < historySize; i++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,584,itnessHistory[i] = Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,588, Update of the evolution paths ps and pc
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,590, @param zmean
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,591,            weighted row matrix of the gaussian random numbers generating
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,592,            the current offspring
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,593, @param xold
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,594,            xmean matrix of the previous generation
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,595, @return hsig flag indicating a small correction
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,597,"rivate boolean updateEvolutionPaths(RealMatrix zmean, RealMatrix xold) {"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,598,s = ps.scalarMultiply(1. - cs).add(
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,599,.multiply(zmean).scalarMultiply(
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,600,ath.sqrt(cs * (2. - cs) * mueff)));
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,601,ormps = norm(ps);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,602,oolean hsig = normps /
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,603,"ath.sqrt(1. - Math.pow(1. - cs, 2. * iterations)) /"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,604,hiN < 1.4 + 2. / (dimension + 1.);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,605,c = pc.scalarMultiply(1. - cc);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,606,f (hsig)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,607,c = pc.add(xmean.subtract(xold).scalarMultiply(
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,608,ath.sqrt(cc * (2. - cc) * mueff) / sigma));
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,609,eturn hsig;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,613, Update of the covariance matrix C for diagonalOnly > 0
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,615, @param hsig
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,616,            flag indicating a small correction
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,617, @param bestArz
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,618,            fitness-sorted matrix of the gaussian random values of the
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,619,            current offspring
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,620, @param xold
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,621,            xmean matrix of the previous generation
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,623,"rivate void updateCovarianceDiagonalOnly(boolean hsig, final RealMatrix bestArz,"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,624,inal RealMatrix xold) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,625,/ minor correction if hsig==false
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,626,ouble oldFac = hsig ? 0 : ccov1Sep * cc * (2. - cc);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,627,ldFac += 1. - ccov1Sep - ccovmuSep;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,628,iagC = diagC.scalarMultiply(oldFac) // regard old matrix
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,629,/ plus rank one update
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,630,add(square(pc).scalarMultiply(ccov1Sep))
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,631,/ plus rank mu update
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,632,"add((times(diagC, square(bestArz).multiply(weights)))"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,633,scalarMultiply(ccovmuSep));
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,634,iagD = sqrt(diagC); // replaces eig(C)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,635,f (diagonalOnly > 1 && iterations > diagonalOnly) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,636,/ full covariance matrix from now on
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,637,iagonalOnly = 0;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,638," = eye(dimension, dimension);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,639,D = diag(diagD);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,640, = diag(diagC);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,645, Update of the covariance matrix C
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,647, @param hsig
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,648,            flag indicating a small correction
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,649, @param bestArx
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,650,            fitness-sorted matrix of the argument vectors producing the
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,651,            current offspring
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,652, @param arz
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,653,            unsorted matrix containing the gaussian random values of the
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,654,            current offspring
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,655, @param arindex
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,656,            indices indicating the fitness-order of the current offspring
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,657, @param xold
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,658,            xmean matrix of the previous generation
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,660,"rivate void updateCovariance(boolean hsig, final RealMatrix bestArx,"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,661,"inal RealMatrix arz, final int[] arindex, final RealMatrix xold) {"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,662,ouble negccov = 0;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,663,f (ccov1 + ccovmu > 0) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,664,"ealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,665,scalarMultiply(1. / sigma); // mu difference vectors
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,666,ealMatrix roneu = pc.multiply(pc.transpose())
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,667,scalarMultiply(ccov1); // rank one update
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,668,/ minor correction if hsig==false
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,669,ouble oldFac = hsig ? 0 : ccov1 * cc * (2. - cc);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,670,ldFac += 1. - ccov1 - ccovmu;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,671,f (isActiveCMA) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,672,/ Adapt covariance matrix C active CMA
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,673,egccov = (1. - ccovmu) * 0.25 * mueff /
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,674,"Math.pow(dimension + 2., 1.5) + 2. * mueff);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,675,ouble negminresidualvariance = 0.66;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,676,"/ keep at least 0.66 in all directions, small popsize are most"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,677,/ critical
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,678,ouble negalphaold = 0.5; // where to make up for the variance
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,679,"/ loss,"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,680,"/ prepare vectors, compute negative updating matrix Cneg"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,681,nt[] arReverseIndex = reverse(arindex);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,682,ealMatrix arzneg
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,683," selectColumns(arz, MathUtils.copyOf(arReverseIndex, mu));"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,684,ealMatrix arnorms = sqrt(sumRows(square(arzneg)));
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,685,nt[] idxnorms = sortedIndices(arnorms.getRow(0));
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,686,"ealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,687,nt[] idxReverse = reverse(idxnorms);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,688,"ealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,689,"rnorms = divide(arnormsReverse, arnormsSorted);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,690,nt[] idxInv = inverse(idxnorms);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,691,"ealMatrix arnormsInv = selectColumns(arnorms, idxInv);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,692,/ check and set learning rate negccov
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,693,ouble negcovMax = (1. - negminresidualvariance) /
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,694,"quare(arnormsInv).multiply(weights).getEntry(0, 0);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,695,f (negccov > negcovMax)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,696,egccov = negcovMax;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,697,"rzneg = times(arzneg, repmat(arnormsInv, dimension, 1));"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,698,ealMatrix artmp = BD.multiply(arzneg);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,699,ealMatrix Cneg = artmp.multiply(diag(weights)).multiply(
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,700,rtmp.transpose());
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,701,ldFac += negalphaold * negccov;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,702, = C.scalarMultiply(oldFac)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,703,/ regard old matrix
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,704,add(roneu)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,705,/ plus rank one update
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,706,add(arpos.scalarMultiply(
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,707,/ plus rank mu update
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,708,covmu + (1. - negalphaold) * negccov)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,709,multiply(
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,710,"imes(repmat(weights, 1, dimension),"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,711,rpos.transpose())))
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,712,subtract(Cneg.scalarMultiply(negccov));
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,713, else {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,714,/ Adapt covariance matrix C - nonactive
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,715, = C.scalarMultiply(oldFac) // regard old matrix
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,716,add(roneu)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,717,/ plus rank one update
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,718,add(arpos.scalarMultiply(ccovmu) // plus rank mu update
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,719,multiply(
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,720,"imes(repmat(weights, 1, dimension),"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,721,rpos.transpose())));
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,724,pdateBD(negccov);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,728, Update B and D from C
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,730, @param negccov
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,731,            Negative covariance factor.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,733,rivate void updateBD(double negccov) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,734,f (ccov1 + ccovmu + negccov > 0 &&
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,735,iterations % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1.) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,736,/ to achieve O(N^2)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,737," = triu(C, 0).add(triu(C, 1).transpose());"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,738,/ enforce symmetry to prevent complex numbers
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,739,"igenDecomposition eig = new EigenDecompositionImpl(C, 1.0);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,740," = eig.getV(); // eigen decomposition, B==normalized eigenvectors"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,741, = eig.getD();
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,742,iagD = diag(D);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,743,f (min(diagD) <= 0) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,744,or (int i = 0; i < dimension; i++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,745,"f (diagD.getEntry(i, 0) < 0)"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,746,"iagD.setEntry(i, 0, 0.);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,747,ouble tfac = max(diagD) / 1e14;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,748," = C.add(eye(dimension, dimension).scalarMultiply(tfac));"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,749,"iagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,751,f (max(diagD) > 1e14 * min(diagD)) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,752,ouble tfac = max(diagD) / 1e14 - min(diagD);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,753," = C.add(eye(dimension, dimension).scalarMultiply(tfac));"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,754,"iagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,756,iagC = diag(C);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,757,iagD = sqrt(diagD); // D contains standard deviations now
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,758,"D = times(B, repmat(diagD.transpose(), dimension, 1)); // O(n^2)"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,763, Pushes the current best fitness value in a history queue.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,765, @param vals
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,766,            the history queue
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,767, @param val
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,768,            current best fitness value
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,770,"rivate static void push(double[] vals, double val) {"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,771,or (int i = vals.length-1; i > 0; i--)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,772,als[i] = vals[i-1];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,773,als[0] = val;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,777, Sorts fitness values.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,779, @param doubles
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,780,            array of values to be sorted
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,781, @return sorted array of indices pointing into doubles
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,783,rivate int[] sortedIndices(final double[] doubles) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,784,oubleIndex[] dis = new DoubleIndex[doubles.length];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,785,or (int i = 0; i < doubles.length; i++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,786,"is[i] = new DoubleIndex(doubles[i], i);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,787,rrays.sort(dis);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,788,nt[] indices = new int[doubles.length];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,789,or (int i = 0; i < doubles.length; i++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,790,ndices[i] = dis[i].index;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,791,eturn indices;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,795, Used to sort fitness values. Sorting is always in lower value first
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,796, order.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,798,rivate static class DoubleIndex implements Comparable<DoubleIndex> {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,800,** Value to compare. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,801,rivate double value;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,802,** Index into sorted array. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,803,rivate int index;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,806, @param value
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,807,            Value to compare.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,808, @param index
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,809,            Index into sorted array.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,811,"oubleIndex(double value, int index) {"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,812,his.value = value;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,813,his.index = index;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,816,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,817,ublic int compareTo(DoubleIndex o) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,818,"eturn Double.compare(value, o.value);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,823," Normalizes fitness values to the range [0,1]. Adds a penalty to the"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,824, fitness value if out of range. The penalty is adjusted by calling
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,825, setValueRange().
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,827,rivate class FitnessFunction {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,829,** Optional bounds for the objective variables */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,830,rivate double[][] boundaries;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,831,** Determines the penalty for boundary violations */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,832,rivate double valueRange = 1.0;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,834, Flag indicating whether the objective variables are forced into their
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,835, bounds if defined
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,837,rivate boolean isRepairMode = true;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,838,** Flag indicating the optimization goal. */
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,839,rivate boolean isMinimize = true;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,842, @param boundaries
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,843,            Bounds for the objective variables.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,844, @param isMinimize
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,845,            Flag indicating the optimization goal.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,847,"rivate FitnessFunction(final double[][] boundaries,"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,848,inal boolean isMinimize) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,849,his.boundaries = boundaries;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,850,his.isMinimize = isMinimize;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,854, @param x
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,855,            Original objective variables.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,856, @return Normalized objective variables.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,858,rivate double[] encode(final double[] x) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,859,f (boundaries == null)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,860,eturn x;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,861,ouble[] res = new double[x.length];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,862,or (int i = 0; i < x.length; i++) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,863,ouble diff = boundaries[1][i] - boundaries[0][i];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,864,es[i] = (x[i] - boundaries[0][i]) / diff;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,866,eturn res;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,870, @param x
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,871,            Normalized objective variables.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,872, @return Original objective variables.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,874,rivate double[] decode(final double[] x) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,875,f (boundaries == null)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,876,eturn x;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,877,ouble[] res = new double[x.length];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,878,or (int i = 0; i < x.length; i++) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,879,ouble diff = boundaries[1][i] - boundaries[0][i];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,880,es[i] = diff * x[i] + boundaries[0][i];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,882,eturn res;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,886, @param point
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,887,            Normalized objective variables.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,888, @return Objective value + penalty for violated bounds.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,890,rivate double value(final double[] point) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,891,ouble value;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,892,f (boundaries != null && isRepairMode) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,893,ouble[] repaired = repair(point);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,894,alue = CMAESOptimizer.this
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,895,computeObjectiveValue(decode(repaired)) +
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,896,"enalty(point, repaired);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,897, else
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,898,alue = CMAESOptimizer.this
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,899,computeObjectiveValue(decode(point));
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,900,eturn isMinimize ? value : -value;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,904, @param x
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,905,            Normalized objective variables.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,906, @return True if in bounds
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,908,rivate boolean isFeasible(final double[] x) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,909,f (boundaries == null)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,910,eturn true;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,911,or (int i = 0; i < x.length; i++) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,912,f (x[i] < 0)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,913,eturn false;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,914,f (x[i] > 1.0)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,915,eturn false;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,917,eturn true;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,921, @param valueRange
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,922,            Adjusts the penalty computation.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,924,rivate void setValueRange(double valueRange) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,925,his.valueRange = valueRange;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,929, @param x
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,930,            Normalized objective variables.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,931, @return Repaired objective variables - all in bounds.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,933,rivate double[] repair(final double[] x) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,934,ouble[] repaired = new double[x.length];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,935,or (int i = 0; i < x.length; i++) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,936,f (x[i] < 0)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,937,epaired[i] = 0;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,938,lse if (x[i] > 1.0)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,939,epaired[i] = 1.0;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,940,lse
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,941,epaired[i] = x[i];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,943,eturn repaired;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,947, @param x
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,948,            Normalized objective variables.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,949, @param repaired
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,950,            Repaired objective variables.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,951, @return Penalty value according to the violation of the bounds.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,953,"rivate double penalty(final double[] x, final double[] repaired) {"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,954,ouble penalty = 0;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,955,or (int i = 0; i < x.length; i++) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,956,ouble diff = Math.abs(x[i] - repaired[i]);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,957,enalty += diff * valueRange;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,959,eturn isMinimize ? penalty : -penalty;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,963,/ -----Matrix utility functions similar to the Matlab build in functions------
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,966, @param m
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,967,            Input matrix
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,968, @return Matrix representing the element wise logarithm of m.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,970,rivate static RealMatrix log(final RealMatrix m) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,971,ouble[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,972,or (int r = 0; r < m.getRowDimension(); r++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,973,or (int c = 0; c < m.getColumnDimension(); c++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,974,"[r][c] = Math.log(m.getEntry(r, c));"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,975,"eturn new Array2DRowRealMatrix(d, false);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,979, @param m
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,980,            Input matrix
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,981, @return Matrix representing the element wise square root of m.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,983,rivate static RealMatrix sqrt(final RealMatrix m) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,984,ouble[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,985,or (int r = 0; r < m.getRowDimension(); r++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,986,or (int c = 0; c < m.getColumnDimension(); c++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,987,"[r][c] = Math.sqrt(m.getEntry(r, c));"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,988,"eturn new Array2DRowRealMatrix(d, false);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,992, @param m Input matrix
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,993, @return Matrix representing the element wise square (^2) of m.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,995,rivate static RealMatrix square(final RealMatrix m) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,996,ouble[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,997,or (int r = 0; r < m.getRowDimension(); r++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,998,or (int c = 0; c < m.getColumnDimension(); c++) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,999,"ouble e = m.getEntry(r, c);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1000,[r][c] = e * e;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1002,"eturn new Array2DRowRealMatrix(d, false);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1006, @param m
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1007,            Input matrix 1.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1008, @param n
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1009,            Input matrix 2.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1010, @return Matrix where the elements of m and m are element wise multiplied.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1012,"rivate static RealMatrix times(final RealMatrix m, final RealMatrix n) {"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1013,ouble[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1014,or (int r = 0; r < m.getRowDimension(); r++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1015,or (int c = 0; c < m.getColumnDimension(); c++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1016,"[r][c] = m.getEntry(r, c)*n.getEntry(r, c);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1017,"eturn new Array2DRowRealMatrix(d, false);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1021, @param m
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1022,            Input matrix 1.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1023, @param n
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1024,            Input matrix 2.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1025, @return Matrix where the elements of m and m are element wise divided.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1027,"rivate static RealMatrix divide(final RealMatrix m, final RealMatrix n) {"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1028,ouble[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1029,or (int r = 0; r < m.getRowDimension(); r++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1030,or (int c = 0; c < m.getColumnDimension(); c++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1031,"[r][c] = m.getEntry(r, c)/n.getEntry(r, c);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1032,"eturn new Array2DRowRealMatrix(d, false);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1036, @param m Input matrix.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1037, @param cols Columns to select.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1038, @return Matrix representing the selected columns.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1040,"rivate static RealMatrix selectColumns(final RealMatrix m, final int[] cols) {"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1041,ouble[][] d = new double[m.getRowDimension()][cols.length];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1042,or (int r = 0; r < m.getRowDimension(); r++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1043,or (int c = 0; c < cols.length; c++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1044,"[r][c] = m.getEntry(r, cols[c]);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1045,"eturn new Array2DRowRealMatrix(d, false);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1049, @param m Input matrix.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1050, @param k diagonal position.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1051, @return Upper triangular part of matrix.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1053,"rivate static RealMatrix triu(final RealMatrix m, int k) {"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1054,ouble[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1055,or (int r = 0; r < m.getRowDimension(); r++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1056,or (int c = 0; c < m.getColumnDimension(); c++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1057,"[r][c] = r <= c - k ? m.getEntry(r, c) : 0;"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1058,"eturn new Array2DRowRealMatrix(d, false);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1062, @param m
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1063,            Input matrix.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1064, @return Norm of the matrix.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1066,rivate static double norm(final RealMatrix m) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1067,ouble sum = 0;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1068,or (int r = 0; r < m.getRowDimension(); r++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1069,or (int c = 0; c < m.getColumnDimension(); c++) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1070,"ouble e = m.getEntry(r, c);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1071,um += e*e;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1073,eturn Math.sqrt(sum);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1077, @param m
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1078,            Input matrix.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1079, @return Row matrix representing the sums of the rows.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1081,rivate static RealMatrix sumRows(final RealMatrix m) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1082,ouble[][] d = new double[1][m.getColumnDimension()];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1083,or (int c = 0; c < m.getColumnDimension(); c++) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1084,ouble sum = 0;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1085,or (int r = 0; r < m.getRowDimension(); r++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1086,"um += m.getEntry(r, c);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1087,[0][c] = sum;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1089,"eturn new Array2DRowRealMatrix(d, false);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1093, @param m
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1094,            Input matrix.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1095," @return Diagonal n X n matrix if m is a column matrix, Rolumn matrix"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1096,         representing the diagonal if m is a nXn matrix.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1098,rivate static RealMatrix diag(final RealMatrix m) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1099,f (m.getColumnDimension() == 1) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1100,ouble[][] d = new double[m.getRowDimension()][m.getRowDimension()];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1101,or (int i = 0; i < m.getRowDimension(); i++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1102,"[i][i] = m.getEntry(i, 0);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1103,"eturn new Array2DRowRealMatrix(d, false);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1104, else {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1105,ouble[][] d = new double[m.getRowDimension()][1];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1106,or (int i = 0; i < m.getColumnDimension(); i++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1107,"[i][0] = m.getEntry(i, i);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1108,"eturn new Array2DRowRealMatrix(d, false);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1113, Copies a row from m1 to m2.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1115, @param m1
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1116,            Source matrix 1.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1117, @param col1
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1118,            Source column.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1119, @param m2
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1120,            Target matrix.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1121, @param col2
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1122,            Target column.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1124,"rivate static void copyColumn(final RealMatrix m1, int col1, RealMatrix m2, int col2) {"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1125,or (int i = 0; i < m1.getRowDimension(); i++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1126,"2.setEntry(i, col2, m1.getEntry(i, col1));"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1130, @param n
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1131,            Number of rows.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1132, @param m
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1133,            Number of columns.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1134, @return n X m matrix of 1.0-values.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1136,"rivate static RealMatrix ones(int n, int m) {"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1137,ouble[][] d = new double[n][m];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1138,or (int r = 0; r < n; r++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1139,"rrays.fill(d[r], 1.0);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1140,"eturn new Array2DRowRealMatrix(d, false);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1144, @param n
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1145,            Number of rows.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1146, @param m
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1147,            Number of columns.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1148," @return n X m matrix of 0.0-values, diagonal has values 1.0."
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1150,"rivate static RealMatrix eye(int n, int m) {"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1151,ouble[][] d = new double[n][m];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1152,or (int r = 0; r < n; r++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1153,f (r < m)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1154,[r][r] = 1;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1155,"eturn new Array2DRowRealMatrix(d, false);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1159, @param n
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1160,            Number of rows.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1161, @param m
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1162,            Number of columns.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1163, @return n X m matrix of 0.0-values.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1165,"rivate static RealMatrix zeros(int n, int m) {"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1166,"eturn new Array2DRowRealMatrix(n, m);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1170, @param mat
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1171,            Input matrix.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1172, @param n
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1173,            Number of row replicates.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1174, @param m
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1175,            Number of column replicates.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1176, @return Matrix which replicates the input matrix in both directions.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1178,"rivate static RealMatrix repmat(final RealMatrix mat, int n, int m) {"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1179,nt rd = mat.getRowDimension();
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1180,nt cd = mat.getColumnDimension();
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1181,ouble[][] d = new double[n * rd][m * cd];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1182,or (int r = 0; r < n * rd; r++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1183,or (int c = 0; c < m * cd; c++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1184,"[r][c] = mat.getEntry(r % rd, c % cd);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1185,"eturn new Array2DRowRealMatrix(d, false);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1189, @param start
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1190,            Start value.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1191, @param end
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1192,            End value.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1193, @param step
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1194,            Step size.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1195, @return Sequence as column matrix.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1197,"rivate static RealMatrix sequence(double start, double end, double step) {"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1198,nt size = (int) ((end - start) / step + 1);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1199,ouble[][] d = new double[size][1];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1200,ouble value = start;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1201,or (int r = 0; r < size; r++) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1202,[r][0] = value;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1203,alue += step;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1205,"eturn new Array2DRowRealMatrix(d, false);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1209, @param m
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1210,            Input matrix.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1211, @return Maximum of matrix element values.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1213,rivate static double max(final RealMatrix m) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1214,ouble max = -Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1215,or (int r = 0; r < m.getRowDimension(); r++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1216,or (int c = 0; c < m.getColumnDimension(); c++) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1217,"ouble e = m.getEntry(r, c);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1218,f (max < e)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1219,ax = e;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1221,eturn max;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1225, @param m
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1226,            Input matrix.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1227, @return Minimum of matrix element values.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1229,rivate static double min(final RealMatrix m) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1230,ouble min = Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1231,or (int r = 0; r < m.getRowDimension(); r++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1232,or (int c = 0; c < m.getColumnDimension(); c++) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1233,"ouble e = m.getEntry(r, c);"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1234,f (min > e)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1235,in = e;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1237,eturn min;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1241, @param m
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1242,            Input array.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1243, @return Maximum of array values.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1245,rivate static double max(final double[] m) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1246,ouble max = -Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1247,or (int r = 0; r < m.length; r++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1248,f (max < m[r])
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1249,ax = m[r];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1250,eturn max;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1254, @param m
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1255,            Input array.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1256, @return Minimum of array values.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1258,rivate static double min(final double[] m) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1259,ouble min = Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1260,or (int r = 0; r < m.length; r++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1261,f (min > m[r])
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1262,in = m[r];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1263,eturn min;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1267, @param indices
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1268,            Input index array.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1269, @return Inverse of the mapping defined by indices
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1271,rivate static int[] inverse(final int[] indices) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1272,nt[] inverse = new int[indices.length];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1273,or (int i = 0; i < indices.length; i++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1274,nverse[indices[i]] = i;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1275,eturn inverse;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1279, @param indices
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1280,            Input index array.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1281, @return Indices in inverse order (last is first)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1283,rivate static int[] reverse(final int[] indices) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1284,nt[] reverse = new int[indices.length];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1285,or (int i = 0; i < indices.length; i++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1286,everse[i] = indices[indices.length - i - 1];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1287,eturn reverse;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1291, @param size
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1292,            Length of random array.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1293, @return Array of gaussian random numbers.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1295,rivate double[] randn(int size) {
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1296,ouble[] randn = new double[size];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1297,or (int i = 0; i < size; i++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1298,andn[i] = random.nextGaussian();
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1299,eturn randn;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1303, @param size
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1304,            Number of rows.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1305, @param popSize
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1306,            Population size.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1307, @return 2-dimensional matrix of gaussian random numbers.
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1309,"rivate RealMatrix randn1(int size, int popSize) {"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1310,ouble[][] d = new double[size][popSize];
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1311,or (int r = 0; r < size; r++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1312,or (int c = 0; c < popSize; c++)
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1313,[r][c] = random.nextGaussian();
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,1314,"eturn new Array2DRowRealMatrix(d, false);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2223,"eturn copyOf(source, source.length);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2227, Creates a copy of the {@code source} array.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2229, @param source Array to be copied.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2230, @return the copied array.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2232,ublic static double[] copyOf(double[] source) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2233,"eturn copyOf(source, source.length);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2237, Creates a copy of the {@code source} array.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2239, @param source Array to be copied.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2240, @param len Number of entries to copy. If smaller then the source
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2241," length, the copy will be truncated, if larger it will padded with"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2242, zeroes.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2243, @return the copied array.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2245,"ublic static int[] copyOf(int[] source, int len) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2223,final int len = source.length;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2247,"ystem.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2225,"System.arraycopy(source, 0, output, 0, len);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2255, @param len Number of entries to copy. If smaller then the source
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2256," length, the copy will be truncated, if larger it will padded with"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2257, zeroes.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2260,"ublic static double[] copyOf(double[] source, int len) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2235,public static double[] copyOf(double[] source) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2236,final int len = source.length;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2262,"ystem.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2238,"System.arraycopy(source, 0, output, 0, len);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,14, See the License for the specific language governing permissions and
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,15, limitations under the License.
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,17,ackage org.apache.commons.math.optimization.direct;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,19,mport java.util.Arrays;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,20,mport java.util.Random;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,22,mport org.apache.commons.math.MathException;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,23,mport org.apache.commons.math.analysis.MultivariateRealFunction;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,24,mport org.apache.commons.math.exception.MathUserException;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,25,mport org.apache.commons.math.exception.MultiDimensionMismatchException;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,26,mport org.apache.commons.math.exception.NoDataException;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,27,mport org.apache.commons.math.exception.NotPositiveException;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,28,mport org.apache.commons.math.exception.OutOfRangeException;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,29,mport org.apache.commons.math.optimization.GoalType;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,30,mport org.apache.commons.math.optimization.MultivariateRealOptimizer;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,31,mport org.apache.commons.math.optimization.RealPointValuePair;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,32,mport org.apache.commons.math.random.MersenneTwister;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,33,mport org.junit.Assert;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,34,mport org.junit.Test;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,37, Test for {@link CMAESOptimizer}.
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,39,ublic class CMAESOptimizerTest {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,41,tatic final int DIM = 13;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,42,tatic final int LAMBDA = 4 + (int)(3.*Math.log(DIM));
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,44,Test(expected = OutOfRangeException.class)
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,45,"ublic void testInitOutofbounds() throws MathUserException, MathException {"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,46,"ouble[] startPoint = point(DIM,3);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,47,ouble[] insigma = null;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,48,"ouble[][] boundaries = boundaries(DIM,-1,2);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,49,ealPointValuePair expected =
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,50,"ew RealPointValuePair(point(DIM,1.0),0.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,51,"oTest(new Rosen(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,52,"oalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,53,"e-13, 1e-6, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,56,Test(expected = MultiDimensionMismatchException.class)
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,57,"ublic void testBoundariesDimensionMismatch() throws MathUserException, MathException {"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,58,"ouble[] startPoint = point(DIM,0.5);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,59,ouble[] insigma = null;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,60,"ouble[][] boundaries = boundaries(DIM+1,-1,2);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,61,ealPointValuePair expected =
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,62,"ew RealPointValuePair(point(DIM,1.0),0.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,63,"oTest(new Rosen(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,64,"oalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,65,"e-13, 1e-6, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,68,Test(expected = NoDataException.class)
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,69,"ublic void testBoundariesNoData() throws MathUserException, MathException {"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,70,"ouble[] startPoint = point(DIM,0.5);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,71,ouble[] insigma = null;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,72,"ouble[][] boundaries = boundaries(DIM,-1,2);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,73,oundaries[1] = null;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,74,ealPointValuePair expected =
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,75,"ew RealPointValuePair(point(DIM,1.0),0.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,76,"oTest(new Rosen(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,77,"oalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,78,"e-13, 1e-6, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,81,Test(expected = NotPositiveException.class)
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,82,"ublic void testInputSigmaNegative() throws MathUserException, MathException {"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,83,"ouble[] startPoint = point(DIM,0.5);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,84,"ouble[] insigma = point(DIM,-0.5);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,85,ouble[][] boundaries = null;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,86,ealPointValuePair expected =
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,87,"ew RealPointValuePair(point(DIM,1.0),0.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,88,"oTest(new Rosen(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,89,"oalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,90,"e-13, 1e-6, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,93,Test(expected = OutOfRangeException.class)
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,94,"ublic void testInputSigmaOutOfRange() throws MathUserException, MathException {"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,95,"ouble[] startPoint = point(DIM,0.5);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,96,"ouble[] insigma = point(DIM, 1.1);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,97,"ouble[][] boundaries = boundaries(DIM,-1,2);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,98,ealPointValuePair expected =
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,99,"ew RealPointValuePair(point(DIM,1.0),0.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,100,"oTest(new Rosen(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,101,"oalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,102,"e-13, 1e-6, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,105,Test(expected = MultiDimensionMismatchException.class)
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,106,"ublic void testInputSigmaDimensionMismatch() throws MathUserException, MathException {"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,107,"ouble[] startPoint = point(DIM,0.5);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,108,"ouble[] insigma = point(DIM+1,-0.5);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,109,ouble[][] boundaries = null;;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,110,ealPointValuePair expected =
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,111,"ew RealPointValuePair(point(DIM,1.0),0.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,112,"oTest(new Rosen(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,113,"oalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,114,"e-13, 1e-6, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,117,Test
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,118,ublic void testRosen() throws MathException {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,119,"ouble[] startPoint = point(DIM,0.1);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,120,"ouble[] insigma = point(DIM,0.1);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,121,ouble[][] boundaries = null;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,122,ealPointValuePair expected =
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,123,"ew RealPointValuePair(point(DIM,1.0),0.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,124,"oTest(new Rosen(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,125,"oalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,126,"e-13, 1e-6, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,127,"oTest(new Rosen(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,128,"oalType.MINIMIZE, LAMBDA, false, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,129,"e-13, 1e-6, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,132,Test
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,133,ublic void testMaximize() throws MathException {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,134,"ouble[] startPoint = point(DIM,1.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,135,"ouble[] insigma = point(DIM,0.1);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,136,ouble[][] boundaries = null;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,137,ealPointValuePair expected =
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,138,"ew RealPointValuePair(point(DIM,0.0),1.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,139,"oTest(new MinusElli(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,140,"oalType.MAXIMIZE, LAMBDA, true, 0, 1.0-1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,141,"e-10, 5e-6, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,142,"oTest(new MinusElli(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,143,"oalType.MAXIMIZE, LAMBDA, false, 0, 1.0-1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,144,"e-10, 5e-6, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,145,"oundaries = boundaries(DIM,-0.3,0.3);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,146,"tartPoint = point(DIM,0.1);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,147,"oTest(new MinusElli(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,148,"oalType.MAXIMIZE, LAMBDA, true, 0, 1.0-1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,149,"e-10, 5e-6, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,152,Test
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,153,ublic void testEllipse() throws MathException {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,154,"ouble[] startPoint = point(DIM,1.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,155,"ouble[] insigma = point(DIM,0.1);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,156,ouble[][] boundaries = null;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,157,ealPointValuePair expected =
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,158,"ew RealPointValuePair(point(DIM,0.0),0.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,159,"oTest(new Elli(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,160,"oalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,161,"e-13, 1e-6, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,162,"oTest(new Elli(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,163,"oalType.MINIMIZE, LAMBDA, false, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,164,"e-13, 1e-6, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,167,Test
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,168,ublic void testElliRotated() throws MathException {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,169,"ouble[] startPoint = point(DIM,1.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,170,"ouble[] insigma = point(DIM,0.1);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,171,ouble[][] boundaries = null;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,172,ealPointValuePair expected =
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,173,"ew RealPointValuePair(point(DIM,0.0),0.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,174,"oTest(new ElliRotated(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,175,"oalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,176,"e-13, 1e-6, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,177,"oTest(new ElliRotated(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,178,"oalType.MINIMIZE, LAMBDA, false, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,179,"e-13, 1e-6, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,182,Test
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,183,ublic void testCigar() throws MathException {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,184,"ouble[] startPoint = point(DIM,1.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,185,"ouble[] insigma = point(DIM,0.1);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,186,ouble[][] boundaries = null;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,187,ealPointValuePair expected =
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,188,"ew RealPointValuePair(point(DIM,0.0),0.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,189,"oTest(new Cigar(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,190,"oalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,191,"e-13, 1e-6, 200000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,192,"oTest(new Cigar(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,193,"oalType.MINIMIZE, LAMBDA, false, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,194,"e-13, 1e-6, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,197,Test
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,198,ublic void testTwoAxes() throws MathException {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,199,"ouble[] startPoint = point(DIM,1.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,200,"ouble[] insigma = point(DIM,0.1);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,201,ouble[][] boundaries = null;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,202,ealPointValuePair expected =
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,203,"ew RealPointValuePair(point(DIM,0.0),0.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,204,"oTest(new TwoAxes(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,205,"oalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,206,"e-13, 1e-6, 200000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,207,"oTest(new TwoAxes(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,208,"oalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,209,"e-8, 1e-3, 200000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,212,Test
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,213,ublic void testCigTab() throws MathException {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,214,"ouble[] startPoint = point(DIM,1.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,215,"ouble[] insigma = point(DIM,0.3);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,216,ouble[][] boundaries = null;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,217,ealPointValuePair expected =
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,218,"ew RealPointValuePair(point(DIM,0.0),0.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,219,"oTest(new CigTab(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,220,"oalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,221,"e-13, 5e-5, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,222,"oTest(new CigTab(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,223,"oalType.MINIMIZE, LAMBDA, false, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,224,"e-13, 5e-5, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,227,Test
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,228,ublic void testSphere() throws MathException {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,229,"ouble[] startPoint = point(DIM,1.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,230,"ouble[] insigma = point(DIM,0.1);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,231,ouble[][] boundaries = null;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,232,ealPointValuePair expected =
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,233,"ew RealPointValuePair(point(DIM,0.0),0.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,234,"oTest(new Sphere(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,235,"oalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,236,"e-13, 1e-6, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,237,"oTest(new Sphere(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,238,"oalType.MINIMIZE, LAMBDA, false, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,239,"e-13, 1e-6, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,242,Test
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,243,ublic void testTablet() throws MathException {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,244,"ouble[] startPoint = point(DIM,1.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,245,"ouble[] insigma = point(DIM,0.1);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,246,ouble[][] boundaries = null;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,247,ealPointValuePair expected =
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,248,"ew RealPointValuePair(point(DIM,0.0),0.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,249,"oTest(new Tablet(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,250,"oalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,251,"e-13, 1e-6, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,252,"oTest(new Tablet(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,253,"oalType.MINIMIZE, LAMBDA, false, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,254,"e-13, 1e-6, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,257,Test
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,258,ublic void testDiffPow() throws MathException {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,259,"ouble[] startPoint = point(DIM,1.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,260,"ouble[] insigma = point(DIM,0.1);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,261,ouble[][] boundaries = null;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,262,ealPointValuePair expected =
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,263,"ew RealPointValuePair(point(DIM,0.0),0.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,264,"oTest(new DiffPow(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,265,"oalType.MINIMIZE, 10, true, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,266,"e-8, 1e-1, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,267,"oTest(new DiffPow(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,268,"oalType.MINIMIZE, 10, false, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,269,"e-8, 2e-1, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,272,Test
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,273,ublic void testSsDiffPow() throws MathException {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,274,"ouble[] startPoint = point(DIM,1.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,275,"ouble[] insigma = point(DIM,0.1);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,276,ouble[][] boundaries = null;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,277,ealPointValuePair expected =
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,278,"ew RealPointValuePair(point(DIM,0.0),0.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,279,"oTest(new SsDiffPow(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,280,"oalType.MINIMIZE, 10, true, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,281,"e-4, 1e-1, 200000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,282,"oTest(new SsDiffPow(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,283,"oalType.MINIMIZE, 10, false, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,284,"e-4, 1e-1, 200000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,287,Test
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,288,ublic void testAckley() throws MathException {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,289,"ouble[] startPoint = point(DIM,1.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,290,"ouble[] insigma = point(DIM,1.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,291,ouble[][] boundaries = null;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,292,ealPointValuePair expected =
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,293,"ew RealPointValuePair(point(DIM,0.0),0.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,294,"oTest(new Ackley(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,295,"oalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,296,"e-9, 1e-5, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,297,"oTest(new Ackley(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,298,"oalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,299,"e-9, 1e-5, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,302,Test
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,303,ublic void testRastrigin() throws MathException {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,304,"ouble[] startPoint = point(DIM,0.1);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,305,"ouble[] insigma = point(DIM,0.1);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,306,ouble[][] boundaries = null;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,307,ealPointValuePair expected =
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,308,"ew RealPointValuePair(point(DIM,0.0),0.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,309,"oTest(new Rastrigin(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,310,"oalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), true, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,311,"e-13, 1e-6, 200000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,312,"oTest(new Rastrigin(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,313,"oalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), false, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,314,"e-13, 1e-6, 200000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,317,Test
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,318,ublic void testConstrainedRosen() throws MathException {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,319,"ouble[] startPoint = point(DIM,0.1);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,320,"ouble[] insigma = point(DIM,0.1);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,321,"ouble[][] boundaries = boundaries(DIM,-1,2);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,322,ealPointValuePair expected =
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,323,"ew RealPointValuePair(point(DIM,1.0),0.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,324,"oTest(new Rosen(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,325,"oalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,326,"e-13, 1e-6, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,327,"oTest(new Rosen(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,328,"oalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,329,"e-13, 1e-6, 100000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,332,Test
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,333,ublic void testDiagonalRosen() throws MathException {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,334,"ouble[] startPoint = point(DIM,0.1);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,335,"ouble[] insigma = point(DIM,0.1);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,336,ouble[][] boundaries = null;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,337,ealPointValuePair expected =
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,338,"ew RealPointValuePair(point(DIM,1.0),0.0);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,339,"oTest(new Rosen(), startPoint, insigma, boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,340,"oalType.MINIMIZE, LAMBDA, false, 1, 1e-13,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,341,"e-10, 1e-4, 1000000, expected);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,345, @param func Function to optimize.
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,346, @param startPoint Starting point.
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,347, @param inSigma Individual input sigma.
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,348, @param boundaries Upper / lower point limit.
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,349, @param goal Minimization or maximization.
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,350, @param lambda Population size used for offspring.
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,351, @param isActive Covariance update mechanism.
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,352, @param diagonalOnly Simplified covariance update.
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,353, @param stopValue Termination criteria for optimization.
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,354, @param fTol Tolerance relative error on the objective function.
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,355, @param pointTol Tolerance for checking that the optimum is correct.
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,356, @param maxEvaluations Maximum number of evaluations.
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,357, @param expected Expected point / value.
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,359,"rivate void doTest(MultivariateRealFunction func,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,360,"ouble[] startPoint,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,361,"ouble[] inSigma,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,362,"ouble[][] boundaries,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,363,"oalType goal,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,364,"nt lambda,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,365,"oolean isActive,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,366,"nt diagonalOnly,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,367,"ouble stopValue,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,368,"ouble fTol,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,369,"ouble pointTol,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,370,"nt maxEvaluations,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,371,ealPointValuePair expected)
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,372,hrows MathException {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,373,nt dim = startPoint.length;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,374,/ test diagonalOnly = 0 - slow but normally fewer feval#
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,375,ultivariateRealOptimizer optim =
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,376,ew CMAESOptimizer(
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,377,"ambda, inSigma, boundaries, 30000,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,378,"topValue, isActive, diagonalOnly, 0, new MersenneTwister(),false);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,379,"ealPointValuePair result = optim.optimize(maxEvaluations, func, goal, startPoint);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,380,"ssert.assertEquals(expected.getValue(),"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,381,"esult.getValue(), fTol);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,382,or (int i = 0; i < dim; i++) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,383,"ssert.assertEquals(expected.getPoint()[i],"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,384,"esult.getPoint()[i], pointTol);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,388,"rivate static double[] point(int n, double value) {"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,389,ouble[] ds = new double[n];
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,390,"rrays.fill(ds, value);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,391,eturn ds;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,394,"rivate static double[][] boundaries(int dim,"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,395,"ouble lower, double upper) {"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,396,ouble[][] boundaries = new double[2][dim];
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,397,or (int i = 0; i < dim; i++)
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,398,oundaries[0][i] = lower;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,399,or (int i = 0; i < dim; i++)
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,400,oundaries[1][i] = upper;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,401,eturn boundaries;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,404,rivate static class Sphere implements MultivariateRealFunction {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,406,ublic double value(double[] x) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,407,ouble f = 0;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,408,or (int i = 0; i < x.length; ++i)
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,409, += x[i] * x[i];
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,410,eturn f;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,414,rivate static class Cigar implements MultivariateRealFunction {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,415,rivate double factor;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,417,igar() {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,418,his(1e3);
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,421,igar(double axisratio) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,422,actor = axisratio * axisratio;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,425,ublic double value(double[] x) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,426,ouble f = x[0] * x[0];
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,427,or (int i = 1; i < x.length; ++i)
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,428, += factor * x[i] * x[i];
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,429,eturn f;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,433,rivate static class Tablet implements MultivariateRealFunction {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,434,rivate double factor;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,436,ablet() {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,437,his(1e3);
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,440,ablet(double axisratio) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,441,actor = axisratio * axisratio;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,444,ublic double value(double[] x) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,445,ouble f = factor * x[0] * x[0];
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,446,or (int i = 1; i < x.length; ++i)
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,447, += x[i] * x[i];
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,448,eturn f;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,452,rivate static class CigTab implements MultivariateRealFunction {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,453,rivate double factor;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,455,igTab() {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,456,his(1e4);
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,459,igTab(double axisratio) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,460,actor = axisratio;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,463,ublic double value(double[] x) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,464,nt end = x.length - 1;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,465,ouble f = x[0] * x[0] / factor + factor * x[end] * x[end];
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,466,or (int i = 1; i < end; ++i)
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,467, += x[i] * x[i];
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,468,eturn f;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,472,rivate static class TwoAxes implements MultivariateRealFunction {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,474,rivate double factor;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,476,woAxes() {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,477,his(1e6);
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,480,woAxes(double axisratio) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,481,actor = axisratio * axisratio;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,484,ublic double value(double[] x) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,485,ouble f = 0;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,486,or (int i = 0; i < x.length; ++i)
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,487, += (i < x.length / 2 ? factor : 1) * x[i] * x[i];
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,488,eturn f;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,492,rivate static class ElliRotated implements MultivariateRealFunction {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,493,rivate Basis B = new Basis();
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,494,rivate double factor;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,496,lliRotated() {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,497,his(1e3);
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,500,lliRotated(double axisratio) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,501,actor = axisratio * axisratio;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,504,ublic double value(double[] x) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,505,ouble f = 0;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,506, = B.Rotate(x);
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,507,or (int i = 0; i < x.length; ++i)
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,508," += Math.pow(factor, i / (x.length - 1.)) * x[i] * x[i];"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,509,eturn f;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,513,rivate static class Elli implements MultivariateRealFunction {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,515,rivate double factor;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,517,lli() {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,518,his(1e3);
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,521,lli(double axisratio) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,522,actor = axisratio * axisratio;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,525,ublic double value(double[] x) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,526,ouble f = 0;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,527,or (int i = 0; i < x.length; ++i)
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,528," += Math.pow(factor, i / (x.length - 1.)) * x[i] * x[i];"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,529,eturn f;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,533,rivate static class MinusElli implements MultivariateRealFunction {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,535,ublic double value(double[] x) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,536,eturn 1.0-(new Elli().value(x));
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,540,rivate static class DiffPow implements MultivariateRealFunction {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,542,ublic double value(double[] x) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,543,ouble f = 0;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,544,or (int i = 0; i < x.length; ++i)
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,545," += Math.pow(Math.abs(x[i]), 2. + 10 * (double) i"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,546, (x.length - 1.));
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,547,eturn f;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,551,rivate static class SsDiffPow implements MultivariateRealFunction {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,553,ublic double value(double[] x) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,554,"ouble f = Math.pow(new DiffPow().value(x), 0.25);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,555,eturn f;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,559,rivate static class Rosen implements MultivariateRealFunction {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,561,ublic double value(double[] x) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,562,ouble f = 0;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,563,or (int i = 0; i < x.length - 1; ++i)
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,564, += 1e2 * (x[i] * x[i] - x[i + 1]) * (x[i] * x[i] - x[i + 1])
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,565, (x[i] - 1.) * (x[i] - 1.);
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,566,eturn f;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,570,rivate static class Ackley implements MultivariateRealFunction {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,571,rivate double axisratio;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,573,ckley(double axra) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,574,xisratio = axra;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,577,ublic Ackley() {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,578,his(1);
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,581,ublic double value(double[] x) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,582,ouble f = 0;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,583,ouble res2 = 0;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,584,ouble fac = 0;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,585,or (int i = 0; i < x.length; ++i) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,586,"ac = Math.pow(axisratio, (i - 1.) / (x.length - 1.));"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,587, += fac * fac * x[i] * x[i];
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,588,es2 += Math.cos(2. * Math.PI * fac * x[i]);
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,590, = (20. - 20. * Math.exp(-0.2 * Math.sqrt(f / x.length))
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,591, Math.exp(1.) - Math.exp(res2 / x.length));
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,592,eturn f;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,596,rivate static class Rastrigin implements MultivariateRealFunction {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,598,rivate double axisratio;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,599,rivate double amplitude;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,601,astrigin() {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,602,"his(1, 10);"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,605,"astrigin(double axisratio, double amplitude) {"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,606,his.axisratio = axisratio;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,607,his.amplitude = amplitude;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,610,ublic double value(double[] x) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,611,ouble f = 0;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,612,ouble fac;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,613,or (int i = 0; i < x.length; ++i) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,614,"ac = Math.pow(axisratio, (i - 1.) / (x.length - 1.));"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,615,f (i == 0 && x[i] < 0)
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,616,ac *= 1.;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,617, += fac * fac * x[i] * x[i] + amplitude
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,618, (1. - Math.cos(2. * Math.PI * fac * x[i]));
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,620,eturn f;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,624,rivate static class Basis {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,625,ouble[][] basis;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,626,andom rand = new Random(2); // use not always the same basis
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,628,ouble[] Rotate(double[] x) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,629,enBasis(x.length);
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,630,ouble[] y = new double[x.length];
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,631,or (int i = 0; i < x.length; ++i) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,632,[i] = 0;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,633,or (int j = 0; j < x.length; ++j)
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,634,[i] += basis[i][j] * x[j];
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,636,eturn y;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,639,oid GenBasis(int DIM) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,640,f (basis != null ? basis.length == DIM : false)
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,641,eturn;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,643,ouble sp;
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,644,"nt i, j, k;"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,646,* generate orthogonal basis */
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,647,asis = new double[DIM][DIM];
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,648,or (i = 0; i < DIM; ++i) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,649,* sample components gaussian */
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,650,or (j = 0; j < DIM; ++j)
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,651,asis[i][j] = rand.nextGaussian();
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,652,* substract projection of previous vectors */
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,653,or (j = i - 1; j >= 0; --j) {
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,654,"or (sp = 0., k = 0; k < DIM; ++k)"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,655,p += basis[i][k] * basis[j][k]; /* scalar product */
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,656,or (k = 0; k < DIM; ++k)
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,657,asis[i][k] -= sp * basis[j][k]; /* substract */
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,659,* normalize */
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,660,"or (sp = 0., k = 0; k < DIM; ++k)"
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,661,p += basis[i][k] * basis[i][k]; /* squared norm */
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,662,or (k = 0; k < DIM; ++k)
False,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java,663,asis[i][k] /= Math.sqrt(sp);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1560,ublic void testCopyOfInt2() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1561,"inal int[] source = { Integer.MIN_VALUE,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1562,"1, 0, 1, 3, 113, 4769,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1563,nteger.MAX_VALUE };
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1564,inal int offset = 3;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1565,"inal int[] dest = MathUtils.copyOf(source, source.length - offset);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1567,"ssertEquals(dest.length, source.length - offset);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1568,or (int i = 0; i < source.length - offset; i++) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1569,"ssertEquals(source[i], dest[i]);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1573,ublic void testCopyOfInt3() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1574,"inal int[] source = { Integer.MIN_VALUE,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1575,"1, 0, 1, 3, 113, 4769,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1576,nteger.MAX_VALUE };
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1577,inal int offset = 3;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1578,"inal int[] dest = MathUtils.copyOf(source, source.length + offset);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1580,"ssertEquals(dest.length, source.length + offset);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1581,or (int i = 0; i < source.length; i++) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1582,"ssertEquals(source[i], dest[i]);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1584,or (int i = source.length; i < source.length + offset; i++) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1585,"ssertEquals(0, dest[i], 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1606,ublic void testCopyOfDouble2() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1607,"inal double[] source = { Double.NEGATIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1608,"Double.MAX_VALUE,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1609,"1, 0,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1610,"ouble.MIN_VALUE,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1611,"ath.ulp(1d),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1612,", 3, 113, 4769,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1613,"ouble.MAX_VALUE,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1614,ouble.POSITIVE_INFINITY };
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1615,inal int offset = 3;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1616,"inal double[] dest = MathUtils.copyOf(source, source.length - offset);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1618,"ssertEquals(dest.length, source.length - offset);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1619,or (int i = 0; i < source.length - offset; i++) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1620,"ssertEquals(source[i], dest[i], 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1624,ublic void testCopyOfDouble3() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1625,"inal double[] source = { Double.NEGATIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1626,"Double.MAX_VALUE,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1627,"1, 0,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1628,"ouble.MIN_VALUE,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1629,"ath.ulp(1d),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1630,", 3, 113, 4769,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1631,"ouble.MAX_VALUE,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1632,ouble.POSITIVE_INFINITY };
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1633,inal int offset = 3;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1634,"inal double[] dest = MathUtils.copyOf(source, source.length + offset);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1636,"ssertEquals(dest.length, source.length + offset);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1637,or (int i = 0; i < source.length; i++) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1638,"ssertEquals(source[i], dest[i], 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1640,or (int i = source.length; i < source.length + offset; i++) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1641,"ssertEquals(0, dest[i], 0);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,112,* Gets the integration point at the given index.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,113,* The index must be in the valid range but no check is performed.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,115,* @return the integration point.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,117,public double getPoint(int index) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,118,return points[index];
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,122,* Gets the weight of the integration point at the given index.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,123,* The index must be in the valid range but no check is performed.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,125,* @return the weight.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,127,public double getWeight(int index) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java,128,return weights[index];
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,23,import org.apache.commons.math3.analysis.BivariateFunction;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,25,import org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,39,/** Generator of Gauss-Hermite integrators. */
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,40,private final BaseRuleFactory<Double> hermite = new HermiteRuleFactory();
False,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,39," Creates an integrator of the given order, and whose call to the"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,43,* Creates a Gauss-Legendre integrator of the given order.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,44,* The call to the
False,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,52," Creates an integrator of the given order, and whose call to the"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,57,* Creates a Gauss-Legendre integrator of the given order.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,58,* The call to the
False,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,71," Creates an integrator of the given order, and whose call to the"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,77,* Creates a Gauss-Legendre integrator of the given order.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,78,* The call to the
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,112,* Creates a Gauss-Hermite integrator of the given order.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,113,* The call to the
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,114,* {@link SymmetricGaussIntegrator#integrate(org.apache.commons.math3.analysis.UnivariateFunction)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,115,* integrate} method will perform a weighted integration on the interval
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,116,"* {@code [-&inf;, +&inf;]}: the computed value is the improper integral of"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,117,* <code>
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,118,*  e<sup>-x<sup>2</sup></sup> f(x)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,119,* </code>
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,120,* where {@code f(x)} is the function passed to the
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,121,* {@link SymmetricGaussIntegrator#integrate(org.apache.commons.math3.analysis.UnivariateFunction)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,122,* integrate} method.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,124,* @param numberOfPoints Order of the integration rule.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,125,* @return a Gauss-Hermite integrator.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,127,public SymmetricGaussIntegrator hermite(int numberOfPoints) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java,128,"return new SymmetricGaussIntegrator(getRule(hermite, numberOfPoints));"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,17,package org.apache.commons.math3.analysis.integration.gauss;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,19,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,20,import org.apache.commons.math3.util.Pair;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,21,import org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,24,* Factory that creates a
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,25,"* <a href=""http://en.wikipedia.org/wiki/Gauss-Hermite_quadrature"">"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,26,*  Gauss-type quadrature rule using Hermite polynomials</a>
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,27,* of the first kind.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,28,* Such a quadrature rule allows the calculation of improper integrals
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,29,* of a function
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,30,* <code>
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,31,*  f(x) e<sup>-x<sup>2</sup></sup>
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,32,* </code>
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,33,* <br/>
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,34,* Recurrence relation and weights computation follow
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,35,"* <a href=""http://en.wikipedia.org/wiki/Abramowitz_and_Stegun"""
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,36,"* Abramowitz and Stegun, 1964</a>."
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,37,* <br/>
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,38,* The coefficients of the standard Hermite polynomials grow very rapidly;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,39,"* in order to avoid overflows, each Hermite polynomial is normalized with"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,40,* respect to the underlying scalar product.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,41,* The initial interval for the application of the bisection method is
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,42,* based on the roots of the previous Hermite polynomial (interlacing).
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,43,* Upper and lower bounds of these roots are provided by
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,44,* <quote>
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,45,"*  I. Krasikov,"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,46,"*  <em>Nonnegative quadratic forms and bounds on orthogonal polynomials</em>,"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,47,"*  Journal of Approximation theory <b>111</b>, 31-49"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,48,* </quote>
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,50,* @since 3.3
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,51,* @version $Id$
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,53,public class HermiteRuleFactory extends BaseRuleFactory<Double> {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,54,/** &pi;<sup>1/2</sup> */
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,55,private static final double SQRT_PI = 1.77245385090551602729;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,56,/** &pi;<sup>-1/4</sup> */
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,57,private static final double H0 = 7.5112554446494248286e-1;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,58,/** &pi;<sup>-1/4</sup> &radic;2 */
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,59,private static final double H1 = 1.0622519320271969145;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,61,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,62,@Override
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,63,"protected Pair<Double[], Double[]> computeRule(int numberOfPoints)"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,64,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,66,if (numberOfPoints == 1) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,67,// Break recursion.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,68,"return new Pair<Double[], Double[]>(new Double[] { 0d },"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,69,new Double[] { SQRT_PI });
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,72,// Get previous rule.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,73,// If it has not been computed yet it will trigger a recursive call
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,74,// to this method.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,75,final int lastNumPoints = numberOfPoints - 1;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,76,final Double[] previousPoints = getRuleInternal(lastNumPoints).getFirst();
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,78,// Compute next rule.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,79,final Double[] points = new Double[numberOfPoints];
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,80,final Double[] weights = new Double[numberOfPoints];
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,82,final double sqrtTwoTimesLastNumPoints = FastMath.sqrt(2 * lastNumPoints);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,83,final double sqrtTwoTimesNumPoints = FastMath.sqrt(2 * numberOfPoints);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,85,// Find i-th root of H[n+1] by bracketing.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,86,final int iMax = numberOfPoints / 2;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,87,for (int i = 0; i < iMax; i++) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,88,// Lower-bound of the interval.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,89,double a = (i == 0) ? -sqrtTwoTimesLastNumPoints : previousPoints[i - 1].doubleValue();
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,90,// Upper-bound of the interval.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,91,double b = (iMax == 1) ? -0.5 : previousPoints[i].doubleValue();
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,93,// H[j-1](a)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,94,double hma = H0;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,95,// H[j](a)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,96,double ha = H1 * a;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,97,// H[j-1](b)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,98,double hmb = H0;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,99,// H[j](b)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,100,double hb = H1 * b;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,101,for (int j = 1; j < numberOfPoints; j++) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,102,// Compute H[j+1](a) and H[j+1](b)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,103,final double jp1 = j + 1;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,104,final double s = FastMath.sqrt(2 / jp1);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,105,final double sm = FastMath.sqrt(j / jp1);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,106,final double hpa = s * a * ha - sm * hma;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,107,final double hpb = s * b * hb - sm * hmb;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,108,hma = ha;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,109,ha = hpa;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,110,hmb = hb;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,111,hb = hpb;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,114,"// Now ha = H[n+1](a), and hma = H[n](a) (same holds for b)."
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,115,// Middle of the interval.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,116,double c = 0.5 * (a + b);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,117,// P[j-1](c)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,118,double hmc = H0;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,119,// P[j](c)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,120,double hc = H1 * c;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,121,boolean done = false;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,122,while (!done) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,123,done = b - a <= Math.ulp(c);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,124,hmc = H0;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,125,hc = H1 * c;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,126,for (int j = 1; j < numberOfPoints; j++) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,127,// Compute H[j+1](c)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,128,final double jp1 = j + 1;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,129,final double s = FastMath.sqrt(2 / jp1);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,130,final double sm = FastMath.sqrt(j / jp1);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,131,final double hpc = s * c * hc - sm * hmc;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,132,hmc = hc;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,133,hc = hpc;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,135,// Now h = H[n+1](c) and hm = H[n](c).
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,136,if (!done) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,137,if (ha * hc < 0) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,138,b = c;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,139,hmb = hmc;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,140,hb = hc;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,141,} else {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,142,a = c;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,143,hma = hmc;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,144,ha = hc;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,146,c = 0.5 * (a + b);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,149,final double d = sqrtTwoTimesNumPoints * hmc;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,150,final double w = 2 / (d * d);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,152,points[i] = c;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,153,weights[i] = w;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,155,final int idx = lastNumPoints - i;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,156,points[idx] = -c;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,157,weights[idx] = w;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,160,"// If ""numberOfPoints"" is odd, 0 is a root."
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,161,"// Note: as written, the test for oddness will work for negative"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,162,"// integers too (although it is not necessary here), preventing"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,163,// a FindBugs warning.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,164,if (numberOfPoints % 2 != 0) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,165,double hm = H0;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,166,for (int j = 1; j < numberOfPoints; j += 2) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,167,final double jp1 = j + 1;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,168,hm = -FastMath.sqrt(j / jp1) * hm;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,170,final double d = sqrtTwoTimesNumPoints * hm;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,171,final double w = 2 / (d * d);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,173,points[iMax] = 0d;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,174,weights[iMax] = w;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java,177,"return new Pair<Double[], Double[]>(points, weights);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,17,package org.apache.commons.math3.analysis.integration.gauss;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,19,import org.apache.commons.math3.analysis.UnivariateFunction;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,20,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,21,import org.apache.commons.math3.exception.NonMonotonicSequenceException;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,22,import org.apache.commons.math3.util.MathArrays;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,23,import org.apache.commons.math3.util.Pair;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,26,* This class's implements {@link #integrate(UnivariateFunction) integrate}
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,27,* method assuming that the integral is symmetric about 0.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,28,* This allows to reduce numerical errors.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,30,* @since 3.3
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,31,* @version $Id$
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,33,public class SymmetricGaussIntegrator extends GaussIntegrator {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,35,* Creates an integrator from the given {@code points} and {@code weights}.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,36,* The integration interval is defined by the first and last value of
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,37,* {@code points} which must be sorted in increasing order.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,39,* @param points Integration points.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,40,* @param weights Weights of the corresponding integration nodes.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,41,* @throws NonMonotonicSequenceException if the {@code points} are not
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,42,* sorted in increasing order.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,43,* @throws DimensionMismatchException if points and weights don't have the same length
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,45,"public SymmetricGaussIntegrator(double[] points,"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,46,double[] weights)
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,47,"throws NonMonotonicSequenceException, DimensionMismatchException {"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,48,"super(points, weights);"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,52,* Creates an integrator from the given pair of points (first element of
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,53,* the pair) and weights (second element of the pair.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,55,* @param pointsAndWeights Integration points and corresponding weights.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,56,* @throws NonMonotonicSequenceException if the {@code points} are not
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,57,* sorted in increasing order.
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,59,"* @see #SymmetricGaussIntegrator(double[], double[])"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,61,"public SymmetricGaussIntegrator(Pair<double[], double[]> pointsAndWeights)"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,62,throws NonMonotonicSequenceException {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,63,"this(pointsAndWeights.getFirst(), pointsAndWeights.getSecond());"
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,67,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,69,@Override
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,70,public double integrate(UnivariateFunction f) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,71,final int ruleLength = getNumberOfPoints();
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,73,if (ruleLength == 1) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,74,return getWeight(0) * f.value(0d);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,77,final int iMax = ruleLength / 2;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,78,double s = 0;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,79,double c = 0;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,80,for (int i = 0; i < iMax; i++) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,81,final double p = getPoint(i);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,82,final double w = getWeight(i);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,84,final double f1 = f.value(p);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,85,final double f2 = f.value(-p);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,87,final double y = w * (f1 + f2) - c;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,88,final double t = s + y;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,90,c = (t - s) - y;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,91,s = t;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,94,if (ruleLength % 2 == 1) {
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,95,final double w = getWeight(iMax);
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,97,final double y = w * f.value(0d) - c;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,98,final double t = s + y;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,100,c = (t - s) - y;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,101,s = t;
True,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java,104,return s;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,17,package org.apache.commons.math3.analysis.integration.gauss;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,19,import org.apache.commons.math3.analysis.UnivariateFunction;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,20,import org.apache.commons.math3.analysis.function.Constant;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,21,import org.apache.commons.math3.util.Pair;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,22,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,23,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,26,* Test for {@link GaussIntegrator} class.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,28,* @version $Id$
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,30,public class GaussIntegratorTest {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,31,@Test
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,32,public void testGetWeights() {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,33,"final double[] points = { 0, 1.2, 3.4 };"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,34,"final double[] weights = { 9.8, 7.6, 5.4 };"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,36,final GaussIntegrator integrator
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,37,"= new GaussIntegrator(new Pair<double[], double[]>(points, weights));"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,39,"Assert.assertEquals(weights.length, integrator.getNumberOfPoints());"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,41,for (int i = 0; i < integrator.getNumberOfPoints(); i++) {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,42,"Assert.assertEquals(weights[i], integrator.getWeight(i), 0d);"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,46,@Test
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,47,public void testGetPoints() {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,48,"final double[] points = { 0, 1.2, 3.4 };"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,49,"final double[] weights = { 9.8, 7.6, 5.4 };"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,51,final GaussIntegrator integrator
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,52,"= new GaussIntegrator(new Pair<double[], double[]>(points, weights));"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,54,"Assert.assertEquals(points.length, integrator.getNumberOfPoints());"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,56,for (int i = 0; i < integrator.getNumberOfPoints(); i++) {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,57,"Assert.assertEquals(points[i], integrator.getPoint(i), 0d);"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,61,@Test
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,62,public void testIntegrate() {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,63,"final double[] points = { 0, 1, 2, 3, 4, 5 };"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,64,"final double[] weights = { 1, 1, 1, 1, 1, 1 };"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,66,final GaussIntegrator integrator
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,67,"= new GaussIntegrator(new Pair<double[], double[]>(points, weights));"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,69,final double val = 123.456;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,70,final UnivariateFunction c = new Constant(val);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,72,final double s = integrator.integrate(c);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java,73,"Assert.assertEquals(points.length * val, s, 0d);"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,17,package org.apache.commons.math3.analysis.integration.gauss;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,19,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,20,import java.util.Collection;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,22,import org.junit.runner.RunWith;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,23,import org.junit.runners.Parameterized;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,24,import org.junit.runners.Parameterized.Parameters;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,25,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,28,* Test of the {@link HermiteRuleFactory}.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,29,* This parameterized test extends the standard test for Gaussian quadrature
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,30,"* rule, where each monomial is tested in turn."
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,31,"* Parametrization allows to test automatically 0, 1, ... , {@link #MAX_NUM_POINTS}"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,32,* quadrature rules.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,34,* @version $Id$
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,36,@RunWith(value=Parameterized.class)
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,37,public class HermiteParametricTest extends GaussianQuadratureAbstractTest {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,38,private static final double SQRT_PI = FastMath.sqrt(Math.PI);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,39,private static final GaussIntegratorFactory factory = new GaussIntegratorFactory();
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,42,* The highest order quadrature rule to be tested.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,44,public static final int MAX_NUM_POINTS = 30;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,47,"* Creates a new instance of this test, with the specified number of nodes"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,48,* for the Gauss-Hermite quadrature rule.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,50,* @param numberOfPoints Order of integration rule.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,51,* @param maxDegree Maximum degree of monomials to be tested.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,52,* @param eps Value of &epsilon;.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,53,* @param numUlps Value of the maximum relative error (in ulps).
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,55,"public HermiteParametricTest(int numberOfPoints,"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,56,"int maxDegree,"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,57,"double eps,"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,58,double numUlps) {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,59,"super(factory.hermite(numberOfPoints),"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,60,"maxDegree, eps, numUlps);"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,64,* Returns the collection of parameters to be passed to the constructor of
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,65,* this class.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,66,"* Gauss-Hermite quadrature rules of order 1, ..., {@link #MAX_NUM_POINTS}"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,67,* will be constructed.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,69,* @return the collection of parameters for this parameterized test.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,71,@Parameters
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,72,public static Collection<Object[]> getParameters() {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,73,final ArrayList<Object[]> parameters = new ArrayList<Object[]>();
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,74,for (int k = 1; k <= MAX_NUM_POINTS; k++) {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,75,"parameters.add(new Object[] { k, 2 * k - 1, Math.ulp(1d), 195 });"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,77,return parameters;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,80,@Override
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,81,public double getExpectedValue(final int n) {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,82,if (n % 2 == 1) {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,83,return 0;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,86,final int iMax = n / 2;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,87,double p = 1;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,88,double q = 1;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,89,for (int i = 0; i < iMax; i++) {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,90,p *= 2 * i + 1;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,91,q *= 2;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java,94,return p / q * SQRT_PI;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,17,package org.apache.commons.math3.analysis.integration.gauss;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,19,import org.apache.commons.math3.analysis.UnivariateFunction;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,20,import org.apache.commons.math3.analysis.function.Gaussian;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,21,import org.apache.commons.math3.distribution.RealDistribution;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,22,import org.apache.commons.math3.distribution.NormalDistribution;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,23,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,24,import org.apache.commons.math3.util.Pair;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,26,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,29,* Test of the {@link HermiteRuleFactory}.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,31,* @version $Id$
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,33,public class HermiteTest {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,34,private static final GaussIntegratorFactory factory = new GaussIntegratorFactory();
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,36,@Test
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,37,public void testNormalDistribution() {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,38,final double oneOverSqrtPi = 1 / FastMath.sqrt(Math.PI);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,40,final double mu = 12345.6789;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,41,final double sigma = 987.654321;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,42,"// By defintion, Gauss-Hermite quadrature readily provides the"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,43,// integral of the normal distribution density.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,44,final int numPoints = 1;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,46,// Change of variable:
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,47,//   y = (x - mu) / (sqrt(2) *  sigma)
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,48,// such that the integrand
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,49,"//   N(x, mu, sigma)"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,50,// is transformed to
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,51,//   f(y) * exp(-y^2)
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,52,final UnivariateFunction f = new UnivariateFunction() {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,53,@Override
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,54,public double value(double y) {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,55,return oneOverSqrtPi; // Constant function.
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,59,final GaussIntegrator integrator = factory.hermite(numPoints);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,60,final double result = integrator.integrate(f);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,61,final double expected = 1;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,62,"Assert.assertEquals(expected, result, Math.ulp(expected));"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,65,@Test
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,66,public void testNormalMean() {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,67,final double sqrtTwo = FastMath.sqrt(2);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,68,final double oneOverSqrtPi = 1 / FastMath.sqrt(Math.PI);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,70,final double mu = 12345.6789;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,71,final double sigma = 987.654321;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,72,final int numPoints = 5;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,74,// Change of variable:
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,75,//   y = (x - mu) / (sqrt(2) *  sigma)
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,76,// such that the integrand
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,77,"//   x * N(x, mu, sigma)"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,78,// is transformed to
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,79,//   f(y) * exp(-y^2)
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,80,final UnivariateFunction f = new UnivariateFunction() {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,81,@Override
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,82,public double value(double y) {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,83,return oneOverSqrtPi * (sqrtTwo * sigma * y + mu);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,87,final GaussIntegrator integrator = factory.hermite(numPoints);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,88,final double result = integrator.integrate(f);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,89,final double expected = mu;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,90,"Assert.assertEquals(expected, result, Math.ulp(expected));"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,93,@Test
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,94,public void testNormalVariance() {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,95,final double twoOverSqrtPi = 2 / FastMath.sqrt(Math.PI);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,97,final double mu = 12345.6789;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,98,final double sigma = 987.654321;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,99,final double sigma2 = sigma * sigma;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,100,final int numPoints = 5;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,102,// Change of variable:
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,103,//   y = (x - mu) / (sqrt(2) *  sigma)
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,104,// such that the integrand
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,105,"//   (x - mu)^2 * N(x, mu, sigma)"
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,106,// is transformed to
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,107,//   f(y) * exp(-y^2)
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,108,final UnivariateFunction f = new UnivariateFunction() {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,109,@Override
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,110,public double value(double y) {
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,111,return twoOverSqrtPi * sigma2 * y * y;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,115,final GaussIntegrator integrator = factory.hermite(numPoints);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,116,final double result = integrator.integrate(f);
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,117,final double expected = sigma2;
True,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java,118,"Assert.assertEquals(expected, result, 10 * Math.ulp(expected));"

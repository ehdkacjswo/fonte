is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,289, @param source the array to be copied
False,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,290, @param newLen the length of the copy to be returned
True,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,289,* @param source Array to be copied.
True,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,290,* @param newLen Length of the copy to be returned.
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,151,** Eighthes.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,151,/** Eighths.
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,157,* Table of 2^((n+2)/3) */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,157,/** Table of 2^((n+2)/3) */
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,159,".7937005259840998,"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,160,".0,"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,161,".2599210498948732,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,159,"0.7937005259840998,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,160,"1.0,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,161,"1.2599210498948732,"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,349,ouble denom = 1.0+ya;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,350,ouble denomr = 1.0/denom;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,349,double denom = 1.0 + ya;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,350,double denomr = 1.0 / denom;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,352,ouble ratio = ya*denomr;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,353,"ouble ra, rb;"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,352,double ratio = ya * denomr;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,355,a = ratio + temp - temp;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,356,b = ratio - ra;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,354,double ra = ratio + temp - temp;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,355,double rb = ratio - ra;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,759, @param hiPrecOut[] receive high precision result for -1.0 < x < 1.0
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,758,* @param hiPrecOut receive high precision result for -1.0 < x < 1.0
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,896,f (hiPrecOut != null) {
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,897,iPrecOut[0] = ya;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,898,iPrecOut[1] = yb;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,895,if (hiPrecOut != null) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,896,hiPrecOut[0] = ya;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,897,hiPrecOut[1] = yb;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3146,ouble p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3145,double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3161,/ est should now be good to about 15 bits of precision.   Do 2 rounds of
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3160,// est should now be good to about 15 bits of precision.   Do 2 rounds of
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3164,inal double xs = x / (p2*p2*p2);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3163,final double xs = x / (p2*p2*p2);
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3177,b += (za - temp2);
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3176,zb += za - temp2;
False,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,306, @param source the array to be copied
False,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,307, @param newLen the length of the copy to be returned
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,306,* @param source Array to be copied.
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,307,* @param newLen Length of the copy to be returned.

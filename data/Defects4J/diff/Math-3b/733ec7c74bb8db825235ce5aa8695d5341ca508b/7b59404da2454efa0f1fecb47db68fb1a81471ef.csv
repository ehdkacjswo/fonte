is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,17,package org.apache.commons.math3.random;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,19,import java.io.BufferedReader;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,20,import java.io.IOException;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,21,import java.io.InputStream;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,22,import java.io.InputStreamReader;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,23,import java.util.Arrays;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,24,import java.util.NoSuchElementException;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,25,import java.util.StringTokenizer;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,27,import org.apache.commons.math3.exception.MathInternalError;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,28,import org.apache.commons.math3.exception.MathParseException;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,29,import org.apache.commons.math3.exception.NotPositiveException;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,30,import org.apache.commons.math3.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,31,import org.apache.commons.math3.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,32,import org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,35,* Implementation of a Sobol sequence.
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,36,* <p>
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,37,"* A Sobol sequence is a low-discrepancy sequence with the property that for all values of N,"
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,38,"* its subsequence (x1, ... xN) has a low discrepancy. It can be used to generate pseudo-random"
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,39,"* points in a space S, which are equi-distributed."
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,40,* <p>
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,41,* The implementation already comes with support for up to 1000 dimensions with direction numbers
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,42,"* calculated from <a href=""http://web.maths.unsw.edu.au/~fkuo/sobol/"">Stephen Joe and Frances Kuo</a>."
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,43,* <p>
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,44,* The generator supports two modes:
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,45,* <ul>
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,46,*   <li>sequential generation of points: {@link #nextVector()}</li>
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,47,*   <li>random access to the i-th point in the sequence: {@link #skipTo(int)}</li>
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,48,* </ul>
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,50,"* @see <a href=""http://en.wikipedia.org/wiki/Sobol_sequence"">Sobol sequence (Wikipedia)</a>"
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,51,"* @see <a href=""http://web.maths.unsw.edu.au/~fkuo/sobol/"">Sobol sequence direction numbers</a>"
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,53,* @version $Id$
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,54,* @since 4.0
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,56,public class SobolSequenceGenerator implements RandomVectorGenerator {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,58,/** The number of bits to use. */
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,59,private static final int BITS = 52;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,61,/** The scaling factor. */
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,62,"private static final double SCALE = FastMath.pow(2, BITS);"
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,64,/** The maximum supported space dimension. */
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,65,private static final int MAX_DIMENSION = 1000;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,67,/** The resource containing the direction numbers. */
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,68,"private static final String RESOURCE_NAME = ""/assets/org/apache/commons/math3/random/new-joe-kuo-6.1000"";"
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,70,/** Space dimension. */
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,71,private final int dimension;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,73,/** The current index in the sequence. */
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,74,private int count = 0;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,76,/** The direction vector for each component. */
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,77,private final long[][] direction;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,79,/** The current state. */
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,80,private final long[] x;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,83,* Construct a new Sobol sequence generator for the given space dimension.
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,85,* @param dimension the space dimension
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,86,"* @throws OutOfRangeException if the space dimension is outside the allowed range of [1, 1000]"
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,88,public SobolSequenceGenerator(final int dimension) throws OutOfRangeException {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,89,if (dimension < 1 || dimension > MAX_DIMENSION) {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,90,"throw new OutOfRangeException(dimension, 1, MAX_DIMENSION);"
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,93,// initialize the other dimensions with direction numbers from a resource
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,94,final InputStream is = getClass().getResourceAsStream(RESOURCE_NAME);
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,95,if (is == null) {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,96,throw new MathInternalError();
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,99,this.dimension = dimension;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,101,// init data structures
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,102,direction = new long[dimension][BITS + 1];
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,103,x = new long[dimension];
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,105,try {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,106,initFromStream(is);
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,107,} catch (IOException e) {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,108,// the internal resource file could not be read -> should not happen
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,109,throw new MathInternalError();
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,110,} catch (MathParseException e) {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,111,// the internal resource file could not be parsed -> should not happen
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,112,throw new MathInternalError();
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,117,* Construct a new Sobol sequence generator for the given space dimension with
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,118,* direction vectors loaded from the given stream.
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,119,* <p>
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,120,* The expected format is identical to the files available from
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,121,"* <a href=""http://web.maths.unsw.edu.au/~fkuo/sobol/"">Stephen Joe and Frances Kuo</a>."
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,122,* The first line will be ignored as it is assumed to contain only the column headers.
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,123,* The columns are:
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,124,* <ul>
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,125,*  <li>d: the dimension</li>
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,126,*  <li>s: the degree of the primitive polynomial</li>
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,127,*  <li>a: the number representing the coefficients</li>
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,128,*  <li>m: the list of initial direction numbers</li>
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,129,* </ul>
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,130,* Example:
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,131,* <pre>
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,132,* d       s       a       m_i
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,133,* 2       1       0       1
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,134,* 3       2       1       1 3
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,135,* </pre>
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,137,* @param dimension the space dimension
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,138,* @param is the stream to read the direction vectors from
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,139,* @throws NotStrictlyPositiveException if the space dimension is &lt; 1
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,140,"* @throws OutOfRangeException if the space dimension is outside the range [1, max], where"
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,141,*   max refers to the maximum dimension found in the input stream
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,142,* @throws MathParseException if the content in the stream could not be parsed successfully
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,143,* @throws IOException if an error occurs while reading from the input stream
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,145,"public SobolSequenceGenerator(final int dimension, final InputStream is)"
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,146,"throws NotStrictlyPositiveException, MathParseException, IOException {"
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,148,if (dimension < 1) {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,149,throw new NotStrictlyPositiveException(dimension);
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,152,this.dimension = dimension;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,154,// init data structures
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,155,direction = new long[dimension][BITS + 1];
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,156,x = new long[dimension];
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,158,// initialize the other dimensions with direction numbers from the stream
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,159,int lastDimension = initFromStream(is);
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,160,if (lastDimension < dimension) {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,161,"throw new OutOfRangeException(dimension, 1, lastDimension);"
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,166,* Load the direction vector for each dimension from the given stream.
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,168,* @param is the input stream to read the direction vector from
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,169,* @return the last dimension that has been read from the input stream
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,170,* @throws IOException if the stream could not be read
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,171,* @throws MathParseException if the content could not be parsed successfully
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,173,"private int initFromStream(final InputStream is) throws MathParseException, IOException {"
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,175,// special case: dimension 1 -> use unit initialization
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,176,for (int i = 1; i <= BITS; i++) {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,177,direction[0][i] = 1l << (BITS - i);
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,180,final BufferedReader reader = new BufferedReader(new InputStreamReader(is));
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,181,int dim = -1;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,183,try {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,184,// ignore first line
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,185,reader.readLine();
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,187,int lineNumber = 2;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,188,int index = 1;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,189,String line = null;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,190,while ( (line = reader.readLine()) != null) {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,191,"StringTokenizer st = new StringTokenizer(line, "" "");"
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,192,try {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,193,dim = Integer.valueOf(st.nextToken());
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,194,if (dim >= 2 && dim <= dimension) { // we have found the right dimension
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,195,final int s = Integer.valueOf(st.nextToken());
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,196,final int a = Integer.valueOf(st.nextToken());
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,197,final int[] m = new int[s + 1];
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,198,for (int i = 1; i <= s; i++) {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,199,m[i] = Integer.valueOf(st.nextToken());
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,201,"initDirectionVector(index++, a, m);"
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,204,if (dim > dimension) {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,205,return dim;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,207,} catch (NoSuchElementException e) {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,208,"throw new MathParseException(line, lineNumber);"
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,209,} catch (NumberFormatException e) {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,210,"throw new MathParseException(line, lineNumber);"
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,212,lineNumber++;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,214,} finally {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,215,reader.close();
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,218,return dim;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,222,* Calculate the direction numbers from the given polynomial.
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,224,"* @param d the dimension, zero-based"
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,225,* @param a the coefficients of the primitive polynomial
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,226,* @param m the initial direction numbers
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,228,"private void initDirectionVector(final int d, final int a, final int[] m) {"
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,229,final int s = m.length - 1;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,230,for (int i = 1; i <= s; i++) {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,231,direction[d][i] = ((long) m[i]) << (BITS - i);
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,233,for (int i = s + 1; i <= BITS; i++) {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,234,direction[d][i] = direction[d][i - s] ^ (direction[d][i - s] >> s);
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,235,for (int k = 1; k <= s - 1; k++) {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,236,direction[d][i] ^= ((a >> (s - 1 - k)) & 1) * direction[d][i - k];
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,241,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,242,public double[] nextVector() {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,243,final double[] v = new double[dimension];
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,244,if (count == 0) {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,245,count++;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,246,return v;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,249,// find the index c of the rightmost 0
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,250,int c = 1;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,251,int value = count - 1;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,252,while ((value & 1) == 1) {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,253,value >>= 1;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,254,c++;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,257,for (int i = 0; i < dimension; i++) {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,258,x[i] = x[i] ^ direction[i][c];
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,259,v[i] = (double) x[i] / SCALE;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,261,count++;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,262,return v;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,266,* Skip to the i-th point in the Sobol sequence.
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,267,* <p>
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,268,* This operation can be performed in O(1).
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,270,* @param index the index in the sequence to skip to
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,271,* @return the i-th point in the Sobol sequence
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,272,* @throws NotPositiveException if index &lt; 0
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,274,public double[] skipTo(final int index) throws NotPositiveException {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,275,if (index == 0) {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,276,// reset x vector
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,277,"Arrays.fill(x, 0);"
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,278,} else {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,279,final int i = index - 1;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,280,final long grayCode = i ^ (i / 2);
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,281,for (int j = 0; j < dimension; j++) {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,282,long result = 0;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,283,for (int k = 1; k <= BITS; k++) {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,284,final long shift = grayCode >> (k - 1);
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,285,if (shift == 0) {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,286,"// stop, as all remaining bits will be zero"
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,287,break;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,289,// the k-th bit of i
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,290,final long ik = shift & 1;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,291,result ^= ik * direction[j][k];
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,293,x[j] = result;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,296,count = index;
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,297,return nextVector();
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,301,* Returns the index i of the next point in the Sobol sequence that will be returned
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,302,* by calling {@link #nextVector()}.
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,304,* @return the index of the next point
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,306,public int getNextIndex() {
True,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java,307,return count;
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,17,package org.apache.commons.math3.random;
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,19,import static org.junit.Assert.*;
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,21,import java.io.InputStream;
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,23,import org.apache.commons.math3.exception.OutOfRangeException;
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,24,import org.junit.Before;
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,27,public class SobolSequenceGeneratorTest {
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,29,private double[][] referenceValues = {
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,30,"{ 0.0, 0.0, 0.0 },"
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,31,"{ 0.5, 0.5, 0.5 },"
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,32,"{ 0.75, 0.25, 0.25 },"
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,33,"{ 0.25, 0.75, 0.75 },"
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,34,"{ 0.375, 0.375, 0.625 },"
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,35,"{ 0.875, 0.875, 0.125 },"
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,36,"{ 0.625, 0.125, 0.875 },"
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,37,"{ 0.125, 0.625, 0.375 },"
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,38,"{ 0.1875, 0.3125, 0.9375 },"
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,39,"{ 0.6875, 0.8125, 0.4375 }"
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,42,private SobolSequenceGenerator generator;
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,44,@Before
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,45,public void setUp() {
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,46,generator = new SobolSequenceGenerator(3);
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,49,@Test
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,50,public void test3DReference() {
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,51,for (int i = 0; i < referenceValues.length; i++) {
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,52,double[] result = generator.nextVector();
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,53,"assertArrayEquals(referenceValues[i], result, 1e-6);"
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,54,"assertEquals(i + 1, generator.getNextIndex());"
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,58,@Test
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,59,public void testConstructor() {
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,60,try {
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,61,new SobolSequenceGenerator(0);
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,62,fail();
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,63,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,64,// expected
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,67,try {
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,68,new SobolSequenceGenerator(1001);
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,69,fail();
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,70,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,71,// expected
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,75,@Test
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,76,public void testConstructor2() throws Exception{
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,77,try {
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,78,"final String RESOURCE_NAME = ""/assets/org/apache/commons/math3/random/new-joe-kuo-6.1000"";"
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,79,final InputStream is = getClass().getResourceAsStream(RESOURCE_NAME);
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,80,"new SobolSequenceGenerator(1001, is);"
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,81,fail();
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,82,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,83,// expected
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,86,try {
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,87,new SobolSequenceGenerator(1001);
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,88,fail();
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,89,} catch (OutOfRangeException e) {
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,90,// expected
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,94,@Test
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,95,public void testSkip() {
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,96,double[] result = generator.skipTo(5);
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,97,"assertArrayEquals(referenceValues[5], result, 1e-6);"
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,98,"assertEquals(6, generator.getNextIndex());"
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,100,for (int i = 6; i < referenceValues.length; i++) {
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,101,result = generator.nextVector();
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,102,"assertArrayEquals(referenceValues[i], result, 1e-6);"
True,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java,103,"assertEquals(i + 1, generator.getNextIndex());"

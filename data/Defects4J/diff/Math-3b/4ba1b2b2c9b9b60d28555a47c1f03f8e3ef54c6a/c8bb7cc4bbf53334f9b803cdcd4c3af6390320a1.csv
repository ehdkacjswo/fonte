is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,26," <p>If all solutions are accepted ({@link #EITHER_SIDE}), then the solution"
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,26,"* <p>If all solutions are accepted ({@link #ANY_SIDE}), then the solution"
False,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,48,"ITHER_SIDE,"
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,48,"ANY_SIDE,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,20,import org.apache.commons.math.analysis.UnivariateRealFunction;
False,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,37, {@link AllowedSolutions#EITHER_SIDE EITHER_SIDE} as default for the allowed
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,39,* {@link AllowedSolutions#ANY_SIDE ANY_SIDE} as default for the allowed
False,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,44,ublic interface BracketedUnivariateRealSolver extends UnivariateRealSolver {
False,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,45,** Returns the kind of solutions that the root-finding algorithm may
False,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,46, accept as solutions.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,46,public interface BracketedUnivariateRealSolver<FUNC extends UnivariateRealFunction>
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,47,extends BaseUnivariateRealSolver<FUNC> {
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,50,* Solve for a zero in the given interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,51,* A solver may require that the interval brackets a single zero root.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,52,* Solvers that do require bracketing should be able to handle the case
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,53,* where one of the endpoints is itself a root.
False,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,48, @return the kind of solutions that the root-finding algorithm may
False,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,49, accept as solutions
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,55,* @param maxEval Maximum number of evaluations.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,56,* @param f Function to solve.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,57,* @param min Lower bound for the interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,58,* @param max Upper bound for the interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,59,* @param allowedSolutions the kind of solutions that the root-finding algorithm may
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,60,* accept as solutions.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,61,* @return a value where the function is zero.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,62,* @throws org.apache.commons.math.exception.MathIllegalArgumentException
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,63,* if the arguments do not satisfy the requirements specified by the solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,64,* @throws org.apache.commons.math.exception.TooManyEvaluationsException if
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,65,* the allowed number of evaluations is exceeded.
False,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,51,llowedSolutions getAllowedSolutions();
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,67,"double solve(int maxEval, FUNC f, double min, double max,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,68,AllowedSolutions allowedSolutions);
False,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,53,** Sets the kind of solutions that the root-finding algorithm may accept
False,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,54, as solutions.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,71,"* Solve for a zero in the given interval, start at {@code startValue}."
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,72,* A solver may require that the interval brackets a single zero root.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,73,* Solvers that do require bracketing should be able to handle the case
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,74,* where one of the endpoints is itself a root.
False,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,56, @param allowedSolutions the kind of solutions that the root-finding
False,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,57, algorithm may accept as solutions
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,76,* @param maxEval Maximum number of evaluations.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,77,* @param f Function to solve.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,78,* @param min Lower bound for the interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,79,* @param max Upper bound for the interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,80,* @param startValue Start value to use.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,81,* @param allowedSolutions the kind of solutions that the root-finding algorithm may
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,82,* accept as solutions.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,83,* @return a value where the function is zero.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,84,* @throws org.apache.commons.math.exception.MathIllegalArgumentException
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,85,* if the arguments do not satisfy the requirements specified by the solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,86,* @throws org.apache.commons.math.exception.TooManyEvaluationsException if
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,87,* the allowed number of evaluations is exceeded.
False,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,59,oid setAllowedSolutions(AllowedSolutions allowedSolutions);
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,89,"double solve(int maxEval, FUNC f, double min, double max, double startValue,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.java,90,AllowedSolutions allowedSolutions);
False,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,41,ublic class IllinoisSolver extends BaseBracketedSecantSolver {
True,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java,41,public class IllinoisSolver extends BaseSecantSolver {
False,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,43,ublic class PegasusSolver extends BaseBracketedSecantSolver {
True,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java,43,public class PegasusSolver extends BaseSecantSolver {
False,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,38,ublic class RegulaFalsiSolver extends BaseBracketedSecantSolver {
True,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java,38,public class RegulaFalsiSolver extends BaseSecantSolver {
False,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,165,f (!(solver instanceof BracketedUnivariateRealSolver)) return;
False,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,166,(BracketedUnivariateRealSolver)solver).setAllowedSolutions(AllowedSolutions.LEFT_SIDE);
False,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,171,"ouble solution = solver.solve(100, f, left, right);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,172,ssert.assertTrue(solution <= 0.0);
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,169,"double solution = getSolution(solver, 100, f, left, right, AllowedSolutions.LEFT_SIDE);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,170,if (!Double.isNaN(solution)) {
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,171,Assert.assertTrue(solution <= 0.0);
False,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,184,f (!(solver instanceof BracketedUnivariateRealSolver)) return;
False,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,185,(BracketedUnivariateRealSolver)solver).setAllowedSolutions(AllowedSolutions.RIGHT_SIDE);
False,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,190,"ouble solution = solver.solve(100, f, left, right);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,191,ssert.assertTrue(solution >= 0.0);
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,188,"double solution = getSolution(solver, 100, f, left, right, AllowedSolutions.RIGHT_SIDE);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,189,if (!Double.isNaN(solution)) {
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,190,Assert.assertTrue(solution >= 0.0);
False,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,202,f (!(solver instanceof BracketedUnivariateRealSolver)) return;
False,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,203,(BracketedUnivariateRealSolver)solver).setAllowedSolutions(AllowedSolutions.BELOW_SIDE);
False,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,208,"ouble solution = solver.solve(100, f, left, right);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,209,ssert.assertTrue(f.value(solution) <= 0.0);
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,206,"double solution = getSolution(solver, 100, f, left, right, AllowedSolutions.BELOW_SIDE);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,207,if (!Double.isNaN(solution)) {
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,208,Assert.assertTrue(f.value(solution) <= 0.0);
False,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,221,f (!(solver instanceof BracketedUnivariateRealSolver)) return;
False,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,222,(BracketedUnivariateRealSolver)solver).setAllowedSolutions(AllowedSolutions.ABOVE_SIDE);
False,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,227,"ouble solution = solver.solve(100, f, left, right);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,228,ssert.assertTrue(f.value(solution) >= 0.0);
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,225,"double solution = getSolution(solver, 100, f, left, right, AllowedSolutions.ABOVE_SIDE);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,226,if (!Double.isNaN(solution)) {
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,227,Assert.assertTrue(f.value(solution) >= 0.0);
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,236,"private double getSolution(UnivariateRealSolver solver, int maxEval, UnivariateRealFunction f,"
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,237,"double left, double right, AllowedSolutions allowedSolutions) {"
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,238,try {
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,239,"@SuppressWarnings(""unchecked"")"
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,240,BracketedUnivariateRealSolver<UnivariateRealFunction> bracketing =
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,241,(BracketedUnivariateRealSolver<UnivariateRealFunction>) solver;
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,242,"return bracketing.solve(100, f, left, right, allowedSolutions);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,243,} catch (ClassCastException cce) {
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,244,"double baseRoot = solver.solve(maxEval, f, left, right);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,245,if ((baseRoot <= left) || (baseRoot >= right)) {
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,246,// the solution slipped out of interval
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,247,return Double.NaN;
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,249,PegasusSolver bracketing =
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,250,"new PegasusSolver(solver.getRelativeAccuracy(), solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,251,"return UnivariateRealSolverUtils.forceSide(maxEval - solver.getEvaluations(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,252,"f, bracketing, baseRoot, left, right,"
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,253,allowedSolutions);

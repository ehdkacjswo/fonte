is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,222,inal FieldVector3D<T> u3 = u1.crossProduct(u2).normalize();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,223,2 = u3.crossProduct(u1).normalize();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,222,"final FieldVector3D<T> u3 = FieldVector3D.crossProduct(u1, u2).normalize();"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,223,"u2 = FieldVector3D.crossProduct(u3, u1).normalize();"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,228,inal FieldVector3D<T> v3 = v1.crossProduct(v2).normalize();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,229,2 = v3.crossProduct(v1).normalize();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,228,"final FieldVector3D<T> v3 = FieldVector3D.crossProduct(v1, v2).normalize();"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,229,"v2 = FieldVector3D.crossProduct(v3, v1).normalize();"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,272,inal T dot = u.dotProduct(v);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,272,"final T dot = FieldVector3D.dotProduct(u, v);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,287,inal FieldVector3D<T> q = v.crossProduct(u);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,287,"final FieldVector3D<T> q = FieldVector3D.crossProduct(v, u);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,834,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,931,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,991,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1049,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1177,* @param <T> the type of the field elements
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,566,** Compute the angular separation between the instance and another vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,566,/** Compute the angular separation between two vectors.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,572, @param v second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,573, @return angular separation between the instance and v
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,572,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,573,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,574,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,575,* @return angular separation between v1 and v2
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,576,ublic T angle(FieldVector3D<T> v) throws MathArithmeticException {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,578,"public static <T extends ExtendedFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,579,throws MathArithmeticException {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,578,inal T normProduct = getNorm().multiply(v.getNorm());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,581,final T normProduct = v1.getNorm().multiply(v2.getNorm());
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,583,inal T dot = dotProduct(v);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,586,"final T dot = dotProduct(v1, v2);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,587,ieldVector3D<T> v3 = crossProduct(v);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,590,"FieldVector3D<T> v3 = crossProduct(v1, v2);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,602,/** Compute the angular separation between two vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,603,* <p>This method computes the angular separation between two
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,604,* vectors using the dot product for well separated vectors and the
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,605,* cross product for almost aligned vectors. This allows to have a
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,606,"* good accuracy in all cases, even for vectors very close to each"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,607,* other.</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,608,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,609,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,610,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,611,* @return angular separation between v1 and v2
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,612,* @exception MathArithmeticException if either vector has a null norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,614,"public static <T extends ExtendedFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,615,throws MathArithmeticException {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,617,final T normProduct = v1.getNorm().multiply(v2.getNorm());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,618,if (normProduct.getReal() == 0) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,619,throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,622,"final T dot = dotProduct(v1, v2);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,623,final double threshold = normProduct.getReal() * 0.9999;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,624,if ((dot.getReal() < -threshold) || (dot.getReal() > threshold)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,625,"// the vectors are almost aligned, compute using the sine"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,626,"FieldVector3D<T> v3 = crossProduct(v1, v2);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,627,if (dot.getReal() >= 0) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,628,return v3.getNorm().divide(normProduct).asin();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,630,return v3.getNorm().divide(normProduct).asin().subtract(FastMath.PI).negate();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,633,// the vectors are sufficiently separated to use the cosine
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,634,return dot.divide(normProduct).acos();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,638,/** Compute the angular separation between two vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,639,* <p>This method computes the angular separation between two
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,640,* vectors using the dot product for well separated vectors and the
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,641,* cross product for almost aligned vectors. This allows to have a
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,642,"* good accuracy in all cases, even for vectors very close to each"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,643,* other.</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,644,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,645,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,646,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,647,* @return angular separation between v1 and v2
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,648,* @exception MathArithmeticException if either vector has a null norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,650,"public static <T extends ExtendedFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,651,throws MathArithmeticException {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,652,"return angle(v2, v1);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,934,/** Compute the dot-product of two vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,935,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,936,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,937,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,938,* @return the dot product v1.v2
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,940,"public static <T extends ExtendedFieldElement<T>> T dotProduct(final FieldVector3D<T> v1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,941,final FieldVector3D<T> v2) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,942,return v1.dotProduct(v2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,945,/** Compute the dot-product of two vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,946,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,947,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,948,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,949,* @return the dot product v1.v2
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,951,"public static <T extends ExtendedFieldElement<T>> T dotProduct(final FieldVector3D<T> v1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,952,final Vector3D v2) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,953,return v1.dotProduct(v2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,956,/** Compute the dot-product of two vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,957,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,958,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,959,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,960,* @return the dot product v1.v2
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,962,"public static <T extends ExtendedFieldElement<T>> T dotProduct(final Vector3D v1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,963,final FieldVector3D<T> v2) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,964,return v2.dotProduct(v1);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,967,/** Compute the cross-product of two vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,968,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,969,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,970,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,971,* @return the cross product v1 ^ v2 as a new Vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,973,"public static <T extends ExtendedFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,974,final FieldVector3D<T> v2) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,975,return v1.crossProduct(v2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,978,/** Compute the cross-product of two vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,979,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,980,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,981,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,982,* @return the cross product v1 ^ v2 as a new Vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,984,"public static <T extends ExtendedFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,985,final Vector3D v2) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,986,return v1.crossProduct(v2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,989,/** Compute the cross-product of two vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,990,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,991,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,992,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,993,* @return the cross product v1 ^ v2 as a new Vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,995,"public static <T extends ExtendedFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,996,final FieldVector3D<T> v2) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,997,"return new FieldVector3D<T>(v2.x.linearCombination(v1.getY(), v2.z, -v1.getZ(), v2.y),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,998,"v2.y.linearCombination(v1.getZ(), v2.x, -v1.getX(), v2.z),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,999,"v2.z.linearCombination(v1.getX(), v2.y, -v1.getY(), v2.x));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1002,/** Compute the distance between two vectors according to the L<sub>1</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1003,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1004,* <code>v1.subtract(v2).getNorm1()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1005,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1006,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1007,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1008,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1009,* @return the distance between v1 and v2 according to the L<sub>1</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1011,"public static <T extends ExtendedFieldElement<T>> T distance1(final FieldVector3D<T> v1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1012,final FieldVector3D<T> v2) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1013,return v1.distance1(v2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1016,/** Compute the distance between two vectors according to the L<sub>1</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1017,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1018,* <code>v1.subtract(v2).getNorm1()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1019,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1020,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1021,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1022,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1023,* @return the distance between v1 and v2 according to the L<sub>1</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1025,"public static <T extends ExtendedFieldElement<T>> T distance1(final FieldVector3D<T> v1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1026,final Vector3D v2) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1027,return v1.distance1(v2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1030,/** Compute the distance between two vectors according to the L<sub>1</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1031,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1032,* <code>v1.subtract(v2).getNorm1()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1033,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1034,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1035,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1036,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1037,* @return the distance between v1 and v2 according to the L<sub>1</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1039,"public static <T extends ExtendedFieldElement<T>> T distance1(final Vector3D v1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1040,final FieldVector3D<T> v2) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1041,return v2.distance1(v1);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1044,/** Compute the distance between two vectors according to the L<sub>2</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1045,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1046,* <code>v1.subtract(v2).getNorm()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1047,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1048,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1049,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1050,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1051,* @return the distance between v1 and v2 according to the L<sub>2</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1053,"public static <T extends ExtendedFieldElement<T>> T distance(final FieldVector3D<T> v1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1054,final FieldVector3D<T> v2) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1055,return v1.distance(v2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1058,/** Compute the distance between two vectors according to the L<sub>2</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1059,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1060,* <code>v1.subtract(v2).getNorm()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1061,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1062,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1063,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1064,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1065,* @return the distance between v1 and v2 according to the L<sub>2</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1067,"public static <T extends ExtendedFieldElement<T>> T distance(final FieldVector3D<T> v1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1068,final Vector3D v2) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1069,return v1.distance(v2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1072,/** Compute the distance between two vectors according to the L<sub>2</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1073,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1074,* <code>v1.subtract(v2).getNorm()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1075,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1076,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1077,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1078,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1079,* @return the distance between v1 and v2 according to the L<sub>2</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1081,"public static <T extends ExtendedFieldElement<T>> T distance(final Vector3D v1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1082,final FieldVector3D<T> v2) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1083,return v2.distance(v1);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1086,/** Compute the distance between two vectors according to the L<sub>&infin;</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1087,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1088,* <code>v1.subtract(v2).getNormInf()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1089,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1090,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1091,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1092,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1093,* @return the distance between v1 and v2 according to the L<sub>&infin;</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1095,"public static <T extends ExtendedFieldElement<T>> T distanceInf(final FieldVector3D<T> v1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1096,final FieldVector3D<T> v2) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1097,return v1.distanceInf(v2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1100,/** Compute the distance between two vectors according to the L<sub>&infin;</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1101,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1102,* <code>v1.subtract(v2).getNormInf()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1103,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1104,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1105,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1106,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1107,* @return the distance between v1 and v2 according to the L<sub>&infin;</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1109,"public static <T extends ExtendedFieldElement<T>> T distanceInf(final FieldVector3D<T> v1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1110,final Vector3D v2) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1111,return v1.distanceInf(v2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1114,/** Compute the distance between two vectors according to the L<sub>&infin;</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1115,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1116,* <code>v1.subtract(v2).getNormInf()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1117,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1118,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1119,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1120,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1121,* @return the distance between v1 and v2 according to the L<sub>&infin;</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1123,"public static <T extends ExtendedFieldElement<T>> T distanceInf(final Vector3D v1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1124,final FieldVector3D<T> v2) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1125,return v2.distanceInf(v1);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1128,/** Compute the square of the distance between two vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1129,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1130,* <code>v1.subtract(v2).getNormSq()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1131,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1132,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1133,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1134,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1135,* @return the square of the distance between v1 and v2
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1137,"public static <T extends ExtendedFieldElement<T>> T distanceSq(final FieldVector3D<T> v1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1138,final FieldVector3D<T> v2) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1139,return v1.distanceSq(v2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1142,/** Compute the square of the distance between two vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1143,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1144,* <code>v1.subtract(v2).getNormSq()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1145,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1146,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1147,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1148,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1149,* @return the square of the distance between v1 and v2
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1151,"public static <T extends ExtendedFieldElement<T>> T distanceSq(final FieldVector3D<T> v1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1152,final Vector3D v2) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1153,return v1.distanceSq(v2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1156,/** Compute the square of the distance between two vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1157,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1158,* <code>v1.subtract(v2).getNormSq()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1159,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1160,* @param v1 first vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1161,* @param v2 second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1162,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1163,* @return the square of the distance between v1 and v2
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1165,"public static <T extends ExtendedFieldElement<T>> T distanceSq(final Vector3D v1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1166,final FieldVector3D<T> v2) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,1167,return v2.distanceSq(v1);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,153,"ssert.assertEquals(-1, r.getAxis().dotProduct(reverted.getAxis()).getReal(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,153,"Assert.assertEquals(-1, FieldVector3D.dotProduct(r.getAxis(), reverted.getAxis()).getReal(), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,188,"f (axis.dotProduct(createVector(0, 0, 1)).getReal() > 0) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,188,"if (FieldVector3D.dotProduct(axis, createVector(0, 0, 1)).getReal() > 0) {"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,201," = new FieldRotation<DerivativeStructure>(u1, u2, u1, u1.crossProduct(u2));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,201,"r = new FieldRotation<DerivativeStructure>(u1, u2, u1, FieldVector3D.crossProduct(u1, u2));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,480,"Assert.assertEquals(0.288, r1.toRotation().getQ0(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,481,"Assert.assertEquals(0.384, r1.toRotation().getQ1(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,482,"Assert.assertEquals(0.36,  r1.toRotation().getQ2(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,483,"Assert.assertEquals(0.8,   r1.toRotation().getQ3(), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,784,"ssert.assertEquals(0.0, v1.angle(quat.applyTo(u1)).getReal(), 1.0e-14);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,785,"ssert.assertEquals(0.0, v2.angle(quat.applyTo(u2)).getReal(), 1.0e-14);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,788,"Assert.assertEquals(0.0, FieldVector3D.angle(v1, quat.applyTo(u1)).getReal(), 1.0e-14);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,789,"Assert.assertEquals(0.0, FieldVector3D.angle(v2, quat.applyTo(u2)).getReal(), 1.0e-14);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,99,"ssert.assertEquals(-1, r.getAxis().dotProduct(reverted.getAxis()).getReal(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,99,"Assert.assertEquals(-1, FieldVector3D.dotProduct(r.getAxis(), reverted.getAxis()).getReal(), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,134,"f (axis.dotProduct(createVector(0, 0, 1)).getReal() > 0) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,134,"if (FieldVector3D.dotProduct(axis, createVector(0, 0, 1)).getReal() > 0) {"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,147," = new FieldRotation<Dfp>(u1, u2, u1, u1.crossProduct(u2));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,147,"r = new FieldRotation<Dfp>(u1, u2, u1, FieldVector3D.crossProduct(u1, u2));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,661,"ssert.assertEquals(0.0, v1.angle(quat.applyTo(u1)).getReal(), 1.0e-14);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,662,"ssert.assertEquals(0.0, v2.angle(quat.applyTo(u2)).getReal(), 1.0e-14);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,661,"Assert.assertEquals(0.0, FieldVector3D.angle(v1, quat.applyTo(u1)).getReal(), 1.0e-14);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,662,"Assert.assertEquals(0.0, FieldVector3D.angle(v2, quat.applyTo(u2)).getReal(), 1.0e-14);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,264,"ssert.assertEquals(0.0, createVector(-1, 0, 0, 3).distance1(createVector(-1, 0, 0, 3)).getReal(), 0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,265,erivativeStructure distance = v1.distance1(v2);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,264,"Assert.assertEquals(0.0, FieldVector3D.distance1(createVector(-1, 0, 0, 3), createVector(-1, 0, 0, 3)).getReal(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,265,"DerivativeStructure distance = FieldVector3D.distance1(v1, v2);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,270,"istance = v1.distance1(new Vector3D(-4, 2, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,270,"distance = FieldVector3D.distance1(v1, new Vector3D(-4, 2, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,271,"Assert.assertEquals(12.0, distance.getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,272,"Assert.assertEquals( 1, distance.getPartialDerivative(1, 0, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,273,"Assert.assertEquals(-1, distance.getPartialDerivative(0, 1, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,274,"Assert.assertEquals( 1, distance.getPartialDerivative(0, 0, 1), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,275,"distance = FieldVector3D.distance1(new Vector3D(-4, 2, 0), v1);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,281,"ssert.assertEquals(0.0, createVector(-1, 0, 0, 3).distance(createVector(-1, 0, 0, 3)).getReal(), 0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,282,erivativeStructure distance = v1.distance(v2);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,286,"Assert.assertEquals(0.0, FieldVector3D.distance(createVector(-1, 0, 0, 3), createVector(-1, 0, 0, 3)).getReal(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,287,"DerivativeStructure distance = FieldVector3D.distance(v1, v2);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,287,"istance = v1.distance(new Vector3D(-4, 2, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,292,"distance = FieldVector3D.distance(v1, new Vector3D(-4, 2, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,293,"Assert.assertEquals(FastMath.sqrt(50), distance.getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,294,"Assert.assertEquals( 5 / FastMath.sqrt(50), distance.getPartialDerivative(1, 0, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,295,"Assert.assertEquals(-4 / FastMath.sqrt(50), distance.getPartialDerivative(0, 1, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,296,"Assert.assertEquals( 3 / FastMath.sqrt(50), distance.getPartialDerivative(0, 0, 1), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,297,"distance = FieldVector3D.distance(new Vector3D(-4, 2, 0), v1);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,298,"ssert.assertEquals(0.0, createVector(-1, 0, 0, 3).distanceSq(createVector(-1, 0, 0, 3)).getReal(), 0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,299,erivativeStructure distanceSq = v1.distanceSq(v2);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,308,"Assert.assertEquals(0.0, FieldVector3D.distanceSq(createVector(-1, 0, 0, 3), createVector(-1, 0, 0, 3)).getReal(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,309,"DerivativeStructure distanceSq = FieldVector3D.distanceSq(v1, v2);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,304,"istanceSq = v1.distanceSq(new Vector3D(-4, 2, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,314,"distanceSq = FieldVector3D.distanceSq(v1, new Vector3D(-4, 2, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,315,"Assert.assertEquals(50.0, distanceSq.getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,316,"Assert.assertEquals(10, distanceSq.getPartialDerivative(1, 0, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,317,"Assert.assertEquals(-8, distanceSq.getPartialDerivative(0, 1, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,318,"Assert.assertEquals( 6, distanceSq.getPartialDerivative(0, 0, 1), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,319,"distanceSq = FieldVector3D.distanceSq(new Vector3D(-4, 2, 0), v1);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,315,"ssert.assertEquals(0.0, createVector(-1, 0, 0, 3).distanceInf(createVector(-1, 0, 0, 3)).getReal(), 0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,316,erivativeStructure distance = v1.distanceInf(v2);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,330,"Assert.assertEquals(0.0, FieldVector3D.distanceInf(createVector(-1, 0, 0, 3), createVector(-1, 0, 0, 3)).getReal(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,331,"DerivativeStructure distance = FieldVector3D.distanceInf(v1, v2);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,321,"istance = v1.distanceInf(new Vector3D(-4, 2, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,336,"distance = FieldVector3D.distanceInf(v1, new Vector3D(-4, 2, 0));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,326,"ssert.assertEquals(v1.subtract(v2).getNormInf().getReal(), v1.distanceInf(v2).getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,341,"distance = FieldVector3D.distanceInf(new Vector3D(-4, 2, 0), v1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,342,"Assert.assertEquals(5.0, distance.getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,343,"Assert.assertEquals(1, distance.getPartialDerivative(1, 0, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,344,"Assert.assertEquals(0, distance.getPartialDerivative(0, 1, 0), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,345,"Assert.assertEquals(0, distance.getPartialDerivative(0, 0, 1), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,346,"Assert.assertEquals(v1.subtract(v2).getNormInf().getReal(), FieldVector3D.distanceInf(v1, v2).getReal(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,329,"reateVector( 1, -2, 3, 3).distanceInf(createVector(-4,  2, 0, 3)).getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,349,"FieldVector3D.distanceInf(createVector( 1, -2, 3, 3), createVector(-4,  2, 0, 3)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,332,"reateVector( 1, 3, -2, 3).distanceInf(createVector(-4, 0,  2, 3)).getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,352,"FieldVector3D.distanceInf(createVector( 1, 3, -2, 3), createVector(-4, 0,  2, 3)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,335,"reateVector(-2,  1, 3, 3).distanceInf(createVector( 2, -4, 0, 3)).getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,355,"FieldVector3D.distanceInf(createVector(-2,  1, 3, 3), createVector( 2, -4, 0, 3)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,338,"reateVector(-2, 3,  1, 3).distanceInf(createVector( 2, 0, -4, 3)).getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,358,"FieldVector3D.distanceInf(createVector(-2, 3,  1, 3), createVector( 2, 0, -4, 3)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,341,"reateVector(3, -2,  1, 3).distanceInf(createVector(0,  2, -4, 3)).getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,361,"FieldVector3D.distanceInf(createVector(3, -2,  1, 3), createVector(0,  2, -4, 3)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,344,"reateVector(3,  1, -2, 3).distanceInf(createVector(0, -4,  2, 3)).getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,364,"FieldVector3D.distanceInf(createVector(3,  1, -2, 3), createVector(0, -4,  2, 3)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,348,"reateVector( 1, -2, 3, 3).distanceInf(new Vector3D(-4,  2, 0)).getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,368,"FieldVector3D.distanceInf(createVector( 1, -2, 3, 3), new Vector3D(-4,  2, 0)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,351,"reateVector( 1, 3, -2, 3).distanceInf(new Vector3D(-4, 0,  2)).getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,371,"FieldVector3D.distanceInf(createVector( 1, 3, -2, 3), new Vector3D(-4, 0,  2)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,354,"reateVector(-2,  1, 3, 3).distanceInf(new Vector3D( 2, -4, 0)).getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,374,"FieldVector3D.distanceInf(createVector(-2,  1, 3, 3), new Vector3D( 2, -4, 0)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,357,"reateVector(-2, 3,  1, 3).distanceInf(new Vector3D( 2, 0, -4)).getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,377,"FieldVector3D.distanceInf(createVector(-2, 3,  1, 3), new Vector3D( 2, 0, -4)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,360,"reateVector(3, -2,  1, 3).distanceInf(new Vector3D(0,  2, -4)).getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,380,"FieldVector3D.distanceInf(createVector(3, -2,  1, 3), new Vector3D(0,  2, -4)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,363,"reateVector(3,  1, -2, 3).distanceInf(new Vector3D(0, -4,  2)).getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,383,"FieldVector3D.distanceInf(createVector(3,  1, -2, 3), new Vector3D(0, -4,  2)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,428,ssert.assertTrue(FastMath.abs(v1.dotProduct(v2).getReal() - 11) < 1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,448,"Assert.assertTrue(FastMath.abs(FieldVector3D.dotProduct(v1, v2).getReal() - 11) < 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,449,"Assert.assertTrue(FastMath.abs(FieldVector3D.dotProduct(v1, v2.toVector3D()).getReal() - 11) < 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,450,"Assert.assertTrue(FastMath.abs(FieldVector3D.dotProduct(v1.toVector3D(), v2).getReal() - 11) < 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,452,"FieldVector3D<DerivativeStructure> v3 = FieldVector3D.crossProduct(v1, v2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,453,"checkVector(v3, 3, -10, -1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,454,"Assert.assertTrue(FastMath.abs(FieldVector3D.dotProduct(v1, v3).getReal()) < 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,455,"Assert.assertTrue(FastMath.abs(FieldVector3D.dotProduct(v2, v3).getReal()) < 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,430,ieldVector3D<DerivativeStructure> v3 = v1.crossProduct(v2);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,457,"v3 = FieldVector3D.crossProduct(v1, v2.toVector3D());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,459,"Assert.assertTrue(FastMath.abs(FieldVector3D.dotProduct(v1, v3).getReal()) < 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,460,"Assert.assertTrue(FastMath.abs(FieldVector3D.dotProduct(v2, v3).getReal()) < 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,462,"v3 = FieldVector3D.crossProduct(v1.toVector3D(), v2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,463,"checkVector(v3, 3, -10, -1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,464,"Assert.assertTrue(FastMath.abs(FieldVector3D.dotProduct(v1, v3).getReal()) < 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,465,"Assert.assertTrue(FastMath.abs(FieldVector3D.dotProduct(v2, v3).getReal()) < 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,433,ssert.assertTrue(FastMath.abs(v1.dotProduct(v3).getReal()) < 1.0e-12);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,434,ssert.assertTrue(FastMath.abs(v2.dotProduct(v3).getReal()) < 1.0e-12);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,441,"heckVector(v1.crossProduct(v2), -1, 2, 1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,473,"checkVector(FieldVector3D.crossProduct(v1, v2), -1, 2, 1);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,446,"heckVector(big1.crossProduct(small2), -1, 2, 1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,478,"checkVector(FieldVector3D.crossProduct(big1, small2), -1, 2, 1);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,471,ssert.assertTrue(FastMath.abs(v1.angle(v2).getReal() - 1.2) < 1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,503,"Assert.assertTrue(FastMath.abs(FieldVector3D.angle(v1, v2).getReal() - 1.2) < 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,504,"Assert.assertTrue(FastMath.abs(FieldVector3D.angle(v1, v2.toVector3D()).getReal() - 1.2) < 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,505,"Assert.assertTrue(FastMath.abs(FieldVector3D.angle(v1.toVector3D(), v2).getReal() - 1.2) < 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,507,try {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,508,"FieldVector3D.angle(v1, Vector3D.ZERO);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,509,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,510,} catch (MathArithmeticException mae) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,511,// expected
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,513,"Assert.assertEquals(0.0, FieldVector3D.angle(v1, v1.toVector3D()).getReal(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,514,"Assert.assertEquals(FastMath.PI, FieldVector3D.angle(v1, v1.negate().toVector3D()).getReal(), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,494,"ssert.assertEquals(0.0, v1.dotProduct(v1.orthogonal()).getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,538,"Assert.assertEquals(0.0, FieldVector3D.dotProduct(v1, v1.orthogonal()).getReal(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,496,"ssert.assertEquals(0.0, v2.dotProduct(v2.orthogonal()).getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,540,"Assert.assertEquals(0.0, FieldVector3D.dotProduct(v2, v2.orthogonal()).getReal(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,498,"ssert.assertEquals(0.0, v3.dotProduct(v3.orthogonal()).getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,542,"Assert.assertEquals(0.0, FieldVector3D.dotProduct(v3, v3.orthogonal()).getReal(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,500,"ssert.assertEquals(0.0, v4.dotProduct(v4.orthogonal()).getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,544,"Assert.assertEquals(0.0, FieldVector3D.dotProduct(v4, v4.orthogonal()).getReal(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,512,"reateVector(1, 2, 3, 3).angle(createVector(4, 5, 6, 3)).getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,556,"FieldVector3D.angle(createVector(1, 2, 3, 3), createVector(4, 5, 6, 3)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,515,"reateVector(1, 2, 3, 3).angle(createVector(2, 4, 6.000001, 3)).getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,559,"FieldVector3D.angle(createVector(1, 2, 3, 3), createVector(2, 4, 6.000001, 3)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,518,"reateVector(1, 2, 3, 3).angle(createVector(-2, -4, -6.000001, 3)).getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,562,"FieldVector3D.angle(createVector(1, 2, 3, 3), createVector(-2, -4, -6.000001, 3)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,521,"reateVector(0, 0, 0, 3).angle(createVector(1, 0, 0, 3));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,565,"FieldVector3D.angle(createVector(0, 0, 0, 3), createVector(1, 0, 0, 3));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,540,erivativeStructure sAccurate = u1.dotProduct(u2);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,584,"DerivativeStructure sAccurate = FieldVector3D.dotProduct(u1, u2);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,563,erivativeStructure sAccurate = uds.dotProduct(vds);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,607,"DerivativeStructure sAccurate = FieldVector3D.dotProduct(uds, vds);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,569,Accurate = uds.dotProduct(v);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,613,"sAccurate = FieldVector3D.dotProduct(uds, v);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,597,ieldVector3D<DerivativeStructure> cAccurate = u1.crossProduct(u2);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,598,ssert.assertTrue(u3.distance(cNaive).getReal() > 2.9 * u3.getNorm().getReal());
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,599,"ssert.assertEquals(0.0, u3.distance(cAccurate).getReal(), 1.0e-30 * cAccurate.getNorm().getReal());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,641,"FieldVector3D<DerivativeStructure> cAccurate = FieldVector3D.crossProduct(u1, u2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,642,"Assert.assertTrue(FieldVector3D.distance(u3, cNaive).getReal() > 2.9 * u3.getNorm().getReal());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,643,"Assert.assertEquals(0.0, FieldVector3D.distance(u3, cAccurate).getReal(), 1.0e-30 * cAccurate.getNorm().getReal());"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,620,"heckVector(uds.crossProduct(vds),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,664,"checkVector(FieldVector3D.crossProduct(uds, vds),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,626,"heckVector(uds.crossProduct(v),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,670,"checkVector(FieldVector3D.crossProduct(uds, v),"

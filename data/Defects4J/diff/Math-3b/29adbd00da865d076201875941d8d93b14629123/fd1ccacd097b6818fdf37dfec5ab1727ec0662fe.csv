is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,17,package org.apache.commons.math3.stat.inference;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,19,import org.apache.commons.math3.distribution.ChiSquaredDistribution;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,20,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,21,import org.apache.commons.math3.exception.MaxCountExceededException;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,22,import org.apache.commons.math3.exception.NotPositiveException;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,23,import org.apache.commons.math3.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,24,import org.apache.commons.math3.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,25,import org.apache.commons.math3.exception.ZeroException;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,26,import org.apache.commons.math3.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,27,import org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,28,import org.apache.commons.math3.util.MathArrays;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,31,"* Implements <a href=""http://en.wikipedia.org/wiki/G-test"">G Test</a>"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,32,* statistics.
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,34,* <p>This is known in statistical genetics as the McDonald-Kreitman test.
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,35,* The implementation handles both known and unknown distributions.</p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,37,* <p>Two samples tests can be used when the distribution is unknown <i>a priori</i>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,38,"* but provided by one sample, or when the hypothesis under test is that the two"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,39,* samples come from the same underlying distribution.</p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,41,* @version $Id$
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,42,* @since 3.1
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,44,public class GTest {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,47,"* Computes the <a href=""http://en.wikipedia.org/wiki/G-test"">G statistic"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,48,* for Goodness of Fit</a> comparing {@code observed} and {@code expected}
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,49,* frequency counts.
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,51,* <p>This statistic can be used to perform a G test (Log-Likelihood Ratio
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,52,* Test) evaluating the null hypothesis that the observed counts follow the
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,53,* expected distribution.</p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,55,* <p><strong>Preconditions</strong>: <ul>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,56,* <li>Expected counts must all be positive. </li>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,57,* <li>Observed counts must all be &ge; 0. </li>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,58,* <li>The observed and expected arrays must have the same length and their
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,59,* common length must be at least 2. </li></ul></p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,61,"* <p>If any of the preconditions are not met, a"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,62,* {@code MathIllegalArgumentException} is thrown.</p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,64,* <p><strong>Note:</strong>This implementation rescales the
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,65,* {@code expected} array if necessary to ensure that the sum of the
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,66,* expected and observed counts are equal.</p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,68,* @param observed array of observed frequency counts
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,69,* @param expected array of expected frequency counts
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,70,* @return G-Test statistic
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,71,* @throws NotPositiveException if {@code observed} has negative entries
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,72,* @throws NotStrictlyPositiveException if {@code expected} has entries that
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,73,* are not strictly positive
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,74,* @throws DimensionMismatchException if the array lengths do not match or
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,75,* are less than 2.
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,77,"public double gValueGoodnessOfFit(final double[] expected, final long[] observed)"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,78,"throws NotPositiveException, NotStrictlyPositiveException,"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,79,DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,81,if (expected.length < 2) {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,82,"throw new DimensionMismatchException(expected.length, 2);"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,84,if (expected.length != observed.length) {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,85,"throw new DimensionMismatchException(expected.length, observed.length);"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,87,MathArrays.checkPositive(expected);
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,88,MathArrays.checkNonNegative(observed);
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,90,double sumExpected = 0d;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,91,double sumObserved = 0d;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,92,for (int i = 0; i < observed.length; i++) {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,93,sumExpected += expected[i];
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,94,sumObserved += observed[i];
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,96,double ratio = 1d;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,97,boolean rescale = false;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,98,if (Math.abs(sumExpected - sumObserved) > 10E-6) {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,99,ratio = sumObserved / sumExpected;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,100,rescale = true;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,102,double sum = 0d;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,103,for (int i = 0; i < observed.length; i++) {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,104,final double dev = rescale ?
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,105,FastMath.log((double) observed[i] / (ratio * expected[i])) :
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,106,FastMath.log((double) observed[i] / expected[i]);
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,107,sum += ((double) observed[i]) * dev;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,109,return 2d * sum;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,113,"* Returns the <i>observed significance level</i>, or <a href="
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,114,"* ""http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue""> p-value</a>,"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,115,* associated with a G-Test for goodness of fit</a> comparing the
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,116,* {@code observed} frequency counts to those in the {@code expected} array.
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,118,* <p>The number returned is the smallest significance level at which one
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,119,* can reject the null hypothesis that the observed counts conform to the
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,120,* frequency distribution described by the expected counts.</p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,122,* <p>The probability returned is the tail probability beyond
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,123,"* {@link #gValueGoodnessOfFit(double[], long[]) gValueGoodnessOfFit(expected, observed)}"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,124,* in the ChiSquare distribution with degrees of freedom one less than the
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,125,* common length of {@code expected} and {@code observed}.</p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,127,* <p> <strong>Preconditions</strong>: <ul>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,128,* <li>Expected counts must all be positive. </li>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,129,* <li>Observed counts must all be &ge; 0. </li>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,130,* <li>The observed and expected arrays must have the
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,131,* same length and their common length must be at least 2.</li>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,132,* </ul></p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,134,"* <p>If any of the preconditions are not met, a"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,135,* {@code MathIllegalArgumentException} is thrown.</p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,137,* <p><strong>Note:</strong>This implementation rescales the
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,138,* {@code expected} array if necessary to ensure that the sum of the
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,139,*  expected and observed counts are equal.</p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,141,* @param observed array of observed frequency counts
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,142,* @param expected array of expected frequency counts
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,143,* @return p-value
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,144,* @throws NotPositiveException if {@code observed} has negative entries
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,145,* @throws NotStrictlyPositiveException if {@code expected} has entries that
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,146,* are not strictly positive
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,147,* @throws DimensionMismatchException if the array lengths do not match or
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,148,* are less than 2.
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,149,* @throws MaxCountExceededException if an error occurs computing the
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,150,* p-value.
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,152,"public double gTestGoodnessOfFitPValue(final double[] expected, final long[] observed)"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,153,"throws NotPositiveException, NotStrictlyPositiveException,"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,154,"DimensionMismatchException, MaxCountExceededException {"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,156,final ChiSquaredDistribution distribution =
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,157,new ChiSquaredDistribution(expected.length - 1.0);
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,158,return 1.0 - distribution.cumulativeProbability(
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,159,"gValueGoodnessOfFit(expected, observed));"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,163,"* Returns the intrinsic (Hardy-Weinberg proportions) p-Value, as described"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,164,"* in p64-69 of McDonald, J.H. 2009. Handbook of Biological Statistics"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,165,"* (2nd ed.). Sparky House Publishing, Baltimore, Maryland."
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,167,* <p> The probability returned is the tail probability beyond
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,168,"* {@link #gValueGoodnessOfFit(double[], long[]) gValueGoodnessOfFit(expected, observed)}"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,169,* in the ChiSquare distribution with degrees of freedom two less than the
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,170,* common length of {@code expected} and {@code observed}.</p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,172,* @param observed array of observed frequency counts
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,173,* @param expected array of expected frequency counts
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,174,* @return p-value
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,175,* @throws NotPositiveException if {@code observed} has negative entries
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,176,* @throws NotStrictlyPositiveException {@code expected} has entries that are
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,177,* not strictly positive
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,178,* @throws DimensionMismatchException if the array lengths do not match or
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,179,* are less than 2.
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,180,* @throws MaxCountExceededException if an error occurs computing the
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,181,* p-value.
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,183,"public double gTestGoodnessOfFitIntrinsicPValue(final double[] expected, final long[] observed)"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,184,"throws NotPositiveException, NotStrictlyPositiveException,"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,185,"DimensionMismatchException, MaxCountExceededException {"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,187,final ChiSquaredDistribution distribution =
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,188,new ChiSquaredDistribution(expected.length - 2.0);
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,189,return 1.0 - distribution.cumulativeProbability(
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,190,"gValueGoodnessOfFit(expected, observed));"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,194,* Performs a G-Test (Log-Likelihood Ratio Test) for goodness of fit
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,195,* evaluating the null hypothesis that the observed counts conform to the
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,196,"* frequency distribution described by the expected counts, with"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,197,* significance level {@code alpha}. Returns true iff the null
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,198,* hypothesis can be rejected with {@code 100 * (1 - alpha)} percent confidence.
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,200,* <p><strong>Example:</strong><br> To test the hypothesis that
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,201,"* {@code observed} follows {@code expected} at the 99% level,"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,202,* use </p><p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,203,"* {@code gTest(expected, observed, 0.01)}</p>"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,205,"* <p>Returns true iff {@link #gTestGoodnessOfFitPValue(double[], long[])"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,206,"*  gTestGoodnessOfFitPValue(expected, observed)} < alpha</p>"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,208,* <p><strong>Preconditions</strong>: <ul>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,209,* <li>Expected counts must all be positive. </li>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,210,* <li>Observed counts must all be &ge; 0. </li>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,211,* <li>The observed and expected arrays must have the same length and their
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,212,* common length must be at least 2.
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,213,* <li> {@code 0 < alpha < 0.5} </li></ul></p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,215,"* <p>If any of the preconditions are not met, a"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,216,* {@code MathIllegalArgumentException} is thrown.</p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,218,* <p><strong>Note:</strong>This implementation rescales the
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,219,* {@code expected} array if necessary to ensure that the sum of the
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,220,* expected and observed counts are equal.</p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,222,* @param observed array of observed frequency counts
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,223,* @param expected array of expected frequency counts
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,224,* @param alpha significance level of the test
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,225,* @return true iff null hypothesis can be rejected with confidence 1 -
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,226,* alpha
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,227,* @throws NotPositiveException if {@code observed} has negative entries
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,228,* @throws NotStrictlyPositiveException if {@code expected} has entries that
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,229,* are not strictly positive
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,230,* @throws DimensionMismatchException if the array lengths do not match or
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,231,* are less than 2.
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,232,* @throws MaxCountExceededException if an error occurs computing the
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,233,* p-value.
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,234,* @throws OutOfRangeException if alpha is not strictly greater than zero
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,235,* and less than or equal to 0.5
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,237,"public boolean gTestGoodnessOfFit(final double[] expected, final long[] observed,"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,238,final double alpha)
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,239,"throws NotPositiveException, NotStrictlyPositiveException,"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,240,"DimensionMismatchException, OutOfRangeException, MaxCountExceededException {"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,242,if ((alpha <= 0) || (alpha > 0.5)) {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,243,"throw new OutOfRangeException(LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL,"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,244,"alpha, 0, 0.5);"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,246,"return gTestGoodnessOfFitPValue(expected, observed) < alpha;"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,250,* Calculates the <a href=
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,251,"* ""http://en.wikipedia.org/wiki/Entropy_%28information_theory%29"">Shannon"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,252,* entropy</a> for 2 Dimensional Matrix.  The value returned is the entropy
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,253,* of the vector formed by concatenating the rows (or columns) of {@code k}
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,254,* to form a vector. See {@link #entropy(long[])}.
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,256,* @param k 2 Dimensional Matrix of long values (for ex. the counts of a
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,257,* trials)
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,258,* @return Shannon Entropy of the given Matrix
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,261,private double entropy(final long[][] k) {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,262,double h = 0d;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,263,double sum_k = 0d;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,264,for (int i = 0; i < k.length; i++) {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,265,for (int j = 0; j < k[i].length; j++) {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,266,sum_k += (double) k[i][j];
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,269,for (int i = 0; i < k.length; i++) {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,270,for (int j = 0; j < k[i].length; j++) {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,271,if (k[i][j] != 0) {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,272,final double p_ij = (double) k[i][j] / sum_k;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,273,h += p_ij * Math.log(p_ij);
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,277,return -h;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,281,"* Calculates the <a href=""http://en.wikipedia.org/wiki/Entropy_%28information_theory%29"">"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,282,* Shannon entropy</a> for a vector.  The values of {@code k} are taken to be
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,283,* incidence counts of the values of a random variable. What is returned is <br/>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,284,* &sum;p<sub>i</sub>log(p<sub>i</sub><br/>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,285,* where p<sub>i</sub> = k[i] / (sum of elements in k)
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,287,* @param k Vector (for ex. Row Sums of a trials)
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,288,* @return Shannon Entropy of the given Vector
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,291,private double entropy(final long[] k) {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,292,double h = 0d;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,293,double sum_k = 0d;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,294,for (int i = 0; i < k.length; i++) {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,295,sum_k += (double) k[i];
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,297,for (int i = 0; i < k.length; i++) {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,298,if (k[i] != 0) {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,299,final double p_i = (double) k[i] / sum_k;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,300,h += p_i * Math.log(p_i);
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,303,return -h;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,307,* <p>Computes a G (Log-Likelihood Ratio) two sample test statistic for
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,308,* independence comparing frequency counts in
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,309,* {@code observed1} and {@codeobserved2}. The sums of frequency
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,310,* counts in the two samples are not required to be the same. The formula
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,311,* used to compute the test statistic is </p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,313,* <p>{@code 2 * totalSum * [H(rowSums) + H(colSums) - H(k)]}</p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,315,* <p> where {@code H} is the
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,316,"* <a href=""http://en.wikipedia.org/wiki/Entropy_%28information_theory%29"">"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,317,* Shannon Entropy</a> of the random variable formed by viewing the elements
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,318,* of the argument array as incidence counts; <br/>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,319,"* {@code k} is a matrix with rows {@code [observed1, observed2]}; <br/>"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,320,"* {@code rowSums, colSums} are the row/col sums of {@code k}; <br>"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,321,* and {@code totalSum} is the overall sum of all entries in {@code k}.</p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,323,* <p>This statistic can be used to perform a G test evaluating the null
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,324,* hypothesis that both observed counts are independent </p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,326,* <p> <strong>Preconditions</strong>: <ul>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,327,* <li>Observed counts must be non-negative. </li>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,328,* <li>Observed counts for a specific bin must not both be zero. </li>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,329,* <li>Observed counts for a specific sample must not all be  0. </li>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,330,* <li>The arrays {@code observed1} and {@code observed2} must have
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,331,* the same length and their common length must be at least 2. </li></ul></p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,333,"* <p>If any of the preconditions are not met, a"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,334,* {@code MathIllegalArgumentException} is thrown.</p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,336,* @param observed1 array of observed frequency counts of the first data set
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,337,* @param observed2 array of observed frequency counts of the second data
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,338,* set
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,339,* @return G-Test statistic
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,340,* @throws DimensionMismatchException the the lengths of the arrays do not
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,341,* match or their common length is less than 2
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,342,* @throws NotPositiveException if any entry in {@code observed1} or
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,343,* {@code observed2} is negative
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,344,* @throws ZeroException if either all counts of
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,345,"* {@code observed1} or {@code observed2} are zero, or if the count"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,346,* at the same index is zero for both arrays.
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,348,"public double gValueDataSetsComparison(final long[] observed1, final long[] observed2)"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,349,"throws DimensionMismatchException, NotPositiveException, ZeroException {"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,351,// Make sure lengths are same
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,352,if (observed1.length < 2) {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,353,"throw new DimensionMismatchException(observed1.length, 2);"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,355,if (observed1.length != observed2.length) {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,356,"throw new DimensionMismatchException(observed1.length, observed2.length);"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,359,// Ensure non-negative counts
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,360,MathArrays.checkNonNegative(observed1);
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,361,MathArrays.checkNonNegative(observed2);
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,363,// Compute and compare count sums
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,364,long countSum1 = 0;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,365,long countSum2 = 0;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,367,// Compute and compare count sums
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,368,final long[] collSums = new long[observed1.length];
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,369,final long[][] k = new long[2][observed1.length];
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,371,for (int i = 0; i < observed1.length; i++) {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,372,if (observed1[i] == 0 && observed2[i] == 0) {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,373,"throw new ZeroException(LocalizedFormats.OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY, i);"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,374,} else {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,375,countSum1 += observed1[i];
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,376,countSum2 += observed2[i];
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,377,collSums[i] = observed1[i] + observed2[i];
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,378,k[0][i] = observed1[i];
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,379,k[1][i] = observed2[i];
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,382,// Ensure neither sample is uniformly 0
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,383,if (countSum1 == 0 || countSum2 == 0) {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,384,throw new ZeroException();
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,386,"final long[] rowSums = {countSum1, countSum2};"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,387,final double sum = (double) countSum1 + (double) countSum2;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,388,return 2 * sum * (entropy(rowSums) + entropy(collSums) - entropy(k));
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,392,* Calculates the root log-likelihood ratio for 2 state Datasets. See
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,393,"* {@link #gValueDataSetsComparison(long[], long[] )}."
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,395,"* <p>Given two events A and B, let k11 be the number of times both events"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,396,"* occur, k12 the incidence of B without A, k21 the count of A without B,"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,397,* and k22 the number of times neither A nor B occurs.  What is returned
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,398,* by this method is </p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,400,"* <p>{@code (sgn) sqrt(gValueDataSetsComparison({k11, k12}, {k21, k22})}</p>"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,402,* <p>where {@code sgn} is -1 if {@code k11 / (k11 + k12) < k21 / (k21 + k22))};<br/>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,403,* 1 otherwise.</p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,405,* <p>Signed root LLR has two advantages over the basic LLR: a) it is positive
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,406,"* where k11 is bigger than expected, negative where it is lower b) if there is"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,407,* no difference it is asymptotically normally distributed. This allows one
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,408,"* to talk about ""number of standard deviations"" which is a more common frame"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,409,* of reference than the chi^2 distribution.</p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,411,* @param k11 number of times the two events occurred together (AB)
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,412,* @param k12 number of times the second event occurred WITHOUT the
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,413,"* first event (notA,B)"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,414,* @param k21 number of times the first event occurred WITHOUT the
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,415,"* second event (A, notB)"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,416,* @param k22 number of times something else occurred (i.e. was neither
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,417,"* of these events (notA, notB)"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,418,* @return root log-likelihood ratio
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,421,"public double rootLogLikelihoodRatio(final long k11, long k12,"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,422,"final long k21, final long k22) {"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,423,final double llr = gValueDataSetsComparison(
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,424,"new long[]{k11, k12}, new long[]{k21, k22});"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,425,double sqrt = FastMath.sqrt(llr);
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,426,if ((double) k11 / (k11 + k12) < (double) k21 / (k21 + k22)) {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,427,sqrt = -sqrt;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,429,return sqrt;
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,433,"* <p>Returns the <i>observed significance level</i>, or <a href="
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,434,"* ""http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"">"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,435,"* p-value</a>, associated with a G-Value (Log-Likelihood Ratio) for two"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,436,* sample test comparing bin frequency counts in {@code observed1} and
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,437,* {@code observed2}.</p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,439,* <p>The number returned is the smallest significance level at which one
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,440,* can reject the null hypothesis that the observed counts conform to the
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,441,* same distribution. </p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,443,"* <p>See {@link #gTestGoodnessOfFitPValue(double[], long[])} for details"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,444,* on how the p-value is computed.  The degrees of of freedom used to
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,445,* perform the test is one less than the common length of the input observed
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,446,* count arrays.</p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,448,* <p><strong>Preconditions</strong>:
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,449,* <ul> <li>Observed counts must be non-negative. </li>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,450,* <li>Observed counts for a specific bin must not both be zero. </li>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,451,* <li>Observed counts for a specific sample must not all be 0. </li>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,452,* <li>The arrays {@code observed1} and {@ode observed2} must
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,453,* have the same length and their common length must be at least 2. </li>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,454,* </ul><p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,455,"* <p> If any of the preconditions are not met, a"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,456,* {@code MathIllegalArgumentException} is thrown.</p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,458,* @param observed1 array of observed frequency counts of the first data set
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,459,* @param observed2 array of observed frequency counts of the second data
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,460,* set
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,461,* @return p-value
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,462,* @throws DimensionMismatchException the the length of the arrays does not
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,463,* match or their common length is less than 2
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,464,* @throws NotPositiveException if any of the entries in {@code observed1} or
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,465,* {@code observed2} are negative
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,466,* @throws ZeroException if either all counts of {@code observed1} or
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,467,"* {@code observed2} are zero, or if the count at some index is"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,468,* zero for both arrays
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,469,* @throws MaxCountExceededException if an error occurs computing the
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,470,* p-value.
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,472,"public double gTestDataSetsComparisonPValue(final long[] observed1,"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,473,final long[] observed2)
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,474,"throws DimensionMismatchException, NotPositiveException, ZeroException,"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,475,MaxCountExceededException {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,476,final ChiSquaredDistribution distribution = new ChiSquaredDistribution(
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,477,(double) observed1.length - 1);
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,478,return 1 - distribution.cumulativeProbability(
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,479,"gValueDataSetsComparison(observed1, observed2));"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,483,* <p>Performs a G-Test (Log-Likelihood Ratio Test) comparing two binned
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,484,* data sets. The test evaluates the null hypothesis that the two lists
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,485,"* of observed counts conform to the same frequency distribution, with"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,486,* significance level {@code alpha}. Returns true iff the null
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,487,* hypothesis can be rejected  with 100 * (1 - alpha) percent confidence.
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,488,* </p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,489,"* <p>See {@link #gValueDataSetsComparison(long[], long[])} for details"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,490,* on the formula used to compute the G (LLR) statistic used in the test and
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,491,"* {@link #gTestGoodnessOfFitPValue(double[], long[])} for information on how"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,492,* the observed significance level is computed. The degrees of of freedom used
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,493,* to perform the test is one less than the common length of the input observed
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,494,* count arrays. </p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,496,* <strong>Preconditions</strong>: <ul>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,497,* <li>Observed counts must be non-negative. </li>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,498,* <li>Observed counts for a specific bin must not both be zero. </li>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,499,* <li>Observed counts for a specific sample must not all be 0. </li>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,500,* <li>The arrays {@code observed1} and {@code observed2} must
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,501,* have the same length and their common length must be at least 2. </li>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,502,* <li>{@code 0 < alpha < 0.5} </li></ul></p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,504,"* <p>If any of the preconditions are not met, a"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,505,* {@code MathIllegalArgumentException} is thrown.</p>
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,507,* @param observed1 array of observed frequency counts of the first data set
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,508,* @param observed2 array of observed frequency counts of the second data
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,509,* set
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,510,* @param alpha significance level of the test
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,511,* @return true iff null hypothesis can be rejected with confidence 1 -
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,512,* alpha
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,513,* @throws DimensionMismatchException the the length of the arrays does not
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,514,* match
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,515,* @throws NotPositiveException if any of the entries in {@code observed1} or
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,516,* {@code observed2} are negative
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,517,* @throws ZeroException if either all counts of {@code observed1} or
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,518,"* {@code observed2} are zero, or if the count at some index is"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,519,* zero for both arrays
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,520,* @throws OutOfRangeException if {@code alpha} is not in the range
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,521,"* (0, 0.5]"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,522,* @throws MaxCountExceededException if an error occurs performing the test
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,524,public boolean gTestDataSetsComparison(
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,525,"final long[] observed1,"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,526,"final long[] observed2,"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,527,final double alpha)
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,528,"throws DimensionMismatchException, NotPositiveException,"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,529,"ZeroException, OutOfRangeException, MaxCountExceededException {"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,531,if (alpha <= 0 || alpha > 0.5) {
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,532,throw new OutOfRangeException(
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,533,"LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL, alpha, 0, 0.5);"
True,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,src/main/java/org/apache/commons/math3/stat/inference/GTest.java,535,"return gTestDataSetsComparisonPValue(observed1, observed2) < alpha;"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,17,package org.apache.commons.math3.stat.inference;
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,19,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,20,import org.apache.commons.math3.exception.NotPositiveException;
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,21,import org.apache.commons.math3.exception.NotStrictlyPositiveException;
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,22,import org.apache.commons.math3.exception.OutOfRangeException;
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,23,import org.apache.commons.math3.exception.ZeroException;
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,28,* Test cases for the GTest class.
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,30,"* Data for the tests are from p64-69 in: McDonald, J.H. 2009. Handbook of"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,31,"* Biological Statistics (2nd ed.). Sparky House Publishing, Baltimore,"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,32,* Maryland.
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,35,public class GTestTest {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,37,protected GTest testStatistic = new GTest();
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,39,@Test
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,40,public void testGTestGoodnesOfFit1() throws Exception {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,41,final double[] exp = new double[]{
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,42,"3d, 1d"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,45,final long[] obs = new long[]{
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,46,"423, 133"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,49,"Assert.assertEquals(""G test statistic"","
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,50,"0.348721, testStatistic.gValueGoodnessOfFit(exp, obs), 1E-6);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,51,"final double p_gtgf = testStatistic.gTestGoodnessOfFitPValue(exp, obs);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,52,"Assert.assertEquals(""g-Test p-value"", 0.55483, p_gtgf, 1E-5);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,54,"Assert.assertFalse(testStatistic.gTestGoodnessOfFit(exp, obs, 0.05));"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,57,@Test
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,58,public void testGTestGoodnesOfFit2() throws Exception {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,59,final double[] exp = new double[]{
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,60,"0.54d, 0.40d, 0.05d, 0.01d"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,63,final long[] obs = new long[]{
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,64,"70, 79, 3, 4"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,66,"Assert.assertEquals(""G test statistic"","
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,67,"13.144799, testStatistic.gValueGoodnessOfFit(exp, obs), 1E-6);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,68,"final double p_gtgf = testStatistic.gTestGoodnessOfFitPValue(exp, obs);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,69,"Assert.assertEquals(""g-Test p-value"", 0.004333, p_gtgf, 1E-5);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,71,"Assert.assertTrue(testStatistic.gTestGoodnessOfFit(exp, obs, 0.05));"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,74,@Test
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,75,public void testGTestGoodnesOfFit3() throws Exception {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,76,final double[] exp = new double[]{
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,77,"0.167d, 0.483d, 0.350d"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,80,final long[] obs = new long[]{
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,81,"14, 21, 25"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,84,"Assert.assertEquals(""G test statistic"","
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,85,"4.5554, testStatistic.gValueGoodnessOfFit(exp, obs), 1E-4);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,86,// Intrinisic (Hardy-Weinberg proportions) P-Value should be 0.033
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,87,"final double p_gtgf = testStatistic.gTestGoodnessOfFitIntrinsicPValue(exp, obs);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,88,"Assert.assertEquals(""g-Test p-value"", 0.0328, p_gtgf, 1E-4);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,90,"Assert.assertFalse(testStatistic.gTestGoodnessOfFit(exp, obs, 0.05));"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,93,@Test
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,94,public void testGTestIndependance1() throws Exception {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,95,final long[] obs1 = new long[]{
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,96,"268, 199, 42"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,99,final long[] obs2 = new long[]{
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,100,"807, 759, 184"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,103,"final double g = testStatistic.gValueDataSetsComparison(obs1, obs2);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,105,"Assert.assertEquals(""G test statistic"","
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,106,"7.3008170, g, 1E-6);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,107,"final double p_gti = testStatistic.gTestDataSetsComparisonPValue(obs1, obs2);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,109,"Assert.assertEquals(""g-Test p-value"", 0.0259805, p_gti, 1E-6);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,110,"Assert.assertTrue(testStatistic.gTestDataSetsComparison(obs1, obs2, 0.05));"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,113,@Test
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,114,public void testGTestIndependance2() throws Exception {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,115,final long[] obs1 = new long[]{
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,116,"127, 99, 264"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,119,final long[] obs2 = new long[]{
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,120,"116, 67, 161"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,123,"final double g = testStatistic.gValueDataSetsComparison(obs1, obs2);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,125,"Assert.assertEquals(""G test statistic"","
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,126,"6.227288, g, 1E-6);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,127,"final double p_gti = testStatistic.gTestDataSetsComparisonPValue(obs1, obs2);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,129,"Assert.assertEquals(""g-Test p-value"", 0.04443, p_gti, 1E-5);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,130,"Assert.assertTrue(testStatistic.gTestDataSetsComparison(obs1, obs2, 0.05));"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,133,@Test
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,134,public void testGTestIndependance3() throws Exception {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,135,final long[] obs1 = new long[]{
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,136,"190, 149"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,139,final long[] obs2 = new long[]{
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,140,"42, 49"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,143,"final double g = testStatistic.gValueDataSetsComparison(obs1, obs2);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,144,"Assert.assertEquals(""G test statistic"","
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,145,"2.8187, g, 1E-4);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,146,"final double p_gti = testStatistic.gTestDataSetsComparisonPValue(obs1, obs2);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,147,"Assert.assertEquals(""g-Test p-value"", 0.09317325, p_gti, 1E-6);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,149,"Assert.assertFalse(testStatistic.gTestDataSetsComparison(obs1, obs2, 0.05));"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,152,@Test
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,153,public void testGTestSetsComparisonBadCounts() {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,154,"long[] observed1 = {10, -1, 12, 10, 15};"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,155,"long[] observed2 = {15, 10, 10, 15, 5};"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,156,try {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,157,testStatistic.gTestDataSetsComparisonPValue(
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,158,"observed1, observed2);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,159,"Assert.fail(""Expecting NotPositiveException - negative count"");"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,160,} catch (NotPositiveException ex) {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,161,// expected
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,163,"long[] observed3 = {10, 0, 12, 10, 15};"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,164,"long[] observed4 = {15, 0, 10, 15, 5};"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,165,try {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,166,testStatistic.gTestDataSetsComparisonPValue(
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,167,"observed3, observed4);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,168,"Assert.fail(""Expecting ZeroException - double 0's"");"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,169,} catch (ZeroException ex) {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,170,// expected
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,172,"long[] observed5 = {10, 10, 12, 10, 15};"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,173,"long[] observed6 = {0, 0, 0, 0, 0};"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,174,try {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,175,testStatistic.gTestDataSetsComparisonPValue(
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,176,"observed5, observed6);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,177,"Assert.fail(""Expecting ZeroException - vanishing counts"");"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,178,} catch (ZeroException ex) {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,179,// expected
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,183,@Test
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,184,public void testUnmatchedArrays() {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,185,"final long[] observed = { 0, 1, 2, 3 };"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,186,"final double[] expected = { 1, 1, 2 };"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,187,"final long[] observed2 = {3, 4};"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,188,try {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,189,"testStatistic.gTestGoodnessOfFitPValue(expected, observed);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,190,"Assert.fail(""arrays have different lengths, DimensionMismatchException expected"");"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,191,} catch (DimensionMismatchException ex) {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,192,// expected
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,194,try {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,195,"testStatistic.gTestDataSetsComparisonPValue(observed, observed2);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,196,"Assert.fail(""arrays have different lengths, DimensionMismatchException expected"");"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,197,} catch (DimensionMismatchException ex) {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,198,// expected
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,202,@Test
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,203,public void testNegativeObservedCounts() {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,204,"final long[] observed = { 0, 1, 2, -3 };"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,205,"final double[] expected = { 1, 1, 2, 3};"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,206,"final long[] observed2 = {3, 4, 5, 0};"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,207,try {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,208,"testStatistic.gTestGoodnessOfFitPValue(expected, observed);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,209,"Assert.fail(""negative observed count, NotPositiveException expected"");"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,210,} catch (NotPositiveException ex) {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,211,// expected
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,213,try {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,214,"testStatistic.gTestDataSetsComparisonPValue(observed, observed2);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,215,"Assert.fail(""negative observed count, NotPositiveException expected"");"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,216,} catch (NotPositiveException ex) {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,217,// expected
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,221,@Test
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,222,public void testZeroExpectedCounts() {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,223,"final long[] observed = { 0, 1, 2, -3 };"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,224,"final double[] expected = { 1, 0, 2, 3};"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,225,try {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,226,"testStatistic.gTestGoodnessOfFitPValue(expected, observed);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,227,"Assert.fail(""zero expected count, NotStrictlyPositiveException expected"");"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,228,} catch (NotStrictlyPositiveException ex) {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,229,// expected
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,233,@Test
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,234,public void testBadAlpha() {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,235,"final long[] observed = { 0, 1, 2, 3 };"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,236,"final double[] expected = { 1, 2, 2, 3};"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,237,"final long[] observed2 = { 0, 2, 2, 3 };"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,238,try {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,239,"testStatistic.gTestGoodnessOfFit(expected, observed, 0.8);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,240,"Assert.fail(""zero expected count, NotStrictlyPositiveException expected"");"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,241,} catch (OutOfRangeException ex) {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,242,// expected
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,244,try {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,245,"testStatistic.gTestDataSetsComparison(observed, observed2, -0.5);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,246,"Assert.fail(""zero expected count, NotStrictlyPositiveException expected"");"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,247,} catch (OutOfRangeException ex) {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,248,// expected
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,252,@Test
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,253,public void testScaling() {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,254,"final long[] observed = {9, 11, 10, 8, 12};"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,255,"final double[] expected1 = {10, 10, 10, 10, 10};"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,256,"final double[] expected2 = {1000, 1000, 1000, 1000, 1000};"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,257,"final double[] expected3 = {1, 1, 1, 1, 1};"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,258,final double tol = 1E-15;
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,259,Assert.assertEquals(
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,260,"testStatistic.gTestGoodnessOfFitPValue(expected1, observed),"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,261,"testStatistic.gTestGoodnessOfFitPValue(expected2, observed),"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,262,tol);
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,263,Assert.assertEquals(
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,264,"testStatistic.gTestGoodnessOfFitPValue(expected1, observed),"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,265,"testStatistic.gTestGoodnessOfFitPValue(expected3, observed),"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,266,tol);
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,269,@Test
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,270,public void testRootLogLikelihood() {
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,271,// positive where k11 is bigger than expected.
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,272,"Assert.assertTrue(testStatistic.rootLogLikelihoodRatio(904, 21060, 1144, 283012) > 0.0);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,274,// negative because k11 is lower than expected
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,275,"Assert.assertTrue(testStatistic.rootLogLikelihoodRatio(36, 21928, 60280, 623876) < 0.0);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,277,"Assert.assertEquals(Math.sqrt(2.772589), testStatistic.rootLogLikelihoodRatio(1, 0, 0, 1), 0.000001);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,278,"Assert.assertEquals(-Math.sqrt(2.772589), testStatistic.rootLogLikelihoodRatio(0, 1, 1, 0), 0.000001);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,279,"Assert.assertEquals(Math.sqrt(27.72589), testStatistic.rootLogLikelihoodRatio(10, 0, 0, 10), 0.00001);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,281,"Assert.assertEquals(Math.sqrt(39.33052), testStatistic.rootLogLikelihoodRatio(5, 1995, 0, 100000), 0.00001);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,282,"Assert.assertEquals(-Math.sqrt(39.33052), testStatistic.rootLogLikelihoodRatio(0, 100000, 5, 1995), 0.00001);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,284,"Assert.assertEquals(Math.sqrt(4730.737), testStatistic.rootLogLikelihoodRatio(1000, 1995, 1000, 100000), 0.001);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,285,"Assert.assertEquals(-Math.sqrt(4730.737), testStatistic.rootLogLikelihoodRatio(1000, 100000, 1000, 1995), 0.001);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,287,"Assert.assertEquals(Math.sqrt(5734.343), testStatistic.rootLogLikelihoodRatio(1000, 1000, 1000, 100000), 0.001);"
True,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java,288,"Assert.assertEquals(Math.sqrt(5714.932), testStatistic.rootLogLikelihoodRatio(1000, 1000, 1000, 99000), 0.001);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,25,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1122,* Compute a linear combination accurately.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1123,* This method computes the sum of the products
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1124,* <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1125,* It does so by using specific multiplication and addition algorithms to
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1126,* preserve accuracy and reduce cancellation effects.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1127,* <br/>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1128,* It is based on the 2005 paper
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1129,"* <a href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1130,"* Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump,"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1131,* and Shin'ichi Oishi published in SIAM J. Sci. Comput.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1133,* @param a Factors.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1134,* @param b Factors.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1135,* @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1136,* @throws DimensionMismatchException if arrays dimensions don't match
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1137,* @since 3.2
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1139,"public static DerivativeStructure linearCombination(final DerivativeStructure[] a, final DerivativeStructure[] b)"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1140,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1142,"// compute an accurate value, taking care of cancellations"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1143,final double[] aDouble = new double[a.length];
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1144,for (int i = 0; i < a.length; ++i) {
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1145,aDouble[i] = a[i].getValue();
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1147,final double[] bDouble = new double[b.length];
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1148,for (int i = 0; i < b.length; ++i) {
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1149,bDouble[i] = b[i].getValue();
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1151,"final double accurateValue = MathArrays.linearCombination(aDouble, bDouble);"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1153,"// compute a simple value, with all partial derivatives"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1154,DerivativeStructure simpleValue = a[0].getField().getZero();
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1155,for (int i = 0; i < a.length; ++i) {
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1156,simpleValue = simpleValue.add(a[i].multiply(b[i]));
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1159,// create a result with accurate value and all derivatives (not necessarily as accurate as the value)
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1160,final double[] data = simpleValue.getAllDerivatives();
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1161,data[0] = accurateValue;
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1162,"return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1167,* Compute a linear combination accurately.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1168,* This method computes the sum of the products
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1169,* <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1170,* It does so by using specific multiplication and addition algorithms to
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1171,* preserve accuracy and reduce cancellation effects.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1172,* <br/>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1173,* It is based on the 2005 paper
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1174,"* <a href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1175,"* Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump,"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1176,* and Shin'ichi Oishi published in SIAM J. Sci. Comput.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1178,* @param a Factors.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1179,* @param b Factors.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1180,* @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1181,* @throws DimensionMismatchException if arrays dimensions don't match
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1183,"public static DerivativeStructure linearCombination(final double[] a, final DerivativeStructure[] b)"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1184,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1186,"// compute an accurate value, taking care of cancellations"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1187,final double[] bDouble = new double[b.length];
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1188,for (int i = 0; i < b.length; ++i) {
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1189,bDouble[i] = b[i].getValue();
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1191,"final double accurateValue = MathArrays.linearCombination(a, bDouble);"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1193,"// compute a simple value, with all partial derivatives"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1194,DerivativeStructure simpleValue = b[0].getField().getZero();
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1195,for (int i = 0; i < a.length; ++i) {
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1196,simpleValue = simpleValue.add(b[i].multiply(a[i]));
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1199,// create a result with accurate value and all derivatives (not necessarily as accurate as the value)
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1200,final double[] data = simpleValue.getAllDerivatives();
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1201,data[0] = accurateValue;
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1202,"return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1207,* Compute a linear combination accurately.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1208,* <p>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1209,* This method computes a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1210,* a<sub>2</sub>&times;b<sub>2</sub>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1211,* to high accuracy. It does so by using specific multiplication and
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1212,* addition algorithms to preserve accuracy and reduce cancellation effects.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1213,* It is based on the 2005 paper <a
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1214,"* href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1215,"* Accurate Sum and Dot Product</a> by Takeshi Ogita,"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1216,"* Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput."
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1217,* </p>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1218,* @param a1 first factor of the first term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1219,* @param b1 second factor of the first term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1220,* @param a2 first factor of the second term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1221,* @param b2 second factor of the second term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1222,* @return a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1223,* a<sub>2</sub>&times;b<sub>2</sub>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1224,"* @see #linearCombination(DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure)"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1225,"* @see #linearCombination(DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure)"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1226,* @since 3.2
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1228,"public static DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1229,"final DerivativeStructure a2, final DerivativeStructure b2) {"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1231,"// compute an accurate value, taking care of cancellations"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1232,"final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1233,"a2.getValue(), b2.getValue());"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1235,"// compute a simple value, with all partial derivatives"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1236,final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2));
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1238,// create a result with accurate value and all derivatives (not necessarily as accurate as the value)
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1239,final double[] data = simpleValue.getAllDerivatives();
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1240,data[0] = accurateValue;
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1241,"return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1246,* Compute a linear combination accurately.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1247,* <p>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1248,* This method computes a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1249,* a<sub>2</sub>&times;b<sub>2</sub>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1250,* to high accuracy. It does so by using specific multiplication and
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1251,* addition algorithms to preserve accuracy and reduce cancellation effects.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1252,* It is based on the 2005 paper <a
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1253,"* href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1254,"* Accurate Sum and Dot Product</a> by Takeshi Ogita,"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1255,"* Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput."
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1256,* </p>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1257,* @param a1 first factor of the first term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1258,* @param b1 second factor of the first term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1259,* @param a2 first factor of the second term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1260,* @param b2 second factor of the second term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1261,* @return a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1262,* a<sub>2</sub>&times;b<sub>2</sub>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1263,"* @see #linearCombination(double, DerivativeStructure, double, DerivativeStructure, double, DerivativeStructure)"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1264,"* @see #linearCombination(double, DerivativeStructure, double, DerivativeStructure, double, DerivativeStructure, double, DerivativeStructure)"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1265,* @since 3.2
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1267,"public static DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1268,"final double a2, final DerivativeStructure b2) {"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1270,"// compute an accurate value, taking care of cancellations"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1271,"final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1272,"a2, b2.getValue());"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1274,"// compute a simple value, with all partial derivatives"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1275,final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2));
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1277,// create a result with accurate value and all derivatives (not necessarily as accurate as the value)
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1278,final double[] data = simpleValue.getAllDerivatives();
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1279,data[0] = accurateValue;
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1280,"return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1285,* Compute a linear combination accurately.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1286,* <p>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1287,* This method computes a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1288,* a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1289,* to high accuracy. It does so by using specific multiplication and
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1290,* addition algorithms to preserve accuracy and reduce cancellation effects.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1291,* It is based on the 2005 paper <a
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1292,"* href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1293,"* Accurate Sum and Dot Product</a> by Takeshi Ogita,"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1294,"* Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput."
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1295,* </p>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1296,* @param a1 first factor of the first term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1297,* @param b1 second factor of the first term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1298,* @param a2 first factor of the second term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1299,* @param b2 second factor of the second term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1300,* @param a3 first factor of the third term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1301,* @param b3 second factor of the third term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1302,* @return a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1303,* a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1304,"* @see #linearCombination(DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure)"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1305,"* @see #linearCombination(DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure)"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1306,* @since 3.2
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1308,"public static DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1309,"final DerivativeStructure a2, final DerivativeStructure b2,"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1310,"final DerivativeStructure a3, final DerivativeStructure b3) {"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1312,"// compute an accurate value, taking care of cancellations"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1313,"final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1314,"a2.getValue(), b2.getValue(),"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1315,"a3.getValue(), b3.getValue());"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1317,"// compute a simple value, with all partial derivatives"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1318,final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3));
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1320,// create a result with accurate value and all derivatives (not necessarily as accurate as the value)
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1321,final double[] data = simpleValue.getAllDerivatives();
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1322,data[0] = accurateValue;
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1323,"return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1328,* Compute a linear combination accurately.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1329,* <p>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1330,* This method computes a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1331,* a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1332,* to high accuracy. It does so by using specific multiplication and
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1333,* addition algorithms to preserve accuracy and reduce cancellation effects.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1334,* It is based on the 2005 paper <a
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1335,"* href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1336,"* Accurate Sum and Dot Product</a> by Takeshi Ogita,"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1337,"* Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput."
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1338,* </p>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1339,* @param a1 first factor of the first term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1340,* @param b1 second factor of the first term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1341,* @param a2 first factor of the second term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1342,* @param b2 second factor of the second term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1343,* @param a3 first factor of the third term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1344,* @param b3 second factor of the third term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1345,* @return a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1346,* a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1347,"* @see #linearCombination(double, DerivativeStructure, double, DerivativeStructure)"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1348,"* @see #linearCombination(double, DerivativeStructure, double, DerivativeStructure, double, DerivativeStructure, double, DerivativeStructure)"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1349,* @since 3.2
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1351,"public static DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1352,"final double a2, final DerivativeStructure b2,"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1353,"final double a3, final DerivativeStructure b3) {"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1355,"// compute an accurate value, taking care of cancellations"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1356,"final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1357,"a2, b2.getValue(),"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1358,"a3, b3.getValue());"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1360,"// compute a simple value, with all partial derivatives"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1361,final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3));
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1363,// create a result with accurate value and all derivatives (not necessarily as accurate as the value)
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1364,final double[] data = simpleValue.getAllDerivatives();
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1365,data[0] = accurateValue;
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1366,"return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1371,* Compute a linear combination accurately.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1372,* <p>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1373,* This method computes a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1374,* a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub> +
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1375,* a<sub>4</sub>&times;b<sub>4</sub>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1376,* to high accuracy. It does so by using specific multiplication and
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1377,* addition algorithms to preserve accuracy and reduce cancellation effects.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1378,* It is based on the 2005 paper <a
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1379,"* href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1380,"* Accurate Sum and Dot Product</a> by Takeshi Ogita,"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1381,"* Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput."
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1382,* </p>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1383,* @param a1 first factor of the first term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1384,* @param b1 second factor of the first term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1385,* @param a2 first factor of the second term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1386,* @param b2 second factor of the second term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1387,* @param a3 first factor of the third term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1388,* @param b3 second factor of the third term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1389,* @param a4 first factor of the third term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1390,* @param b4 second factor of the third term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1391,* @return a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1392,* a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub> +
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1393,* a<sub>4</sub>&times;b<sub>4</sub>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1394,"* @see #linearCombination(DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure)"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1395,"* @see #linearCombination(DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure)"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1396,* @since 3.2
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1398,"public static DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1399,"final DerivativeStructure a2, final DerivativeStructure b2,"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1400,"final DerivativeStructure a3, final DerivativeStructure b3,"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1401,"final DerivativeStructure a4, final DerivativeStructure b4) {"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1403,"// compute an accurate value, taking care of cancellations"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1404,"final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1405,"a2.getValue(), b2.getValue(),"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1406,"a3.getValue(), b3.getValue(),"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1407,"a4.getValue(), b4.getValue());"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1409,"// compute a simple value, with all partial derivatives"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1410,final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4));
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1412,// create a result with accurate value and all derivatives (not necessarily as accurate as the value)
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1413,final double[] data = simpleValue.getAllDerivatives();
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1414,data[0] = accurateValue;
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1415,"return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1420,* Compute a linear combination accurately.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1421,* <p>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1422,* This method computes a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1423,* a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub> +
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1424,* a<sub>4</sub>&times;b<sub>4</sub>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1425,* to high accuracy. It does so by using specific multiplication and
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1426,* addition algorithms to preserve accuracy and reduce cancellation effects.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1427,* It is based on the 2005 paper <a
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1428,"* href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1429,"* Accurate Sum and Dot Product</a> by Takeshi Ogita,"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1430,"* Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput."
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1431,* </p>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1432,* @param a1 first factor of the first term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1433,* @param b1 second factor of the first term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1434,* @param a2 first factor of the second term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1435,* @param b2 second factor of the second term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1436,* @param a3 first factor of the third term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1437,* @param b3 second factor of the third term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1438,* @param a4 first factor of the third term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1439,* @param b4 second factor of the third term
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1440,* @return a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1441,* a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub> +
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1442,* a<sub>4</sub>&times;b<sub>4</sub>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1443,"* @see #linearCombination(double, DerivativeStructure, double, DerivativeStructure)"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1444,"* @see #linearCombination(double, DerivativeStructure, double, DerivativeStructure, double, DerivativeStructure)"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1445,* @since 3.2
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1447,"public static DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1448,"final double a2, final DerivativeStructure b2,"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1449,"final double a3, final DerivativeStructure b3,"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1450,"final double a4, final DerivativeStructure b4) {"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1452,"// compute an accurate value, taking care of cancellations"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1453,"final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1454,"a2, b2.getValue(),"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1455,"a3, b3.getValue(),"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1456,"a4, b4.getValue());"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1458,"// compute a simple value, with all partial derivatives"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1459,final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4));
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1461,// create a result with accurate value and all derivatives (not necessarily as accurate as the value)
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1462,final double[] data = simpleValue.getAllDerivatives();
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1463,data[0] = accurateValue;
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1464,"return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,18,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,542,"Assert.assertEquals(-1.8551294182586248737720779899, abSumInline, 1.0e-15);"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,544,final double naive = a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,545,Assert.assertTrue(FastMath.abs(naive - abSumInline) > 1.5);
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,723,@Test
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,724,public void testLinearCombination1DSDS() {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,725,final DerivativeStructure[] a = new DerivativeStructure[] {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,726,"new DerivativeStructure(6, 1, 0, -1321008684645961.0 / 268435456.0),"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,727,"new DerivativeStructure(6, 1, 1, -5774608829631843.0 / 268435456.0),"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,728,"new DerivativeStructure(6, 1, 2, -7645843051051357.0 / 8589934592.0)"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,730,final DerivativeStructure[] b = new DerivativeStructure[] {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,731,"new DerivativeStructure(6, 1, 3, -5712344449280879.0 / 2097152.0),"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,732,"new DerivativeStructure(6, 1, 4, -4550117129121957.0 / 2097152.0),"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,733,"new DerivativeStructure(6, 1, 5, 8846951984510141.0 / 131072.0)"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,736,"final DerivativeStructure abSumInline = MathArrays.linearCombination(a[0], b[0],"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,737,"a[1], b[1],"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,738,"a[2], b[2]);"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,739,"final DerivativeStructure abSumArray = MathArrays.linearCombination(a, b);"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,741,"Assert.assertEquals(abSumInline.getValue(), abSumArray.getValue(), 0);"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,742,"Assert.assertEquals(-1.8551294182586248737720779899, abSumInline.getValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,743,"Assert.assertEquals(b[0].getValue(), abSumInline.getPartialDerivative(1, 0, 0, 0, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,744,"Assert.assertEquals(b[1].getValue(), abSumInline.getPartialDerivative(0, 1, 0, 0, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,745,"Assert.assertEquals(b[2].getValue(), abSumInline.getPartialDerivative(0, 0, 1, 0, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,746,"Assert.assertEquals(a[0].getValue(), abSumInline.getPartialDerivative(0, 0, 0, 1, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,747,"Assert.assertEquals(a[1].getValue(), abSumInline.getPartialDerivative(0, 0, 0, 0, 1, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,748,"Assert.assertEquals(a[2].getValue(), abSumInline.getPartialDerivative(0, 0, 0, 0, 0, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,752,@Test
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,753,public void testLinearCombination1DoubleDS() {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,754,final double[] a = new double[] {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,755,"-1321008684645961.0 / 268435456.0,"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,756,"-5774608829631843.0 / 268435456.0,"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,757,-7645843051051357.0 / 8589934592.0
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,759,final DerivativeStructure[] b = new DerivativeStructure[] {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,760,"new DerivativeStructure(3, 1, 0, -5712344449280879.0 / 2097152.0),"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,761,"new DerivativeStructure(3, 1, 1, -4550117129121957.0 / 2097152.0),"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,762,"new DerivativeStructure(3, 1, 2, 8846951984510141.0 / 131072.0)"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,765,"final DerivativeStructure abSumInline = MathArrays.linearCombination(a[0], b[0],"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,766,"a[1], b[1],"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,767,"a[2], b[2]);"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,768,"final DerivativeStructure abSumArray = MathArrays.linearCombination(a, b);"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,770,"Assert.assertEquals(abSumInline.getValue(), abSumArray.getValue(), 0);"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,771,"Assert.assertEquals(-1.8551294182586248737720779899, abSumInline.getValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,772,"Assert.assertEquals(a[0], abSumInline.getPartialDerivative(1, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,773,"Assert.assertEquals(a[1], abSumInline.getPartialDerivative(0, 1, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,774,"Assert.assertEquals(a[2], abSumInline.getPartialDerivative(0, 0, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,778,@Test
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,779,public void testLinearCombination2DSDS() {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,780,// we compare accurate versus naive dot product implementations
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,781,// on regular vectors (i.e. not extreme cases like in the previous test)
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,782,Well1024a random = new Well1024a(0xc6af886975069f11l);
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,784,for (int i = 0; i < 10000; ++i) {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,785,final DerivativeStructure[] u = new DerivativeStructure[4];
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,786,final DerivativeStructure[] v = new DerivativeStructure[4];
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,787,for (int j = 0; j < u.length; ++j) {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,788,"u[j] = new DerivativeStructure(u.length, 1, j, 1e17 * random.nextDouble());"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,789,"v[j] = new DerivativeStructure(u.length, 1, 1e17 * random.nextDouble());"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,792,"DerivativeStructure lin = MathArrays.linearCombination(u[0], v[0], u[1], v[1]);"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,793,double ref = u[0].getValue() * v[0].getValue() +
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,794,u[1].getValue() * v[1].getValue();
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,795,"Assert.assertEquals(ref, lin.getValue(), 1.0e-15 * FastMath.abs(ref));"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,796,"Assert.assertEquals(v[0].getValue(), lin.getPartialDerivative(1, 0, 0, 0), 1.0e-15 * FastMath.abs(v[0].getValue()));"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,797,"Assert.assertEquals(v[1].getValue(), lin.getPartialDerivative(0, 1, 0, 0), 1.0e-15 * FastMath.abs(v[1].getValue()));"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,799,"lin = MathArrays.linearCombination(u[0], v[0], u[1], v[1], u[2], v[2]);"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,800,ref = u[0].getValue() * v[0].getValue() +
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,801,u[1].getValue() * v[1].getValue() +
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,802,u[2].getValue() * v[2].getValue();
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,803,"Assert.assertEquals(ref, lin.getValue(), 1.0e-15 * FastMath.abs(ref));"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,804,"Assert.assertEquals(v[0].getValue(), lin.getPartialDerivative(1, 0, 0, 0), 1.0e-15 * FastMath.abs(v[0].getValue()));"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,805,"Assert.assertEquals(v[1].getValue(), lin.getPartialDerivative(0, 1, 0, 0), 1.0e-15 * FastMath.abs(v[1].getValue()));"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,806,"Assert.assertEquals(v[2].getValue(), lin.getPartialDerivative(0, 0, 1, 0), 1.0e-15 * FastMath.abs(v[2].getValue()));"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,808,"lin = MathArrays.linearCombination(u[0], v[0], u[1], v[1], u[2], v[2], u[3], v[3]);"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,809,ref = u[0].getValue() * v[0].getValue() +
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,810,u[1].getValue() * v[1].getValue() +
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,811,u[2].getValue() * v[2].getValue() +
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,812,u[3].getValue() * v[3].getValue();
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,813,"Assert.assertEquals(ref, lin.getValue(), 1.0e-15 * FastMath.abs(ref));"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,814,"Assert.assertEquals(v[0].getValue(), lin.getPartialDerivative(1, 0, 0, 0), 1.0e-15 * FastMath.abs(v[0].getValue()));"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,815,"Assert.assertEquals(v[1].getValue(), lin.getPartialDerivative(0, 1, 0, 0), 1.0e-15 * FastMath.abs(v[1].getValue()));"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,816,"Assert.assertEquals(v[2].getValue(), lin.getPartialDerivative(0, 0, 1, 0), 1.0e-15 * FastMath.abs(v[2].getValue()));"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,817,"Assert.assertEquals(v[3].getValue(), lin.getPartialDerivative(0, 0, 0, 1), 1.0e-15 * FastMath.abs(v[3].getValue()));"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,822,@Test
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,823,public void testLinearCombination2DoubleDS() {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,824,// we compare accurate versus naive dot product implementations
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,825,// on regular vectors (i.e. not extreme cases like in the previous test)
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,826,Well1024a random = new Well1024a(0xc6af886975069f11l);
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,828,for (int i = 0; i < 10000; ++i) {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,829,final double[] u = new double[4];
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,830,final DerivativeStructure[] v = new DerivativeStructure[4];
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,831,for (int j = 0; j < u.length; ++j) {
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,832,u[j] = 1e17 * random.nextDouble();
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,833,"v[j] = new DerivativeStructure(u.length, 1, j, 1e17 * random.nextDouble());"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,836,"DerivativeStructure lin = MathArrays.linearCombination(u[0], v[0], u[1], v[1]);"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,837,double ref = u[0] * v[0].getValue() +
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,838,u[1] * v[1].getValue();
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,839,"Assert.assertEquals(ref, lin.getValue(), 1.0e-15 * FastMath.abs(ref));"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,840,"Assert.assertEquals(u[0], lin.getPartialDerivative(1, 0, 0, 0), 1.0e-15 * FastMath.abs(v[0].getValue()));"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,841,"Assert.assertEquals(u[1], lin.getPartialDerivative(0, 1, 0, 0), 1.0e-15 * FastMath.abs(v[1].getValue()));"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,843,"lin = MathArrays.linearCombination(u[0], v[0], u[1], v[1], u[2], v[2]);"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,844,ref = u[0] * v[0].getValue() +
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,845,u[1] * v[1].getValue() +
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,846,u[2] * v[2].getValue();
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,847,"Assert.assertEquals(ref, lin.getValue(), 1.0e-15 * FastMath.abs(ref));"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,848,"Assert.assertEquals(u[0], lin.getPartialDerivative(1, 0, 0, 0), 1.0e-15 * FastMath.abs(v[0].getValue()));"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,849,"Assert.assertEquals(u[1], lin.getPartialDerivative(0, 1, 0, 0), 1.0e-15 * FastMath.abs(v[1].getValue()));"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,850,"Assert.assertEquals(u[2], lin.getPartialDerivative(0, 0, 1, 0), 1.0e-15 * FastMath.abs(v[2].getValue()));"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,852,"lin = MathArrays.linearCombination(u[0], v[0], u[1], v[1], u[2], v[2], u[3], v[3]);"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,853,ref = u[0] * v[0].getValue() +
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,854,u[1] * v[1].getValue() +
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,855,u[2] * v[2].getValue() +
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,856,u[3] * v[3].getValue();
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,857,"Assert.assertEquals(ref, lin.getValue(), 1.0e-15 * FastMath.abs(ref));"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,858,"Assert.assertEquals(u[0], lin.getPartialDerivative(1, 0, 0, 0), 1.0e-15 * FastMath.abs(v[0].getValue()));"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,859,"Assert.assertEquals(u[1], lin.getPartialDerivative(0, 1, 0, 0), 1.0e-15 * FastMath.abs(v[1].getValue()));"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,860,"Assert.assertEquals(u[2], lin.getPartialDerivative(0, 0, 1, 0), 1.0e-15 * FastMath.abs(v[2].getValue()));"
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,861,"Assert.assertEquals(u[3], lin.getPartialDerivative(0, 0, 0, 1), 1.0e-15 * FastMath.abs(v[3].getValue()));"

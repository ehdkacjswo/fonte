is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java,326,f ((x >= -threshold) && (x <= threshold)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java,326,if (FastMath.abs(x) <= threshold) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java,329, else if ((y >= -threshold) && (y <= threshold)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java,329,} else if (FastMath.abs(y) <= threshold) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,25,import org.apache.commons.math3.TestUtils;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,28,import org.apache.commons.math3.geometry.Space;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,57,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,58,public void testSpace() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,59,"Space space = new Vector3D(1, 2, 2).getSpace();"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,60,"Assert.assertEquals(3, space.getDimension());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,61,"Assert.assertEquals(2, space.getSubSpace().getDimension());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,62,Space deserialized = (Space) TestUtils.serializeAndRecover(space);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,63,Assert.assertTrue(space == deserialized);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,66,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,67,public void testZero() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,68,"Assert.assertEquals(0, new Vector3D(1, 2, 2).getZero().getNorm(), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,59,"ector3D v  = new Vector3D(1, 2, 3 + 10 * Precision.EPSILON);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,62,ssert.assertFalse(u1.equals(v));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,77,"Assert.assertFalse(u1.equals(new Rotation(1, 0, 0, 0, false)));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,78,"Assert.assertFalse(u1.equals(new Vector3D(1, 2, 3 + 10 * Precision.EPSILON)));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,79,"Assert.assertFalse(u1.equals(new Vector3D(1, 2 + 10 * Precision.EPSILON, 3)));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,80,"Assert.assertFalse(u1.equals(new Vector3D(1 + 10 * Precision.EPSILON, 2, 3)));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,101,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,102,public void testNaN() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,103,"Assert.assertTrue(new Vector3D(1, 1, Double.NaN).isNaN());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,104,"Assert.assertTrue(new Vector3D(1, Double.NaN, 1).isNaN());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,105,"Assert.assertTrue(new Vector3D(Double.NaN, 1, 1).isNaN());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,106,"Assert.assertFalse(new Vector3D(1, 1, 2).isNaN());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,107,"Assert.assertFalse(new Vector3D(1, 1, Double.NEGATIVE_INFINITY).isNaN());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,146,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,147,public void testNormSq() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,148,"Assert.assertEquals(0.0, new Vector3D(0, 0, 0).getNormSq(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,149,"Assert.assertEquals(14, new Vector3D(1, 2, 3).getNormSq(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,289,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,290,public void testNegate() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,291,"checkVector(new Vector3D(0.1, 2.5, 1.3).negate(), -0.1, -2.5, -1.3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,302,"Vector3D v4 = new Vector3D(4.2, 0.1, -1.8);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,303,"Assert.assertEquals(0.0, Vector3D.dotProduct(v4, v4.orthogonal()), 1.0e-12);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,18,package org.apache.commons.math3.linear;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,20,import java.text.FieldPosition;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,21,import java.text.NumberFormat;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,22,import java.text.ParsePosition;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,23,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,24,import java.util.List;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,25,import java.util.Locale;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,27,import org.apache.commons.math3.exception.MathParseException;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,28,import org.apache.commons.math3.util.CompositeFormat;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,31,* Formats a {@code nxm} matrix in components list format
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,32,"* ""[a<sub>0</sub><sub>0</sub>, a<sub>0</sub><sub>1</sub>, ...,"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,33,"* a<sub>0</sub><sub>m-1</sub>; a<sub>1</sub><sub>0</sub>,"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,34,"* a<sub>1</sub><sub>1</sub>, ..., a<sub>1</sub><sub>m-1</sub>; ...;"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,35,"* a<sub>n-1</sub><sub>0</sub>, a<sub>n-1</sub><sub>1</sub>, ...,"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,36,"* a<sub>n-1</sub><sub>m-1</sub>}""."
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,37,"* <p>The prefix and suffix ""["" and ""]"", the row separator ""; "" and the column"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,38,"* separator "", "" can be replaced by any user-defined strings. The number format"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,39,* for components can be configured.</p>
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,41,"* <p>White space is ignored at parse time, even if it is in the prefix, suffix"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,42,* or separator specifications. So even if the default separator does include a space
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,43,"* character that is used at format time, both input string ""[1,1,1]"" and"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,44,"* "" [ 1 , 1 , 1 ] "" will be parsed without error and the same vector will be"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,45,"* returned. In the second case, however, the parse position after parsing will be"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,46,"* just after the closing curly brace, i.e. just before the trailing space.</p>"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,48,* <p><b>Note:</b> the grouping functionality of the used {@link NumberFormat} is
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,49,"* disabled to prevent problems when parsing (e.g. 1,345.34 would be a valid number"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,50,* but conflicts with the default column separator).</p>
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,52,* @since 3.1
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,53,* @version $Id$
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,55,public class RealMatrixFormat {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,57,"/** The default prefix: ""{"". */"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,58,"private static final String DEFAULT_PREFIX = ""["";"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,59,"/** The default suffix: ""}"". */"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,60,"private static final String DEFAULT_SUFFIX = ""]"";"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,61,"/** The default row separator: "";"". */"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,62,"private static final String DEFAULT_ROW_SEPARATOR = ""; "";"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,63,"/** The default column separator: "", "". */"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,64,"private static final String DEFAULT_COLUMN_SEPARATOR = "", "";"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,65,/** Prefix. */
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,66,private final String prefix;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,67,/** Suffix. */
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,68,private final String suffix;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,69,/** Row separator. */
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,70,private final String rowSeparator;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,71,/** Column separator. */
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,72,private final String columnSeparator;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,73,/** Trimmed prefix. */
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,74,private final String trimmedPrefix;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,75,/** Trimmed suffix. */
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,76,private final String trimmedSuffix;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,77,/** Trimmed row separator. */
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,78,private final String trimmedRowSeparator;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,79,/** Trimmed column separator. */
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,80,private final String trimmedColumnSeparator;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,81,/** The format used for components. */
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,82,private final NumberFormat format;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,85,* Create an instance with default settings.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,86,"* <p>The instance uses the default prefix, suffix and row/column separator:"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,87,"* ""["", ""]"", "";"" and "", "" and the default number format for components.</p>"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,89,public RealMatrixFormat() {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,90,"this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_SEPARATOR, DEFAULT_COLUMN_SEPARATOR,"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,91,CompositeFormat.getDefaultNumberFormat());
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,95,* Create an instance with a custom number format for components.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,96,* @param format the custom format for components.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,98,public RealMatrixFormat(final NumberFormat format) {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,99,"this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_SEPARATOR, DEFAULT_COLUMN_SEPARATOR, format);"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,103,"* Create an instance with custom prefix, suffix and separator."
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,104,"* @param prefix prefix to use instead of the default ""{"""
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,105,"* @param suffix suffix to use instead of the default ""}"""
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,106,"* @param rowSeparator tow separator to use instead of the default "";"""
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,107,"* @param columnSeparator column separator to use instead of the default "", """
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,109,"public RealMatrixFormat(final String prefix, final String suffix,"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,110,"final String rowSeparator, final String columnSeparator) {"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,111,"this(prefix, suffix, rowSeparator, columnSeparator, CompositeFormat.getDefaultNumberFormat());"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,115,"* Create an instance with custom prefix, suffix, separator and format"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,116,* for components.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,117,"* @param prefix prefix to use instead of the default ""{"""
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,118,"* @param suffix suffix to use instead of the default ""}"""
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,119,"* @param rowSeparator tow separator to use instead of the default "";"""
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,120,"* @param columnSeparator column separator to use instead of the default "", """
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,121,* @param format the custom format for components.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,123,"public RealMatrixFormat(final String prefix, final String suffix,"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,124,"final String rowSeparator, final String columnSeparator,"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,125,final NumberFormat format) {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,126,this.prefix            = prefix;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,127,this.suffix            = suffix;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,128,this.rowSeparator      = rowSeparator;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,129,this.columnSeparator   = columnSeparator;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,130,trimmedPrefix          = prefix.trim();
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,131,trimmedSuffix          = suffix.trim();
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,132,trimmedRowSeparator    = rowSeparator.trim();
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,133,trimmedColumnSeparator = columnSeparator.trim();
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,134,this.format            = format;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,135,// disable grouping to prevent parsing problems
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,136,this.format.setGroupingUsed(false);
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,140,* Get the set of locales for which real vectors formats are available.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,141,* <p>This is the same set as the {@link NumberFormat} set.</p>
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,142,* @return available real vector format locales.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,144,public static Locale[] getAvailableLocales() {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,145,return NumberFormat.getAvailableLocales();
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,149,* Get the format prefix.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,150,* @return format prefix.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,152,public String getPrefix() {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,153,return prefix;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,157,* Get the format suffix.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,158,* @return format suffix.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,160,public String getSuffix() {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,161,return suffix;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,165,* Get the format separator between rows of the matrix.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,166,* @return format separator for rows.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,168,public String getRowSeparator() {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,169,return rowSeparator;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,173,* Get the format separator between components.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,174,* @return format separator between components.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,176,public String getColumnSeparator() {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,177,return columnSeparator;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,181,* Get the components format.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,182,* @return components format.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,184,public NumberFormat getFormat() {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,185,return format;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,189,* Returns the default real vector format for the current locale.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,190,* @return the default real vector format.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,192,public static RealMatrixFormat getInstance() {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,193,return getInstance(Locale.getDefault());
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,197,* Returns the default real vector format for the given locale.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,198,* @param locale the specific locale used by the format.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,199,* @return the real vector format specific to the given locale.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,201,public static RealMatrixFormat getInstance(final Locale locale) {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,202,return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,206,"* This method calls {@link #format(RealMatrix,StringBuffer,FieldPosition)}."
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,208,* @param m RealMatrix object to format.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,209,* @return a formatted matrix.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,211,public String format(RealMatrix m) {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,212,"return format(m, new StringBuffer(), new FieldPosition(0)).toString();"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,216,* Formats a {@link RealMatrix} object to produce a string.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,217,* @param matrix the object to format.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,218,* @param toAppendTo where the text is to be appended
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,219,"* @param pos On input: an alignment field, if desired. On output: the"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,220,*            offsets of the alignment field
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,221,* @return the value passed in as toAppendTo.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,223,"public StringBuffer format(RealMatrix matrix, StringBuffer toAppendTo,"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,224,FieldPosition pos) {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,226,pos.setBeginIndex(0);
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,227,pos.setEndIndex(0);
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,229,// format prefix
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,230,toAppendTo.append(prefix);
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,232,// format rows
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,233,final int rows = matrix.getRowDimension();
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,234,for (int i = 0; i < rows; ++i) {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,235,for (int j = 0; j < matrix.getColumnDimension(); ++j) {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,236,if (j > 0) {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,237,toAppendTo.append(columnSeparator);
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,239,"CompositeFormat.formatDouble(matrix.getEntry(i, j), format, toAppendTo, pos);"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,241,if (i < rows - 1) {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,242,toAppendTo.append(rowSeparator);
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,246,// format suffix
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,247,toAppendTo.append(suffix);
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,249,return toAppendTo;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,253,* Parse a string to produce a {@link RealMatrix} object.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,255,* @param source String to parse.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,256,* @return the parsed {@link RealMatrix} object.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,257,* @throws MathParseException if the beginning of the specified string
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,258,* cannot be parsed.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,260,public RealMatrix parse(String source) {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,261,final ParsePosition parsePosition = new ParsePosition(0);
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,262,"final RealMatrix result = parse(source, parsePosition);"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,263,if (parsePosition.getIndex() == 0) {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,264,"throw new MathParseException(source,"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,265,"parsePosition.getErrorIndex(),"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,266,Array2DRowRealMatrix.class);
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,268,return result;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,272,* Parse a string to produce a {@link RealMatrix} object.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,274,* @param source String to parse.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,275,* @param pos input/ouput parsing parameter.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,276,* @return the parsed {@link RealMatrix} object.
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,278,"public RealMatrix parse(String source, ParsePosition pos) {"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,279,int initialIndex = pos.getIndex();
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,281,// parse prefix
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,282,"CompositeFormat.parseAndIgnoreWhitespace(source, pos);"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,283,"if (!CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)) {"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,284,return null;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,287,// parse components
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,288,List<List<Number>> matrix = new ArrayList<List<Number>>();
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,289,List<Number> rowComponents = new ArrayList<Number>();
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,290,for (boolean loop = true; loop;){
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,292,if (!rowComponents.isEmpty()) {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,293,"CompositeFormat.parseAndIgnoreWhitespace(source, pos);"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,294,"if (!CompositeFormat.parseFixedstring(source, trimmedColumnSeparator, pos)) {"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,295,"if (CompositeFormat.parseFixedstring(source, trimmedRowSeparator, pos)) {"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,296,matrix.add(rowComponents);
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,297,rowComponents = new ArrayList<Number>();
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,298,} else {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,299,loop = false;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,304,if (loop) {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,305,"CompositeFormat.parseAndIgnoreWhitespace(source, pos);"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,306,"Number component = CompositeFormat.parseNumber(source, format, pos);"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,307,if (component != null) {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,308,rowComponents.add(component);
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,309,} else {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,310,if (rowComponents.isEmpty()) {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,311,loop = false;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,312,} else {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,313,// invalid component
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,314,"// set index back to initial, error index should already be set"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,315,pos.setIndex(initialIndex);
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,316,return null;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,323,if (!rowComponents.isEmpty()) {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,324,matrix.add(rowComponents);
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,327,// parse suffix
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,328,"CompositeFormat.parseAndIgnoreWhitespace(source, pos);"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,329,"if (!CompositeFormat.parseFixedstring(source, trimmedSuffix, pos)) {"
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,330,return null;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,333,// do not allow an empty matrix
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,334,if (matrix.isEmpty()) {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,335,pos.setIndex(initialIndex);
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,336,return null;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,339,// build vector
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,340,double[][] data = new double[matrix.size()][];
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,341,int row = 0;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,342,for (List<Number> rowList : matrix) {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,343,data[row] = new double[rowList.size()];
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,344,for (int i = 0; i < rowList.size(); i++) {
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,345,data[row][i] = rowList.get(i).doubleValue();
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,347,row++;
True,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java,349,return MatrixUtils.createRealMatrix(data);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,18,package org.apache.commons.math3.linear;
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,20,import java.text.NumberFormat;
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,21,import java.text.ParsePosition;
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,22,import java.util.Locale;
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,24,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,25,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,27,import org.apache.commons.math3.exception.MathParseException;
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,29,public abstract class RealMatrixFormatAbstractTest {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,31,RealMatrixFormat realMatrixFormat = null;
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,32,RealMatrixFormat realMatrixFormatOther = null;
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,34,protected abstract Locale getLocale();
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,36,protected abstract char getDecimalCharacter();
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,38,public RealMatrixFormatAbstractTest() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,39,realMatrixFormat = RealMatrixFormat.getInstance(getLocale());
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,40,final NumberFormat nf = NumberFormat.getInstance(getLocale());
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,41,nf.setMaximumFractionDigits(2);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,42,"realMatrixFormatOther = new RealMatrixFormat(""{"", ""}"", "", "", "" : "", nf);"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,45,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,46,public void testSimpleNoDecimals() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,47,"RealMatrix m = MatrixUtils.createRealMatrix(new double[][] {{1, 1, 1}, {1, 1, 1}});"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,48,"String expected = ""[1, 1, 1; 1, 1, 1]"";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,49,String actual = realMatrixFormat.format(m);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,50,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,53,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,54,public void testSimpleWithDecimals() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,55,"RealMatrix m = MatrixUtils.createRealMatrix(new double[][] {{1.23, 1.43, 1.63}, {2.46, 2.46, 2.66}});"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,56,String expected =
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,57,"""[1""    + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,58,"""23, 1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,59,"""43, 1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,60,"""63; 2"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,61,"""46, 2"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,62,"""46, 2"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,63,"""66]"";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,64,String actual = realMatrixFormat.format(m);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,65,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,68,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,69,public void testSimpleWithDecimalsTrunc() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,70,"RealMatrix m = MatrixUtils.createRealMatrix(new double[][] {{1.2323, 1.4343, 1.6333},"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,71,"{2.4666, 2.4666, 2.6666}});"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,72,String expected =
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,73,"""[1""    + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,74,"""23, 1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,75,"""43, 1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,76,"""63; 2"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,77,"""47, 2"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,78,"""47, 2"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,79,"""67]"";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,80,String actual = realMatrixFormat.format(m);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,81,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,84,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,85,public void testNegativeX() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,86,"RealMatrix m = MatrixUtils.createRealMatrix(new double[][] {{-1.2323, 1.4343, 1.6333},"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,87,"{2.4666, 2.4666, 2.6666}});"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,88,String expected =
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,89,"""[-1""    + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,90,"""23, 1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,91,"""43, 1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,92,"""63; 2"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,93,"""47, 2"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,94,"""47, 2"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,95,"""67]"";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,96,String actual = realMatrixFormat.format(m);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,97,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,100,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,101,public void testNegativeY() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,102,"RealMatrix m = MatrixUtils.createRealMatrix(new double[][] {{1.2323, -1.4343, 1.6333},"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,103,"{2.4666, 2.4666, 2.6666}});"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,104,String expected =
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,105,"""[1""    + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,106,"""23, -1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,107,"""43, 1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,108,"""63; 2"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,109,"""47, 2"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,110,"""47, 2"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,111,"""67]"";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,112,String actual = realMatrixFormat.format(m);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,113,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,116,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,117,public void testNegativeSecondRow() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,118,"RealMatrix m = MatrixUtils.createRealMatrix(new double[][] {{1.2323, 1.4343, 1.6333},"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,119,"{-2.4666, 2.4666, 2.6666}});"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,120,String expected =
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,121,"""[1""    + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,122,"""23, 1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,123,"""43, 1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,124,"""63; -2"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,125,"""47, 2"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,126,"""47, 2"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,127,"""67]"";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,128,String actual = realMatrixFormat.format(m);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,129,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,132,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,133,public void testNonDefaultSetting() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,134,"RealMatrix m = MatrixUtils.createRealMatrix(new double[][] {{1, 1, 1}, {1, 1, 1}});"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,135,"String expected = ""{1 : 1 : 1, 1 : 1 : 1}"";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,136,String actual = realMatrixFormatOther.format(m);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,137,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,140,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,141,public void testDefaultFormatRealVectorImpl() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,142,Locale defaultLocal = Locale.getDefault();
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,143,Locale.setDefault(getLocale());
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,145,"RealMatrix m = MatrixUtils.createRealMatrix(new double[][] {{232.222, -342.33, 432.444}});"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,146,String expected =
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,147,"""[232""    + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,148,"""22, -342"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,149,"""33, 432"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,150,"""44]"";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,151,String actual = (new RealMatrixFormat()).format(m);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,152,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,154,Locale.setDefault(defaultLocal);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,157,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,158,public void testNan() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,159,"RealMatrix m = MatrixUtils.createRealMatrix(new double[][] {{Double.NaN, Double.NaN, Double.NaN}});"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,160,"String expected = ""[(NaN), (NaN), (NaN)]"";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,161,String actual = realMatrixFormat.format(m);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,162,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,165,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,166,public void testPositiveInfinity() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,167,RealMatrix m = MatrixUtils.createRealMatrix(
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,168,"new double[][] {{Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}});"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,169,"String expected = ""[(Infinity), (Infinity), (Infinity)]"";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,170,String actual = realMatrixFormat.format(m);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,171,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,174,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,175,public void tesNegativeInfinity() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,176,RealMatrix m = MatrixUtils.createRealMatrix(
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,177,"new double[][] {{Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}});"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,178,"String expected = ""[(-Infinity), (-Infinity), (-Infinity)]"";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,179,String actual = realMatrixFormat.format(m);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,180,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,183,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,184,public void testParseSimpleNoDecimals() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,185,"String source = ""[1, 1, 1; 1, 1, 1]"";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,186,"RealMatrix expected = MatrixUtils.createRealMatrix(new double[][] {{1, 1, 1}, {1, 1, 1}});"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,187,RealMatrix actual = realMatrixFormat.parse(source);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,188,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,191,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,192,public void testParseSimpleWithClosingRowSeparator() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,193,"String source = ""[1, 1, 1; 1, 1, 1 ;]"";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,194,"RealMatrix expected = MatrixUtils.createRealMatrix(new double[][] {{1, 1, 1}, {1, 1, 1}});"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,195,RealMatrix actual = realMatrixFormat.parse(source);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,196,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,199,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,200,public void testParseIgnoredWhitespace() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,201,"RealMatrix expected = MatrixUtils.createRealMatrix(new double[][] {{1, 1, 1}, {1, 1, 1}});"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,202,ParsePosition pos1 = new ParsePosition(0);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,203,"String source1 = ""[1,1,1;1,1,1]"";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,204,"Assert.assertEquals(expected, realMatrixFormat.parse(source1, pos1));"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,205,"Assert.assertEquals(source1.length(), pos1.getIndex());"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,206,ParsePosition pos2 = new ParsePosition(0);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,207,"String source2 = "" [ 1 , 1 , 1 ; 1 , 1 , 1 ] "";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,208,"Assert.assertEquals(expected, realMatrixFormat.parse(source2, pos2));"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,209,"Assert.assertEquals(source2.length() - 1, pos2.getIndex());"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,212,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,213,public void testParseSimpleWithDecimals() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,214,String source =
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,215,"""[1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,216,"""23, 1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,217,"""43, 1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,218,"""63]"";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,219,"RealMatrix expected = MatrixUtils.createRealMatrix(new double[][] {{1.23, 1.43, 1.63}});"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,220,RealMatrix actual = realMatrixFormat.parse(source);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,221,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,224,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,225,public void testParseSimpleWithDecimalsTrunc() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,226,String source =
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,227,"""[1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,228,"""2323, 1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,229,"""4343, 1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,230,"""6333]"";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,231,"RealMatrix expected = MatrixUtils.createRealMatrix(new double[][] {{1.2323, 1.4343, 1.6333}});"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,232,RealMatrix actual = realMatrixFormat.parse(source);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,233,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,236,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,237,public void testParseNegativeComponent() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,238,String source =
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,239,"""[-1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,240,"""2323, 1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,241,"""4343, 1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,242,"""6333]"";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,243,"RealMatrix expected = MatrixUtils.createRealMatrix(new double[][] {{-1.2323, 1.4343, 1.6333}});"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,244,RealMatrix actual = realMatrixFormat.parse(source);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,245,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,248,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,249,public void testParseNegativeAll() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,250,String source =
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,251,"""[-1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,252,"""2323, -1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,253,"""4343, -1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,254,"""6333]"";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,255,"RealMatrix expected = MatrixUtils.createRealMatrix(new double[][] {{-1.2323, -1.4343, -1.6333}});"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,256,RealMatrix actual = realMatrixFormat.parse(source);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,257,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,260,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,261,public void testParseZeroComponent() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,262,String source =
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,263,"""[0"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,264,"""0, -1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,265,"""4343, 1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,266,"""6333]"";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,267,"RealMatrix expected = MatrixUtils.createRealMatrix(new double[][] {{0.0, -1.4343, 1.6333}});"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,268,RealMatrix actual = realMatrixFormat.parse(source);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,269,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,272,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,273,public void testParseNonDefaultSetting() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,274,String source =
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,275,"""{1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,276,"""2323 : 1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,277,"""4343 : 1"" + getDecimalCharacter() +"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,278,"""6333}"";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,279,"RealMatrix expected = MatrixUtils.createRealMatrix(new double[][] {{1.2323, 1.4343, 1.6333}});"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,280,RealMatrix actual = realMatrixFormatOther.parse(source);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,281,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,284,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,285,public void testParseNan() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,286,"String source = ""[(NaN), (NaN), (NaN)]"";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,287,RealMatrix actual = realMatrixFormat.parse(source);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,288,"RealMatrix expected = MatrixUtils.createRealMatrix(new double[][] {{Double.NaN, Double.NaN, Double.NaN}});"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,289,for (int i = 0; i < expected.getRowDimension(); i++) {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,290,for (int j = 0; j < expected.getColumnDimension(); j++) {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,291,"Assert.assertTrue(Double.isNaN(actual.getEntry(i, j)));"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,296,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,297,public void testParsePositiveInfinity() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,298,"String source = ""[(Infinity), (Infinity), (Infinity)]"";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,299,RealMatrix actual = realMatrixFormat.parse(source);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,300,RealMatrix expected = MatrixUtils.createRealMatrix(
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,301,"new double[][] {{Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}});"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,302,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,305,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,306,public void testParseNegativeInfinity() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,307,"String source = ""[(-Infinity), (-Infinity), (-Infinity)]"";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,308,RealMatrix actual = realMatrixFormat.parse(source);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,309,RealMatrix expected = MatrixUtils.createRealMatrix(
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,310,"new double[][] {{Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}});"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,311,"Assert.assertEquals(expected, actual);"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,314,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,315,public void testParseNoComponents() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,316,try {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,317,"realMatrixFormat.parse(""[ ]"");"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,318,"Assert.fail(""Expecting MathParseException"");"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,319,} catch (MathParseException pe) {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,320,// expected behavior
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,324,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,325,public void testParseManyComponents() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,326,"RealMatrix parsed = realMatrixFormat.parse(""[0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0]"");"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,327,"Assert.assertEquals(24, parsed.getRowDimension());"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,330,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,331,public void testConstructorSingleFormat() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,332,NumberFormat nf = NumberFormat.getInstance();
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,333,RealMatrixFormat mf = new RealMatrixFormat(nf);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,334,Assert.assertNotNull(mf);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,335,"Assert.assertEquals(nf, mf.getFormat());"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,338,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,339,public void testForgottenPrefix() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,340,ParsePosition pos = new ParsePosition(0);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,341,"final String source = ""1; 1; 1]"";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,342,"Assert.assertNull(""Should not parse <""+source+"">"", new RealMatrixFormat().parse(source, pos));"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,343,"Assert.assertEquals(0, pos.getErrorIndex());"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,346,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,347,public void testForgottenSeparator() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,348,ParsePosition pos = new ParsePosition(0);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,349,"final String source = ""[1; 1 1]"";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,350,"Assert.assertNull(""Should not parse <""+source+"">"", new RealMatrixFormat().parse(source, pos));"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,351,"Assert.assertEquals(6, pos.getErrorIndex());"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,354,@Test
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,355,public void testForgottenSuffix() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,356,ParsePosition pos = new ParsePosition(0);
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,357,"final String source = ""[1; 1; 1 "";"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,358,"Assert.assertNull(""Should not parse <""+source+"">"", new RealMatrixFormat().parse(source, pos));"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java,359,"Assert.assertEquals(8, pos.getErrorIndex());"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,18,package org.apache.commons.math3.linear;
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,20,import java.util.Locale;
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,23,public class RealMatrixFormatTest extends RealMatrixFormatAbstractTest {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,25,@Override
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,26,protected char getDecimalCharacter() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,27,return '.';
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,30,@Override
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,31,protected Locale getLocale() {
True,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java,32,return Locale.US;

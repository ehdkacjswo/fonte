is_addition,old_file_path,new_file_path,line_num,content
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,19,mport org.apache.commons.math.analysis.function.Add;
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,20,mport org.apache.commons.math.analysis.MultivariateRealFunction;
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,21,mport org.apache.commons.math.analysis.FunctionUtils;
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,19,import java.util.concurrent.Callable;
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,20,import org.apache.commons.math.stat.descriptive.DescriptiveStatistics;
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,21,import org.apache.commons.math.exception.MathIllegalStateException;
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,29,/** Default number of code repeat per timed block. */
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,30,private static final int DEFAULT_REPEAT_CHUNK = 1000;
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,31,/** Default number of code repeats for computing the average run time. */
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,32,private static final int DEFAULT_REPEAT_STAT = 10000;
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,35, @param repeatStat Timing will be averaged over that number of runs.
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,36, @param methods Code being timed.
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,37," @return for each of the given {@code methods}, the averaged time (in"
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,38, milliseconds) taken by a call to {@code run}.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,39,* @param repeatStat Timing will be averaged over that number of runs.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,40,* @param runGC Call {@code System.gc()} between each timed block. When
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,41,"* set to {@code true}, the test will run much slower."
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,42,* @param methods Codes being timed.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,43,"* @return for each of the given {@code methods}, a statistics of the"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,44,* average times (in milliseconds) taken by a single call to the
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,45,* {@code call} method (i.e. the time taken by each timed block divided
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,46,* by {@code repeatChunk}).
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,40,"ublic static double[] time(int repeatChunk,"
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,41,"nt repeatStat,"
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,42,unnable ... methods) {
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,48,"public static DescriptiveStatistics[] time(int repeatChunk,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,49,"int repeatStat,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,50,"boolean runGC,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,51,Callable<Double> ... methods) {
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,52,"final double[][][] times = timesAndResults(repeatChunk,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,53,"repeatStat,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,54,"runGC,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,55,methods);
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,57,final int len = methods.length;
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,58,final DescriptiveStatistics[] stats = new DescriptiveStatistics[len];
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,59,for (int j = 0; j < len; j++) {
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,60,final DescriptiveStatistics s = new DescriptiveStatistics();
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,61,for (int k = 0; k < repeatStat; k++) {
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,62,s.addValue(times[j][k][0]);
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,64,stats[j] = s;
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,67,return stats;
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,71,* Timing.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,73,* @param repeatChunk Each timing measurement will done done for that
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,74,* number of repeats of the code.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,75,* @param repeatStat Timing will be averaged over that number of runs.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,76,* @param runGC Call {@code System.gc()} between each timed block. When
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,77,"* set to {@code true}, the test will run much slower."
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,78,* @param methods Codes being timed.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,79,"* @return for each of the given {@code methods} (first dimension), and"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,80,* each of the {@code repeatStat} runs (second dimension):
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,81,* <ul>
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,82,*  <li>
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,83,*   the average time (in milliseconds) taken by a single call to the
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,84,*   {@code call} method (i.e. the time taken by each timed block divided
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,85,*   by {@code repeatChunk})
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,86,* </li>
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,87,* <li>
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,88,*  the result returned by the {@code call} method.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,89,* </li>
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,91,"public static double[][][] timesAndResults(int repeatChunk,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,92,"int repeatStat,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,93,"boolean runGC,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,94,Callable<Double> ... methods) {
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,44,inal double[][] times = new double[numMethods][repeatStat];
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,46,or (int k = 0; k < repeatStat; k++) {
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,47,or (int j = 0; j < numMethods; j++) {
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,48,inal Runnable r = methods[j];
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,49,inal long start = System.nanoTime();
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,50,or (int i = 0; i < repeatChunk; i++) {
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,51,.run();
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,96,final double[][][] timesAndResults = new double[numMethods][repeatStat][2];
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,98,try {
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,99,for (int k = 0; k < repeatStat; k++) {
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,100,for (int j = 0; j < numMethods; j++) {
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,101,if (runGC) {
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,102,// Try to perform GC outside the timed block.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,103,System.gc();
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,106,final Callable<Double> r = methods[j];
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,107,double result = 0;
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,109,// Timed block.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,110,final long start = System.nanoTime();
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,111,for (int i = 0; i < repeatChunk; i++) {
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,112,result = r.call();
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,114,final long stop = System.nanoTime();
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,116,// Collect run time and results.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,117,timesAndResults[j][k][0] = (stop - start) * NANO_TO_MILLI;
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,118,timesAndResults[j][k][1] = result;
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,53,imes[j][k] = (System.nanoTime() - start) * NANO_TO_MILLI;
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,121,} catch (Exception e) {
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,122,// Abort benchmarking if codes throw exceptions.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,123,throw new MathIllegalStateException();
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,57,"inal MultivariateRealFunction acc = FunctionUtils.collector(new Add(), 0);"
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,58,inal double[] avgTimes = new double[numMethods];
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,60,inal double normFactor = 1d / (repeatStat * repeatChunk);
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,126,final double normFactor = 1d / repeatChunk;
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,62,vgTimes[j] = normFactor * acc.value(times[j]);
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,128,for (int k = 0; k < repeatStat; k++) {
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,129,timesAndResults[j][k][0] *= normFactor;
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,65,eturn avgTimes;
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,133,return timesAndResults;
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,69, Timing and report (to standard output).
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,137,* Timing and report (to standard output) the average time and standard
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,138,* deviation of a single call.
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,74, @param repeatStat Timing will be averaged over that number of runs.
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,75, @param methods Code being timed.
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,76," @return for each of the given {@code methods}, the averaged time (in"
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,77, milliseconds) taken by a call to {@code run}.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,143,* @param repeatStat Timing will be averaged over that number of runs.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,144,* @param runGC Call {@code System.gc()} between each timed block. When
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,145,"* set to {@code true}, the test will run much slower."
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,146,* @param methods Codes being timed.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,147,"* @return for each of the given {@code methods}, a statistics of the"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,148,* average times (in milliseconds) taken by a single call to the
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,149,* {@code call} method (i.e. the time taken by each timed block divided
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,150,* by {@code repeatChunk}).
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,79,"ublic static double[] timeAndReport(String title,"
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,80,"nt repeatChunk,"
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,81,"nt repeatStat,"
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,82,unTest ... methods) {
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,83,ystem.out.println(title);
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,84,"inal double[] time = time(repeatChunk, repeatStat, methods);"
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,85,or (int i = 0; i < time.length; i++) {
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,86,"ystem.out.println(methods[i].getName() + "": "" + time[i] + "" ms"");"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,152,"public static DescriptiveStatistics[] timeAndReport(String title,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,153,"int repeatChunk,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,154,"int repeatStat,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,155,"boolean runGC,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,156,RunTest ... methods) {
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,157,// Header format.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,158,"final String headerFormat = ""%s (runs per timed block: %d, timed blocks: %d)"";"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,159,// Result format.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,160,"final String format = ""%15s: %e (%e) ms"";"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,162,"System.out.println(String.format(headerFormat,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,163,"title,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,164,"repeatChunk,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,165,repeatStat));
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,166,"final DescriptiveStatistics[] time = time(repeatChunk, repeatStat, runGC, methods);"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,167,"for (int i = 0, max = time.length; i < max; i++) {"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,168,final DescriptiveStatistics s = time[i];
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,169,"System.out.println(String.format(format,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,170,"methods[i].getName(),"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,171,"s.getMean(),"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,172,s.getStandardDeviation()));
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,179,* Timing and report (to standard output).
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,180,"* This method calls {@link #timeAndReport(String,int,int,boolean,RunTest[])"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,181,"* timeAndReport(title, 1000, 10000, false, methods)}."
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,183,* @param title Title of the test (for the report).
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,184,* @param methods Codes being timed.
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,185,"* @return for each of the given {@code methods}, a statistics of the"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,186,* average times (in milliseconds) taken by a single call to the
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,187,* {@code call} method (i.e. the time taken by each timed block divided
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,188,* by {@code repeatChunk}).
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,190,"public static DescriptiveStatistics[] timeAndReport(String title,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,191,RunTest ... methods) {
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,192,"return timeAndReport(title,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,193,"DEFAULT_REPEAT_CHUNK,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,194,"DEFAULT_REPEAT_STAT,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,195,"false,"
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,196,methods);
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,95,ublic static abstract class RunTest implements Runnable {
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,202,public static abstract class RunTest implements Callable<Double> {
False,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,113,ublic abstract void run();
True,src/test/java/org/apache/commons/math/PerfTestUtils.java,src/test/java/org/apache/commons/math/PerfTestUtils.java,220,public abstract Double call() throws Exception;

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/analysis/function/StepFunction.java,src/main/java/org/apache/commons/math/analysis/function/StepFunction.java,25,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/analysis/function/StepFunction.java,src/main/java/org/apache/commons/math/analysis/function/StepFunction.java,25,import org.apache.commons.math.util.MathArrays;
False,src/main/java/org/apache/commons/math/analysis/function/StepFunction.java,src/main/java/org/apache/commons/math/analysis/function/StepFunction.java,71,athUtils.checkOrder(x);
True,src/main/java/org/apache/commons/math/analysis/function/StepFunction.java,src/main/java/org/apache/commons/math/analysis/function/StepFunction.java,71,MathArrays.checkOrder(x);
False,src/main/java/org/apache/commons/math/analysis/function/StepFunction.java,src/main/java/org/apache/commons/math/analysis/function/StepFunction.java,73,bscissa = MathUtils.copyOf(x);
False,src/main/java/org/apache/commons/math/analysis/function/StepFunction.java,src/main/java/org/apache/commons/math/analysis/function/StepFunction.java,74,rdinate = MathUtils.copyOf(y);
True,src/main/java/org/apache/commons/math/analysis/function/StepFunction.java,src/main/java/org/apache/commons/math/analysis/function/StepFunction.java,73,abscissa = MathArrays.copyOf(x);
True,src/main/java/org/apache/commons/math/analysis/function/StepFunction.java,src/main/java/org/apache/commons/math/analysis/function/StepFunction.java,74,ordinate = MathArrays.copyOf(y);
False,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,23,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,23,import org.apache.commons.math.util.MathArrays;
False,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,117,athUtils.checkOrder(x);
False,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,118,athUtils.checkOrder(y);
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,117,MathArrays.checkOrder(x);
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java,118,MathArrays.checkOrder(y);
False,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,23,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,23,import org.apache.commons.math.util.MathArrays;
False,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,46,athUtils.checkOrder(xval);
False,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,47,athUtils.checkOrder(yval);
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,46,MathArrays.checkOrder(xval);
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,47,MathArrays.checkOrder(yval);
False,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,24,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,24,import org.apache.commons.math.util.MathArrays;
False,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,56,athUtils.checkOrder(x);
True,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java,56,MathArrays.checkOrder(x);
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,31,import org.apache.commons.math.util.MathArrays;
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,219,athUtils.checkOrder(xval);
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,220,MathArrays.checkOrder(xval);
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,21,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,21,import org.apache.commons.math.util.MathArrays;
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,90,athUtils.checkOrder(xval);
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,91,athUtils.checkOrder(yval);
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,90,MathArrays.checkOrder(xval);
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,91,MathArrays.checkOrder(yval);
False,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,24,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,24,import org.apache.commons.math.util.MathArrays;
False,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,80,athUtils.checkOrder(x);
True,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,80,MathArrays.checkOrder(x);
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,23,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,23,import org.apache.commons.math.util.MathArrays;
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,188,athUtils.checkOrder(x);
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,189,athUtils.checkOrder(y);
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,190,athUtils.checkOrder(z);
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,188,MathArrays.checkOrder(x);
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,189,MathArrays.checkOrder(y);
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java,190,MathArrays.checkOrder(z);
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,21,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,21,import org.apache.commons.math.util.MathArrays;
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,45,athUtils.checkOrder(xval);
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,46,athUtils.checkOrder(yval);
False,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,47,athUtils.checkOrder(zval);
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,45,MathArrays.checkOrder(xval);
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,46,MathArrays.checkOrder(yval);
True,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java,47,MathArrays.checkOrder(zval);
True,src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealPeriodicInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealPeriodicInterpolator.java,21,import org.apache.commons.math.util.MathArrays;
False,src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealPeriodicInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealPeriodicInterpolator.java,88,athUtils.checkOrder(xval);
True,src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealPeriodicInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealPeriodicInterpolator.java,89,MathArrays.checkOrder(xval);
False,src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealPeriodicInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealPeriodicInterpolator.java,111,"athUtils.sortInPlace(x, y);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealPeriodicInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/UnivariateRealPeriodicInterpolator.java,112,"MathArrays.sortInPlace(x, y);"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,21,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,21,import org.apache.commons.math.util.MathArrays;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,79,"athUtils.sortInPlace(this.x, this.y);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,79,"MathArrays.sortInPlace(this.x, this.y);"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,182,"athUtils.sortInPlace(xNew, yNew);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,182,"MathArrays.sortInPlace(xNew, yNew);"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,321,"eturn MathUtils.checkOrder(x, MathUtils.OrderDirection.INCREASING, true, abort);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,321,"return MathArrays.checkOrder(x, MathArrays.OrderDirection.INCREASING, true, abort);"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,21,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,21,import org.apache.commons.math.util.MathArrays;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,112,athUtils.checkOrder(knots);
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,112,MathArrays.checkOrder(knots);
False,src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java,19,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java,19,import org.apache.commons.math.util.MathArrays;
False,src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java,35,rivate final MathUtils.OrderDirection direction;
True,src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java,35,private final MathArrays.OrderDirection direction;
False,src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java,61,"his(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);"
True,src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java,61,"this(wrong, previous, index, MathArrays.OrderDirection.INCREASING, true);"
False,src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java,78,"athUtils.OrderDirection direction,"
True,src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java,78,"MathArrays.OrderDirection direction,"
False,src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java,80,uper(direction == MathUtils.OrderDirection.INCREASING ?
True,src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java,80,super(direction == MathArrays.OrderDirection.INCREASING ?
False,src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java,98,ublic MathUtils.OrderDirection getDirection() {
True,src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonicSequenceException.java,98,public MathArrays.OrderDirection getDirection() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,29,import org.apache.commons.math.util.MathArrays;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,135,"his.x = MathUtils.linearCombination(a1, u1.x, a2, u2.x);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,136,"his.y = MathUtils.linearCombination(a1, u1.y, a2, u2.y);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,137,"his.z = MathUtils.linearCombination(a1, u1.z, a2, u2.z);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,136,"this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,137,"this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,138,"this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,152,"his.x = MathUtils.linearCombination(a1, u1.x, a2, u2.x, a3, u3.x);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,153,"his.y = MathUtils.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,154,"his.z = MathUtils.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,153,"this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x, a3, u3.x);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,154,"this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,155,"this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,171,"his.x = MathUtils.linearCombination(a1, u1.x, a2, u2.x, a3, u3.x, a4, u4.x);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,172,"his.y = MathUtils.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y, a4, u4.y);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,173,"his.z = MathUtils.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z, a4, u4.z);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,172,"this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x, a3, u3.x, a4, u4.x);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,173,"this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y, a4, u4.y);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,174,"this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z, a4, u4.z);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,425," @see MathUtils#linearCombination(double, double, double, double, double, double)"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,426,"* @see MathArrays#linearCombination(double, double, double, double, double, double)"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,429,"eturn MathUtils.linearCombination(x, v3.x, y, v3.y, z, v3.z);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,430,"return MathArrays.linearCombination(x, v3.x, y, v3.y, z, v3.z);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,438,"eturn new Vector3D(MathUtils.linearCombination(y, v3.z, -z, v3.y),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,439,"athUtils.linearCombination(z, v3.x, -x, v3.z),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,440,"athUtils.linearCombination(x, v3.y, -y, v3.x));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,439,"return new Vector3D(MathArrays.linearCombination(y, v3.z, -z, v3.y),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,440,"MathArrays.linearCombination(z, v3.x, -x, v3.z),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,441,"MathArrays.linearCombination(x, v3.y, -y, v3.x));"
False,src/main/java/org/apache/commons/math/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math/linear/PivotingQRDecomposition.java,19,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math/linear/PivotingQRDecomposition.java,19,import org.apache.commons.math.util.MathArrays;
False,src/main/java/org/apache/commons/math/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math/linear/PivotingQRDecomposition.java,58,eturn MathUtils.copyOf(permutation);
True,src/main/java/org/apache/commons/math/linear/PivotingQRDecomposition.java,src/main/java/org/apache/commons/math/linear/PivotingQRDecomposition.java,58,return MathArrays.copyOf(permutation);
False,src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java,34,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java,34,import org.apache.commons.math.util.MathArrays;
False,src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java,160,his.lowerBound = lowerBound == null ? null : MathUtils.copyOf(lowerBound);
False,src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java,161,his.upperBound = upperBound == null ? null : MathUtils.copyOf(upperBound);
True,src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java,160,this.lowerBound = lowerBound == null ? null : MathArrays.copyOf(lowerBound);
True,src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java,161,this.upperBound = upperBound == null ? null : MathArrays.copyOf(upperBound);
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,39,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,39,import org.apache.commons.math.util.MathArrays;
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,398,"ealMatrix bestArx = selectColumns(arx, MathUtils.copyOf(arindex, mu));"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,398,"RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,400,"ealMatrix bestArz = selectColumns(arz, MathUtils.copyOf(arindex, mu));"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,400,"RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));"
False,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,714," selectColumns(arz, MathUtils.copyOf(arReverseIndex, mu));"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,714,"= selectColumns(arz, MathArrays.copyOf(arReverseIndex, mu));"
False,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,21,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,21,import org.apache.commons.math.util.MathArrays;
False,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,144,inal double[] d = MathUtils.copyOf(direc[i]);
True,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java,144,final double[] d = MathArrays.copyOf(direc[i]);
False,src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,23,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,23,import org.apache.commons.math.util.MathArrays;
False,src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,57,"eturn MathUtils.distance(point, p.getPoint());"
True,src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,57,"return MathArrays.distance(point, p.getPoint());"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,23,import org.apache.commons.math.util.MathArrays;
False,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,189,"nclude(MathUtils.copyOf(x, x.length), 1.0, y);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,190,"include(MathArrays.copyOf(x, x.length), 1.0, y);"
False,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,921,eturn MathUtils.copyOf(vorder);
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,922,return MathArrays.copyOf(vorder);
False,src/main/java/org/apache/commons/math/stat/regression/RegressionResults.java,src/main/java/org/apache/commons/math/stat/regression/RegressionResults.java,22,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/stat/regression/RegressionResults.java,src/main/java/org/apache/commons/math/stat/regression/RegressionResults.java,22,import org.apache.commons.math.util.MathArrays;
False,src/main/java/org/apache/commons/math/stat/regression/RegressionResults.java,src/main/java/org/apache/commons/math/stat/regression/RegressionResults.java,101,his.parameters = MathUtils.copyOf(parameters);
True,src/main/java/org/apache/commons/math/stat/regression/RegressionResults.java,src/main/java/org/apache/commons/math/stat/regression/RegressionResults.java,101,this.parameters = MathArrays.copyOf(parameters);
False,src/main/java/org/apache/commons/math/stat/regression/RegressionResults.java,src/main/java/org/apache/commons/math/stat/regression/RegressionResults.java,104,his.varCovData[i] = MathUtils.copyOf(varcov[i]);
True,src/main/java/org/apache/commons/math/stat/regression/RegressionResults.java,src/main/java/org/apache/commons/math/stat/regression/RegressionResults.java,104,this.varCovData[i] = MathArrays.copyOf(varcov[i]);
False,src/main/java/org/apache/commons/math/stat/regression/RegressionResults.java,src/main/java/org/apache/commons/math/stat/regression/RegressionResults.java,173,eturn MathUtils.copyOf(parameters);
True,src/main/java/org/apache/commons/math/stat/regression/RegressionResults.java,src/main/java/org/apache/commons/math/stat/regression/RegressionResults.java,173,return MathArrays.copyOf(parameters);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,18,package org.apache.commons.math.util;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,20,import java.util.List;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,21,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,22,import java.util.Comparator;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,23,import java.util.Collections;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,25,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,26,import org.apache.commons.math.exception.MathInternalError;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,27,import org.apache.commons.math.exception.NonMonotonicSequenceException;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,28,import org.apache.commons.math.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,31,* Arrays utilities.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,33,* @since 3.0
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,34,* @version $Id$
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,36,public class MathArrays {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,37,/** Factor used for splitting double numbers: n = 2^27 + 1 (i.e. {@value}). */
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,38,private static final int SPLIT_FACTOR = 0x8000001;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,41,* Private constructor.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,43,private MathArrays() {}
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,46,* Calculates the L<sub>1</sub> (sum of abs) distance between two points.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,48,* @param p1 the first point
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,49,* @param p2 the second point
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,50,* @return the L<sub>1</sub> distance between the two points
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,52,"public static double distance1(double[] p1, double[] p2) {"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,53,double sum = 0;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,54,for (int i = 0; i < p1.length; i++) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,55,sum += FastMath.abs(p1[i] - p2[i]);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,57,return sum;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,61,* Calculates the L<sub>1</sub> (sum of abs) distance between two points.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,63,* @param p1 the first point
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,64,* @param p2 the second point
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,65,* @return the L<sub>1</sub> distance between the two points
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,67,"public static int distance1(int[] p1, int[] p2) {"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,68,int sum = 0;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,69,for (int i = 0; i < p1.length; i++) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,70,sum += FastMath.abs(p1[i] - p2[i]);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,72,return sum;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,76,* Calculates the L<sub>2</sub> (Euclidean) distance between two points.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,78,* @param p1 the first point
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,79,* @param p2 the second point
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,80,* @return the L<sub>2</sub> distance between the two points
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,82,"public static double distance(double[] p1, double[] p2) {"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,83,double sum = 0;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,84,for (int i = 0; i < p1.length; i++) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,85,final double dp = p1[i] - p2[i];
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,86,sum += dp * dp;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,88,return FastMath.sqrt(sum);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,92,* Calculates the L<sub>2</sub> (Euclidean) distance between two points.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,94,* @param p1 the first point
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,95,* @param p2 the second point
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,96,* @return the L<sub>2</sub> distance between the two points
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,98,"public static double distance(int[] p1, int[] p2) {"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,99,double sum = 0;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,100,for (int i = 0; i < p1.length; i++) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,101,final double dp = p1[i] - p2[i];
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,102,sum += dp * dp;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,104,return FastMath.sqrt(sum);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,108,* Calculates the L<sub>&infin;</sub> (max of abs) distance between two points.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,110,* @param p1 the first point
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,111,* @param p2 the second point
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,112,* @return the L<sub>&infin;</sub> distance between the two points
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,114,"public static double distanceInf(double[] p1, double[] p2) {"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,115,double max = 0;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,116,for (int i = 0; i < p1.length; i++) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,117,"max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,119,return max;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,123,* Calculates the L<sub>&infin;</sub> (max of abs) distance between two points.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,125,* @param p1 the first point
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,126,* @param p2 the second point
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,127,* @return the L<sub>&infin;</sub> distance between the two points
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,129,"public static int distanceInf(int[] p1, int[] p2) {"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,130,int max = 0;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,131,for (int i = 0; i < p1.length; i++) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,132,"max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,134,return max;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,138,* Specification of ordering direction.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,140,public static enum OrderDirection {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,141,/** Constant for increasing direction. */
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,142,"INCREASING,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,143,/** Constant for decreasing direction. */
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,144,DECREASING
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,148,* Check that an array is monotonically increasing or decreasing.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,150,* @param val Values.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,151,* @param dir Ordering direction.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,152,* @param strict Whether the order should be strict.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,153,"* @return {@code true} if sorted, {@code false} otherwise."
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,155,"public static boolean isMonotonic(Comparable[] val,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,156,"OrderDirection dir,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,157,boolean strict) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,158,Comparable previous = val[0];
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,159,final int max = val.length;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,160,int comp;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,161,for (int i = 1; i < max; i++) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,162,switch (dir) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,163,case INCREASING:
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,164,comp = -val[i].compareTo(previous);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,165,if (strict) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,166,if (0 <= comp) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,167,return false;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,169,} else {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,170,if ( comp > 0) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,171,return false;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,174,break;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,175,case DECREASING:
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,176,comp = val[i].compareTo(previous);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,177,if (strict) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,178,if (comp >= 0) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,179,return false;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,181,} else {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,182,if (comp > 0) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,183,return false;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,186,break;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,187,default:
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,188,// Should never happen.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,189,throw new MathInternalError();
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,192,previous = val[i];
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,194,return true;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,198,* Check that an array is monotonically increasing or decreasing.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,200,* @param val Values.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,201,* @param dir Ordering direction.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,202,* @param strict Whether the order should be strict.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,203,"* @return {@code true} if sorted, {@code false} otherwise."
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,205,"public static boolean isMonotonic(double[] val,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,206,"OrderDirection dir,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,207,boolean strict) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,208,"return checkOrder(val, dir, strict, false);"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,212,* Check that the given array is sorted.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,214,* @param val Values.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,215,* @param dir Ordering direction.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,216,* @param strict Whether the order should be strict.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,217,* @param abort Whether to throw an exception if the check fails.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,218,* @return {@code true} if the array is sorted.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,219,* @throws NonMonotonicSequenceException if the array is not sorted
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,220,* and {@code abort} is {@code true}.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,222,"public static boolean checkOrder(double[] val, OrderDirection dir,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,223,"boolean strict, boolean abort) {"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,224,double previous = val[0];
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,225,final int max = val.length;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,227,int index;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,228,ITEM:
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,229,for (index = 1; index < max; index++) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,230,switch (dir) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,231,case INCREASING:
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,232,if (strict) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,233,if (val[index] <= previous) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,234,break ITEM;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,236,} else {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,237,if (val[index] < previous) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,238,break ITEM;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,241,break;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,242,case DECREASING:
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,243,if (strict) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,244,if (val[index] >= previous) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,245,break ITEM;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,247,} else {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,248,if (val[index] > previous) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,249,break ITEM;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,252,break;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,253,default:
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,254,// Should never happen.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,255,throw new MathInternalError();
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,258,previous = val[index];
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,261,if (index == max) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,262,// Loop completed.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,263,return true;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,266,// Loop early exit means wrong ordering.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,267,if (abort) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,268,"throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,269,} else {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,270,return false;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,275,* Check that the given array is sorted.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,277,* @param val Values.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,278,* @param dir Ordering direction.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,279,* @param strict Whether the order should be strict.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,280,* @throws NonMonotonicSequenceException if the array is not sorted.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,281,* @since 2.2
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,283,"public static void checkOrder(double[] val, OrderDirection dir,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,284,boolean strict) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,285,"checkOrder(val, dir, strict, true);"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,289,* Check that the given array is sorted in strictly increasing order.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,291,* @param val Values.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,292,* @throws NonMonotonicSequenceException if the array is not sorted.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,293,* @since 2.2
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,295,public static void checkOrder(double[] val) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,296,"checkOrder(val, OrderDirection.INCREASING, true);"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,300,"* Returns the Cartesian norm (2-norm), handling both overflow and underflow."
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,301,* Translation of the minpack enorm subroutine.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,303,* The redistribution policy for MINPACK is available
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,304,"* <a href=""http://www.netlib.org/minpack/disclaimer"">here</a>, for"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,305,"* convenience, it is reproduced below.</p>"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,307,"* <table border=""0"" width=""80%"" cellpadding=""10"" align=""center"" bgcolor=""#E0E0E0"">"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,308,* <tr><td>
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,309,*    Minpack Copyright Notice (1999) University of Chicago.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,310,*    All rights reserved
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,311,* </td></tr>
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,312,* <tr><td>
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,313,"* Redistribution and use in source and binary forms, with or without"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,314,"* modification, are permitted provided that the following conditions"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,315,* are met:
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,316,* <ol>
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,317,*  <li>Redistributions of source code must retain the above copyright
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,318,"*      notice, this list of conditions and the following disclaimer.</li>"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,319,* <li>Redistributions in binary form must reproduce the above
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,320,"*     copyright notice, this list of conditions and the following"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,321,*     disclaimer in the documentation and/or other materials provided
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,322,*     with the distribution.</li>
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,323,"* <li>The end-user documentation included with the redistribution, if any,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,324,*     must include the following acknowledgment:
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,325,*     {@code This product includes software developed by the University of
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,326,"*           Chicago, as Operator of Argonne National Laboratory.}"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,327,"*     Alternately, this acknowledgment may appear in the software itself,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,328,*     if and wherever such third-party acknowledgments normally appear.</li>
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,329,"* <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED ""AS IS"""
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,330,"*     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,331,"*     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,332,"*     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,333,"*     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,334,"*     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,335,"*     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,336,"*     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,337,"*     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,338,"*     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,339,*     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,340,"*     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,341,*     BE CORRECTED.</strong></li>
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,342,* <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,343,"*     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,344,"*     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,345,"*     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,346,"*     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,347,"*     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,348,"*     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,349,"*     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,350,*     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,351,*     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,352,* <ol></td></tr>
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,353,* </table>
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,355,* @param v Vector of doubles.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,356,* @return the 2-norm of the vector.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,357,* @since 2.2
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,359,public static double safeNorm(double[] v) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,360,double rdwarf = 3.834e-20;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,361,double rgiant = 1.304e+19;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,362,double s1 = 0;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,363,double s2 = 0;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,364,double s3 = 0;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,365,double x1max = 0;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,366,double x3max = 0;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,367,double floatn = (double) v.length;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,368,double agiant = rgiant / floatn;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,369,for (int i = 0; i < v.length; i++) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,370,double xabs = Math.abs(v[i]);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,371,if (xabs < rdwarf || xabs > agiant) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,372,if (xabs > rdwarf) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,373,if (xabs > x1max) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,374,double r = x1max / xabs;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,375,s1= 1 + s1 * r * r;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,376,x1max = xabs;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,377,} else {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,378,double r = xabs / x1max;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,379,s1 += r * r;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,381,} else {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,382,if (xabs > x3max) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,383,double r = x3max / xabs;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,384,s3= 1 + s3 * r * r;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,385,x3max = xabs;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,386,} else {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,387,if (xabs != 0) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,388,double r = xabs / x3max;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,389,s3 += r * r;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,393,} else {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,394,s2 += xabs * xabs;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,397,double norm;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,398,if (s1 != 0) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,399,norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,400,} else {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,401,if (s2 == 0) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,402,norm = x3max * Math.sqrt(s3);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,403,} else {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,404,if (s2 >= x3max) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,405,norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,406,} else {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,407,norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,411,return norm;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,415,* Sort an array in ascending order in place and perform the same reordering
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,416,"* of entries on other arrays. For example, if"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,417,"* {@code x = [3, 1, 2], y = [1, 2, 3]} and {@code z = [0, 5, 7]}, then"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,418,"* {@code sortInPlace(x, y, z)} will update {@code x} to {@code [1, 2, 3]},"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,419,"* {@code y} to {@code [2, 3, 1]} and {@code z} to {@code [5, 7, 0]}."
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,421,* @param x Array to be sorted and used as a pattern for permutation
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,422,* of the other arrays.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,423,* @param yList Set of arrays whose permutations of entries will follow
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,424,* those performed on {@code x}.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,425,* @throws DimensionMismatchException if any {@code y} is not the same
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,426,* size as {@code x}.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,427,* @throws NullArgumentException if {@code x} or any {@code y} is null.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,428,* @since 3.0
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,430,"public static void sortInPlace(double[] x,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,431,double[] ... yList) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,432,"sortInPlace(x, OrderDirection.INCREASING, yList);"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,436,* Sort an array in place and perform the same reordering of entries on
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,437,* other arrays.  This method works the same as
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,438,"* {@link #sortInPlace(double[], double[] ...)}, but allows the order of"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,439,* the sort to be provided in the {@code dir} parameter.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,441,* @param x Array to be sorted and used as a pattern for permutation
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,442,* of the other arrays.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,443,* @param dir Order direction.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,444,* @param yList Set of arrays whose permutations of entries will follow
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,445,* those performed on {@code x}.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,446,* @throws DimensionMismatchException if any {@code y} is not the same
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,447,* size as {@code x}.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,448,* @throws NullArgumentException if {@code x} or any {@code y} is null
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,449,* @since 3.0
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,451,"public static void sortInPlace(double[] x,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,452,"final OrderDirection dir,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,453,double[] ... yList) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,454,if (x == null) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,455,throw new NullArgumentException();
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,458,final int len = x.length;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,459,"final List<Pair<Double, double[]>> list"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,460,"= new ArrayList<Pair<Double, double[]>>(len);"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,462,final int yListLen = yList.length;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,463,for (int i = 0; i < len; i++) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,464,final double[] yValues = new double[yListLen];
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,465,for (int j = 0; j < yListLen; j++) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,466,double[] y = yList[j];
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,467,if (y == null) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,468,throw new NullArgumentException();
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,470,if (y.length != len) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,471,"throw new DimensionMismatchException(y.length, len);"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,473,yValues[j] = y[i];
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,475,"list.add(new Pair<Double, double[]>(x[i], yValues));"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,478,"final Comparator<Pair<Double, double[]>> comp"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,479,"= new Comparator<Pair<Double, double[]>>() {"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,480,"public int compare(Pair<Double, double[]> o1,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,481,"Pair<Double, double[]> o2) {"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,482,int val;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,483,switch (dir) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,484,case INCREASING:
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,485,val = o1.getKey().compareTo(o2.getKey());
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,486,break;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,487,case DECREASING:
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,488,val = o2.getKey().compareTo(o1.getKey());
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,489,break;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,490,default:
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,491,// Should never happen.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,492,throw new MathInternalError();
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,494,return val;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,498,"Collections.sort(list, comp);"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,500,for (int i = 0; i < len; i++) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,501,"final Pair<Double, double[]> e = list.get(i);"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,502,x[i] = e.getKey();
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,503,final double[] yValues = e.getValue();
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,504,for (int j = 0; j < yListLen; j++) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,505,yList[j][i] = yValues[j];
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,511,* Creates a copy of the {@code source} array.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,513,* @param source Array to be copied.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,514,* @return the copied array.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,516,public static int[] copyOf(int[] source) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,517,"return copyOf(source, source.length);"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,521,* Creates a copy of the {@code source} array.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,523,* @param source Array to be copied.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,524,* @return the copied array.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,526,public static double[] copyOf(double[] source) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,527,"return copyOf(source, source.length);"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,531,* Creates a copy of the {@code source} array.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,533,* @param source Array to be copied.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,534,* @param len Number of entries to copy. If smaller then the source
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,535,"* length, the copy will be truncated, if larger it will padded with"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,536,* zeroes.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,537,* @return the copied array.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,539,"public static int[] copyOf(int[] source, int len) {"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,540,final int[] output = new int[len];
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,541,"System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,542,return output;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,546,* Creates a copy of the {@code source} array.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,548,* @param source Array to be copied.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,549,* @param len Number of entries to copy. If smaller then the source
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,550,"* length, the copy will be truncated, if larger it will padded with"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,551,* zeroes.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,552,* @return the copied array.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,554,"public static double[] copyOf(double[] source, int len) {"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,555,final double[] output = new double[len];
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,556,"System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,557,return output;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,561,* Compute a linear combination accurately.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,562,* This method computes the sum of the products
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,563,* <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,564,* It does so by using specific multiplication and addition algorithms to
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,565,* preserve accuracy and reduce cancellation effects.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,566,* <br/>
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,567,* It is based on the 2005 paper
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,568,"* <a href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,569,"* Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,570,* and Shin'ichi Oishi published in SIAM J. Sci. Comput.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,572,* @param a Factors.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,573,* @param b Factors.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,574,* @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,576,"public static double linearCombination(final double[] a, final double[] b) {"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,577,final int len = a.length;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,578,if (len != b.length) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,579,"throw new DimensionMismatchException(len, b.length);"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,582,final double[] prodHigh = new double[len];
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,583,double prodLowSum = 0;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,585,for (int i = 0; i < len; i++) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,586,final double ai = a[i];
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,587,final double ca = SPLIT_FACTOR * ai;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,588,final double aHigh = ca - (ca - ai);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,589,final double aLow = ai - aHigh;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,591,final double bi = b[i];
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,592,final double cb = SPLIT_FACTOR * bi;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,593,final double bHigh = cb - (cb - bi);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,594,final double bLow = bi - bHigh;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,595,prodHigh[i] = ai * bi;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,596,final double prodLow = aLow * bLow - (((prodHigh[i] -
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,597,aHigh * bHigh) -
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,598,aLow * bHigh) -
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,599,aHigh * bLow);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,600,prodLowSum += prodLow;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,604,final double prodHighCur = prodHigh[0];
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,605,double prodHighNext = prodHigh[1];
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,606,double sHighPrev = prodHighCur + prodHighNext;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,607,double sPrime = sHighPrev - prodHighNext;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,608,double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,610,final int lenMinusOne = len - 1;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,611,for (int i = 1; i < lenMinusOne; i++) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,612,prodHighNext = prodHigh[i + 1];
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,613,final double sHighCur = sHighPrev + prodHighNext;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,614,sPrime = sHighCur - prodHighNext;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,615,sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,616,sHighPrev = sHighCur;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,619,double result = sHighPrev + (prodLowSum + sLowSum);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,621,if (Double.isNaN(result)) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,622,"// either we have split infinite numbers or some coefficients were NaNs,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,623,// just rely on the naive implementation and let IEEE754 handle this
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,624,result = 0;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,625,for (int i = 0; i < len; ++i) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,626,result += a[i] * b[i];
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,630,return result;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,634,* Compute a linear combination accurately.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,635,* <p>
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,636,* This method computes a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,637,* a<sub>2</sub>&times;b<sub>2</sub> to high accuracy. It does
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,638,* so by using specific multiplication and addition algorithms to
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,639,* preserve accuracy and reduce cancellation effects. It is based
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,640,* on the 2005 paper <a
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,641,"* href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,642,"* Accurate Sum and Dot Product</a> by Takeshi Ogita,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,643,"* Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput."
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,644,* </p>
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,645,* @param a1 first factor of the first term
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,646,* @param b1 second factor of the first term
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,647,* @param a2 first factor of the second term
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,648,* @param b2 second factor of the second term
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,649,* @return a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,650,* a<sub>2</sub>&times;b<sub>2</sub>
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,651,"* @see #linearCombination(double, double, double, double, double, double)"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,652,"* @see #linearCombination(double, double, double, double, double, double, double, double)"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,654,"public static double linearCombination(final double a1, final double b1,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,655,"final double a2, final double b2) {"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,657,// the code below is split in many additions/subtractions that may
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,658,"// appear redundant. However, they should NOT be simplified, as they"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,659,// use IEEE754 floating point arithmetic rounding properties.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,660,"// as an example, the expression ""ca1 - (ca1 - a1)"" is NOT the same as ""a1"""
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,661,// The variable naming conventions are that xyzHigh contains the most significant
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,662,// bits of xyz and xyzLow contains its least significant bits. So theoretically
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,663,"// xyz is the sum xyzHigh + xyzLow, but in many cases below, this sum cannot"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,664,// be represented in only one double precision number so we preserve two numbers
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,665,"// to hold it as long as we can, combining the high and low order bits together"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,666,"// only at the end, after cancellation may have occurred on high order bits"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,668,// split a1 and b1 as two 26 bits numbers
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,669,final double ca1        = SPLIT_FACTOR * a1;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,670,final double a1High     = ca1 - (ca1 - a1);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,671,final double a1Low      = a1 - a1High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,672,final double cb1        = SPLIT_FACTOR * b1;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,673,final double b1High     = cb1 - (cb1 - b1);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,674,final double b1Low      = b1 - b1High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,676,// accurate multiplication a1 * b1
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,677,final double prod1High  = a1 * b1;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,678,final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,680,// split a2 and b2 as two 26 bits numbers
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,681,final double ca2        = SPLIT_FACTOR * a2;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,682,final double a2High     = ca2 - (ca2 - a2);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,683,final double a2Low      = a2 - a2High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,684,final double cb2        = SPLIT_FACTOR * b2;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,685,final double b2High     = cb2 - (cb2 - b2);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,686,final double b2Low      = b2 - b2High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,688,// accurate multiplication a2 * b2
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,689,final double prod2High  = a2 * b2;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,690,final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,692,// accurate addition a1 * b1 + a2 * b2
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,693,final double s12High    = prod1High + prod2High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,694,final double s12Prime   = s12High - prod2High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,695,final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,697,"// final rounding, s12 may have suffered many cancellations, we try"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,698,// to recover some bits from the extra words we have saved up to now
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,699,double result = s12High + (prod1Low + prod2Low + s12Low);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,701,if (Double.isNaN(result)) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,702,"// either we have split infinite numbers or some coefficients were NaNs,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,703,// just rely on the naive implementation and let IEEE754 handle this
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,704,result = a1 * b1 + a2 * b2;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,707,return result;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,711,* Compute a linear combination accurately.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,712,* <p>
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,713,* This method computes a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,714,* a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub>
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,715,* to high accuracy. It does so by using specific multiplication and
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,716,* addition algorithms to preserve accuracy and reduce cancellation effects.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,717,* It is based on the 2005 paper <a
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,718,"* href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,719,"* Accurate Sum and Dot Product</a> by Takeshi Ogita,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,720,"* Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput."
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,721,* </p>
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,722,* @param a1 first factor of the first term
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,723,* @param b1 second factor of the first term
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,724,* @param a2 first factor of the second term
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,725,* @param b2 second factor of the second term
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,726,* @param a3 first factor of the third term
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,727,* @param b3 second factor of the third term
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,728,* @return a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,729,* a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub>
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,730,"* @see #linearCombination(double, double, double, double)"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,731,"* @see #linearCombination(double, double, double, double, double, double, double, double)"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,733,"public static double linearCombination(final double a1, final double b1,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,734,"final double a2, final double b2,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,735,"final double a3, final double b3) {"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,737,// the code below is split in many additions/subtractions that may
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,738,"// appear redundant. However, they should NOT be simplified, as they"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,739,// do use IEEE754 floating point arithmetic rounding properties.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,740,"// as an example, the expression ""ca1 - (ca1 - a1)"" is NOT the same as ""a1"""
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,741,// The variables naming conventions are that xyzHigh contains the most significant
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,742,// bits of xyz and xyzLow contains its least significant bits. So theoretically
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,743,"// xyz is the sum xyzHigh + xyzLow, but in many cases below, this sum cannot"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,744,// be represented in only one double precision number so we preserve two numbers
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,745,"// to hold it as long as we can, combining the high and low order bits together"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,746,"// only at the end, after cancellation may have occurred on high order bits"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,748,// split a1 and b1 as two 26 bits numbers
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,749,final double ca1        = SPLIT_FACTOR * a1;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,750,final double a1High     = ca1 - (ca1 - a1);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,751,final double a1Low      = a1 - a1High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,752,final double cb1        = SPLIT_FACTOR * b1;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,753,final double b1High     = cb1 - (cb1 - b1);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,754,final double b1Low      = b1 - b1High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,756,// accurate multiplication a1 * b1
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,757,final double prod1High  = a1 * b1;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,758,final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,760,// split a2 and b2 as two 26 bits numbers
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,761,final double ca2        = SPLIT_FACTOR * a2;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,762,final double a2High     = ca2 - (ca2 - a2);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,763,final double a2Low      = a2 - a2High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,764,final double cb2        = SPLIT_FACTOR * b2;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,765,final double b2High     = cb2 - (cb2 - b2);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,766,final double b2Low      = b2 - b2High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,768,// accurate multiplication a2 * b2
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,769,final double prod2High  = a2 * b2;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,770,final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,772,// split a3 and b3 as two 26 bits numbers
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,773,final double ca3        = SPLIT_FACTOR * a3;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,774,final double a3High     = ca3 - (ca3 - a3);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,775,final double a3Low      = a3 - a3High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,776,final double cb3        = SPLIT_FACTOR * b3;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,777,final double b3High     = cb3 - (cb3 - b3);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,778,final double b3Low      = b3 - b3High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,780,// accurate multiplication a3 * b3
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,781,final double prod3High  = a3 * b3;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,782,final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,784,// accurate addition a1 * b1 + a2 * b2
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,785,final double s12High    = prod1High + prod2High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,786,final double s12Prime   = s12High - prod2High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,787,final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,789,// accurate addition a1 * b1 + a2 * b2 + a3 * b3
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,790,final double s123High   = s12High + prod3High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,791,final double s123Prime  = s123High - prod3High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,792,final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,794,"// final rounding, s123 may have suffered many cancellations, we try"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,795,// to recover some bits from the extra words we have saved up to now
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,796,double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,798,if (Double.isNaN(result)) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,799,"// either we have split infinite numbers or some coefficients were NaNs,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,800,// just rely on the naive implementation and let IEEE754 handle this
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,801,result = a1 * b1 + a2 * b2 + a3 * b3;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,804,return result;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,808,* Compute a linear combination accurately.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,809,* <p>
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,810,* This method computes a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,811,* a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub> +
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,812,* a<sub>4</sub>&times;b<sub>4</sub>
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,813,* to high accuracy. It does so by using specific multiplication and
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,814,* addition algorithms to preserve accuracy and reduce cancellation effects.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,815,* It is based on the 2005 paper <a
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,816,"* href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,817,"* Accurate Sum and Dot Product</a> by Takeshi Ogita,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,818,"* Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput."
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,819,* </p>
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,820,* @param a1 first factor of the first term
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,821,* @param b1 second factor of the first term
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,822,* @param a2 first factor of the second term
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,823,* @param b2 second factor of the second term
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,824,* @param a3 first factor of the third term
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,825,* @param b3 second factor of the third term
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,826,* @param a4 first factor of the third term
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,827,* @param b4 second factor of the third term
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,828,* @return a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,829,* a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub> +
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,830,* a<sub>4</sub>&times;b<sub>4</sub>
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,831,"* @see #linearCombination(double, double, double, double)"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,832,"* @see #linearCombination(double, double, double, double, double, double)"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,834,"public static double linearCombination(final double a1, final double b1,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,835,"final double a2, final double b2,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,836,"final double a3, final double b3,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,837,"final double a4, final double b4) {"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,839,// the code below is split in many additions/subtractions that may
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,840,"// appear redundant. However, they should NOT be simplified, as they"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,841,// do use IEEE754 floating point arithmetic rounding properties.
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,842,"// as an example, the expression ""ca1 - (ca1 - a1)"" is NOT the same as ""a1"""
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,843,// The variables naming conventions are that xyzHigh contains the most significant
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,844,// bits of xyz and xyzLow contains its least significant bits. So theoretically
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,845,"// xyz is the sum xyzHigh + xyzLow, but in many cases below, this sum cannot"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,846,// be represented in only one double precision number so we preserve two numbers
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,847,"// to hold it as long as we can, combining the high and low order bits together"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,848,"// only at the end, after cancellation may have occurred on high order bits"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,850,// split a1 and b1 as two 26 bits numbers
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,851,final double ca1        = SPLIT_FACTOR * a1;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,852,final double a1High     = ca1 - (ca1 - a1);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,853,final double a1Low      = a1 - a1High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,854,final double cb1        = SPLIT_FACTOR * b1;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,855,final double b1High     = cb1 - (cb1 - b1);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,856,final double b1Low      = b1 - b1High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,858,// accurate multiplication a1 * b1
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,859,final double prod1High  = a1 * b1;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,860,final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,862,// split a2 and b2 as two 26 bits numbers
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,863,final double ca2        = SPLIT_FACTOR * a2;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,864,final double a2High     = ca2 - (ca2 - a2);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,865,final double a2Low      = a2 - a2High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,866,final double cb2        = SPLIT_FACTOR * b2;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,867,final double b2High     = cb2 - (cb2 - b2);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,868,final double b2Low      = b2 - b2High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,870,// accurate multiplication a2 * b2
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,871,final double prod2High  = a2 * b2;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,872,final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,874,// split a3 and b3 as two 26 bits numbers
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,875,final double ca3        = SPLIT_FACTOR * a3;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,876,final double a3High     = ca3 - (ca3 - a3);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,877,final double a3Low      = a3 - a3High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,878,final double cb3        = SPLIT_FACTOR * b3;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,879,final double b3High     = cb3 - (cb3 - b3);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,880,final double b3Low      = b3 - b3High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,882,// accurate multiplication a3 * b3
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,883,final double prod3High  = a3 * b3;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,884,final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,886,// split a4 and b4 as two 26 bits numbers
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,887,final double ca4        = SPLIT_FACTOR * a4;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,888,final double a4High     = ca4 - (ca4 - a4);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,889,final double a4Low      = a4 - a4High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,890,final double cb4        = SPLIT_FACTOR * b4;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,891,final double b4High     = cb4 - (cb4 - b4);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,892,final double b4Low      = b4 - b4High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,894,// accurate multiplication a4 * b4
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,895,final double prod4High  = a4 * b4;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,896,final double prod4Low   = a4Low * b4Low - (((prod4High - a4High * b4High) - a4Low * b4High) - a4High * b4Low);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,898,// accurate addition a1 * b1 + a2 * b2
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,899,final double s12High    = prod1High + prod2High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,900,final double s12Prime   = s12High - prod2High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,901,final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,903,// accurate addition a1 * b1 + a2 * b2 + a3 * b3
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,904,final double s123High   = s12High + prod3High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,905,final double s123Prime  = s123High - prod3High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,906,final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,908,// accurate addition a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,909,final double s1234High  = s123High + prod4High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,910,final double s1234Prime = s1234High - prod4High;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,911,final double s1234Low   = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,913,"// final rounding, s1234 may have suffered many cancellations, we try"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,914,// to recover some bits from the extra words we have saved up to now
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,915,double result = s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,917,if (Double.isNaN(result)) {
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,918,"// either we have split infinite numbers or some coefficients were NaNs,"
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,919,// just rely on the naive implementation and let IEEE754 handle this
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,920,result = a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4;
True,src/main/java/org/apache/commons/math/util/MathArrays.java,src/main/java/org/apache/commons/math/util/MathArrays.java,923,return result;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,22,mport java.util.ArrayList;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,24,mport java.util.Collections;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,25,mport java.util.Comparator;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,26,mport java.util.List;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,28,mport org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,31,mport org.apache.commons.math.exception.MathInternalError;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,32,mport org.apache.commons.math.exception.NonMonotonicSequenceException;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,89,** Factor used for splitting double numbers: n = 2^27 + 1. */
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,90,rivate static final int SPLIT_FACTOR = 0x8000001;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1592, Calculates the L<sub>1</sub> (sum of abs) distance between two points.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1594, @param p1 the first point
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1595, @param p2 the second point
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1596, @return the L<sub>1</sub> distance between the two points
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1598,"ublic static double distance1(double[] p1, double[] p2) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1599,ouble sum = 0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1600,or (int i = 0; i < p1.length; i++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1601,um += FastMath.abs(p1[i] - p2[i]);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1603,eturn sum;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1607, Calculates the L<sub>1</sub> (sum of abs) distance between two points.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1609, @param p1 the first point
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1610, @param p2 the second point
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1611, @return the L<sub>1</sub> distance between the two points
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1613,"ublic static int distance1(int[] p1, int[] p2) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1614,nt sum = 0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1615,or (int i = 0; i < p1.length; i++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1616,um += FastMath.abs(p1[i] - p2[i]);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1618,eturn sum;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1622, Calculates the L<sub>2</sub> (Euclidean) distance between two points.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1624, @param p1 the first point
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1625, @param p2 the second point
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1626, @return the L<sub>2</sub> distance between the two points
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1628,"ublic static double distance(double[] p1, double[] p2) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1629,ouble sum = 0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1630,or (int i = 0; i < p1.length; i++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1631,inal double dp = p1[i] - p2[i];
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1632,um += dp * dp;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1634,eturn FastMath.sqrt(sum);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1638, Calculates the L<sub>2</sub> (Euclidean) distance between two points.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1640, @param p1 the first point
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1641, @param p2 the second point
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1642, @return the L<sub>2</sub> distance between the two points
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1644,"ublic static double distance(int[] p1, int[] p2) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1645,ouble sum = 0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1646,or (int i = 0; i < p1.length; i++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1647,inal double dp = p1[i] - p2[i];
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1648,um += dp * dp;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1650,eturn FastMath.sqrt(sum);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1654, Calculates the L<sub>&infin;</sub> (max of abs) distance between two points.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1656, @param p1 the first point
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1657, @param p2 the second point
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1658, @return the L<sub>&infin;</sub> distance between the two points
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1660,"ublic static double distanceInf(double[] p1, double[] p2) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1661,ouble max = 0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1662,or (int i = 0; i < p1.length; i++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1663,"ax = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1665,eturn max;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1669, Calculates the L<sub>&infin;</sub> (max of abs) distance between two points.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1671, @param p1 the first point
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1672, @param p2 the second point
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1673, @return the L<sub>&infin;</sub> distance between the two points
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1675,"ublic static int distanceInf(int[] p1, int[] p2) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1676,nt max = 0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1677,or (int i = 0; i < p1.length; i++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1678,"ax = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1680,eturn max;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1684, Specification of ordering direction.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1686,ublic static enum OrderDirection {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1687,** Constant for increasing direction. */
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1688,"NCREASING,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1689,** Constant for decreasing direction. */
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1690,ECREASING
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1694, Check that an array is monotone increasing or decreasing.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1696, @param val Values.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1697, @param dir Ordering direction.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1698, @param strict Whether the order should be strict.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1699," @return {@code true} if sorted, {@code false} otherwise."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1701,"ublic static boolean isMonotone(Comparable[] val,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1702,"rderDirection dir,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1703,oolean strict){
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1704,omparable previous = val[0];
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1705,inal int max = val.length;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1706,nt comp;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1707,or (int i = 1; i < max; i++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1708,witch (dir) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1709,ase INCREASING:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1710,omp = -val[i].compareTo(previous);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1711,f (strict) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1712,f (0 <= comp) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1713,eturn false;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1715, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1716,f ( comp > 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1717,eturn false;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1720,reak;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1721,ase DECREASING:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1722,omp = val[i].compareTo(previous);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1723,f (strict) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1724,f (comp >= 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1725,eturn false;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1727, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1728,f (comp > 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1729,eturn false;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1732,reak;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1733,efault:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1734,/ Should never happen.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1735,hrow new MathInternalError();
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1738,revious = val[i];
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1740,eturn true;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1744, Check that an array is monotone increasing or decreasing.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1746, @param val Values.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1747, @param dir Ordering direction.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1748, @param strict Whether the order should be strict.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1749," @return {@code true} if sorted, {@code false} otherwise."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1751,"ublic static boolean isMonotone(double[] val,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1752,"rderDirection dir,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1753,oolean strict){
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1754,ouble previous = val[0];
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1755,inal int max = val.length;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1756,or (int i = 1; i < max; i++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1757,witch (dir) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1758,ase INCREASING:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1759,f (strict) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1760,f (val[i] <= previous) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1761,eturn false;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1763, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1764,f (val[i] < previous) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1765,eturn false;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1768,reak;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1769,ase DECREASING:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1770,f (strict) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1771,f (val[i] >= previous) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1772,eturn false;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1774, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1775,f (val[i] > previous) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1776,eturn false;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1779,reak;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1780,efault:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1781,/ Should never happen.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1782,hrow new MathInternalError();
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1784,revious = val[i];
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1787,eturn true;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1791, Check that the given array is sorted.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1793, @param val Values.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1794, @param dir Ordering direction.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1795, @param strict Whether the order should be strict.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1796, @param abort Whether to throw an exception if the check fails.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1797, @return {@code true} if the array is sorted.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1798, @throws NonMonotonicSequenceException if the array is not sorted
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1799, and {@code abort} is {@code true}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1801,"ublic static boolean checkOrder(double[] val, OrderDirection dir,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1802,"oolean strict, boolean abort) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1803,ouble previous = val[0];
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1804,inal int max = val.length;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1806,nt index;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1807,TEM:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1808,or (index = 1; index < max; index++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1809,witch (dir) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1810,ase INCREASING:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1811,f (strict) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1812,f (val[index] <= previous) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1813,reak ITEM;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1815, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1816,f (val[index] < previous) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1817,reak ITEM;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1820,reak;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1821,ase DECREASING:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1822,f (strict) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1823,f (val[index] >= previous) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1824,reak ITEM;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1826, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1827,f (val[index] > previous) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1828,reak ITEM;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1831,reak;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1832,efault:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1833,/ Should never happen.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1834,hrow new MathInternalError();
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1836,revious = val[index];
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1839,f (index == max) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1840,/ Loop completed.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1841,eturn true;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1844,/ Loop early exit means wrong ordering.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1845,f (abort) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1846,"hrow new NonMonotonicSequenceException(val[index], previous, index, dir, strict);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1847, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1848,eturn false;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1853, Check that the given array is sorted.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1855, @param val Values.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1856, @param dir Ordering direction.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1857, @param strict Whether the order should be strict.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1858, @throws NonMonotonicSequenceException if the array is not sorted.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1859, @since 2.2
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1861,"ublic static void checkOrder(double[] val, OrderDirection dir,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1862,oolean strict) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1863,"heckOrder(val, dir, strict, true);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1867, Check that the given array is sorted in strictly increasing order.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1869, @param val Values.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1870, @throws NonMonotonicSequenceException if the array is not sorted.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1871, @since 2.2
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1873,ublic static void checkOrder(double[] val) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1874,"heckOrder(val, OrderDirection.INCREASING, true);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1907," Returns the Cartesian norm (2-norm), handling both overflow and underflow."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1908, Translation of the minpack enorm subroutine.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1910, The redistribution policy for MINPACK is available <a
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1911," href=""http://www.netlib.org/minpack/disclaimer"">here</a>, for convenience, it"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1912, is reproduced below.</p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1914," <table border=""0"" width=""80%"" cellpadding=""10"" align=""center"" bgcolor=""#E0E0E0"">"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1915, <tr><td>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1916,    Minpack Copyright Notice (1999) University of Chicago.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1917,    All rights reserved
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1918, </td></tr>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1919, <tr><td>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1920," Redistribution and use in source and binary forms, with or without"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1921," modification, are permitted provided that the following conditions"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1922, are met:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1923, <ol>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1924,  <li>Redistributions of source code must retain the above copyright
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1925,"      notice, this list of conditions and the following disclaimer.</li>"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1926, <li>Redistributions in binary form must reproduce the above
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1927,"     copyright notice, this list of conditions and the following"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1928,     disclaimer in the documentation and/or other materials provided
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1929,     with the distribution.</li>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1930," <li>The end-user documentation included with the redistribution, if any,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1931,     must include the following acknowledgment:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1932,     {@code This product includes software developed by the University of
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1933,"           Chicago, as Operator of Argonne National Laboratory.}"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1934,"     Alternately, this acknowledgment may appear in the software itself,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1935,     if and wherever such third-party acknowledgments normally appear.</li>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1936," <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED ""AS IS"""
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1937,"     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1938,"     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1939,"     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1940,"     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1941,"     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1942,"     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1943,"     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1944,"     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1945,"     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1946,     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1947,"     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1948,     BE CORRECTED.</strong></li>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1949, <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1950,"     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1951,"     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1952,"     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1953,"     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1954,"     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1955,"     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1956,"     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1957,     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1958,     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1959, <ol></td></tr>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1960, </table>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1962, @param v vector of doubles
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1963, @return the 2-norm of the vector
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1964, @since 2.2
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1966,ublic static double safeNorm(double[] v) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1967,ouble rdwarf = 3.834e-20;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1968,ouble rgiant = 1.304e+19;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1969,ouble s1 = 0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1970,ouble s2 = 0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1971,ouble s3 = 0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1972,ouble x1max = 0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1973,ouble x3max = 0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1974,ouble floatn = (double) v.length;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1975,ouble agiant = rgiant / floatn;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1976,or (int i = 0; i < v.length; i++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1977,ouble xabs = Math.abs(v[i]);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1978,f (xabs < rdwarf || xabs > agiant) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1979,f (xabs > rdwarf) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1980,f (xabs > x1max) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1981,ouble r = x1max / xabs;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1982,1= 1 + s1 * r * r;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1983,1max = xabs;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1984, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1985,ouble r = xabs / x1max;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1986,1 += r * r;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1988, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1989,f (xabs > x3max) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1990,ouble r = x3max / xabs;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1991,3= 1 + s3 * r * r;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1992,3max = xabs;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1993, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1994,f (xabs != 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1995,ouble r = xabs / x3max;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1996,3 += r * r;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2000, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2001,2 += xabs * xabs;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2004,ouble norm;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2005,f (s1 != 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2006,orm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2007, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2008,f (s2 == 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2009,orm = x3max * Math.sqrt(s3);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2010, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2011,f (s2 >= x3max) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2012,orm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2013, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2014,orm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2018,eturn norm;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2022, Sort an array in ascending order in place and perform the same reordering
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2023," of entries on other arrays. For example, if"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2024," {@code x = [3, 1, 2], y = [1, 2, 3]} and {@code z = [0, 5, 7]}, then"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2025," {@code sortInPlace(x, y, z)} will update {@code x} to {@code [1, 2, 3]},"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2026," {@code y} to {@code [2, 3, 1]} and {@code z} to {@code [5, 7, 0]}."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2028, @param x Array to be sorted and used as a pattern for permutation
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2029, of the other arrays.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2030, @param yList Set of arrays whose permutations of entries will follow
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2031, those performed on {@code x}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2032, @throws DimensionMismatchException if any {@code y} is not the same
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2033, size as {@code x}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2034, @throws NullArgumentException if {@code x} or any {@code y} is null.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2035, @since 3.0
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2037,"ublic static void sortInPlace(double[] x,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2038,ouble[] ... yList) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2039,"ortInPlace(x, OrderDirection.INCREASING, yList);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2043, Sort an array in place and perform the same reordering of entries on
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2044, other arrays.  This method works the same as
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2045," {@link #sortInPlace(double[], double[]...)}, but allows the order of the"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2046, sort to be provided in the {@code dir} parameter.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2048, @param x Array to be sorted and used as a pattern for permutation
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2049, of the other arrays.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2050, @param dir Order direction.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2051, @param yList Set of arrays whose permutations of entries will follow
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2052, those performed on {@code x}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2053, @throws DimensionMismatchException if any {@code y} is not the same
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2054, size as {@code x}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2055, @throws NullArgumentException if {@code x} or any {@code y} is null
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2056, @since 3.0
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2058,"ublic static void sortInPlace(double[] x,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2059,"inal OrderDirection dir,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2060,ouble[] ... yList) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2061,f (x == null) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2062,hrow new NullArgumentException();
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2065,inal int len = x.length;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2066,"inal List<Pair<Double, double[]>> list"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2067," new ArrayList<Pair<Double, double[]>>(len);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2069,inal int yListLen = yList.length;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2070,or (int i = 0; i < len; i++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2071,inal double[] yValues = new double[yListLen];
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2072,or (int j = 0; j < yListLen; j++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2073,ouble[] y = yList[j];
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2074,f (y == null) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2075,hrow new NullArgumentException();
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2077,f (y.length != len) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2078,"hrow new DimensionMismatchException(y.length, len);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2080,Values[j] = y[i];
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2082,"ist.add(new Pair<Double, double[]>(x[i], yValues));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2085,"inal Comparator<Pair<Double, double[]>> comp"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2086," new Comparator<Pair<Double, double[]>>() {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2087,"ublic int compare(Pair<Double, double[]> o1,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2088,"air<Double, double[]> o2) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2089,nt val;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2090,witch (dir) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2091,ase INCREASING:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2092,al = o1.getKey().compareTo(o2.getKey());
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2093,reak;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2094,ase DECREASING:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2095,al = o2.getKey().compareTo(o1.getKey());
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2096,reak;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2097,efault:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2098,/ Should never happen.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2099,hrow new MathInternalError();
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2101,eturn val;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2105,"ollections.sort(list, comp);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2107,or (int i = 0; i < len; i++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2108,"inal Pair<Double, double[]> e = list.get(i);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2109,[i] = e.getKey();
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2110,inal double[] yValues = e.getValue();
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2111,or (int j = 0; j < yListLen; j++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2112,List[j][i] = yValues[j];
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2118, Creates a copy of the {@code source} array.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2120, @param source Array to be copied.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2121, @return the copied array.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2123,ublic static int[] copyOf(int[] source) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2124,"eturn copyOf(source, source.length);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2128, Creates a copy of the {@code source} array.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2130, @param source Array to be copied.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2131, @return the copied array.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2133,ublic static double[] copyOf(double[] source) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2134,"eturn copyOf(source, source.length);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2138, Creates a copy of the {@code source} array.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2140, @param source Array to be copied.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2141, @param len Number of entries to copy. If smaller then the source
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2142," length, the copy will be truncated, if larger it will padded with"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2143, zeroes.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2144, @return the copied array.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2146,"ublic static int[] copyOf(int[] source, int len) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2147,inal int[] output = new int[len];
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2148,"ystem.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2149,eturn output;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2153, Creates a copy of the {@code source} array.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2155, @param source Array to be copied.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2156, @param len Number of entries to copy. If smaller then the source
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2157," length, the copy will be truncated, if larger it will padded with"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2158, zeroes.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2159, @return the copied array.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2161,"ublic static double[] copyOf(double[] source, int len) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2162,inal double[] output = new double[len];
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2163,"ystem.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2164,eturn output;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2197, Compute a linear combination accurately.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2198, <p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2199, This method computes a<sub>1</sub>&times;b<sub>1</sub> +
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2200, a<sub>2</sub>&times;b<sub>2</sub> to high accuracy. It does
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2201, so by using specific multiplication and addition algorithms to
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2202, preserve accuracy and reduce cancellation effects. It is based
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2203, on the 2005 paper <a
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2204," href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2205," Accurate Sum and Dot Product</a> by Takeshi Ogita,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2206," Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2207, </p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2208, @param a1 first factor of the first term
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2209, @param b1 second factor of the first term
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2210, @param a2 first factor of the second term
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2211, @param b2 second factor of the second term
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2212, @return a<sub>1</sub>&times;b<sub>1</sub> +
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2213, a<sub>2</sub>&times;b<sub>2</sub>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2214," @see #linearCombination(double, double, double, double, double, double)"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2215," @see #linearCombination(double, double, double, double, double, double, double, double)"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2217,"ublic static double linearCombination(final double a1, final double b1,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2218,"inal double a2, final double b2) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2220,/ the code below is split in many additions/subtractions that may
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2221,"/ appear redundant. However, they should NOT be simplified, as they"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2222,/ use IEEE754 floating point arithmetic rounding properties.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2223,"/ as an example, the expression ""ca1 - (ca1 - a1)"" is NOT the same as ""a1"""
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2224,/ The variable naming conventions are that xyzHigh contains the most significant
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2225,/ bits of xyz and xyzLow contains its least significant bits. So theoretically
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2226,"/ xyz is the sum xyzHigh + xyzLow, but in many cases below, this sum cannot"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2227,/ be represented in only one double precision number so we preserve two numbers
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2228,"/ to hold it as long as we can, combining the high and low order bits together"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2229,"/ only at the end, after cancellation may have occurred on high order bits"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2231,/ split a1 and b1 as two 26 bits numbers
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2232,inal double ca1        = SPLIT_FACTOR * a1;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2233,inal double a1High     = ca1 - (ca1 - a1);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2234,inal double a1Low      = a1 - a1High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2235,inal double cb1        = SPLIT_FACTOR * b1;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2236,inal double b1High     = cb1 - (cb1 - b1);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2237,inal double b1Low      = b1 - b1High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2239,/ accurate multiplication a1 * b1
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2240,inal double prod1High  = a1 * b1;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2241,inal double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2243,/ split a2 and b2 as two 26 bits numbers
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2244,inal double ca2        = SPLIT_FACTOR * a2;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2245,inal double a2High     = ca2 - (ca2 - a2);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2246,inal double a2Low      = a2 - a2High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2247,inal double cb2        = SPLIT_FACTOR * b2;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2248,inal double b2High     = cb2 - (cb2 - b2);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2249,inal double b2Low      = b2 - b2High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2251,/ accurate multiplication a2 * b2
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2252,inal double prod2High  = a2 * b2;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2253,inal double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2255,/ accurate addition a1 * b1 + a2 * b2
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2256,inal double s12High    = prod1High + prod2High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2257,inal double s12Prime   = s12High - prod2High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2258,inal double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2260,"/ final rounding, s12 may have suffered many cancellations, we try"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2261,/ to recover some bits from the extra words we have saved up to now
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2262,ouble result = s12High + (prod1Low + prod2Low + s12Low);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2264,f (Double.isNaN(result)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2265,"/ either we have split infinite numbers or some coefficients were NaNs,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2266,/ just rely on the naive implementation and let IEEE754 handle this
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2267,esult = a1 * b1 + a2 * b2;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2270,eturn result;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2275, Compute a linear combination accurately.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2276, <p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2277, This method computes a<sub>1</sub>&times;b<sub>1</sub> +
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2278, a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2279, to high accuracy. It does so by using specific multiplication and
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2280, addition algorithms to preserve accuracy and reduce cancellation effects.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2281, It is based on the 2005 paper <a
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2282," href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2283," Accurate Sum and Dot Product</a> by Takeshi Ogita,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2284," Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2285, </p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2286, @param a1 first factor of the first term
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2287, @param b1 second factor of the first term
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2288, @param a2 first factor of the second term
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2289, @param b2 second factor of the second term
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2290, @param a3 first factor of the third term
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2291, @param b3 second factor of the third term
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2292, @return a<sub>1</sub>&times;b<sub>1</sub> +
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2293, a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2294," @see #linearCombination(double, double, double, double)"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2295," @see #linearCombination(double, double, double, double, double, double, double, double)"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2297,"ublic static double linearCombination(final double a1, final double b1,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2298,"inal double a2, final double b2,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2299,"inal double a3, final double b3) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2301,/ the code below is split in many additions/subtractions that may
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2302,"/ appear redundant. However, they should NOT be simplified, as they"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2303,/ do use IEEE754 floating point arithmetic rounding properties.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2304,"/ as an example, the expression ""ca1 - (ca1 - a1)"" is NOT the same as ""a1"""
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2305,/ The variables naming conventions are that xyzHigh contains the most significant
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2306,/ bits of xyz and xyzLow contains its least significant bits. So theoretically
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2307,"/ xyz is the sum xyzHigh + xyzLow, but in many cases below, this sum cannot"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2308,/ be represented in only one double precision number so we preserve two numbers
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2309,"/ to hold it as long as we can, combining the high and low order bits together"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2310,"/ only at the end, after cancellation may have occurred on high order bits"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2312,/ split a1 and b1 as two 26 bits numbers
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2313,inal double ca1        = SPLIT_FACTOR * a1;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2314,inal double a1High     = ca1 - (ca1 - a1);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2315,inal double a1Low      = a1 - a1High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2316,inal double cb1        = SPLIT_FACTOR * b1;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2317,inal double b1High     = cb1 - (cb1 - b1);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2318,inal double b1Low      = b1 - b1High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2320,/ accurate multiplication a1 * b1
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2321,inal double prod1High  = a1 * b1;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2322,inal double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2324,/ split a2 and b2 as two 26 bits numbers
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2325,inal double ca2        = SPLIT_FACTOR * a2;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2326,inal double a2High     = ca2 - (ca2 - a2);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2327,inal double a2Low      = a2 - a2High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2328,inal double cb2        = SPLIT_FACTOR * b2;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2329,inal double b2High     = cb2 - (cb2 - b2);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2330,inal double b2Low      = b2 - b2High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2332,/ accurate multiplication a2 * b2
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2333,inal double prod2High  = a2 * b2;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2334,inal double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2336,/ split a3 and b3 as two 26 bits numbers
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2337,inal double ca3        = SPLIT_FACTOR * a3;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2338,inal double a3High     = ca3 - (ca3 - a3);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2339,inal double a3Low      = a3 - a3High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2340,inal double cb3        = SPLIT_FACTOR * b3;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2341,inal double b3High     = cb3 - (cb3 - b3);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2342,inal double b3Low      = b3 - b3High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2344,/ accurate multiplication a3 * b3
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2345,inal double prod3High  = a3 * b3;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2346,inal double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2348,/ accurate addition a1 * b1 + a2 * b2
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2349,inal double s12High    = prod1High + prod2High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2350,inal double s12Prime   = s12High - prod2High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2351,inal double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2353,/ accurate addition a1 * b1 + a2 * b2 + a3 * b3
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2354,inal double s123High   = s12High + prod3High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2355,inal double s123Prime  = s123High - prod3High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2356,inal double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2358,"/ final rounding, s123 may have suffered many cancellations, we try"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2359,/ to recover some bits from the extra words we have saved up to now
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2360,ouble result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2362,f (Double.isNaN(result)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2363,"/ either we have split infinite numbers or some coefficients were NaNs,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2364,/ just rely on the naive implementation and let IEEE754 handle this
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2365,esult = a1 * b1 + a2 * b2 + a3 * b3;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2368,eturn result;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2373, Compute a linear combination accurately.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2374, <p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2375, This method computes a<sub>1</sub>&times;b<sub>1</sub> +
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2376, a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub> +
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2377, a<sub>4</sub>&times;b<sub>4</sub>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2378, to high accuracy. It does so by using specific multiplication and
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2379, addition algorithms to preserve accuracy and reduce cancellation effects.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2380, It is based on the 2005 paper <a
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2381," href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2382," Accurate Sum and Dot Product</a> by Takeshi Ogita,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2383," Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2384, </p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2385, @param a1 first factor of the first term
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2386, @param b1 second factor of the first term
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2387, @param a2 first factor of the second term
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2388, @param b2 second factor of the second term
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2389, @param a3 first factor of the third term
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2390, @param b3 second factor of the third term
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2391, @param a4 first factor of the third term
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2392, @param b4 second factor of the third term
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2393, @return a<sub>1</sub>&times;b<sub>1</sub> +
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2394, a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub> +
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2395, a<sub>4</sub>&times;b<sub>4</sub>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2396," @see #linearCombination(double, double, double, double)"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2397," @see #linearCombination(double, double, double, double, double, double)"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2399,"ublic static double linearCombination(final double a1, final double b1,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2400,"inal double a2, final double b2,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2401,"inal double a3, final double b3,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2402,"inal double a4, final double b4) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2404,/ the code below is split in many additions/subtractions that may
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2405,"/ appear redundant. However, they should NOT be simplified, as they"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2406,/ do use IEEE754 floating point arithmetic rounding properties.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2407,"/ as an example, the expression ""ca1 - (ca1 - a1)"" is NOT the same as ""a1"""
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2408,/ The variables naming conventions are that xyzHigh contains the most significant
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2409,/ bits of xyz and xyzLow contains its least significant bits. So theoretically
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2410,"/ xyz is the sum xyzHigh + xyzLow, but in many cases below, this sum cannot"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2411,/ be represented in only one double precision number so we preserve two numbers
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2412,"/ to hold it as long as we can, combining the high and low order bits together"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2413,"/ only at the end, after cancellation may have occurred on high order bits"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2415,/ split a1 and b1 as two 26 bits numbers
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2416,inal double ca1        = SPLIT_FACTOR * a1;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2417,inal double a1High     = ca1 - (ca1 - a1);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2418,inal double a1Low      = a1 - a1High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2419,inal double cb1        = SPLIT_FACTOR * b1;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2420,inal double b1High     = cb1 - (cb1 - b1);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2421,inal double b1Low      = b1 - b1High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2423,/ accurate multiplication a1 * b1
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2424,inal double prod1High  = a1 * b1;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2425,inal double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2427,/ split a2 and b2 as two 26 bits numbers
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2428,inal double ca2        = SPLIT_FACTOR * a2;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2429,inal double a2High     = ca2 - (ca2 - a2);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2430,inal double a2Low      = a2 - a2High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2431,inal double cb2        = SPLIT_FACTOR * b2;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2432,inal double b2High     = cb2 - (cb2 - b2);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2433,inal double b2Low      = b2 - b2High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2435,/ accurate multiplication a2 * b2
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2436,inal double prod2High  = a2 * b2;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2437,inal double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2439,/ split a3 and b3 as two 26 bits numbers
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2440,inal double ca3        = SPLIT_FACTOR * a3;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2441,inal double a3High     = ca3 - (ca3 - a3);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2442,inal double a3Low      = a3 - a3High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2443,inal double cb3        = SPLIT_FACTOR * b3;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2444,inal double b3High     = cb3 - (cb3 - b3);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2445,inal double b3Low      = b3 - b3High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2447,/ accurate multiplication a3 * b3
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2448,inal double prod3High  = a3 * b3;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2449,inal double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2451,/ split a4 and b4 as two 26 bits numbers
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2452,inal double ca4        = SPLIT_FACTOR * a4;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2453,inal double a4High     = ca4 - (ca4 - a4);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2454,inal double a4Low      = a4 - a4High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2455,inal double cb4        = SPLIT_FACTOR * b4;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2456,inal double b4High     = cb4 - (cb4 - b4);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2457,inal double b4Low      = b4 - b4High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2459,/ accurate multiplication a4 * b4
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2460,inal double prod4High  = a4 * b4;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2461,inal double prod4Low   = a4Low * b4Low - (((prod4High - a4High * b4High) - a4Low * b4High) - a4High * b4Low);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2463,/ accurate addition a1 * b1 + a2 * b2
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2464,inal double s12High    = prod1High + prod2High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2465,inal double s12Prime   = s12High - prod2High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2466,inal double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2468,/ accurate addition a1 * b1 + a2 * b2 + a3 * b3
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2469,inal double s123High   = s12High + prod3High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2470,inal double s123Prime  = s123High - prod3High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2471,inal double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2473,/ accurate addition a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2474,inal double s1234High  = s123High + prod4High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2475,inal double s1234Prime = s1234High - prod4High;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2476,inal double s1234Low   = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2478,"/ final rounding, s1234 may have suffered many cancellations, we try"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2479,/ to recover some bits from the extra words we have saved up to now
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2480,ouble result = s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2482,f (Double.isNaN(result)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2483,"/ either we have split infinite numbers or some coefficients were NaNs,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2484,/ just rely on the naive implementation and let IEEE754 handle this
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2485,esult = a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2488,eturn result;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2493, Compute a linear combination accurately.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2494, This method computes the sum of the products
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2495, <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2496, It does so by using specific multiplication and addition algorithms to
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2497, preserve accuracy and reduce cancellation effects.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2498, <br/>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2499, It is based on the 2005 paper
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2500," <a href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2501," Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2502, and Shin'ichi Oishi published in SIAM J. Sci. Comput.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2504, @param a Factors.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2505, @param b Factors.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2506, @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2508,"ublic static double linearCombination(final double[] a, final double[] b) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2509,inal int len = a.length;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2510,f (len != b.length) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2511,"hrow new DimensionMismatchException(len, b.length);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2514,inal double[] prodHigh = new double[len];
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2515,ouble prodLowSum = 0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2517,or (int i = 0; i < len; i++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2518,inal double ai = a[i];
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2519,inal double ca = SPLIT_FACTOR * ai;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2520,inal double aHigh = ca - (ca - ai);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2521,inal double aLow = ai - aHigh;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2523,inal double bi = b[i];
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2524,inal double cb = SPLIT_FACTOR * bi;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2525,inal double bHigh = cb - (cb - bi);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2526,inal double bLow = bi - bHigh;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2527,rodHigh[i] = ai * bi;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2528,inal double prodLow = aLow * bLow - (((prodHigh[i] -
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2529,High * bHigh) -
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2530,Low * bHigh) -
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2531,High * bLow);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2532,rodLowSum += prodLow;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2536,inal double prodHighCur = prodHigh[0];
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2537,ouble prodHighNext = prodHigh[1];
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2538,ouble sHighPrev = prodHighCur + prodHighNext;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2539,ouble sPrime = sHighPrev - prodHighNext;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2540,ouble sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2542,inal int lenMinusOne = len - 1;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2543,or (int i = 1; i < lenMinusOne; i++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2544,rodHighNext = prodHigh[i + 1];
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2545,inal double sHighCur = sHighPrev + prodHighNext;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2546,Prime = sHighCur - prodHighNext;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2547,LowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2548,HighPrev = sHighCur;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2551,ouble result = sHighPrev + (prodLowSum + sLowSum);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2553,f (Double.isNaN(result)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2554,"/ either we have split infinite numbers or some coefficients were NaNs,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2555,/ just rely on the naive implementation and let IEEE754 handle this
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2556,esult = 0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2557,or (int i = 0; i < len; ++i) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2558,esult += a[i] * b[i];
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,2562,eturn result;
False,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,23,mport org.apache.commons.math.util.MathUtils;
False,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,132,eturn MathUtils.copyOf(counter);
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,131,return MathArrays.copyOf(counter);
False,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,167,his.size = MathUtils.copyOf(size);
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,166,this.size = MathArrays.copyOf(size);
False,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,283,eturn MathUtils.copyOf(size);
True,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java,282,return MathArrays.copyOf(size);
False,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,34, Private Constructor
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,34,* Private constructor.
False,src/test/java/org/apache/commons/math/exception/NonMonotonicSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonicSequenceExceptionTest.java,19,mport org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/exception/NonMonotonicSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonicSequenceExceptionTest.java,19,import org.apache.commons.math.util.MathArrays;
False,src/test/java/org/apache/commons/math/exception/NonMonotonicSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonicSequenceExceptionTest.java,33," new NonMonotonicSequenceException(0, -1, 1, MathUtils.OrderDirection.DECREASING, false);"
True,src/test/java/org/apache/commons/math/exception/NonMonotonicSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonicSequenceExceptionTest.java,33,"= new NonMonotonicSequenceException(0, -1, 1, MathArrays.OrderDirection.DECREASING, false);"
False,src/test/java/org/apache/commons/math/exception/NonMonotonicSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonicSequenceExceptionTest.java,37,ssert.assertTrue(e.getDirection() == MathUtils.OrderDirection.DECREASING);
True,src/test/java/org/apache/commons/math/exception/NonMonotonicSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonicSequenceExceptionTest.java,37,Assert.assertTrue(e.getDirection() == MathArrays.OrderDirection.DECREASING);
False,src/test/java/org/apache/commons/math/exception/NonMonotonicSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonicSequenceExceptionTest.java,44,ssert.assertTrue(e.getDirection() == MathUtils.OrderDirection.INCREASING);
True,src/test/java/org/apache/commons/math/exception/NonMonotonicSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonicSequenceExceptionTest.java,44,Assert.assertTrue(e.getDirection() == MathArrays.OrderDirection.INCREASING);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,3,* contributor license agreements. See the NOTICE file distributed with this
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,4,* work for additional information regarding copyright ownership. The ASF
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,5,"* licenses this file to You under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,6,"* ""License""); you may not use this file except in compliance with the License."
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,7,* You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,9,"* or agreed to in writing, software distributed under the License is"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,10,"* distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,11,"* KIND, either express or implied. See the License for the specific language"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,12,* governing permissions and limitations under the License.
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,14,package org.apache.commons.math.util;
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,16,import java.util.Arrays;
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,17,import org.apache.commons.math.exception.NonMonotonicSequenceException;
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,18,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,19,import org.apache.commons.math.exception.NullArgumentException;
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,20,import org.apache.commons.math.random.Well1024a;
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,23,import org.junit.Test;
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,26,* Test cases for the {@link MathArrays} class.
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,28,* @version $Id$
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,30,public class MathArraysTest {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,31,@Test
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,32,public void testL1DistanceDouble() {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,33,"double[] p1 = { 2.5,  0.0 };"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,34,"double[] p2 = { -0.5, 4.0 };"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,35,"Assert.assertTrue(Precision.equals(7.0, MathArrays.distance1(p1, p2), 1));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,38,@Test
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,39,public void testL1DistanceInt() {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,40,"int[] p1 = { 3, 0 };"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,41,"int[] p2 = { 0, 4 };"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,42,"Assert.assertEquals(7, MathArrays.distance1(p1, p2));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,45,@Test
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,46,public void testL2DistanceDouble() {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,47,"double[] p1 = { 2.5,  0.0 };"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,48,"double[] p2 = { -0.5, 4.0 };"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,49,"Assert.assertTrue(Precision.equals(5.0, MathArrays.distance(p1, p2), 1));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,52,@Test
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,53,public void testL2DistanceInt() {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,54,"int[] p1 = { 3, 0 };"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,55,"int[] p2 = { 0, 4 };"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,56,"Assert.assertTrue(Precision.equals(5, MathArrays.distance(p1, p2), 1));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,59,@Test
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,60,public void testLInfDistanceDouble() {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,61,"double[] p1 = { 2.5,  0.0 };"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,62,"double[] p2 = { -0.5, 4.0 };"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,63,"Assert.assertTrue(Precision.equals(4.0, MathArrays.distanceInf(p1, p2), 1));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,66,@Test
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,67,public void testLInfDistanceInt() {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,68,"int[] p1 = { 3, 0 };"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,69,"int[] p2 = { 0, 4 };"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,70,"Assert.assertEquals(4, MathArrays.distanceInf(p1, p2));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,73,@Test
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,74,public void testCheckOrder() {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,75,"MathArrays.checkOrder(new double[] {-15, -5.5, -1, 2, 15},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,76,"MathArrays.OrderDirection.INCREASING, true);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,77,"MathArrays.checkOrder(new double[] {-15, -5.5, -1, 2, 2},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,78,"MathArrays.OrderDirection.INCREASING, false);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,79,"MathArrays.checkOrder(new double[] {3, -5.5, -11, -27.5},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,80,"MathArrays.OrderDirection.DECREASING, true);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,81,"MathArrays.checkOrder(new double[] {3, 0, 0, -5.5, -11, -27.5},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,82,"MathArrays.OrderDirection.DECREASING, false);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,84,try {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,85,"MathArrays.checkOrder(new double[] {-15, -5.5, -1, -1, 2, 15},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,86,"MathArrays.OrderDirection.INCREASING, true);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,87,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,88,} catch (NonMonotonicSequenceException e) {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,89,// Expected
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,91,try {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,92,"MathArrays.checkOrder(new double[] {-15, -5.5, -1, -2, 2},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,93,"MathArrays.OrderDirection.INCREASING, false);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,94,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,95,} catch (NonMonotonicSequenceException e) {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,96,// Expected
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,98,try {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,99,"MathArrays.checkOrder(new double[] {3, 3, -5.5, -11, -27.5},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,100,"MathArrays.OrderDirection.DECREASING, true);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,101,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,102,} catch (NonMonotonicSequenceException e) {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,103,// Expected
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,105,try {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,106,"MathArrays.checkOrder(new double[] {3, -1, 0, -5.5, -11, -27.5},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,107,"MathArrays.OrderDirection.DECREASING, false);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,108,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,109,} catch (NonMonotonicSequenceException e) {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,110,// Expected
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,112,try {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,113,"MathArrays.checkOrder(new double[] {3, 0, -5.5, -11, -10},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,114,"MathArrays.OrderDirection.DECREASING, false);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,115,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,116,} catch (NonMonotonicSequenceException e) {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,117,// Expected
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,121,@Test
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,122,public void testIsMonotone() {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,123,"if(MathArrays.isMonotonic(new double[] { -15, -5.5, -1, -1, 2, 15 },"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,124,"MathArrays.OrderDirection.INCREASING, true)) {"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,125,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,128,"if(MathArrays.isMonotonic(new double[] { -15, -5.5, -1, -2, 2 },"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,129,"MathArrays.OrderDirection.INCREASING, false)) {"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,130,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,133,"if(MathArrays.isMonotonic(new double[] { 3, 3, -5.5, -11, -27.5 },"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,134,"MathArrays.OrderDirection.DECREASING, true)) {"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,135,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,137,"if( MathArrays.isMonotonic(new double[] { 3, -1, 0, -5.5, -11, -27.5 },"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,138,"MathArrays.OrderDirection.DECREASING, false)) {"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,139,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,143,@Test
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,144,public void testIsMonotoneComparable() {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,145,"if (MathArrays.isMonotonic(new Double[] { new Double(-15),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,146,"new Double(-5.5),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,147,"new Double(-1),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,148,"new Double(-1),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,149,"new Double(2),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,150,"new Double(15)},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,151,"MathArrays.OrderDirection.INCREASING, true)) {"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,152,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,155,"if (MathArrays.isMonotonic(new Double[] { new Double(-15),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,156,"new Double(-5.5),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,157,"new Double(-1),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,158,"new Double(-2),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,159,"new Double(2)},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,160,"MathArrays.OrderDirection.INCREASING, false)) {"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,161,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,164,"if (MathArrays.isMonotonic(new Double[] { new Double(3),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,165,"new Double(3),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,166,"new Double(-5.5),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,167,"new Double(-11),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,168,"new Double(-27.5)},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,169,"MathArrays.OrderDirection.DECREASING, true)) {"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,170,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,172,"if (MathArrays.isMonotonic(new Double[] {new Double(3),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,173,"new Double(-1),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,174,"new Double(0),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,175,"new Double(-5.5),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,176,"new Double(-11),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,177,"new Double(-27.5)},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,178,"MathArrays.OrderDirection.DECREASING, false)) {"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,179,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,183,@Test
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,184,public void testSortInPlace() {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,185,"final double[] x1 = {2,   5,  -3, 1,  4};"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,186,"final double[] x2 = {4,  25,   9, 1, 16};"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,187,"final double[] x3 = {8, 125, -27, 1, 64};"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,189,"MathArrays.sortInPlace(x1, x2, x3);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,191,"Assert.assertEquals(-3,  x1[0], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,192,"Assert.assertEquals(9,   x2[0], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,193,"Assert.assertEquals(-27, x3[0], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,195,"Assert.assertEquals(1, x1[1], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,196,"Assert.assertEquals(1, x2[1], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,197,"Assert.assertEquals(1, x3[1], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,199,"Assert.assertEquals(2, x1[2], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,200,"Assert.assertEquals(4, x2[2], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,201,"Assert.assertEquals(8, x3[2], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,203,"Assert.assertEquals(4,  x1[3], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,204,"Assert.assertEquals(16, x2[3], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,205,"Assert.assertEquals(64, x3[3], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,207,"Assert.assertEquals(5,   x1[4], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,208,"Assert.assertEquals(25,  x2[4], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,209,"Assert.assertEquals(125, x3[4], Math.ulp(1d));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,212,@Test
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,213,/** Example in javadoc */
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,214,public void testSortInPlaceExample() {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,215,"final double[] x = {3, 1, 2};"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,216,"final double[] y = {1, 2, 3};"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,217,"final double[] z = {0, 5, 7};"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,218,"MathArrays.sortInPlace(x, y, z);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,219,"final double[] sx = {1, 2, 3};"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,220,"final double[] sy = {2, 3, 1};"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,221,"final double[] sz = {5, 7, 0};"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,222,"Assert.assertTrue(Arrays.equals(sx, x));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,223,"Assert.assertTrue(Arrays.equals(sy, y));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,224,"Assert.assertTrue(Arrays.equals(sz, z));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,227,@Test
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,228,public void testSortInPlaceFailures() {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,229,final double[] nullArray = null;
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,230,final double[] one = {1};
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,231,"final double[] two = {1, 2};"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,232,final double[] onep = {2};
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,233,try {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,234,"MathArrays.sortInPlace(one, two);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,235,"Assert.fail(""Expecting DimensionMismatchException"");"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,236,} catch (DimensionMismatchException ex) {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,237,// expected
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,239,try {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,240,"MathArrays.sortInPlace(one, nullArray);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,241,"Assert.fail(""Expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,242,} catch (NullArgumentException ex) {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,243,// expected
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,245,try {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,246,"MathArrays.sortInPlace(one, onep, nullArray);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,247,"Assert.fail(""Expecting NullArgumentException"");"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,248,} catch (NullArgumentException ex) {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,249,// expected
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,253,@Test
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,254,public void testCopyOfInt() {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,255,"final int[] source = { Integer.MIN_VALUE,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,256,"-1, 0, 1, 3, 113, 4769,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,257,Integer.MAX_VALUE };
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,258,final int[] dest = MathArrays.copyOf(source);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,260,"Assert.assertEquals(dest.length, source.length);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,261,for (int i = 0; i < source.length; i++) {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,262,"Assert.assertEquals(source[i], dest[i]);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,266,@Test
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,267,public void testCopyOfInt2() {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,268,"final int[] source = { Integer.MIN_VALUE,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,269,"-1, 0, 1, 3, 113, 4769,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,270,Integer.MAX_VALUE };
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,271,final int offset = 3;
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,272,"final int[] dest = MathArrays.copyOf(source, source.length - offset);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,274,"Assert.assertEquals(dest.length, source.length - offset);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,275,for (int i = 0; i < source.length - offset; i++) {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,276,"Assert.assertEquals(source[i], dest[i]);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,280,@Test
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,281,public void testCopyOfInt3() {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,282,"final int[] source = { Integer.MIN_VALUE,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,283,"-1, 0, 1, 3, 113, 4769,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,284,Integer.MAX_VALUE };
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,285,final int offset = 3;
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,286,"final int[] dest = MathArrays.copyOf(source, source.length + offset);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,288,"Assert.assertEquals(dest.length, source.length + offset);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,289,for (int i = 0; i < source.length; i++) {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,290,"Assert.assertEquals(source[i], dest[i]);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,292,for (int i = source.length; i < source.length + offset; i++) {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,293,"Assert.assertEquals(0, dest[i], 0);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,297,@Test
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,298,public void testCopyOfDouble() {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,299,"final double[] source = { Double.NEGATIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,300,"-Double.MAX_VALUE,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,301,"-1, 0,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,302,"Double.MIN_VALUE,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,303,"Math.ulp(1d),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,304,"1, 3, 113, 4769,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,305,"Double.MAX_VALUE,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,306,Double.POSITIVE_INFINITY };
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,307,final double[] dest = MathArrays.copyOf(source);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,309,"Assert.assertEquals(dest.length, source.length);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,310,for (int i = 0; i < source.length; i++) {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,311,"Assert.assertEquals(source[i], dest[i], 0);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,315,@Test
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,316,public void testCopyOfDouble2() {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,317,"final double[] source = { Double.NEGATIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,318,"-Double.MAX_VALUE,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,319,"-1, 0,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,320,"Double.MIN_VALUE,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,321,"Math.ulp(1d),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,322,"1, 3, 113, 4769,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,323,"Double.MAX_VALUE,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,324,Double.POSITIVE_INFINITY };
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,325,final int offset = 3;
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,326,"final double[] dest = MathArrays.copyOf(source, source.length - offset);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,328,"Assert.assertEquals(dest.length, source.length - offset);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,329,for (int i = 0; i < source.length - offset; i++) {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,330,"Assert.assertEquals(source[i], dest[i], 0);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,334,@Test
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,335,public void testCopyOfDouble3() {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,336,"final double[] source = { Double.NEGATIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,337,"-Double.MAX_VALUE,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,338,"-1, 0,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,339,"Double.MIN_VALUE,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,340,"Math.ulp(1d),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,341,"1, 3, 113, 4769,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,342,"Double.MAX_VALUE,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,343,Double.POSITIVE_INFINITY };
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,344,final int offset = 3;
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,345,"final double[] dest = MathArrays.copyOf(source, source.length + offset);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,347,"Assert.assertEquals(dest.length, source.length + offset);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,348,for (int i = 0; i < source.length; i++) {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,349,"Assert.assertEquals(source[i], dest[i], 0);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,351,for (int i = source.length; i < source.length + offset; i++) {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,352,"Assert.assertEquals(0, dest[i], 0);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,356,@Test
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,357,public void testLinearCombination1() {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,358,final double[] a = new double[] {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,359,"-1321008684645961.0 / 268435456.0,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,360,"-5774608829631843.0 / 268435456.0,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,361,-7645843051051357.0 / 8589934592.0
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,363,final double[] b = new double[] {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,364,"-5712344449280879.0 / 2097152.0,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,365,"-4550117129121957.0 / 2097152.0,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,366,8846951984510141.0 / 131072.0
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,369,"final double abSumInline = MathArrays.linearCombination(a[0], b[0],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,370,"a[1], b[1],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,371,"a[2], b[2]);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,372,"final double abSumArray = MathArrays.linearCombination(a, b);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,374,"Assert.assertEquals(abSumInline, abSumArray, 0);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,377,@Test
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,378,public void testLinearCombination2() {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,379,// we compare accurate versus naive dot product implementations
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,380,// on regular vectors (i.e. not extreme cases like in the previous test)
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,381,Well1024a random = new Well1024a(553267312521321234l);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,383,for (int i = 0; i < 10000; ++i) {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,384,final double ux = 1e17 * random.nextDouble();
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,385,final double uy = 1e17 * random.nextDouble();
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,386,final double uz = 1e17 * random.nextDouble();
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,387,final double vx = 1e17 * random.nextDouble();
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,388,final double vy = 1e17 * random.nextDouble();
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,389,final double vz = 1e17 * random.nextDouble();
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,390,"final double sInline = MathArrays.linearCombination(ux, vx,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,391,"uy, vy,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,392,"uz, vz);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,393,"final double sArray = MathArrays.linearCombination(new double[] {ux, uy, uz},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,394,"new double[] {vx, vy, vz});"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,395,"Assert.assertEquals(sInline, sArray, 0);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,399,@Test
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,400,public void testLinearCombinationInfinite() {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,401,final double[][] a = new double[][] {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,402,"{ 1, 2, 3, 4},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,403,"{ 1, Double.POSITIVE_INFINITY, 3, 4},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,404,"{ 1, 2, Double.POSITIVE_INFINITY, 4},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,405,"{ 1, Double.POSITIVE_INFINITY, 3, Double.NEGATIVE_INFINITY},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,406,"{ 1, 2, 3, 4},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,407,"{ 1, 2, 3, 4},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,408,"{ 1, 2, 3, 4},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,409,"{ 1, 2, 3, 4}"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,411,final double[][] b = new double[][] {
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,412,"{ 1, -2, 3, 4},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,413,"{ 1, -2, 3, 4},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,414,"{ 1, -2, 3, 4},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,415,"{ 1, -2, 3, 4},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,416,"{ 1, Double.POSITIVE_INFINITY, 3, 4},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,417,"{ 1, -2, Double.POSITIVE_INFINITY, 4},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,418,"{ 1, Double.POSITIVE_INFINITY, 3, Double.NEGATIVE_INFINITY},"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,419,"{ Double.NaN, -2, 3, 4}"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,422,"Assert.assertEquals(-3,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,423,"MathArrays.linearCombination(a[0][0], b[0][0],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,424,"a[0][1], b[0][1]),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,425,1.0e-10);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,426,"Assert.assertEquals(6,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,427,"MathArrays.linearCombination(a[0][0], b[0][0],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,428,"a[0][1], b[0][1],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,429,"a[0][2], b[0][2]),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,430,1.0e-10);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,431,"Assert.assertEquals(22,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,432,"MathArrays.linearCombination(a[0][0], b[0][0],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,433,"a[0][1], b[0][1],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,434,"a[0][2], b[0][2],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,435,"a[0][3], b[0][3]),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,436,1.0e-10);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,437,"Assert.assertEquals(22, MathArrays.linearCombination(a[0], b[0]), 1.0e-10);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,439,"Assert.assertEquals(Double.NEGATIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,440,"MathArrays.linearCombination(a[1][0], b[1][0],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,441,"a[1][1], b[1][1]),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,442,1.0e-10);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,443,"Assert.assertEquals(Double.NEGATIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,444,"MathArrays.linearCombination(a[1][0], b[1][0],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,445,"a[1][1], b[1][1],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,446,"a[1][2], b[1][2]),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,447,1.0e-10);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,448,"Assert.assertEquals(Double.NEGATIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,449,"MathArrays.linearCombination(a[1][0], b[1][0],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,450,"a[1][1], b[1][1],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,451,"a[1][2], b[1][2],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,452,"a[1][3], b[1][3]),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,453,1.0e-10);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,454,"Assert.assertEquals(Double.NEGATIVE_INFINITY, MathArrays.linearCombination(a[1], b[1]), 1.0e-10);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,456,"Assert.assertEquals(-3,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,457,"MathArrays.linearCombination(a[2][0], b[2][0],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,458,"a[2][1], b[2][1]),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,459,1.0e-10);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,460,"Assert.assertEquals(Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,461,"MathArrays.linearCombination(a[2][0], b[2][0],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,462,"a[2][1], b[2][1],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,463,"a[2][2], b[2][2]),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,464,1.0e-10);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,465,"Assert.assertEquals(Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,466,"MathArrays.linearCombination(a[2][0], b[2][0],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,467,"a[2][1], b[2][1],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,468,"a[2][2], b[2][2],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,469,"a[2][3], b[2][3]),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,470,1.0e-10);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,471,"Assert.assertEquals(Double.POSITIVE_INFINITY, MathArrays.linearCombination(a[2], b[2]), 1.0e-10);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,473,"Assert.assertEquals(Double.NEGATIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,474,"MathArrays.linearCombination(a[3][0], b[3][0],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,475,"a[3][1], b[3][1]),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,476,1.0e-10);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,477,"Assert.assertEquals(Double.NEGATIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,478,"MathArrays.linearCombination(a[3][0], b[3][0],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,479,"a[3][1], b[3][1],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,480,"a[3][2], b[3][2]),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,481,1.0e-10);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,482,"Assert.assertEquals(Double.NEGATIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,483,"MathArrays.linearCombination(a[3][0], b[3][0],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,484,"a[3][1], b[3][1],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,485,"a[3][2], b[3][2],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,486,"a[3][3], b[3][3]),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,487,1.0e-10);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,488,"Assert.assertEquals(Double.NEGATIVE_INFINITY, MathArrays.linearCombination(a[3], b[3]), 1.0e-10);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,490,"Assert.assertEquals(Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,491,"MathArrays.linearCombination(a[4][0], b[4][0],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,492,"a[4][1], b[4][1]),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,493,1.0e-10);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,494,"Assert.assertEquals(Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,495,"MathArrays.linearCombination(a[4][0], b[4][0],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,496,"a[4][1], b[4][1],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,497,"a[4][2], b[4][2]),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,498,1.0e-10);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,499,"Assert.assertEquals(Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,500,"MathArrays.linearCombination(a[4][0], b[4][0],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,501,"a[4][1], b[4][1],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,502,"a[4][2], b[4][2],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,503,"a[4][3], b[4][3]),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,504,1.0e-10);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,505,"Assert.assertEquals(Double.POSITIVE_INFINITY, MathArrays.linearCombination(a[4], b[4]), 1.0e-10);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,507,"Assert.assertEquals(-3,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,508,"MathArrays.linearCombination(a[5][0], b[5][0],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,509,"a[5][1], b[5][1]),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,510,1.0e-10);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,511,"Assert.assertEquals(Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,512,"MathArrays.linearCombination(a[5][0], b[5][0],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,513,"a[5][1], b[5][1],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,514,"a[5][2], b[5][2]),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,515,1.0e-10);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,516,"Assert.assertEquals(Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,517,"MathArrays.linearCombination(a[5][0], b[5][0],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,518,"a[5][1], b[5][1],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,519,"a[5][2], b[5][2],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,520,"a[5][3], b[5][3]),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,521,1.0e-10);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,522,"Assert.assertEquals(Double.POSITIVE_INFINITY, MathArrays.linearCombination(a[5], b[5]), 1.0e-10);"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,524,"Assert.assertEquals(Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,525,"MathArrays.linearCombination(a[6][0], b[6][0],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,526,"a[6][1], b[6][1]),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,527,1.0e-10);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,528,"Assert.assertEquals(Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,529,"MathArrays.linearCombination(a[6][0], b[6][0],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,530,"a[6][1], b[6][1],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,531,"a[6][2], b[6][2]),"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,532,1.0e-10);
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,533,"Assert.assertTrue(Double.isNaN(MathArrays.linearCombination(a[6][0], b[6][0],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,534,"a[6][1], b[6][1],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,535,"a[6][2], b[6][2],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,536,"a[6][3], b[6][3])));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,537,"Assert.assertTrue(Double.isNaN(MathArrays.linearCombination(a[6], b[6])));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,539,"Assert.assertTrue(Double.isNaN(MathArrays.linearCombination(a[7][0], b[7][0],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,540,"a[7][1], b[7][1])));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,541,"Assert.assertTrue(Double.isNaN(MathArrays.linearCombination(a[7][0], b[7][0],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,542,"a[7][1], b[7][1],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,543,"a[7][2], b[7][2])));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,544,"Assert.assertTrue(Double.isNaN(MathArrays.linearCombination(a[7][0], b[7][0],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,545,"a[7][1], b[7][1],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,546,"a[7][2], b[7][2],"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,547,"a[7][3], b[7][3])));"
True,src/test/java/org/apache/commons/math/util/MathArraysTest.java,src/test/java/org/apache/commons/math/util/MathArraysTest.java,548,"Assert.assertTrue(Double.isNaN(MathArrays.linearCombination(a[7], b[7])));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,26,mport org.apache.commons.math.exception.DimensionMismatchException;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,27,mport org.apache.commons.math.exception.NonMonotonicSequenceException;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,34,mport org.apache.commons.math.random.Well1024a;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1339,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1340,ublic void testL1DistanceDouble() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1341,"ouble[] p1 = { 2.5,  0.0 };"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1342,"ouble[] p2 = { -0.5, 4.0 };"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1343,"ssert.assertTrue(Precision.equals(7.0, MathUtils.distance1(p1, p2), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1346,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1347,ublic void testL1DistanceInt() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1348,"nt[] p1 = { 3, 0 };"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1349,"nt[] p2 = { 0, 4 };"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1350,"ssert.assertEquals(7, MathUtils.distance1(p1, p2));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1353,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1354,ublic void testL2DistanceDouble() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1355,"ouble[] p1 = { 2.5,  0.0 };"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1356,"ouble[] p2 = { -0.5, 4.0 };"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1357,"ssert.assertTrue(Precision.equals(5.0, MathUtils.distance(p1, p2), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1360,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1361,ublic void testL2DistanceInt() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1362,"nt[] p1 = { 3, 0 };"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1363,"nt[] p2 = { 0, 4 };"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1364,"ssert.assertTrue(Precision.equals(5, MathUtils.distance(p1, p2), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1367,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1368,ublic void testLInfDistanceDouble() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1369,"ouble[] p1 = { 2.5,  0.0 };"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1370,"ouble[] p2 = { -0.5, 4.0 };"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1371,"ssert.assertTrue(Precision.equals(4.0, MathUtils.distanceInf(p1, p2), 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1374,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1375,ublic void testLInfDistanceInt() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1376,"nt[] p1 = { 3, 0 };"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1377,"nt[] p2 = { 0, 4 };"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1378,"ssert.assertEquals(4, MathUtils.distanceInf(p1, p2));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1381,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1382,ublic void testCheckOrder() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1383,"athUtils.checkOrder(new double[] {-15, -5.5, -1, 2, 15},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1384,"athUtils.OrderDirection.INCREASING, true);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1385,"athUtils.checkOrder(new double[] {-15, -5.5, -1, 2, 2},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1386,"athUtils.OrderDirection.INCREASING, false);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1387,"athUtils.checkOrder(new double[] {3, -5.5, -11, -27.5},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1388,"athUtils.OrderDirection.DECREASING, true);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1389,"athUtils.checkOrder(new double[] {3, 0, 0, -5.5, -11, -27.5},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1390,"athUtils.OrderDirection.DECREASING, false);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1392,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1393,"athUtils.checkOrder(new double[] {-15, -5.5, -1, -1, 2, 15},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1394,"athUtils.OrderDirection.INCREASING, true);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1395,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1396, catch (NonMonotonicSequenceException e) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1397,/ Expected
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1399,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1400,"athUtils.checkOrder(new double[] {-15, -5.5, -1, -2, 2},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1401,"athUtils.OrderDirection.INCREASING, false);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1402,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1403, catch (NonMonotonicSequenceException e) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1404,/ Expected
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1406,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1407,"athUtils.checkOrder(new double[] {3, 3, -5.5, -11, -27.5},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1408,"athUtils.OrderDirection.DECREASING, true);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1409,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1410, catch (NonMonotonicSequenceException e) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1411,/ Expected
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1413,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1414,"athUtils.checkOrder(new double[] {3, -1, 0, -5.5, -11, -27.5},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1415,"athUtils.OrderDirection.DECREASING, false);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1416,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1417, catch (NonMonotonicSequenceException e) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1418,/ Expected
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1420,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1421,"athUtils.checkOrder(new double[] {3, 0, -5.5, -11, -10},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1422,"athUtils.OrderDirection.DECREASING, false);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1423,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1424, catch (NonMonotonicSequenceException e) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1425,/ Expected
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1429,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1430,ublic void testIsMonotone() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1431,"f(MathUtils.isMonotone(new double[] {-15, -5.5, -1, -1, 2,15},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1432,"athUtils.OrderDirection.INCREASING, true) ){"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1433,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1436,"f(MathUtils.isMonotone(new double[] {-15, -5.5,-1,-2,2},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1437,"athUtils.OrderDirection.INCREASING, false)){"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1438,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1441,"f(MathUtils.isMonotone(new double[] {3,3,-5.5,-11,-27.5},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1442,"athUtils.OrderDirection.DECREASING, true)){"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1443,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1445,"f( MathUtils.isMonotone(new double[] {3,-1,0,-5.5,-11,-27.5},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1446,"athUtils.OrderDirection.DECREASING, false) ){"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1447,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1452,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1453,ublic void testIsMonotoneComparable() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1454,"f(MathUtils.isMonotone(new Double[] {new Double(-15), new Double(-5.5), new Double(-1), new Double(-1), new Double(2), new Double(15)},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1455,"athUtils.OrderDirection.INCREASING, true) ){"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1456,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1459,"f(MathUtils.isMonotone(new Double[] {new Double(-15), new Double(-5.5), new Double(-1), new Double(-2), new Double(2)},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1460,"athUtils.OrderDirection.INCREASING, false)){"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1461,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1464,"f(MathUtils.isMonotone(new Double[] {new Double(3), new Double(3), new Double(-5.5), new Double(-11), new Double(-27.5)},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1465,"athUtils.OrderDirection.DECREASING, true)){"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1466,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1468,"f( MathUtils.isMonotone(new Double[] {new Double(3), new Double(-1), new Double(0), new Double(-5.5), new Double(-11), new Double(-27.5)},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1469,"athUtils.OrderDirection.DECREASING, false) ){"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1470,"ssert.fail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1516,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1517,ublic void testSortInPlace() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1518,"inal double[] x1 = {2,   5,  -3, 1,  4};"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1519,"inal double[] x2 = {4,  25,   9, 1, 16};"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1520,"inal double[] x3 = {8, 125, -27, 1, 64};"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1522,"athUtils.sortInPlace(x1, x2, x3);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1524,"ssert.assertEquals(-3,  x1[0], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1525,"ssert.assertEquals(9,   x2[0], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1526,"ssert.assertEquals(-27, x3[0], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1528,"ssert.assertEquals(1, x1[1], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1529,"ssert.assertEquals(1, x2[1], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1530,"ssert.assertEquals(1, x3[1], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1532,"ssert.assertEquals(2, x1[2], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1533,"ssert.assertEquals(4, x2[2], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1534,"ssert.assertEquals(8, x3[2], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1536,"ssert.assertEquals(4,  x1[3], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1537,"ssert.assertEquals(16, x2[3], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1538,"ssert.assertEquals(64, x3[3], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1540,"ssert.assertEquals(5,   x1[4], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1541,"ssert.assertEquals(25,  x2[4], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1542,"ssert.assertEquals(125, x3[4], Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1545,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1546,** Example in javadoc */
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1547,ublic void testSortInPlaceExample() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1548,"inal double[] x = {3, 1, 2};"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1549,"inal double[] y = {1, 2, 3};"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1550,"inal double[] z = {0, 5, 7};"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1551,"athUtils.sortInPlace(x, y, z);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1552,"inal double[] sx = {1, 2, 3};"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1553,"inal double[] sy = {2, 3, 1};"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1554,"inal double[] sz = {5, 7, 0};"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1555,"ssert.assertTrue(Arrays.equals(sx, x));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1556,"ssert.assertTrue(Arrays.equals(sy, y));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1557,"ssert.assertTrue(Arrays.equals(sz, z));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1560,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1561,ublic void testSortInPlaceFaliures() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1562,inal double[] nullArray = null;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1563,inal double[] one = {1};
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1564,"inal double[] two = {1, 2};"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1565,inal double[] onep = {2};
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1566,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1567,"athUtils.sortInPlace(one, two);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1568,"ssert.fail(""Expecting DimensionMismatchException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1569, catch (DimensionMismatchException ex) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1570,/ expected
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1572,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1573,"athUtils.sortInPlace(one, nullArray);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1574,"ssert.fail(""Expecting NullArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1575, catch (NullArgumentException ex) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1576,/ expected
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1578,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1579,"athUtils.sortInPlace(one, onep, nullArray);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1580,"ssert.fail(""Expecting NullArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1581, catch (NullArgumentException ex) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1582,/ expected
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1586,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1587,ublic void testCopyOfInt() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1588,"inal int[] source = { Integer.MIN_VALUE,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1589,"1, 0, 1, 3, 113, 4769,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1590,nteger.MAX_VALUE };
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1591,inal int[] dest = MathUtils.copyOf(source);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1593,"ssert.assertEquals(dest.length, source.length);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1594,or (int i = 0; i < source.length; i++) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1595,"ssert.assertEquals(source[i], dest[i]);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1599,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1600,ublic void testCopyOfInt2() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1601,"inal int[] source = { Integer.MIN_VALUE,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1602,"1, 0, 1, 3, 113, 4769,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1603,nteger.MAX_VALUE };
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1604,inal int offset = 3;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1605,"inal int[] dest = MathUtils.copyOf(source, source.length - offset);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1607,"ssert.assertEquals(dest.length, source.length - offset);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1608,or (int i = 0; i < source.length - offset; i++) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1609,"ssert.assertEquals(source[i], dest[i]);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1613,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1614,ublic void testCopyOfInt3() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1615,"inal int[] source = { Integer.MIN_VALUE,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1616,"1, 0, 1, 3, 113, 4769,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1617,nteger.MAX_VALUE };
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1618,inal int offset = 3;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1619,"inal int[] dest = MathUtils.copyOf(source, source.length + offset);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1621,"ssert.assertEquals(dest.length, source.length + offset);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1622,or (int i = 0; i < source.length; i++) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1623,"ssert.assertEquals(source[i], dest[i]);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1625,or (int i = source.length; i < source.length + offset; i++) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1626,"ssert.assertEquals(0, dest[i], 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1630,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1631,ublic void testCopyOfDouble() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1632,"inal double[] source = { Double.NEGATIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1633,"Double.MAX_VALUE,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1634,"1, 0,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1635,"ouble.MIN_VALUE,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1636,"ath.ulp(1d),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1637,", 3, 113, 4769,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1638,"ouble.MAX_VALUE,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1639,ouble.POSITIVE_INFINITY };
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1640,inal double[] dest = MathUtils.copyOf(source);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1642,"ssert.assertEquals(dest.length, source.length);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1643,or (int i = 0; i < source.length; i++) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1644,"ssert.assertEquals(source[i], dest[i], 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1648,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1649,ublic void testCopyOfDouble2() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1650,"inal double[] source = { Double.NEGATIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1651,"Double.MAX_VALUE,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1652,"1, 0,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1653,"ouble.MIN_VALUE,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1654,"ath.ulp(1d),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1655,", 3, 113, 4769,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1656,"ouble.MAX_VALUE,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1657,ouble.POSITIVE_INFINITY };
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1658,inal int offset = 3;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1659,"inal double[] dest = MathUtils.copyOf(source, source.length - offset);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1661,"ssert.assertEquals(dest.length, source.length - offset);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1662,or (int i = 0; i < source.length - offset; i++) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1663,"ssert.assertEquals(source[i], dest[i], 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1667,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1668,ublic void testCopyOfDouble3() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1669,"inal double[] source = { Double.NEGATIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1670,"Double.MAX_VALUE,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1671,"1, 0,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1672,"ouble.MIN_VALUE,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1673,"ath.ulp(1d),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1674,", 3, 113, 4769,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1675,"ouble.MAX_VALUE,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1676,ouble.POSITIVE_INFINITY };
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1677,inal int offset = 3;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1678,"inal double[] dest = MathUtils.copyOf(source, source.length + offset);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1680,"ssert.assertEquals(dest.length, source.length + offset);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1681,or (int i = 0; i < source.length; i++) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1682,"ssert.assertEquals(source[i], dest[i], 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1684,or (int i = source.length; i < source.length + offset; i++) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1685,"ssert.assertEquals(0, dest[i], 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1709,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1710,ublic void testLinearCombination1() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1711,inal double[] a = new double[] {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1712,"1321008684645961.0 / 268435456.0,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1713,"5774608829631843.0 / 268435456.0,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1714,7645843051051357.0 / 8589934592.0
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1716,inal double[] b = new double[] {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1717,"5712344449280879.0 / 2097152.0,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1718,"4550117129121957.0 / 2097152.0,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1719,846951984510141.0 / 131072.0
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1722,"inal double abSumInline = MathUtils.linearCombination(a[0], b[0],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1723,"[1], b[1],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1724,"[2], b[2]);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1725,"inal double abSumArray = MathUtils.linearCombination(a, b);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1727,"ssert.assertEquals(abSumInline, abSumArray, 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1730,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1731,ublic void testLinearCombination2() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1732,/ we compare accurate versus naive dot product implementations
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1733,/ on regular vectors (i.e. not extreme cases like in the previous test)
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1734,ell1024a random = new Well1024a(553267312521321234l);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1736,or (int i = 0; i < 10000; ++i) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1737,inal double ux = 1e17 * random.nextDouble();
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1738,inal double uy = 1e17 * random.nextDouble();
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1739,inal double uz = 1e17 * random.nextDouble();
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1740,inal double vx = 1e17 * random.nextDouble();
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1741,inal double vy = 1e17 * random.nextDouble();
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1742,inal double vz = 1e17 * random.nextDouble();
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1743,"inal double sInline = MathUtils.linearCombination(ux, vx,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1744,"y, vy,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1745,"z, vz);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1746,"inal double sArray = MathUtils.linearCombination(new double[] {ux, uy, uz},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1747,"ew double[] {vx, vy, vz});"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1748,"ssert.assertEquals(sInline, sArray, 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1752,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1753,ublic void testLinearCombinationInfinite() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1754,inal double[][] a = new double[][] {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1755," 1, 2, 3, 4},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1756," 1, Double.POSITIVE_INFINITY, 3, 4},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1757," 1, 2, Double.POSITIVE_INFINITY, 4},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1758," 1, Double.POSITIVE_INFINITY, 3, Double.NEGATIVE_INFINITY},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1759," 1, 2, 3, 4},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1760," 1, 2, 3, 4},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1761," 1, 2, 3, 4},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1762," 1, 2, 3, 4}"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1764,inal double[][] b = new double[][] {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1765," 1, -2, 3, 4},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1766," 1, -2, 3, 4},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1767," 1, -2, 3, 4},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1768," 1, -2, 3, 4},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1769," 1, Double.POSITIVE_INFINITY, 3, 4},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1770," 1, -2, Double.POSITIVE_INFINITY, 4},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1771," 1, Double.POSITIVE_INFINITY, 3, Double.NEGATIVE_INFINITY},"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1772," Double.NaN, -2, 3, 4}"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1775,"ssert.assertEquals(-3,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1776,"athUtils.linearCombination(a[0][0], b[0][0],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1777,"[0][1], b[0][1]),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1778,.0e-10);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1779,"ssert.assertEquals(6,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1780,"athUtils.linearCombination(a[0][0], b[0][0],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1781,"[0][1], b[0][1],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1782,"[0][2], b[0][2]),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1783,.0e-10);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1784,"ssert.assertEquals(22,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1785,"athUtils.linearCombination(a[0][0], b[0][0],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1786,"[0][1], b[0][1],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1787,"[0][2], b[0][2],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1788,"[0][3], b[0][3]),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1789,.0e-10);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1790,"ssert.assertEquals(22, MathUtils.linearCombination(a[0], b[0]), 1.0e-10);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1792,"ssert.assertEquals(Double.NEGATIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1793,"athUtils.linearCombination(a[1][0], b[1][0],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1794,"[1][1], b[1][1]),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1795,.0e-10);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1796,"ssert.assertEquals(Double.NEGATIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1797,"athUtils.linearCombination(a[1][0], b[1][0],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1798,"[1][1], b[1][1],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1799,"[1][2], b[1][2]),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1800,.0e-10);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1801,"ssert.assertEquals(Double.NEGATIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1802,"athUtils.linearCombination(a[1][0], b[1][0],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1803,"[1][1], b[1][1],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1804,"[1][2], b[1][2],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1805,"[1][3], b[1][3]),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1806,.0e-10);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1807,"ssert.assertEquals(Double.NEGATIVE_INFINITY, MathUtils.linearCombination(a[1], b[1]), 1.0e-10);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1809,"ssert.assertEquals(-3,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1810,"athUtils.linearCombination(a[2][0], b[2][0],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1811,"[2][1], b[2][1]),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1812,.0e-10);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1813,"ssert.assertEquals(Double.POSITIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1814,"athUtils.linearCombination(a[2][0], b[2][0],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1815,"[2][1], b[2][1],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1816,"[2][2], b[2][2]),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1817,.0e-10);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1818,"ssert.assertEquals(Double.POSITIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1819,"athUtils.linearCombination(a[2][0], b[2][0],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1820,"[2][1], b[2][1],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1821,"[2][2], b[2][2],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1822,"[2][3], b[2][3]),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1823,.0e-10);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1824,"ssert.assertEquals(Double.POSITIVE_INFINITY, MathUtils.linearCombination(a[2], b[2]), 1.0e-10);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1826,"ssert.assertEquals(Double.NEGATIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1827,"athUtils.linearCombination(a[3][0], b[3][0],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1828,"[3][1], b[3][1]),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1829,.0e-10);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1830,"ssert.assertEquals(Double.NEGATIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1831,"athUtils.linearCombination(a[3][0], b[3][0],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1832,"[3][1], b[3][1],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1833,"[3][2], b[3][2]),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1834,.0e-10);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1835,"ssert.assertEquals(Double.NEGATIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1836,"athUtils.linearCombination(a[3][0], b[3][0],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1837,"[3][1], b[3][1],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1838,"[3][2], b[3][2],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1839,"[3][3], b[3][3]),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1840,.0e-10);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1841,"ssert.assertEquals(Double.NEGATIVE_INFINITY, MathUtils.linearCombination(a[3], b[3]), 1.0e-10);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1843,"ssert.assertEquals(Double.POSITIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1844,"athUtils.linearCombination(a[4][0], b[4][0],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1845,"[4][1], b[4][1]),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1846,.0e-10);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1847,"ssert.assertEquals(Double.POSITIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1848,"athUtils.linearCombination(a[4][0], b[4][0],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1849,"[4][1], b[4][1],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1850,"[4][2], b[4][2]),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1851,.0e-10);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1852,"ssert.assertEquals(Double.POSITIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1853,"athUtils.linearCombination(a[4][0], b[4][0],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1854,"[4][1], b[4][1],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1855,"[4][2], b[4][2],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1856,"[4][3], b[4][3]),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1857,.0e-10);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1858,"ssert.assertEquals(Double.POSITIVE_INFINITY, MathUtils.linearCombination(a[4], b[4]), 1.0e-10);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1860,"ssert.assertEquals(-3,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1861,"athUtils.linearCombination(a[5][0], b[5][0],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1862,"[5][1], b[5][1]),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1863,.0e-10);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1864,"ssert.assertEquals(Double.POSITIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1865,"athUtils.linearCombination(a[5][0], b[5][0],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1866,"[5][1], b[5][1],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1867,"[5][2], b[5][2]),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1868,.0e-10);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1869,"ssert.assertEquals(Double.POSITIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1870,"athUtils.linearCombination(a[5][0], b[5][0],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1871,"[5][1], b[5][1],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1872,"[5][2], b[5][2],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1873,"[5][3], b[5][3]),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1874,.0e-10);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1875,"ssert.assertEquals(Double.POSITIVE_INFINITY, MathUtils.linearCombination(a[5], b[5]), 1.0e-10);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1877,"ssert.assertEquals(Double.POSITIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1878,"athUtils.linearCombination(a[6][0], b[6][0],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1879,"[6][1], b[6][1]),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1880,.0e-10);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1881,"ssert.assertEquals(Double.POSITIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1882,"athUtils.linearCombination(a[6][0], b[6][0],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1883,"[6][1], b[6][1],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1884,"[6][2], b[6][2]),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1885,.0e-10);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1886,"ssert.assertTrue(Double.isNaN(MathUtils.linearCombination(a[6][0], b[6][0],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1887,"[6][1], b[6][1],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1888,"[6][2], b[6][2],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1889,"[6][3], b[6][3])));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1890,"ssert.assertTrue(Double.isNaN(MathUtils.linearCombination(a[6], b[6])));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1892,"ssert.assertTrue(Double.isNaN(MathUtils.linearCombination(a[7][0], b[7][0],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1893,"[7][1], b[7][1])));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1894,"ssert.assertTrue(Double.isNaN(MathUtils.linearCombination(a[7][0], b[7][0],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1895,"[7][1], b[7][1],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1896,"[7][2], b[7][2])));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1897,"ssert.assertTrue(Double.isNaN(MathUtils.linearCombination(a[7][0], b[7][0],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1898,"[7][1], b[7][1],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1899,"[7][2], b[7][2],"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1900,"[7][3], b[7][3])));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1901,"ssert.assertTrue(Double.isNaN(MathUtils.linearCombination(a[7], b[7])));"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,424,/ org.apache.commons.math.linear.DenseRealMatrix
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,424,// org.apache.commons.math.linear.BlockRealMatrix
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,66,ublic class DenseFieldMatrix<T extends FieldElement<T>> extends AbstractFieldMatrix<T> implements Serializable {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,66,public class BlockFieldMatrix<T extends FieldElement<T>> extends AbstractFieldMatrix<T> implements Serializable {
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,98,"ublic DenseFieldMatrix(final Field<T> field, final int rows, final int columns)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,98,"public BlockFieldMatrix(final Field<T> field, final int rows, final int columns)"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,118," <pre>matrix = new DenseFieldMatrix<T>(getField(), rawData.length, rawData[0].length,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,118,"* <pre>matrix = new BlockFieldMatrix<T>(getField(), rawData.length, rawData[0].length,"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,125," @see #DenseFieldMatrix(int, int, FieldElement[][], boolean)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,125,"* @see #BlockFieldMatrix(int, int, FieldElement[][], boolean)"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,127,ublic DenseFieldMatrix(final T[][] rawData)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,127,public BlockFieldMatrix(final T[][] rawData)
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,145, @see #DenseFieldMatrix(FieldElement[][])
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,145,* @see #BlockFieldMatrix(FieldElement[][])
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,147,"ublic DenseFieldMatrix(final int rows, final int columns,"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,147,"public BlockFieldMatrix(final int rows, final int columns,"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,189," is the layout used in {@link DenseFieldMatrix} instances, where the matrix"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,189,"* is the layout used in {@link BlockFieldMatrix} instances, where the matrix"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,197," DenseFieldMatrix#DenseFieldMatrix(int, int, FieldElement[][], boolean)}"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,197,"* BlockFieldMatrix#DenseFieldMatrix(int, int, FieldElement[][], boolean)}"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,206," @see #DenseFieldMatrix(int, int, FieldElement[][], boolean)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,206,"* @see #BlockFieldMatrix(int, int, FieldElement[][], boolean)"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,258," DenseFieldMatrix#DenseFieldMatrix(int, int, FieldElement[][], boolean)}"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,258,"* BlockFieldMatrix#DenseFieldMatrix(int, int, FieldElement[][], boolean)}"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,267," @see #DenseFieldMatrix(int, int, FieldElement[][], boolean)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,267,"* @see #BlockFieldMatrix(int, int, FieldElement[][], boolean)"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,296,"eturn new DenseFieldMatrix<T>(getField(), rowDimension, columnDimension);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,296,"return new BlockFieldMatrix<T>(getField(), rowDimension, columnDimension);"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,304,"enseFieldMatrix<T> copied = new DenseFieldMatrix<T>(getField(), rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,304,"BlockFieldMatrix<T> copied = new BlockFieldMatrix<T>(getField(), rows, columns);"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,320,eturn add((DenseFieldMatrix<T>) m);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,320,return add((BlockFieldMatrix<T>) m);
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,326,"inal DenseFieldMatrix<T> out = new DenseFieldMatrix<T>(getField(), rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,326,"final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,364,ublic DenseFieldMatrix<T> add(final DenseFieldMatrix<T> m)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,364,public BlockFieldMatrix<T> add(final BlockFieldMatrix<T> m)
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,370,"inal DenseFieldMatrix<T> out = new DenseFieldMatrix<T>(getField(), rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,370,"final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,391,eturn subtract((DenseFieldMatrix<T>) m);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,391,return subtract((BlockFieldMatrix<T>) m);
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,397,"inal DenseFieldMatrix<T> out = new DenseFieldMatrix<T>(getField(), rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,397,"final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,435,ublic DenseFieldMatrix<T> subtract(final DenseFieldMatrix<T> m)
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,435,public BlockFieldMatrix<T> subtract(final BlockFieldMatrix<T> m)
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,441,"inal DenseFieldMatrix<T> out = new DenseFieldMatrix<T>(getField(), rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,441,"final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,462,"inal DenseFieldMatrix<T> out = new DenseFieldMatrix<T>(getField(), rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,462,"final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,482,"inal DenseFieldMatrix<T> out = new DenseFieldMatrix<T>(getField(), rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,482,"final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,502,eturn multiply((DenseFieldMatrix<T>) m);
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,502,return multiply((BlockFieldMatrix<T>) m);
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,508,"inal DenseFieldMatrix<T> out = new DenseFieldMatrix<T>(getField(), rows, m.getColumnDimension());"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,508,"final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.getColumnDimension());"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,564,ublic DenseFieldMatrix<T> multiply(DenseFieldMatrix<T> m) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,564,public BlockFieldMatrix<T> multiply(BlockFieldMatrix<T> m) throws IllegalArgumentException {
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,569,"inal DenseFieldMatrix<T> out = new DenseFieldMatrix<T>(getField(), rows, m.columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,569,"final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.columns);"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,669,inal DenseFieldMatrix<T> out =
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,670,"ew DenseFieldMatrix<T>(getField(), endRow - startRow + 1, endColumn - startColumn + 1);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,669,final BlockFieldMatrix<T> out =
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,670,"new BlockFieldMatrix<T>(getField(), endRow - startRow + 1, endColumn - startColumn + 1);"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,842,"inal DenseFieldMatrix<T> out = new DenseFieldMatrix<T>(getField(), 1, columns);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,842,"final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), 1, columns);"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,874,"etRowMatrix(row, (DenseFieldMatrix<T>) matrix);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,874,"setRowMatrix(row, (BlockFieldMatrix<T>) matrix);"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,891,"ublic void setRowMatrix(final int row, final DenseFieldMatrix<T> matrix)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,891,"public void setRowMatrix(final int row, final BlockFieldMatrix<T> matrix)"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,933,"inal DenseFieldMatrix<T> out = new DenseFieldMatrix<T>(getField(), rows, 1);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,933,"final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, 1);"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,963,"etColumnMatrix(column, (DenseFieldMatrix<T>) matrix);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,963,"setColumnMatrix(column, (BlockFieldMatrix<T>) matrix);"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,980,"oid setColumnMatrix(final int column, final DenseFieldMatrix<T> matrix)"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,980,"void setColumnMatrix(final int column, final BlockFieldMatrix<T> matrix)"
False,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1262,"inal DenseFieldMatrix<T> out = new DenseFieldMatrix<T>(getField(), nCols, nRows);"
True,src/java/org/apache/commons/math/linear/DenseFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1262,"final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), nCols, nRows);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,64,ublic class DenseRealMatrix extends AbstractRealMatrix implements Serializable {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,64,public class BlockRealMatrix extends AbstractRealMatrix implements Serializable {
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,95,"ublic DenseRealMatrix(final int rows, final int columns)"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,95,"public BlockRealMatrix(final int rows, final int columns)"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,115," <pre>matrix = new DenseRealMatrix(rawData.length, rawData[0].length,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,115,"* <pre>matrix = new BlockRealMatrix(rawData.length, rawData[0].length,"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,122," @see #DenseRealMatrix(int, int, double[][], boolean)"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,122,"* @see #BlockRealMatrix(int, int, double[][], boolean)"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,124,ublic DenseRealMatrix(final double[][] rawData)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,124,public BlockRealMatrix(final double[][] rawData)
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,142, @see #DenseRealMatrix(double[][])
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,142,* @see #BlockRealMatrix(double[][])
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,144,"ublic DenseRealMatrix(final int rows, final int columns,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,144,"public BlockRealMatrix(final int rows, final int columns,"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,186," is the layout used in {@link DenseRealMatrix} instances, where the matrix"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,186,"* is the layout used in {@link BlockRealMatrix} instances, where the matrix"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,194," DenseRealMatrix#DenseRealMatrix(int, int, double[][], boolean)} constructor."
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,194,"* BlockRealMatrix#DenseRealMatrix(int, int, double[][], boolean)} constructor."
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,201," @see #DenseRealMatrix(int, int, double[][], boolean)"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,201,"* @see #BlockRealMatrix(int, int, double[][], boolean)"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,252," DenseRealMatrix#DenseRealMatrix(int, int, double[][], boolean)} constructor."
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,252,"* BlockRealMatrix#DenseRealMatrix(int, int, double[][], boolean)} constructor."
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,258," @see #DenseRealMatrix(int, int, double[][], boolean)"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,258,"* @see #BlockRealMatrix(int, int, double[][], boolean)"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,284,"ublic DenseRealMatrix createMatrix(final int rowDimension, final int columnDimension)"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,284,"public BlockRealMatrix createMatrix(final int rowDimension, final int columnDimension)"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,286,"eturn new DenseRealMatrix(rowDimension, columnDimension);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,286,"return new BlockRealMatrix(rowDimension, columnDimension);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,291,ublic DenseRealMatrix copy() {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,291,public BlockRealMatrix copy() {
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,294,"enseRealMatrix copied = new DenseRealMatrix(rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,294,"BlockRealMatrix copied = new BlockRealMatrix(rows, columns);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,307,ublic DenseRealMatrix add(final RealMatrix m)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,307,public BlockRealMatrix add(final RealMatrix m)
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,310,eturn add((DenseRealMatrix) m);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,310,return add((BlockRealMatrix) m);
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,316,"inal DenseRealMatrix out = new DenseRealMatrix(rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,316,"final BlockRealMatrix out = new BlockRealMatrix(rows, columns);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,354,ublic DenseRealMatrix add(final DenseRealMatrix m)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,354,public BlockRealMatrix add(final BlockRealMatrix m)
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,360,"inal DenseRealMatrix out = new DenseRealMatrix(rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,360,"final BlockRealMatrix out = new BlockRealMatrix(rows, columns);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,378,ublic DenseRealMatrix subtract(final RealMatrix m)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,378,public BlockRealMatrix subtract(final RealMatrix m)
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,381,eturn subtract((DenseRealMatrix) m);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,381,return subtract((BlockRealMatrix) m);
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,387,"inal DenseRealMatrix out = new DenseRealMatrix(rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,387,"final BlockRealMatrix out = new BlockRealMatrix(rows, columns);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,425,ublic DenseRealMatrix subtract(final DenseRealMatrix m)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,425,public BlockRealMatrix subtract(final BlockRealMatrix m)
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,431,"inal DenseRealMatrix out = new DenseRealMatrix(rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,431,"final BlockRealMatrix out = new BlockRealMatrix(rows, columns);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,449,ublic DenseRealMatrix scalarAdd(final double d)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,449,public BlockRealMatrix scalarAdd(final double d)
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,452,"inal DenseRealMatrix out = new DenseRealMatrix(rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,452,"final BlockRealMatrix out = new BlockRealMatrix(rows, columns);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,472,"inal DenseRealMatrix out = new DenseRealMatrix(rows, columns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,472,"final BlockRealMatrix out = new BlockRealMatrix(rows, columns);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,489,ublic DenseRealMatrix multiply(final RealMatrix m)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,489,public BlockRealMatrix multiply(final RealMatrix m)
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,492,eturn multiply((DenseRealMatrix) m);
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,492,return multiply((BlockRealMatrix) m);
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,498,"inal DenseRealMatrix out = new DenseRealMatrix(rows, m.getColumnDimension());"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,498,"final BlockRealMatrix out = new BlockRealMatrix(rows, m.getColumnDimension());"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,552,ublic DenseRealMatrix multiply(DenseRealMatrix m) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,552,public BlockRealMatrix multiply(BlockRealMatrix m) throws IllegalArgumentException {
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,557,"inal DenseRealMatrix out = new DenseRealMatrix(rows, m.columns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,557,"final BlockRealMatrix out = new BlockRealMatrix(rows, m.columns);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,684,"ublic DenseRealMatrix getSubMatrix(final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,684,"public BlockRealMatrix getSubMatrix(final int startRow, final int endRow,"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,692,inal DenseRealMatrix out =
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,693,"ew DenseRealMatrix(endRow - startRow + 1, endColumn - startColumn + 1);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,692,final BlockRealMatrix out =
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,693,"new BlockRealMatrix(endRow - startRow + 1, endColumn - startColumn + 1);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,861,ublic DenseRealMatrix getRowMatrix(final int row)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,861,public BlockRealMatrix getRowMatrix(final int row)
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,865,"inal DenseRealMatrix out = new DenseRealMatrix(1, columns);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,865,"final BlockRealMatrix out = new BlockRealMatrix(1, columns);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,897,"etRowMatrix(row, (DenseRealMatrix) matrix);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,897,"setRowMatrix(row, (BlockRealMatrix) matrix);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,914,"ublic void setRowMatrix(final int row, final DenseRealMatrix matrix)"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,914,"public void setRowMatrix(final int row, final BlockRealMatrix matrix)"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,952,ublic DenseRealMatrix getColumnMatrix(final int column)
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,952,public BlockRealMatrix getColumnMatrix(final int column)
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,956,"inal DenseRealMatrix out = new DenseRealMatrix(rows, 1);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,956,"final BlockRealMatrix out = new BlockRealMatrix(rows, 1);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,986,"etColumnMatrix(column, (DenseRealMatrix) matrix);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,986,"setColumnMatrix(column, (BlockRealMatrix) matrix);"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,1003,"oid setColumnMatrix(final int column, final DenseRealMatrix matrix)"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,1003,"void setColumnMatrix(final int column, final BlockRealMatrix matrix)"
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,1279,ublic DenseRealMatrix transpose() {
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,1279,public BlockRealMatrix transpose() {
False,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,1283,"inal DenseRealMatrix out = new DenseRealMatrix(nCols, nRows);"
True,src/java/org/apache/commons/math/linear/DenseRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,1283,"final BlockRealMatrix out = new BlockRealMatrix(nCols, nRows);"
False,src/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,167,"inal DenseRealMatrix out = new DenseRealMatrix(rowDimension, outCols);"
True,src/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,src/java/org/apache/commons/math/linear/OpenMapRealMatrix.java,167,"final BlockRealMatrix out = new BlockRealMatrix(rowDimension, outCols);"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,372,inal int blockSize      = DenseRealMatrix.BLOCK_SIZE;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,372,final int blockSize      = BlockRealMatrix.BLOCK_SIZE;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,374,"inal double[][] xBlocks = DenseRealMatrix.createBlocksLayout(n, columns);"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,374,"final double[][] xBlocks = BlockRealMatrix.createBlocksLayout(n, columns);"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,438,"eturn new DenseRealMatrix(n, columns, xBlocks, false);"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,438,"return new BlockRealMatrix(n, columns, xBlocks, false);"
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,24,mport org.apache.commons.math.linear.DenseRealMatrix;
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,24,import org.apache.commons.math.linear.BlockRealMatrix;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,112,ealMatrix mA = new DenseRealMatrix(a);
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,112,RealMatrix mA = new BlockRealMatrix(a);
False,src/java/org/apache/commons/math/stat/correlation/Covariance.java,src/java/org/apache/commons/math/stat/correlation/Covariance.java,21,mport org.apache.commons.math.linear.DenseRealMatrix;
True,src/java/org/apache/commons/math/stat/correlation/Covariance.java,src/java/org/apache/commons/math/stat/correlation/Covariance.java,21,import org.apache.commons.math.linear.BlockRealMatrix;
False,src/java/org/apache/commons/math/stat/correlation/Covariance.java,src/java/org/apache/commons/math/stat/correlation/Covariance.java,81,"his(new DenseRealMatrix(data), biasCorrected);"
True,src/java/org/apache/commons/math/stat/correlation/Covariance.java,src/java/org/apache/commons/math/stat/correlation/Covariance.java,81,"this(new BlockRealMatrix(data), biasCorrected);"
False,src/java/org/apache/commons/math/stat/correlation/Covariance.java,src/java/org/apache/commons/math/stat/correlation/Covariance.java,162,"ealMatrix outMatrix = new DenseRealMatrix(dimension, dimension);"
True,src/java/org/apache/commons/math/stat/correlation/Covariance.java,src/java/org/apache/commons/math/stat/correlation/Covariance.java,162,"RealMatrix outMatrix = new BlockRealMatrix(dimension, dimension);"
False,src/java/org/apache/commons/math/stat/correlation/Covariance.java,src/java/org/apache/commons/math/stat/correlation/Covariance.java,193,"eturn computeCovarianceMatrix(new DenseRealMatrix(data), biasCorrected);"
True,src/java/org/apache/commons/math/stat/correlation/Covariance.java,src/java/org/apache/commons/math/stat/correlation/Covariance.java,193,"return computeCovarianceMatrix(new BlockRealMatrix(data), biasCorrected);"
False,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,24,mport org.apache.commons.math.linear.DenseRealMatrix;
True,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,24,import org.apache.commons.math.linear.BlockRealMatrix;
False,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,68,his(new DenseRealMatrix(data));
True,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,68,this(new BlockRealMatrix(data));
False,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,144,eturn new DenseRealMatrix(out);
True,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,144,return new BlockRealMatrix(out);
False,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,175,eturn new DenseRealMatrix(out);
True,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,175,return new BlockRealMatrix(out);
False,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,188,"ealMatrix outMatrix = new DenseRealMatrix(nVars, nVars);"
True,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,188,"RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars);"
False,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,209,eturn computeCorrelationMatrix(new DenseRealMatrix(data));
True,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,209,return computeCorrelationMatrix(new BlockRealMatrix(data));
False,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,252,"ealMatrix outMatrix = new DenseRealMatrix(nVars, nVars);"
True,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,252,"RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars);"
False,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,21,mport org.apache.commons.math.linear.DenseRealMatrix;
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,21,import org.apache.commons.math.linear.BlockRealMatrix;
False,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,131,eturn computeCorrelationMatrix(new DenseRealMatrix(data));
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,131,return computeCorrelationMatrix(new BlockRealMatrix(data));
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,31, Test cases for the {@link DenseFieldMatrix} class.
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,31,* Test cases for the {@link BlockFieldMatrix} class.
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,161,"uite.setName(""DenseFieldMatrix<Fraction> Tests"");"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,161,"suite.setName(""BlockFieldMatrix<Fraction> Tests"");"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,167,enseFieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,168,enseFieldMatrix<Fraction> m2 = new DenseFieldMatrix<Fraction>(testData2);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,167,BlockFieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,168,BlockFieldMatrix<Fraction> m2 = new BlockFieldMatrix<Fraction>(testData2);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,180,"enseFieldMatrix<Fraction> m1 = createRandomMatrix(r, 47, 83);"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,181,enseFieldMatrix<Fraction> m2 = new DenseFieldMatrix<Fraction>(m1.getData());
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,180,"BlockFieldMatrix<Fraction> m1 = createRandomMatrix(r, 47, 83);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,181,BlockFieldMatrix<Fraction> m2 = new BlockFieldMatrix<Fraction>(m1.getData());
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,183,enseFieldMatrix<Fraction> m3 = new DenseFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,184,enseFieldMatrix<Fraction> m4 = new DenseFieldMatrix<Fraction>(m3.getData());
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,183,BlockFieldMatrix<Fraction> m3 = new BlockFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,184,BlockFieldMatrix<Fraction> m4 = new BlockFieldMatrix<Fraction>(m3.getData());
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,190,enseFieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,191,enseFieldMatrix<Fraction> mInv = new DenseFieldMatrix<Fraction>(testDataInv);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,190,BlockFieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,191,BlockFieldMatrix<Fraction> mInv = new BlockFieldMatrix<Fraction>(testDataInv);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,203,enseFieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,204,enseFieldMatrix<Fraction> m2 = new DenseFieldMatrix<Fraction>(testData2);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,203,BlockFieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,204,BlockFieldMatrix<Fraction> m2 = new BlockFieldMatrix<Fraction>(testData2);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,215,enseFieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,216,enseFieldMatrix<Fraction> m2 = new DenseFieldMatrix<Fraction>(testDataInv);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,215,BlockFieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,216,BlockFieldMatrix<Fraction> m2 = new BlockFieldMatrix<Fraction>(testDataInv);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,219,.subtract(new DenseFieldMatrix<Fraction>(testData2));
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,219,m.subtract(new BlockFieldMatrix<Fraction>(testData2));
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,228,enseFieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,229,enseFieldMatrix<Fraction> mInv = new DenseFieldMatrix<Fraction>(testDataInv);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,230,enseFieldMatrix<Fraction> identity = new DenseFieldMatrix<Fraction>(id);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,231,enseFieldMatrix<Fraction> m2 = new DenseFieldMatrix<Fraction>(testData2);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,228,BlockFieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,229,BlockFieldMatrix<Fraction> mInv = new BlockFieldMatrix<Fraction>(testDataInv);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,230,BlockFieldMatrix<Fraction> identity = new BlockFieldMatrix<Fraction>(id);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,231,BlockFieldMatrix<Fraction> m2 = new BlockFieldMatrix<Fraction>(testData2);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,238,.multiply(new DenseFieldMatrix<Fraction>(bigSingular));
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,238,m.multiply(new BlockFieldMatrix<Fraction>(bigSingular));
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,248,"ew DenseFieldMatrix<Fraction>(FractionField.getInstance(), 37, 41);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,248,"new BlockFieldMatrix<Fraction>(FractionField.getInstance(), 37, 41);"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,330,/Additional Test for DenseFieldMatrix<Fraction>Test.testMultiply
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,330,//Additional Test for BlockFieldMatrix<Fraction>Test.testMultiply
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,345,ieldMatrix<Fraction> m3 = new DenseFieldMatrix<Fraction>(d3);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,346,ieldMatrix<Fraction> m4 = new DenseFieldMatrix<Fraction>(d4);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,347,ieldMatrix<Fraction> m5 = new DenseFieldMatrix<Fraction>(d5);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,345,FieldMatrix<Fraction> m3 = new BlockFieldMatrix<Fraction>(d3);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,346,FieldMatrix<Fraction> m4 = new BlockFieldMatrix<Fraction>(d4);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,347,FieldMatrix<Fraction> m5 = new BlockFieldMatrix<Fraction>(d5);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,353,ieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(id);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,353,FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(id);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,355, = new DenseFieldMatrix<Fraction>(testData2);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,355,m = new BlockFieldMatrix<Fraction>(testData2);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,366,ieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,367,"estUtils.assertEquals(new DenseFieldMatrix<Fraction>(testDataPlus2),"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,366,FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,367,"TestUtils.assertEquals(new BlockFieldMatrix<Fraction>(testDataPlus2),"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,373,ieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(id);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,373,FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(id);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,376, = new DenseFieldMatrix<Fraction>(bigSingular);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,376,m = new BlockFieldMatrix<Fraction>(bigSingular);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,386,nt p = (11 * DenseFieldMatrix.BLOCK_SIZE) / 10;
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,387,nt q = (11 * DenseFieldMatrix.BLOCK_SIZE) / 10;
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,388,nt r =  DenseFieldMatrix.BLOCK_SIZE / 2;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,386,int p = (11 * BlockFieldMatrix.BLOCK_SIZE) / 10;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,387,int q = (11 * BlockFieldMatrix.BLOCK_SIZE) / 10;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,388,int r =  BlockFieldMatrix.BLOCK_SIZE / 2;
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,399,nt p = (11 * DenseFieldMatrix.BLOCK_SIZE) / 10;
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,400,nt q = (11 * DenseFieldMatrix.BLOCK_SIZE) / 10;
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,401,nt r =  DenseFieldMatrix.BLOCK_SIZE / 2;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,399,int p = (11 * BlockFieldMatrix.BLOCK_SIZE) / 10;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,400,int q = (11 * BlockFieldMatrix.BLOCK_SIZE) / 10;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,401,int r =  BlockFieldMatrix.BLOCK_SIZE / 2;
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,413,ieldMatrix<Fraction> a = new DenseFieldMatrix<Fraction>(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,413,FieldMatrix<Fraction> a = new BlockFieldMatrix<Fraction>(new Fraction[][] {
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,427,ieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,427,FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,431, = new DenseFieldMatrix<Fraction>(testData2);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,432,ieldMatrix<Fraction> mt = new DenseFieldMatrix<Fraction>(testData2T);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,431,m = new BlockFieldMatrix<Fraction>(testData2);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,432,FieldMatrix<Fraction> mt = new BlockFieldMatrix<Fraction>(testData2T);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,438,ieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,438,FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,442, = new DenseFieldMatrix<Fraction>(bigSingular);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,442,m = new BlockFieldMatrix<Fraction>(bigSingular);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,452,ieldMatrix<Fraction> m3 = new DenseFieldMatrix<Fraction>(d3);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,453,ieldMatrix<Fraction> m4 = new DenseFieldMatrix<Fraction>(d4);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,454,ieldMatrix<Fraction> m5 = new DenseFieldMatrix<Fraction>(d5);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,452,FieldMatrix<Fraction> m3 = new BlockFieldMatrix<Fraction>(d3);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,453,FieldMatrix<Fraction> m4 = new BlockFieldMatrix<Fraction>(d4);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,454,FieldMatrix<Fraction> m5 = new BlockFieldMatrix<Fraction>(d5);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,457,enseFieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,458,enseFieldMatrix<Fraction> mInv = new DenseFieldMatrix<Fraction>(testDataInv);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,459,enseFieldMatrix<Fraction> identity = new DenseFieldMatrix<Fraction>(id);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,457,BlockFieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,458,BlockFieldMatrix<Fraction> mInv = new BlockFieldMatrix<Fraction>(testDataInv);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,459,BlockFieldMatrix<Fraction> identity = new BlockFieldMatrix<Fraction>(id);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,465,.preMultiply(new DenseFieldMatrix<Fraction>(bigSingular));
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,465,m.preMultiply(new BlockFieldMatrix<Fraction>(bigSingular));
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,473,ieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,473,FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,491,ieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,491,FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,508,ieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(matrixData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,508,FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(matrixData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,515,ieldMatrix<Fraction> n = new DenseFieldMatrix<Fraction>(matrixData2);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,515,FieldMatrix<Fraction> n = new BlockFieldMatrix<Fraction>(matrixData2);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,531,ieldMatrix<Fraction> coefficients = new DenseFieldMatrix<Fraction>(coefficientsData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,531,FieldMatrix<Fraction> coefficients = new BlockFieldMatrix<Fraction>(coefficientsData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,551,ieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,551,FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,574,"ssertEquals(new DenseFieldMatrix<Fraction>(reference), sub);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,574,"assertEquals(new BlockFieldMatrix<Fraction>(reference), sub);"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,590,"ssertEquals(new DenseFieldMatrix<Fraction>(reference), sub);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,590,"assertEquals(new BlockFieldMatrix<Fraction>(reference), sub);"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,602,nt n = 3 * DenseFieldMatrix.BLOCK_SIZE;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,602,int n = 3 * BlockFieldMatrix.BLOCK_SIZE;
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,604,"ew DenseFieldMatrix<Fraction>(FractionField.getInstance(), n, n);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,604,"new BlockFieldMatrix<Fraction>(FractionField.getInstance(), n, n);"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,606,"ew DenseFieldMatrix<Fraction>(FractionField.getInstance(), n - 4, n - 4).scalarAdd(new Fraction(1));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,606,"new BlockFieldMatrix<Fraction>(FractionField.getInstance(), n - 4, n - 4).scalarAdd(new Fraction(1));"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,623,ieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,623,FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,650,"ssertEquals(new DenseFieldMatrix<Fraction>(reference), new DenseFieldMatrix<Fraction>(sub));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,650,"assertEquals(new BlockFieldMatrix<Fraction>(reference), new BlockFieldMatrix<Fraction>(sub));"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,669,"ssertEquals(new DenseFieldMatrix<Fraction>(reference), new DenseFieldMatrix<Fraction>(sub));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,669,"assertEquals(new BlockFieldMatrix<Fraction>(reference), new BlockFieldMatrix<Fraction>(sub));"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,681,ieldMatrix<Fraction> m     = new DenseFieldMatrix<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,682,ieldMatrix<Fraction> mRow0 = new DenseFieldMatrix<Fraction>(subRow0);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,683,ieldMatrix<Fraction> mRow3 = new DenseFieldMatrix<Fraction>(subRow3);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,681,FieldMatrix<Fraction> m     = new BlockFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,682,FieldMatrix<Fraction> mRow0 = new BlockFieldMatrix<Fraction>(subRow0);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,683,FieldMatrix<Fraction> mRow3 = new BlockFieldMatrix<Fraction>(subRow3);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,701,ieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,702,ieldMatrix<Fraction> mRow3 = new DenseFieldMatrix<Fraction>(subRow3);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,701,FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,702,FieldMatrix<Fraction> mRow3 = new BlockFieldMatrix<Fraction>(subRow3);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,721,nt n = 3 * DenseFieldMatrix.BLOCK_SIZE;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,721,int n = 3 * BlockFieldMatrix.BLOCK_SIZE;
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,723,"ew DenseFieldMatrix<Fraction>(FractionField.getInstance(), n, n);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,723,"new BlockFieldMatrix<Fraction>(FractionField.getInstance(), n, n);"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,725,"ew DenseFieldMatrix<Fraction>(FractionField.getInstance(), 1, n).scalarAdd(new Fraction(1));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,725,"new BlockFieldMatrix<Fraction>(FractionField.getInstance(), 1, n).scalarAdd(new Fraction(1));"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,742,ieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,743,ieldMatrix<Fraction> mColumn1 = new DenseFieldMatrix<Fraction>(subColumn1);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,744,ieldMatrix<Fraction> mColumn3 = new DenseFieldMatrix<Fraction>(subColumn3);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,742,FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,743,FieldMatrix<Fraction> mColumn1 = new BlockFieldMatrix<Fraction>(subColumn1);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,744,FieldMatrix<Fraction> mColumn3 = new BlockFieldMatrix<Fraction>(subColumn3);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,762,ieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,763,ieldMatrix<Fraction> mColumn3 = new DenseFieldMatrix<Fraction>(subColumn3);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,762,FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,763,FieldMatrix<Fraction> mColumn3 = new BlockFieldMatrix<Fraction>(subColumn3);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,782,nt n = 3 * DenseFieldMatrix.BLOCK_SIZE;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,782,int n = 3 * BlockFieldMatrix.BLOCK_SIZE;
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,784,"ew DenseFieldMatrix<Fraction>(FractionField.getInstance(), n, n);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,784,"new BlockFieldMatrix<Fraction>(FractionField.getInstance(), n, n);"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,786,"ew DenseFieldMatrix<Fraction>(FractionField.getInstance(), n, 1).scalarAdd(new Fraction(1));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,786,"new BlockFieldMatrix<Fraction>(FractionField.getInstance(), n, 1).scalarAdd(new Fraction(1));"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,803,ieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,803,FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,823,ieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,823,FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,843,nt n = 3 * DenseFieldMatrix.BLOCK_SIZE;
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,844,"ieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(FractionField.getInstance(), n, n);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,843,int n = 3 * BlockFieldMatrix.BLOCK_SIZE;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,844,"FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(FractionField.getInstance(), n, n);"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,862,ieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,862,FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,882,ieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,882,FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,902,nt n = 3 * DenseFieldMatrix.BLOCK_SIZE;
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,903,"ieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(FractionField.getInstance(), n, n);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,902,int n = 3 * BlockFieldMatrix.BLOCK_SIZE;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,903,"FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(FractionField.getInstance(), n, n);"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,929,ieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,929,FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,947,ieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,947,FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,966,nt n = 3 * DenseFieldMatrix.BLOCK_SIZE;
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,967,"ieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(FractionField.getInstance(), n, n);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,966,int n = 3 * BlockFieldMatrix.BLOCK_SIZE;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,967,"FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(FractionField.getInstance(), n, n);"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,986,ieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,986,FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1006,ieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1006,FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1026,nt n = 3 * DenseFieldMatrix.BLOCK_SIZE;
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1027,"ieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(FractionField.getInstance(), n, n);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1026,int n = 3 * BlockFieldMatrix.BLOCK_SIZE;
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1027,"FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(FractionField.getInstance(), n, n);"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1061,enseFieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1062,enseFieldMatrix<Fraction> m1 = (DenseFieldMatrix<Fraction>) m.copy();
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1063,enseFieldMatrix<Fraction> mt = (DenseFieldMatrix<Fraction>) m.transpose();
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1061,BlockFieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1062,BlockFieldMatrix<Fraction> m1 = (BlockFieldMatrix<Fraction>) m.copy();
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1063,BlockFieldMatrix<Fraction> mt = (BlockFieldMatrix<Fraction>) m.transpose();
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1070,ssertFalse(m.equals(new DenseFieldMatrix<Fraction>(bigSingular)));
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1070,assertFalse(m.equals(new BlockFieldMatrix<Fraction>(bigSingular)));
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1074,enseFieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1075,"ssertEquals(""DenseFieldMatrix{{1,2,3},{2,5,3},{1,0,8}}"", m.toString());"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1074,BlockFieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1075,"assertEquals(""BlockFieldMatrix{{1,2,3},{2,5,3},{1,0,8}}"", m.toString());"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1079,enseFieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1079,BlockFieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1081,ieldMatrix<Fraction> expected = new DenseFieldMatrix<Fraction>
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1081,FieldMatrix<Fraction> expected = new BlockFieldMatrix<Fraction>
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1086,xpected = new DenseFieldMatrix<Fraction>
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1086,expected = new BlockFieldMatrix<Fraction>
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1091,xpected = new DenseFieldMatrix<Fraction>
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1091,expected = new BlockFieldMatrix<Fraction>
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1096,enseFieldMatrix<Fraction> matrix =
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1097,ew DenseFieldMatrix<Fraction>(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1096,BlockFieldMatrix<Fraction> matrix =
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1097,new BlockFieldMatrix<Fraction>(new Fraction[][] {
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1107,ew DenseFieldMatrix<Fraction>(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1107,new BlockFieldMatrix<Fraction>(new Fraction[][] {
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1165,"ieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1165,"FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1171," = new DenseFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1171,"m = new BlockFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1185," = new DenseFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1185,"m = new BlockFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1191," = new DenseFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1191,"m = new BlockFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1205," = new DenseFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1205,"m = new BlockFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1211," = new DenseFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1211,"m = new BlockFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1225," = new DenseFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1225,"m = new BlockFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1231," = new DenseFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1231,"m = new BlockFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1248,enseFieldMatrix<Fraction> m = new DenseFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1248,BlockFieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1278,"rivate DenseFieldMatrix<Fraction> createRandomMatrix(Random r, int rows, int columns) {"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1279,enseFieldMatrix<Fraction> m =
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1280,"ew DenseFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1278,"private BlockFieldMatrix<Fraction> createRandomMatrix(Random r, int rows, int columns) {"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1279,BlockFieldMatrix<Fraction> m =
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,1280,"new BlockFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,29, Test cases for the {@link DenseRealMatrix} class.
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,29,* Test cases for the {@link BlockRealMatrix} class.
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,102,"uite.setName(""DenseRealMatrix Tests"");"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,102,"suite.setName(""BlockRealMatrix Tests"");"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,108,enseRealMatrix m = new DenseRealMatrix(testData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,109,enseRealMatrix m2 = new DenseRealMatrix(testData2);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,108,BlockRealMatrix m = new BlockRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,109,BlockRealMatrix m2 = new BlockRealMatrix(testData2);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,121,"enseRealMatrix m1 = createRandomMatrix(r, 47, 83);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,122,enseRealMatrix m2 = new DenseRealMatrix(m1.getData());
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,121,"BlockRealMatrix m1 = createRandomMatrix(r, 47, 83);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,122,BlockRealMatrix m2 = new BlockRealMatrix(m1.getData());
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,124,enseRealMatrix m3 = new DenseRealMatrix(testData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,125,enseRealMatrix m4 = new DenseRealMatrix(m3.getData());
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,124,BlockRealMatrix m3 = new BlockRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,125,BlockRealMatrix m4 = new BlockRealMatrix(m3.getData());
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,131,enseRealMatrix m = new DenseRealMatrix(testData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,132,enseRealMatrix mInv = new DenseRealMatrix(testDataInv);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,131,BlockRealMatrix m = new BlockRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,132,BlockRealMatrix mInv = new BlockRealMatrix(testDataInv);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,146,enseRealMatrix m = new DenseRealMatrix(testData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,147,enseRealMatrix m2 = new DenseRealMatrix(testData2);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,146,BlockRealMatrix m = new BlockRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,147,BlockRealMatrix m2 = new BlockRealMatrix(testData2);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,158,enseRealMatrix m = new DenseRealMatrix(testData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,159,enseRealMatrix m2 = new DenseRealMatrix(testData2);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,158,BlockRealMatrix m = new BlockRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,159,BlockRealMatrix m2 = new BlockRealMatrix(testData2);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,166,enseRealMatrix m = new DenseRealMatrix(testData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,167,enseRealMatrix m2 = new DenseRealMatrix(testData2);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,166,BlockRealMatrix m = new BlockRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,167,BlockRealMatrix m2 = new BlockRealMatrix(testData2);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,174,enseRealMatrix m = new DenseRealMatrix(testData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,175,enseRealMatrix m2 = new DenseRealMatrix(testDataInv);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,174,BlockRealMatrix m = new BlockRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,175,BlockRealMatrix m2 = new BlockRealMatrix(testDataInv);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,178,.subtract(new DenseRealMatrix(testData2));
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,178,m.subtract(new BlockRealMatrix(testData2));
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,187,enseRealMatrix m = new DenseRealMatrix(testData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,188,enseRealMatrix mInv = new DenseRealMatrix(testDataInv);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,189,enseRealMatrix identity = new DenseRealMatrix(id);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,190,enseRealMatrix m2 = new DenseRealMatrix(testData2);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,187,BlockRealMatrix m = new BlockRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,188,BlockRealMatrix mInv = new BlockRealMatrix(testDataInv);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,189,BlockRealMatrix identity = new BlockRealMatrix(id);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,190,BlockRealMatrix m2 = new BlockRealMatrix(testData2);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,197,.multiply(new DenseRealMatrix(bigSingular));
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,197,m.multiply(new BlockRealMatrix(bigSingular));
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,206,"ealMatrix m = new DenseRealMatrix(35, 71);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,206,"RealMatrix m = new BlockRealMatrix(35, 71);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,295,ealMatrix m3 = new DenseRealMatrix(d3);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,296,ealMatrix m4 = new DenseRealMatrix(d4);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,297,ealMatrix m5 = new DenseRealMatrix(d5);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,295,RealMatrix m3 = new BlockRealMatrix(d3);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,296,RealMatrix m4 = new BlockRealMatrix(d4);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,297,RealMatrix m5 = new BlockRealMatrix(d5);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,303,ealMatrix m = new DenseRealMatrix(id);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,303,RealMatrix m = new BlockRealMatrix(id);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,305, = new DenseRealMatrix(testData2);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,305,m = new BlockRealMatrix(testData2);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,316,ealMatrix m = new DenseRealMatrix(testData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,317,"ssertClose(new DenseRealMatrix(testDataPlus2), m.scalarAdd(2d), entryTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,316,RealMatrix m = new BlockRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,317,"assertClose(new BlockRealMatrix(testDataPlus2), m.scalarAdd(2d), entryTolerance);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,322,ealMatrix m = new DenseRealMatrix(id);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,322,RealMatrix m = new BlockRealMatrix(id);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,325, = new DenseRealMatrix(bigSingular);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,325,m = new BlockRealMatrix(bigSingular);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,335,nt p = (7 * DenseRealMatrix.BLOCK_SIZE) / 2;
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,336,nt q = (5 * DenseRealMatrix.BLOCK_SIZE) / 2;
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,337,nt r =  3 * DenseRealMatrix.BLOCK_SIZE;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,335,int p = (7 * BlockRealMatrix.BLOCK_SIZE) / 2;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,336,int q = (5 * BlockRealMatrix.BLOCK_SIZE) / 2;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,337,int r =  3 * BlockRealMatrix.BLOCK_SIZE;
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,348,nt p = (7 * DenseRealMatrix.BLOCK_SIZE) / 2;
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,349,nt q = (5 * DenseRealMatrix.BLOCK_SIZE) / 2;
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,350,nt r =  3 * DenseRealMatrix.BLOCK_SIZE;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,348,int p = (7 * BlockRealMatrix.BLOCK_SIZE) / 2;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,349,int q = (5 * BlockRealMatrix.BLOCK_SIZE) / 2;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,350,int r =  3 * BlockRealMatrix.BLOCK_SIZE;
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,362,ealMatrix a = new DenseRealMatrix(new double[][] {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,362,RealMatrix a = new BlockRealMatrix(new double[][] {
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,374,ealMatrix m = new DenseRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,374,RealMatrix m = new BlockRealMatrix(testData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,378, = new DenseRealMatrix(testData2);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,379,ealMatrix mt = new DenseRealMatrix(testData2T);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,378,m = new BlockRealMatrix(testData2);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,379,RealMatrix mt = new BlockRealMatrix(testData2T);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,385,ealMatrix m = new DenseRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,385,RealMatrix m = new BlockRealMatrix(testData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,389, = new DenseRealMatrix(bigSingular);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,389,m = new BlockRealMatrix(bigSingular);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,399,ealMatrix m3 = new DenseRealMatrix(d3);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,400,ealMatrix m4 = new DenseRealMatrix(d4);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,401,ealMatrix m5 = new DenseRealMatrix(d5);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,399,RealMatrix m3 = new BlockRealMatrix(d3);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,400,RealMatrix m4 = new BlockRealMatrix(d4);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,401,RealMatrix m5 = new BlockRealMatrix(d5);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,404,enseRealMatrix m = new DenseRealMatrix(testData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,405,enseRealMatrix mInv = new DenseRealMatrix(testDataInv);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,406,enseRealMatrix identity = new DenseRealMatrix(id);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,404,BlockRealMatrix m = new BlockRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,405,BlockRealMatrix mInv = new BlockRealMatrix(testDataInv);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,406,BlockRealMatrix identity = new BlockRealMatrix(id);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,412,.preMultiply(new DenseRealMatrix(bigSingular));
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,412,m.preMultiply(new BlockRealMatrix(bigSingular));
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,420,ealMatrix m = new DenseRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,420,RealMatrix m = new BlockRealMatrix(testData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,438,ealMatrix m = new DenseRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,438,RealMatrix m = new BlockRealMatrix(testData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,452,ealMatrix m = new DenseRealMatrix(matrixData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,452,RealMatrix m = new BlockRealMatrix(matrixData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,455,ealMatrix n = new DenseRealMatrix(matrixData2);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,455,RealMatrix n = new BlockRealMatrix(matrixData2);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,467,ealMatrix coefficients = new DenseRealMatrix(coefficientsData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,467,RealMatrix coefficients = new BlockRealMatrix(coefficientsData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,478,ealMatrix m = new DenseRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,478,RealMatrix m = new BlockRealMatrix(subTestData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,501,"ssertEquals(new DenseRealMatrix(reference), sub);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,501,"assertEquals(new BlockRealMatrix(reference), sub);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,517,"ssertEquals(new DenseRealMatrix(reference), sub);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,517,"assertEquals(new BlockRealMatrix(reference), sub);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,529,nt n = 3 * DenseRealMatrix.BLOCK_SIZE;
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,530,"ealMatrix m = new DenseRealMatrix(n, n);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,531,"ealMatrix sub = new DenseRealMatrix(n - 4, n - 4).scalarAdd(1);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,529,int n = 3 * BlockRealMatrix.BLOCK_SIZE;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,530,"RealMatrix m = new BlockRealMatrix(n, n);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,531,"RealMatrix sub = new BlockRealMatrix(n - 4, n - 4).scalarAdd(1);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,548,ealMatrix m = new DenseRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,548,RealMatrix m = new BlockRealMatrix(subTestData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,575,"ssertEquals(new DenseRealMatrix(reference), new DenseRealMatrix(sub));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,575,"assertEquals(new BlockRealMatrix(reference), new BlockRealMatrix(sub));"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,594,"ssertEquals(new DenseRealMatrix(reference), new DenseRealMatrix(sub));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,594,"assertEquals(new BlockRealMatrix(reference), new BlockRealMatrix(sub));"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,606,ealMatrix m     = new DenseRealMatrix(subTestData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,607,ealMatrix mRow0 = new DenseRealMatrix(subRow0);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,608,ealMatrix mRow3 = new DenseRealMatrix(subRow3);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,606,RealMatrix m     = new BlockRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,607,RealMatrix mRow0 = new BlockRealMatrix(subRow0);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,608,RealMatrix mRow3 = new BlockRealMatrix(subRow3);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,626,ealMatrix m = new DenseRealMatrix(subTestData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,627,ealMatrix mRow3 = new DenseRealMatrix(subRow3);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,626,RealMatrix m = new BlockRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,627,RealMatrix mRow3 = new BlockRealMatrix(subRow3);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,646,nt n = 3 * DenseRealMatrix.BLOCK_SIZE;
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,647,"ealMatrix m = new DenseRealMatrix(n, n);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,648,"ealMatrix sub = new DenseRealMatrix(1, n).scalarAdd(1);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,646,int n = 3 * BlockRealMatrix.BLOCK_SIZE;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,647,"RealMatrix m = new BlockRealMatrix(n, n);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,648,"RealMatrix sub = new BlockRealMatrix(1, n).scalarAdd(1);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,665,ealMatrix m = new DenseRealMatrix(subTestData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,666,ealMatrix mColumn1 = new DenseRealMatrix(subColumn1);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,667,ealMatrix mColumn3 = new DenseRealMatrix(subColumn3);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,665,RealMatrix m = new BlockRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,666,RealMatrix mColumn1 = new BlockRealMatrix(subColumn1);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,667,RealMatrix mColumn3 = new BlockRealMatrix(subColumn3);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,685,ealMatrix m = new DenseRealMatrix(subTestData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,686,ealMatrix mColumn3 = new DenseRealMatrix(subColumn3);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,685,RealMatrix m = new BlockRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,686,RealMatrix mColumn3 = new BlockRealMatrix(subColumn3);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,705,nt n = 3 * DenseRealMatrix.BLOCK_SIZE;
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,706,"ealMatrix m = new DenseRealMatrix(n, n);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,707,"ealMatrix sub = new DenseRealMatrix(n, 1).scalarAdd(1);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,705,int n = 3 * BlockRealMatrix.BLOCK_SIZE;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,706,"RealMatrix m = new BlockRealMatrix(n, n);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,707,"RealMatrix sub = new BlockRealMatrix(n, 1).scalarAdd(1);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,724,ealMatrix m = new DenseRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,724,RealMatrix m = new BlockRealMatrix(subTestData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,744,ealMatrix m = new DenseRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,744,RealMatrix m = new BlockRealMatrix(subTestData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,764,nt n = 3 * DenseRealMatrix.BLOCK_SIZE;
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,765,"ealMatrix m = new DenseRealMatrix(n, n);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,764,int n = 3 * BlockRealMatrix.BLOCK_SIZE;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,765,"RealMatrix m = new BlockRealMatrix(n, n);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,783,ealMatrix m = new DenseRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,783,RealMatrix m = new BlockRealMatrix(subTestData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,803,ealMatrix m = new DenseRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,803,RealMatrix m = new BlockRealMatrix(subTestData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,823,nt n = 3 * DenseRealMatrix.BLOCK_SIZE;
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,824,"ealMatrix m = new DenseRealMatrix(n, n);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,823,int n = 3 * BlockRealMatrix.BLOCK_SIZE;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,824,"RealMatrix m = new BlockRealMatrix(n, n);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,850,ealMatrix m = new DenseRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,850,RealMatrix m = new BlockRealMatrix(subTestData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,868,ealMatrix m = new DenseRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,868,RealMatrix m = new BlockRealMatrix(subTestData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,887,nt n = 3 * DenseRealMatrix.BLOCK_SIZE;
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,888,"ealMatrix m = new DenseRealMatrix(n, n);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,887,int n = 3 * BlockRealMatrix.BLOCK_SIZE;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,888,"RealMatrix m = new BlockRealMatrix(n, n);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,907,ealMatrix m = new DenseRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,907,RealMatrix m = new BlockRealMatrix(subTestData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,927,ealMatrix m = new DenseRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,927,RealMatrix m = new BlockRealMatrix(subTestData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,947,nt n = 3 * DenseRealMatrix.BLOCK_SIZE;
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,948,"ealMatrix m = new DenseRealMatrix(n, n);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,947,int n = 3 * BlockRealMatrix.BLOCK_SIZE;
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,948,"RealMatrix m = new BlockRealMatrix(n, n);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,982,enseRealMatrix m = new DenseRealMatrix(testData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,983,enseRealMatrix m1 = (DenseRealMatrix) m.copy();
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,984,enseRealMatrix mt = (DenseRealMatrix) m.transpose();
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,982,BlockRealMatrix m = new BlockRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,983,BlockRealMatrix m1 = (BlockRealMatrix) m.copy();
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,984,BlockRealMatrix mt = (BlockRealMatrix) m.transpose();
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,991,ssertFalse(m.equals(new DenseRealMatrix(bigSingular)));
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,991,assertFalse(m.equals(new BlockRealMatrix(bigSingular)));
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,995,enseRealMatrix m = new DenseRealMatrix(testData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,996,"ssertEquals(""DenseRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"","
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,995,BlockRealMatrix m = new BlockRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,996,"assertEquals(""BlockRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"","
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1001,enseRealMatrix m = new DenseRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1001,BlockRealMatrix m = new BlockRealMatrix(testData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1003,ealMatrix expected = new DenseRealMatrix
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1003,RealMatrix expected = new BlockRealMatrix
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1008,xpected = new DenseRealMatrix
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1008,expected = new BlockRealMatrix
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1013,xpected = new DenseRealMatrix
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1013,expected = new BlockRealMatrix
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1018,enseRealMatrix matrix = new DenseRealMatrix
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1018,BlockRealMatrix matrix = new BlockRealMatrix
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1021,xpected = new DenseRealMatrix
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1021,expected = new BlockRealMatrix
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1076,"ealMatrix m = new DenseRealMatrix(rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1076,"RealMatrix m = new BlockRealMatrix(rows, columns);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1082," = new DenseRealMatrix(rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1082,"m = new BlockRealMatrix(rows, columns);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1096," = new DenseRealMatrix(rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1096,"m = new BlockRealMatrix(rows, columns);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1102," = new DenseRealMatrix(rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1102,"m = new BlockRealMatrix(rows, columns);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1116," = new DenseRealMatrix(rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1116,"m = new BlockRealMatrix(rows, columns);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1122," = new DenseRealMatrix(rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1122,"m = new BlockRealMatrix(rows, columns);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1136," = new DenseRealMatrix(rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1136,"m = new BlockRealMatrix(rows, columns);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1142," = new DenseRealMatrix(rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1142,"m = new BlockRealMatrix(rows, columns);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1159,enseRealMatrix m = new DenseRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1159,BlockRealMatrix m = new BlockRealMatrix(testData);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1199,"rivate DenseRealMatrix createRandomMatrix(Random r, int rows, int columns) {"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1200,"enseRealMatrix m = new DenseRealMatrix(rows, columns);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1199,"private BlockRealMatrix createRandomMatrix(Random r, int rows, int columns) {"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,1200,"BlockRealMatrix m = new BlockRealMatrix(rows, columns);"
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,77,"ssertEquals(new DenseRealMatrix(testData),"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,77,"assertEquals(new BlockRealMatrix(testData),"
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,158,ew DenseRealMatrix(rowMatrix));
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,158,new BlockRealMatrix(rowMatrix));
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,216,ew DenseRealMatrix(colMatrix));
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,216,new BlockRealMatrix(colMatrix));
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,24,mport org.apache.commons.math.linear.DenseRealMatrix;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,24,import org.apache.commons.math.linear.BlockRealMatrix;
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,80,nt    p = (5 * DenseRealMatrix.BLOCK_SIZE) / 4;
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,81,nt    q = (7 * DenseRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,80,int    p = (5 * BlockRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,81,int    q = (7 * BlockRealMatrix.BLOCK_SIZE) / 4;
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,108,nt    p = (5 * DenseRealMatrix.BLOCK_SIZE) / 4;
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,109,nt    q = (7 * DenseRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,108,int    p = (5 * BlockRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,109,int    q = (7 * BlockRealMatrix.BLOCK_SIZE) / 4;
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,133,nt    p = (5 * DenseRealMatrix.BLOCK_SIZE) / 4;
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,134,nt    q = (7 * DenseRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,133,int    p = (5 * BlockRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,134,int    q = (7 * BlockRealMatrix.BLOCK_SIZE) / 4;
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,163,nt    p = (5 * DenseRealMatrix.BLOCK_SIZE) / 4;
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,164,nt    q = (7 * DenseRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,163,int    p = (5 * BlockRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,164,int    q = (7 * BlockRealMatrix.BLOCK_SIZE) / 4;
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,199,nt    p = (5 * DenseRealMatrix.BLOCK_SIZE) / 4;
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,200,nt    q = (7 * DenseRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,199,int    p = (5 * BlockRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,200,int    q = (7 * BlockRealMatrix.BLOCK_SIZE) / 4;
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,28,mport org.apache.commons.math.linear.DenseRealMatrix;
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,28,import org.apache.commons.math.linear.BlockRealMatrix;
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,195,nt          p    = (7 * DenseRealMatrix.BLOCK_SIZE) / 4;
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,196,nt          q    = (5 * DenseRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,195,int          p    = (7 * BlockRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,196,int          q    = (5 * BlockRealMatrix.BLOCK_SIZE) / 4;
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,198,"ealMatrix   xRef = createTestMatrix(r, q, DenseRealMatrix.BLOCK_SIZE + 3);"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,198,"RealMatrix   xRef = createTestMatrix(r, q, BlockRealMatrix.BLOCK_SIZE + 3);"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,218,nt          p    = (5 * DenseRealMatrix.BLOCK_SIZE) / 4;
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,219,nt          q    = (7 * DenseRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,218,int          p    = (5 * BlockRealMatrix.BLOCK_SIZE) / 4;
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,219,int          q    = (7 * BlockRealMatrix.BLOCK_SIZE) / 4;
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,221,"ealMatrix   xRef = createTestMatrix(r, q, DenseRealMatrix.BLOCK_SIZE + 3);"
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,221,"RealMatrix   xRef = createTestMatrix(r, q, BlockRealMatrix.BLOCK_SIZE + 3);"
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,198,"ssertClose(""inverse multiply"", m.multiply(new DenseRealMatrix(testDataInv)), identity,"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,198,"assertClose(""inverse multiply"", m.multiply(new BlockRealMatrix(testDataInv)), identity,"
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,32,mport org.apache.commons.math.linear.DenseRealMatrix;
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,32,import org.apache.commons.math.linear.BlockRealMatrix;
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,488,his.factors = new DenseRealMatrix(factors);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,488,this.factors = new BlockRealMatrix(factors);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,33,mport org.apache.commons.math.linear.DenseRealMatrix;
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,33,import org.apache.commons.math.linear.BlockRealMatrix;
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,528,his.factors = new DenseRealMatrix(factors);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,528,this.factors = new BlockRealMatrix(factors);
False,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,33,mport org.apache.commons.math.linear.DenseRealMatrix;
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,33,import org.apache.commons.math.linear.BlockRealMatrix;
False,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,372,his.factors = new DenseRealMatrix(factors);
True,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,372,this.factors = new BlockRealMatrix(factors);
False,src/test/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,23,mport org.apache.commons.math.linear.DenseRealMatrix;
True,src/test/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,23,import org.apache.commons.math.linear.BlockRealMatrix;
False,src/test/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,187,"ealMatrix matrix = new DenseRealMatrix(new double[][] {{0},{1}});"
True,src/test/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,187,"RealMatrix matrix = new BlockRealMatrix(new double[][] {{0},{1}});"
False,src/test/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,262,eturn new DenseRealMatrix(matrixData);
True,src/test/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,262,return new BlockRealMatrix(matrixData);
False,src/test/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,267,"ealMatrix result = new DenseRealMatrix(dimension, dimension);"
True,src/test/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,267,"RealMatrix result = new BlockRealMatrix(dimension, dimension);"
False,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,20,mport org.apache.commons.math.linear.DenseRealMatrix;
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,20,import org.apache.commons.math.linear.BlockRealMatrix;
False,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,102,"ealMatrix matrix = new DenseRealMatrix(new double[][] {{0},{1}});"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,102,"RealMatrix matrix = new BlockRealMatrix(new double[][] {{0},{1}});"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/ode/events/EventFilter.java,src/main/java/org/apache/commons/math3/ode/events/EventFilter.java,22,mport org.apache.commons.math3.ode.FirstOrderIntegrator;
False,src/main/java/org/apache/commons/math3/ode/events/EventFilter.java,src/main/java/org/apache/commons/math3/ode/events/EventFilter.java,44, the {@link FirstOrderIntegrator ODE solver} in order to avoid wasting
False,src/main/java/org/apache/commons/math3/ode/events/EventFilter.java,src/main/java/org/apache/commons/math3/ode/events/EventFilter.java,45, time looking for uninteresting events. The wrapper will intercept
False,src/main/java/org/apache/commons/math3/ode/events/EventFilter.java,src/main/java/org/apache/commons/math3/ode/events/EventFilter.java,46," the calls to the {@link EventHandler#g(double, double[]) g function}"
False,src/main/java/org/apache/commons/math3/ode/events/EventFilter.java,src/main/java/org/apache/commons/math3/ode/events/EventFilter.java,47," and to the {@link EventHandler#eventOccurred(double, double[], boolean)"
True,src/main/java/org/apache/commons/math3/ode/events/EventFilter.java,src/main/java/org/apache/commons/math3/ode/events/EventFilter.java,41,* the {@link org.apache.commons.math3.ode.FirstOrderIntegrator ODE solver}
True,src/main/java/org/apache/commons/math3/ode/events/EventFilter.java,src/main/java/org/apache/commons/math3/ode/events/EventFilter.java,42,* in order to avoid wasting time looking for uninteresting events.
True,src/main/java/org/apache/commons/math3/ode/events/EventFilter.java,src/main/java/org/apache/commons/math3/ode/events/EventFilter.java,43,* The wrapper will intercept the calls to the {@link
True,src/main/java/org/apache/commons/math3/ode/events/EventFilter.java,src/main/java/org/apache/commons/math3/ode/events/EventFilter.java,44,"* EventHandler#g(double, double[]) g function} and to the {@link"
True,src/main/java/org/apache/commons/math3/ode/events/EventFilter.java,src/main/java/org/apache/commons/math3/ode/events/EventFilter.java,45,"* EventHandler#eventOccurred(double, double[], boolean)"
False,src/main/java/org/apache/commons/math3/ode/events/FilterType.java,src/main/java/org/apache/commons/math3/ode/events/FilterType.java,21,mport org.apache.commons.math3.util.Precision;
False,src/main/java/org/apache/commons/math3/ode/events/FilterType.java,src/main/java/org/apache/commons/math3/ode/events/FilterType.java,75,"   h=max(+s,-g,+g)    \       /   \       /       h=max(+s,-g,+g)     \"
True,src/main/java/org/apache/commons/math3/ode/events/FilterType.java,src/main/java/org/apache/commons/math3/ode/events/FilterType.java,73,"*   h=max(+s,-g,+g)    \       /   \       /       h=max(+s,-g,+g)     \"
False,src/main/java/org/apache/commons/math3/ode/events/FilterType.java,src/main/java/org/apache/commons/math3/ode/events/FilterType.java,88, where s is a tiny positive value: {@link Precision#SAFE_MIN}.
True,src/main/java/org/apache/commons/math3/ode/events/FilterType.java,src/main/java/org/apache/commons/math3/ode/events/FilterType.java,86,* where s is a tiny positive value: {@link org.apache.commons.math3.util.Precision#SAFE_MIN}.
False,src/main/java/org/apache/commons/math3/ode/events/FilterType.java,src/main/java/org/apache/commons/math3/ode/events/FilterType.java,264, where s is a tiny positive value: {@link Precision#SAFE_MIN}.
True,src/main/java/org/apache/commons/math3/ode/events/FilterType.java,src/main/java/org/apache/commons/math3/ode/events/FilterType.java,262,* where s is a tiny positive value: {@link org.apache.commons.math3.util.Precision#SAFE_MIN}.

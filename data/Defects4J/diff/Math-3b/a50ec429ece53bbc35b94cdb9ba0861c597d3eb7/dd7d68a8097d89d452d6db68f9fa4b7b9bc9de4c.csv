is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,234,* Indicates whether a point is within the interpolation range.
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,236,* @param x Point.
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,237,* @return {@code true} if {@code x} is a valid point.
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,239,public boolean isValidPoint(double x) {
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,240,if (x < knots[0] ||
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,241,x > knots[n]) {
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,242,return false;
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,243,} else {
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java,244,return true;
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,137,@Test
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,138,public void testIsValidPoint() {
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,139,final PolynomialSplineFunction spline =
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,140,"new PolynomialSplineFunction(knots, polynomials);"
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,141,final double xMin = knots[0];
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,142,final double xMax = knots[knots.length - 1];
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,144,double x;
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,146,x = xMin;
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,147,Assert.assertTrue(spline.isValidPoint(x));
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,148,// Ensure that no exception is thrown.
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,149,spline.value(x);
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,151,x = xMax;
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,152,Assert.assertTrue(spline.isValidPoint(x));
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,153,// Ensure that no exception is thrown.
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,154,spline.value(x);
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,156,final double xRange = xMax - xMin;
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,157,x = xMin + xRange / 3.4;
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,158,Assert.assertTrue(spline.isValidPoint(x));
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,159,// Ensure that no exception is thrown.
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,160,spline.value(x);
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,162,final double small = 1e-8;
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,163,x = xMin - small;
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,164,Assert.assertFalse(spline.isValidPoint(x));
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,165,// Ensure that an exception would have been thrown.
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,166,try {
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,167,spline.value(x);
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,168,"Assert.fail(""OutOfRangeException expected"");"
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java,169,} catch (OutOfRangeException expected) {}

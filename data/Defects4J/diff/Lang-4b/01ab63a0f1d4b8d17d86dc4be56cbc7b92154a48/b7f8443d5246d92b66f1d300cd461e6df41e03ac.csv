is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,25,import java.io.ObjectStreamClass;
False,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,77," when we serialize and deserialize an object,"
False,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,78, it is reasonable to assume the deserialized object
False,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,79, is of the same type as the original serialized object
False,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,81,"SuppressWarnings(""unchecked"")"
False,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,82,inal T result = (T) deserialize(serialize(object));
False,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,83,eturn result;
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,77,if (object == null) {
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,78,return null;
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,80,byte[] objectData = serialize(object);
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,81,ByteArrayInputStream bais = new ByteArrayInputStream(objectData);
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,83,ClassLoaderAwareObjectInputStream in = null;
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,84,try {
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,85,// stream closed in the finally
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,86,"in = new ClassLoaderAwareObjectInputStream(bais, object.getClass().getClassLoader());"
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,88,"* when we serialize and deserialize an object,"
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,89,* it is reasonable to assume the deserialized object
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,90,* is of the same type as the original serialized object
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,92,return (T) in.readObject();
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,94,} catch (ClassNotFoundException ex) {
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,95,"throw new SerializationException(""ClassNotFoundException while reading cloned object data"", ex);"
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,96,} catch (IOException ex) {
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,97,"throw new SerializationException(""IOException while reading cloned object data"", ex);"
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,98,} finally {
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,99,try {
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,100,if (in != null) {
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,101,in.close();
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,103,} catch (IOException ex) {
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,104,"throw new SerializationException(""IOException on closing cloned object data InputStream."", ex);"
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,222,* <p>Custom specialization of the standard JDK {@link java.io.ObjectInputStream}
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,223,* that uses a custom  <code>ClassLoader</code> to resolve a class.
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,224,"* If the specified <code>ClassLoader</code> is not able to resolve the class,"
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,225,* the context classloader of the current thread will be used.
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,226,"* This way, the standard deserialization work also in web-application"
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,227,"* containers and application servers, no matter in which of the"
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,228,* <code>ClassLoader</code> the particular class that encapsulates
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,229,* serialization/deserialization lives. </p>
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,231,* <p>For more in-depth information about the problem for which this
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,232,"* class here is a workaround, see the JIRA issue LANG-626. </p>"
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,234,static class ClassLoaderAwareObjectInputStream extends ObjectInputStream {
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,235,private ClassLoader classLoader;
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,238,* Constructor.
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,239,* @param in The <code>InputStream</code>.
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,240,* @param classLoader classloader to use
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,241,* @throws IOException if an I/O error occurs while reading stream header.
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,242,* @see java.io.ObjectInputStream
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,244,"public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {"
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,245,super(in);
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,246,this.classLoader = classLoader;
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,250,* Overriden version that uses the parametrized <code>ClassLoader</code> or the <code>ClassLoader</code>
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,251,* of the current <code>Thread</code> to resolve the class.
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,252,* @param desc An instance of class <code>ObjectStreamClass</code>.
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,253,* @return A <code>Class</code> object corresponding to <code>desc</code>.
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,254,* @throws IOException Any of the usual Input/Output exceptions.
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,255,* @throws ClassNotFoundException If class of a serialized object cannot be found.
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,257,@Override
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,258,"protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {"
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,259,String name = desc.getName();
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,260,try {
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,261,"return Class.forName(name, false, classLoader);"
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,262,} catch (ClassNotFoundException ex) {
True,src/main/java/org/apache/commons/lang3/SerializationUtils.java,src/main/java/org/apache/commons/lang3/SerializationUtils.java,263,"return Class.forName(name, false, Thread.currentThread().getContextClassLoader());"

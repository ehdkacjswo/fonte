is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,17,package org.apache.commons.collections;
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,19,import java.io.ByteArrayInputStream;
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,20,import java.io.ByteArrayOutputStream;
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,21,import java.io.File;
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,22,import java.io.FileInputStream;
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,23,import java.io.FileOutputStream;
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,24,import java.io.IOException;
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,25,import java.io.InputStream;
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,26,import java.io.ObjectInputStream;
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,27,import java.io.ObjectOutputStream;
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,28,import java.io.OutputStream;
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,29,import java.io.Serializable;
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,32,* Abstract test class for {@link java.lang.Object} methods and contracts.
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,33,* <p>
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,34,"* To use, simply extend this class, and implement"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,35,* the {@link #makeObject()} method.
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,36,* <p>
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,37,"* If your {@link Object} fails one of these tests by design,"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,38,* you may still use this base set of cases.  Simply override the
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,39,* test case (method) your {@link Object} fails.
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,41,* @version $Revision$ $Date$
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,43,* @author Rodney Waldhoff
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,44,* @author Stephen Colebourne
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,45,* @author Anonymous
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,47,public abstract class AbstractTestObject extends BulkTest {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,49,/** Current major release for Collections */
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,50,public static final int COLLECTIONS_MAJOR_VERSION = 3;
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,53,* JUnit constructor.
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,55,* @param testName  the test class name
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,57,public AbstractTestObject(String testName) {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,58,super(testName);
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,63,* Implement this method to return the object to test.
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,65,* @return the object to test
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,67,public abstract Object makeObject();
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,70,* Override this method if a subclass is testing an object
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,71,"* that cannot serialize an ""empty"" Collection."
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,72,* (e.g. Comparators have no contents)
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,74,* @return true
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,76,public boolean supportsEmptyCollections() {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,77,return true;
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,81,* Override this method if a subclass is testing an object
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,82,"* that cannot serialize a ""full"" Collection."
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,83,* (e.g. Comparators have no contents)
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,85,* @return true
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,87,public boolean supportsFullCollections() {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,88,return true;
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,92,* Is serialization testing supported.
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,93,* Default is true.
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,95,public boolean isTestSerialization() {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,96,return true;
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,100,* Returns true to indicate that the collection supports equals() comparisons.
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,101,* This implementation returns true;
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,103,public boolean isEqualsCheckable() {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,104,return true;
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,108,public void testObjectEqualsSelf() {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,109,Object obj = makeObject();
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,110,"assertEquals(""A Object should equal itself"", obj, obj);"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,113,public void testEqualsNull() {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,114,Object obj = makeObject();
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,115,"assertEquals(false, obj.equals(null)); // make sure this doesn't throw NPE either"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,118,public void testObjectHashCodeEqualsSelfHashCode() {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,119,Object obj = makeObject();
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,120,"assertEquals(""hashCode should be repeatable"", obj.hashCode(), obj.hashCode());"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,123,public void testObjectHashCodeEqualsContract() {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,124,Object obj1 = makeObject();
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,125,if (obj1.equals(obj1)) {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,126,assertEquals(
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,127,"""[1] When two objects are equal, their hashCodes should be also."","
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,128,"obj1.hashCode(), obj1.hashCode());"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,130,Object obj2 = makeObject();
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,131,if (obj1.equals(obj2)) {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,132,assertEquals(
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,133,"""[2] When two objects are equal, their hashCodes should be also."","
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,134,"obj1.hashCode(), obj2.hashCode());"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,135,assertTrue(
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,136,"""When obj1.equals(obj2) is true, then obj2.equals(obj1) should also be true"","
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,137,obj2.equals(obj1));
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,141,protected Object serializeDeserialize(Object obj) throws Exception {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,142,ByteArrayOutputStream buffer = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,143,ObjectOutputStream out = new ObjectOutputStream(buffer);
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,144,out.writeObject(obj);
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,145,out.close();
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,147,ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,148,Object dest = in.readObject();
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,149,in.close();
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,151,return dest;
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,154,public void testSerializeDeserializeThenCompare() throws Exception {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,155,Object obj = makeObject();
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,156,if (obj instanceof Serializable && isTestSerialization()) {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,157,Object dest = serializeDeserialize(obj);
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,158,if (isEqualsCheckable()) {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,159,"assertEquals(""obj != deserialize(serialize(obj))"", obj, dest);"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,165,"* Sanity check method, makes sure that any Serializable"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,166,"* class can be serialized and de-serialized in memory,"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,167,* using the handy makeObject() method
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,169,* @throws IOException
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,170,* @throws ClassNotFoundException
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,172,public void testSimpleSerialization() throws Exception {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,173,Object o = makeObject();
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,174,if (o instanceof Serializable && isTestSerialization()) {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,175,byte[] objekt = writeExternalFormToBytes((Serializable) o);
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,176,readExternalFormFromBytes(objekt);
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,181,* Tests serialization by comparing against a previously stored version in SVN.
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,182,"* If the test object is serializable, confirm that a canonical form exists."
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,184,public void testCanonicalEmptyCollectionExists() {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,185,if (supportsEmptyCollections() && isTestSerialization() && !skipSerializedCanonicalTests()) {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,186,Object object = makeObject();
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,187,if (object instanceof Serializable) {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,188,String name = getCanonicalEmptyCollectionName(object);
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,189,assertTrue(
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,190,"""Canonical empty collection ("" + name + "") is not in SVN"","
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,191,new File(name).exists());
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,197,* Tests serialization by comparing against a previously stored version in SVN.
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,198,"* If the test object is serializable, confirm that a canonical form exists."
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,200,public void testCanonicalFullCollectionExists() {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,201,if (supportsFullCollections() && isTestSerialization() && !skipSerializedCanonicalTests()) {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,202,Object object = makeObject();
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,203,if (object instanceof Serializable) {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,204,String name = getCanonicalFullCollectionName(object);
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,205,assertTrue(
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,206,"""Canonical full collection ("" + name + "") is not in SVN"","
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,207,new File(name).exists());
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,212,// protected implementation
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,215,* Get the version of Collections that this object tries to
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,216,"* maintain serialization compatibility with. Defaults to 1, the"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,217,* earliest Collections version. (Note: some collections did not
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,218,* even exist in this version).
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,220,"* This constant makes it possible for TestMap (and other subclasses,"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,221,* if necessary) to automatically check SVN for a versionX copy of a
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,222,"* Serialized object, so we can make sure that compatibility is maintained."
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,223,"* See, for example, TestMap.getCanonicalFullMapName(Map map)."
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,224,"* Subclasses can override this variable, indicating compatibility"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,225,* with earlier Collections versions.
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,227,"* @return The version, or <code>null</code> if this object shouldn't be"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,228,* tested for compatibility with previous versions.
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,230,public String getCompatibilityVersion() {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,231,"return ""1"";"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,234,protected String getCanonicalEmptyCollectionName(Object object) {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,235,StringBuilder retval = new StringBuilder();
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,236,"retval.append(""data/test/"");"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,237,String colName = object.getClass().getName();
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,238,"colName = colName.substring(colName.lastIndexOf(""."") + 1, colName.length());"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,239,retval.append(colName);
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,240,"retval.append("".emptyCollection.version"");"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,241,retval.append(getCompatibilityVersion());
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,242,"retval.append("".obj"");"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,243,return retval.toString();
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,246,protected String getCanonicalFullCollectionName(Object object) {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,247,StringBuilder retval = new StringBuilder();
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,248,"retval.append(""data/test/"");"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,249,String colName = object.getClass().getName();
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,250,"colName = colName.substring(colName.lastIndexOf(""."") + 1, colName.length());"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,251,retval.append(colName);
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,252,"retval.append("".fullCollection.version"");"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,253,retval.append(getCompatibilityVersion());
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,254,"retval.append("".obj"");"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,255,return retval.toString();
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,259,* Write a Serializable or Externalizable object as
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,260,* a file at the given path.  NOT USEFUL as part
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,261,* of a unit test; this is just a utility method
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,262,* for creating disk-based objects in SVN that can become
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,263,* the basis for compatibility tests using
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,264,* readExternalFormFromDisk(String path)
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,266,* @param o Object to serialize
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,267,* @param path path to write the serialized Object
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,268,* @exception IOException
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,270,"protected void writeExternalFormToDisk(Serializable o, String path) throws IOException {"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,271,FileOutputStream fileStream = new FileOutputStream(path);
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,272,"writeExternalFormToStream(o, fileStream);"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,276,* Converts a Serializable or Externalizable object to
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,277,* bytes.  Useful for in-memory tests of serialization
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,279,* @param o Object to convert to bytes
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,280,* @return serialized form of the Object
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,281,* @exception IOException
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,283,protected byte[] writeExternalFormToBytes(Serializable o) throws IOException {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,284,ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,285,"writeExternalFormToStream(o, byteStream);"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,286,return byteStream.toByteArray();
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,290,* Reads a Serialized or Externalized Object from disk.
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,291,* Useful for creating compatibility tests between
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,292,* different SVN versions of the same class
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,294,* @param path path to the serialized Object
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,295,* @return the Object at the given path
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,296,* @exception IOException
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,297,* @exception ClassNotFoundException
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,299,"protected Object readExternalFormFromDisk(String path) throws IOException, ClassNotFoundException {"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,300,FileInputStream stream = new FileInputStream(path);
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,301,return readExternalFormFromStream(stream);
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,305,* Read a Serialized or Externalized Object from bytes.
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,306,* Useful for verifying serialization in memory.
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,308,* @param b byte array containing a serialized Object
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,309,* @return Object contained in the bytes
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,310,* @exception IOException
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,311,* @exception ClassNotFoundException
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,313,"protected Object readExternalFormFromBytes(byte[] b) throws IOException, ClassNotFoundException {"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,314,ByteArrayInputStream stream = new ByteArrayInputStream(b);
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,315,return readExternalFormFromStream(stream);
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,318,protected boolean skipSerializedCanonicalTests() {
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,319,"return Boolean.getBoolean(""org.apache.commons.collections:with-clover"");"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,322,// private implementation
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,324,"private Object readExternalFormFromStream(InputStream stream) throws IOException, ClassNotFoundException {"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,325,ObjectInputStream oStream = new ObjectInputStream(stream);
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,326,return oStream.readObject();
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,329,"private void writeExternalFormToStream(Serializable o, OutputStream stream) throws IOException {"
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,330,ObjectOutputStream oStream = new ObjectOutputStream(stream);
True,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,src/test/java/org/apache/commons/lang3/compare/AbstractTestObject.java,331,oStream.writeObject(o);

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,17,package org.apache.commons.lang3;
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,19,import java.util.Map;
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,22,* Immutable concrete manifestation of the {@link Pair} type.
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,24,* <p>#ThreadSafe# if the objects are threadsafe</p>
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,25,* @since Lang 3.0
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,26,* @author Matt Benson
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,27,* @version $Id$
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,29,* @param <L> left generic type
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,30,* @param <R> right generic type
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,32,"public class ImmutablePair<L, R> extends Pair<L, R> {"
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,33,/** Serialization version */
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,34,private static final long serialVersionUID = 4954918890077093841L;
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,36,/** Left object */
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,37,public final L left;
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,38,/** Right object */
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,39,public final R right;
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,42,* Create a new ImmutablePair instance.
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,44,* @param left
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,45,* @param right
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,47,"public ImmutablePair(L left, R right) {"
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,48,super();
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,49,this.left = left;
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,50,this.right = right;
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,54,* {@inheritDoc}
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,56,@Override
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,57,public L getLeftElement() {
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,58,return left;
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,62,* {@inheritDoc}
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,64,@Override
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,65,public R getRightElement() {
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,66,return right;
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,70,* {@link Map.Entry#setValue(Object)} implementation.
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,71,* @throws UnsupportedOperationException
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,73,public R setValue(R arg0) {
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,74,throw new UnsupportedOperationException();
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,78,"* Static fluent creation method for an {@link ImmutablePair}<L, R>:"
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,79,"* <code>ImmutablePair.of(left, right)</code>"
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,80,* @param <L>
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,81,* @param <R>
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,82,* @param left
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,83,* @param right
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,84,"* @return ImmutablePair<L, R>(left, right)"
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,86,"public static <L, R> ImmutablePair<L, R> of(L left, R right) {"
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,87,"return new ImmutablePair<L, R>(left, right);"
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,17,package org.apache.commons.lang3;
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,19,import java.util.Map;
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,22,* Mutable concrete manifestation of the {@link Pair} type.
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,24,* <p>#ThreadSafe# if the objects are threadsafe</p>
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,25,* @since Lang 3.0
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,26,* @author Matt Benson
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,27,* @version $Id$
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,29,* @param <L> left generic type
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,30,* @param <R> right generic type
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,32,"public class MutablePair<L, R> extends Pair<L, R> {"
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,33,/** Serialization version */
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,34,private static final long serialVersionUID = 4954918890077093841L;
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,36,private L leftElement;
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,37,private R rightElement;
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,40,* Create a new MutablePair instance.
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,42,public MutablePair() {
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,43,super();
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,47,* Create a new MutablePair instance.
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,49,* @param leftElement
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,50,* @param rightElement
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,52,"public MutablePair(L leftElement, R rightElement) {"
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,53,super();
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,54,this.leftElement = leftElement;
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,55,this.rightElement = rightElement;
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,59,* {@inheritDoc}
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,61,@Override
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,62,public L getLeftElement() {
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,63,return leftElement;
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,67,* Set the left element of the pair.
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,68,* @param leftElement
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,70,public void setLeftElement(L leftElement) {
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,71,this.leftElement = leftElement;
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,75,* {@inheritDoc}
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,77,@Override
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,78,public R getRightElement() {
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,79,return rightElement;
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,83,* Set the right element of the pair.
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,84,* @param rightElement
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,86,public void setRightElement(R rightElement) {
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,87,this.rightElement = rightElement;
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,91,* Implement {@link Map.Entry#setValue(Object)}.
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,92,* @param value value (<code>rightElement</code>) to set
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,94,public R setValue(R value) {
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,95,R result = getRightElement();
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,96,setRightElement(value);
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,97,return result;
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,101,"* Static fluent creation method for a {@link MutablePair}<L, R>:"
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,102,"* <code>MutablePair.of(left, right)</code>"
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,103,* @param <L>
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,104,* @param <R>
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,105,* @param left
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,106,* @param right
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,107,"* @return MutablePair<L, R>(left, right)"
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,109,"public static <L, R> MutablePair<L, R> of(L left, R right) {"
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,110,"return new MutablePair<L, R>(left, right);"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,20,import java.util.Map;
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,24, A basic immutable Object pair.
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,26, <p>#ThreadSafe# if the objects are threadsafe</p>
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,25,* Abstract Pair (or 2-element Tuple).
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,31,"ublic final class Pair<L, R> implements Serializable {"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,31,"public abstract class Pair<L, R> implements Serializable, Map.Entry<L, R> {"
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,35,** Left object */
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,36,ublic final L left;
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,36,"* Get the ""left"" element of the pair."
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,37,* @return L
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,39,public abstract L getLeftElement();
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,38,** Right object */
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,39,ublic final R right;
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,42,"* Get the ""right"" element of the pair."
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,43,* @return
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,45,public abstract R getRightElement();
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,42, Create a new Pair instance.
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,43, @param left
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,44, @param right
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,48,* Return {@link #getLeftElement()} as a {@link Map.Entry}'s key.
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,49,* @return L
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,51,public final L getKey() {
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,52,return getLeftElement();
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,56,* Return {@link #getRightElement()} as a {@link Map.Entry}'s value.
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,57,* @return R
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,46,"ublic Pair(L left, R right) {"
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,47,his.left = left;
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,48,his.right = right;
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,59,public R getValue() {
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,60,return getRightElement();
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,63,"eturn ObjectUtils.equals(left, other.left) && ObjectUtils.equals(right, other.right);"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,75,"return ObjectUtils.equals(getLeftElement(), other.getLeftElement())"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,76,"&& ObjectUtils.equals(getRightElement(), other.getRightElement());"
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,71,eturn new HashCodeBuilder().append(left).append(right).toHashCode();
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,84,// TODO should the hashCodeBuilder be seeded per concrete type?
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,85,return new HashCodeBuilder().append(getLeftElement()).append(getRightElement())
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,86,.toHashCode();
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,79,tringBuilder builder = new StringBuilder();
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,94,"StringBuilder builder = new StringBuilder(ClassUtils.getShortClassName(this, null));"
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,81,uilder.append(left);
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,96,builder.append(getLeftElement());
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,83,uilder.append(right);
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,98,builder.append(getRightElement());
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,89," Static fluent creation method for a Pair<L, R>:  <code>Pair.of(left, right)</code>"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,104,"* Static fluent creation method for a {@link Pair}<L, R>:"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,105,"* <code>Pair.of(left, right)</code>"
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,94," @return Pair<L, R>(left, right)"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,110,"* @return ImmutablePair<L, R>(left, right)"
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,97,"eturn new Pair<L, R>(left, right);"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,113,"return new ImmutablePair<L, R>(left, right);"
False,src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java,src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java,162,"air<IDKey, IDKey> swappedPair = Pair.of(pair.right, pair.left);"
True,src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java,src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java,162,"Pair<IDKey, IDKey> swappedPair = Pair.of(pair.getLeftElement(), pair.getRightElement());"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,17,package org.apache.commons.lang3;
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,19,import static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,20,import static org.junit.Assert.assertFalse;
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,21,import static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,22,import static org.junit.Assert.assertNull;
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,24,import java.io.ByteArrayInputStream;
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,25,import java.io.ByteArrayOutputStream;
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,26,import java.io.ObjectInputStream;
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,27,import java.io.ObjectOutputStream;
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,29,import org.junit.Test;
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,32,* Test the Pair class.
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,33,* @author Matt Benson
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,34,* @version $Id$
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,36,public class ImmutablePairTest {
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,38,@Test
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,39,public void testBasic() throws Exception {
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,40,"ImmutablePair<Integer, String> pair = new ImmutablePair<Integer, String>(0, ""foo"");"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,41,"assertEquals(0, pair.left.intValue());"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,42,"assertEquals(0, pair.getLeftElement().intValue());"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,43,"assertEquals(""foo"", pair.right);"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,44,"assertEquals(""foo"", pair.getRightElement());"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,45,"ImmutablePair<Object, String> pair2 = new ImmutablePair<Object, String>(null, ""bar"");"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,46,assertNull(pair2.left);
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,47,assertNull(pair2.getLeftElement());
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,48,"assertEquals(""bar"", pair2.right);"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,49,"assertEquals(""bar"", pair2.getRightElement());"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,52,@Test
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,53,public void testPairOf() throws Exception {
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,54,"ImmutablePair<Integer, String> pair = ImmutablePair.of(0, ""foo"");"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,55,"assertEquals(0, pair.left.intValue());"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,56,"assertEquals(0, pair.getLeftElement().intValue());"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,57,"assertEquals(""foo"", pair.right);"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,58,"assertEquals(""foo"", pair.getRightElement());"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,59,"ImmutablePair<Object, String> pair2 = ImmutablePair.of(null, ""bar"");"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,60,assertNull(pair2.left);
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,61,assertNull(pair2.getLeftElement());
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,62,"assertEquals(""bar"", pair2.right);"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,63,"assertEquals(""bar"", pair2.getRightElement());"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,66,@Test
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,67,public void testEquals() throws Exception {
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,68,"assertEquals(ImmutablePair.of(null, ""foo""), ImmutablePair.of(null, ""foo""));"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,69,"assertFalse(ImmutablePair.of(""foo"", 0).equals(ImmutablePair.of(""foo"", null)));"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,70,"assertFalse(ImmutablePair.of(""foo"", ""bar"").equals(ImmutablePair.of(""xyz"", ""bar"")));"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,72,"ImmutablePair<String, String> p = ImmutablePair.of(""foo"", ""bar"");"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,73,assertTrue(p.equals(p));
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,74,assertFalse(p.equals(new Object()));
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,77,@Test
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,78,public void testHashCode() throws Exception {
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,79,"assertEquals(ImmutablePair.of(null, ""foo"").hashCode(), ImmutablePair.of(null, ""foo"").hashCode());"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,82,@Test
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,83,public void testToString() throws Exception {
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,84,"assertEquals(""ImmutablePair(null,null)"", ImmutablePair.of(null, null).toString());"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,85,"assertEquals(""ImmutablePair(null,two)"", ImmutablePair.of(null, ""two"").toString());"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,86,"assertEquals(""ImmutablePair(one,null)"", ImmutablePair.of(""one"", null).toString());"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,87,"assertEquals(""ImmutablePair(one,two)"", ImmutablePair.of(""one"", ""two"").toString());"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,90,@Test
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,91,"@SuppressWarnings(""unchecked"")"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,92,public void testSerialization() throws Exception {
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,93,"ImmutablePair<Integer, String> origPair = ImmutablePair.of(0, ""foo"");"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,94,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,95,ObjectOutputStream out = new ObjectOutputStream(baos);
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,96,out.writeObject(origPair);
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,97,"ImmutablePair<Integer, String> deserializedPair = (ImmutablePair<Integer, String>) new ObjectInputStream("
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,98,new ByteArrayInputStream(baos.toByteArray())).readObject();
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,99,"assertEquals(origPair, deserializedPair);"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,100,"assertEquals(origPair.hashCode(), deserializedPair.hashCode());"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,17,package org.apache.commons.lang3;
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,19,import static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,20,import static org.junit.Assert.assertFalse;
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,21,import static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,22,import static org.junit.Assert.assertNull;
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,24,import java.io.ByteArrayInputStream;
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,25,import java.io.ByteArrayOutputStream;
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,26,import java.io.ObjectInputStream;
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,27,import java.io.ObjectOutputStream;
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,29,import org.junit.Test;
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,32,* Test the MutablePair class.
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,33,* @author Matt Benson
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,34,* @version $Id$
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,36,public class MutablePairTest {
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,38,@Test
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,39,public void testBasic() throws Exception {
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,40,"MutablePair<Integer, String> pair = new MutablePair<Integer, String>(0, ""foo"");"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,41,"assertEquals(0, pair.getLeftElement().intValue());"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,42,"assertEquals(""foo"", pair.getRightElement());"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,43,"MutablePair<Object, String> pair2 = new MutablePair<Object, String>(null, ""bar"");"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,44,assertNull(pair2.getLeftElement());
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,45,"assertEquals(""bar"", pair2.getRightElement());"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,48,@Test
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,49,public void testDefault() throws Exception {
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,50,"MutablePair<Integer, String> pair = new MutablePair<Integer, String>();"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,51,assertNull(pair.getLeftElement());
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,52,assertNull(pair.getRightElement());
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,55,@Test
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,56,public void testMutate() throws Exception {
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,57,"MutablePair<Integer, String> pair = new MutablePair<Integer, String>(0, ""foo"");"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,58,pair.setLeftElement(42);
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,59,"pair.setRightElement(""bar"");"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,60,"assertEquals(42, pair.getLeftElement().intValue());"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,61,"assertEquals(""bar"", pair.getRightElement());"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,64,@Test
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,65,public void testPairOf() throws Exception {
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,66,"MutablePair<Integer, String> pair = MutablePair.of(0, ""foo"");"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,67,"assertEquals(0, pair.getLeftElement().intValue());"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,68,"assertEquals(""foo"", pair.getRightElement());"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,69,"MutablePair<Object, String> pair2 = MutablePair.of(null, ""bar"");"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,70,assertNull(pair2.getLeftElement());
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,71,"assertEquals(""bar"", pair2.getRightElement());"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,74,@Test
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,75,public void testEquals() throws Exception {
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,76,"assertEquals(MutablePair.of(null, ""foo""), MutablePair.of(null, ""foo""));"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,77,"assertFalse(MutablePair.of(""foo"", 0).equals(MutablePair.of(""foo"", null)));"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,78,"assertFalse(MutablePair.of(""foo"", ""bar"").equals(MutablePair.of(""xyz"", ""bar"")));"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,80,"MutablePair<String, String> p = MutablePair.of(""foo"", ""bar"");"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,81,assertTrue(p.equals(p));
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,82,assertFalse(p.equals(new Object()));
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,85,@Test
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,86,public void testHashCode() throws Exception {
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,87,"assertEquals(MutablePair.of(null, ""foo"").hashCode(), MutablePair.of(null, ""foo"").hashCode());"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,90,@Test
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,91,public void testToString() throws Exception {
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,92,"assertEquals(""MutablePair(null,null)"", MutablePair.of(null, null).toString());"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,93,"assertEquals(""MutablePair(null,two)"", MutablePair.of(null, ""two"").toString());"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,94,"assertEquals(""MutablePair(one,null)"", MutablePair.of(""one"", null).toString());"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,95,"assertEquals(""MutablePair(one,two)"", MutablePair.of(""one"", ""two"").toString());"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,98,@Test
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,99,"@SuppressWarnings(""unchecked"")"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,100,public void testSerialization() throws Exception {
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,101,"MutablePair<Integer, String> origPair = MutablePair.of(0, ""foo"");"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,102,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,103,ObjectOutputStream out = new ObjectOutputStream(baos);
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,104,out.writeObject(origPair);
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,105,"MutablePair<Integer, String> deserializedPair = (MutablePair<Integer, String>) new ObjectInputStream("
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,106,new ByteArrayInputStream(baos.toByteArray())).readObject();
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,107,"assertEquals(origPair, deserializedPair);"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,108,"assertEquals(origPair.hashCode(), deserializedPair.hashCode());"
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,21,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,22,import static org.junit.Assert.assertTrue;
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,24,mport java.io.ByteArrayInputStream;
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,25,mport java.io.ByteArrayOutputStream;
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,26,mport java.io.ObjectInputStream;
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,27,mport java.io.ObjectOutputStream;
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,24,import java.util.HashSet;
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,38,Test
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,39,ublic void testBasic() throws Exception {
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,40,"air<Integer, String> pair = new Pair<Integer, String>(0, ""foo"");"
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,41,"ssertEquals(0, pair.left.intValue());"
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,42,"ssertEquals(""foo"", pair.right);"
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,43,"air<Object, String> pair2 = new Pair<Object, String>(null, ""bar"");"
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,44,ssertNull(pair2.left);
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,45,"ssertEquals(""bar"", pair2.right);"
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,51,"ssertEquals(0, pair.left.intValue());"
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,52,"ssertEquals(""foo"", pair.right);"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,38,"assertTrue(pair instanceof ImmutablePair<?, ?>);"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,39,"assertEquals(0, ((ImmutablePair<Integer, String>) pair).left.intValue());"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,40,"assertEquals(""foo"", ((ImmutablePair<Integer, String>) pair).right);"
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,54,ssertNull(pair2.left);
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,55,"ssertEquals(""bar"", pair2.right);"
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,58,Test
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,59,ublic void testEquals() throws Exception {
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,60,"ssertEquals(Pair.of(null, ""foo""), Pair.of(null, ""foo""));"
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,61,"ssertFalse(Pair.of(""foo"", 0).equals(Pair.of(""foo"", null)));"
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,62,"ssertFalse(Pair.of(""foo"", ""bar"").equals(Pair.of(""xyz"", ""bar"")));"
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,64,"air p = Pair.of(""foo"", ""bar"");"
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,65,ssertTrue(p.equals(p));
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,66,ssertFalse(p.equals(new Object()));
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,69,Test
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,70,ublic void testHashCode() throws Exception {
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,71,"ssertEquals(Pair.of(null, ""foo"").hashCode(), Pair.of(null, ""foo"").hashCode());"
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,74,Test
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,75,ublic void testToString() throws Exception {
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,76,"ssertEquals(""(null,null)"", Pair.of(null, null).toString());"
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,77,"ssertEquals(""(null,two)"", Pair.of(null, ""two"").toString());"
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,78,"ssertEquals(""(one,null)"", Pair.of(""one"", null).toString());"
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,79,"ssertEquals(""(one,two)"", Pair.of(""one"", ""two"").toString());"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,42,"assertTrue(pair2 instanceof ImmutablePair<?, ?>);"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,43,"assertNull(((ImmutablePair<Object, String>) pair2).left);"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,44,"assertEquals(""bar"", ((ImmutablePair<Object, String>) pair2).right);"
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,83,"SuppressWarnings(""unchecked"")"
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,84,ublic void testSerialization() throws Exception {
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,85,"air<Integer, String> origPair = Pair.of(0, ""foo"");"
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,86,yteArrayOutputStream baos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,87,bjectOutputStream out = new ObjectOutputStream(baos);
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,88,ut.writeObject(origPair);
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,89,"air<Integer, String> deserializedPair = (Pair<Integer, String>) new ObjectInputStream("
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,90,ew ByteArrayInputStream(baos.toByteArray())).readObject();
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,91,"ssertEquals(origPair, deserializedPair);"
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,92,"ssertEquals(origPair.hashCode(), deserializedPair.hashCode());"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,48,public void testCompatibility() throws Exception {
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,49,"Pair<Integer, String> pair = ImmutablePair.of(0, ""foo"");"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,50,"Pair<Integer, String> pair2 = MutablePair.of(0, ""foo"");"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,51,"assertEquals(pair, pair2);"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,52,"assertEquals(pair.hashCode(), pair2.hashCode());"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,53,"HashSet<Pair<Integer, String>> set = new HashSet<Pair<Integer, String>>();"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,54,set.add(pair);
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,55,assertTrue(set.contains(pair2));
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,57,"pair2.setValue(""bar"");"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,58,assertFalse(pair.equals(pair2));
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,59,assertFalse(pair.hashCode() == pair2.hashCode());

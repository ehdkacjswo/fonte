is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,17,package org.apache.commons.collections.comparators;
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,19,import java.io.Serializable;
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,20,import java.util.Comparator;
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,21,import java.util.LinkedList;
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,22,import java.util.List;
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,25,* Tests for ComparatorChain.
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,27,* @version $Revision$ $Date$
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,29,* @author Unknown
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,31,public class TestComparatorChain extends AbstractTestComparator<TestComparatorChain.PseudoRow> {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,33,public TestComparatorChain(String testName) {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,34,super(testName);
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,37,@Override
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,38,public Comparator<PseudoRow> makeObject() {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,39,ComparatorChain<PseudoRow> chain = new ComparatorChain<PseudoRow>(new ColumnComparator(0));
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,40,"chain.addComparator(new ColumnComparator(1), true); // reverse the second column"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,41,"chain.addComparator(new ColumnComparator(2), false);"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,42,return chain;
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,45,public void testNoopComparatorChain() {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,46,ComparatorChain<Integer> chain = new ComparatorChain<Integer>();
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,47,Integer i1 = new Integer(4);
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,48,Integer i2 = new Integer(6);
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,49,chain.addComparator(new ComparableComparator<Integer>());
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,51,int correctValue = i1.compareTo(i2);
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,52,"assertTrue(""Comparison returns the right order"", chain.compare(i1, i2) == correctValue);"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,55,public void testBadNoopComparatorChain() {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,56,ComparatorChain<Integer> chain = new ComparatorChain<Integer>();
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,57,Integer i1 = new Integer(4);
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,58,Integer i2 = new Integer(6);
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,59,try {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,60,"chain.compare(i1,i2);"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,61,"fail(""An exception should be thrown when a chain contains zero comparators."");"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,62,} catch (UnsupportedOperationException e) {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,66,public void testListComparatorChain() {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,67,List<Comparator<Integer>> list = new LinkedList<Comparator<Integer>>();
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,68,list.add(new ComparableComparator<Integer>());
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,69,ComparatorChain<Integer> chain = new ComparatorChain<Integer>(list);
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,70,Integer i1 = new Integer(4);
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,71,Integer i2 = new Integer(6);
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,73,int correctValue = i1.compareTo(i2);
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,74,"assertTrue(""Comparison returns the right order"", chain.compare(i1, i2) == correctValue);"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,77,public void testBadListComparatorChain() {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,78,List<Comparator<Integer>> list = new LinkedList<Comparator<Integer>>();
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,79,ComparatorChain<Integer> chain = new ComparatorChain<Integer>(list);
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,80,Integer i1 = new Integer(4);
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,81,Integer i2 = new Integer(6);
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,82,try {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,83,"chain.compare(i1, i2);"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,84,"fail(""An exception should be thrown when a chain contains zero comparators."");"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,85,} catch (UnsupportedOperationException e) {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,89,public void testComparatorChainOnMinvaluedCompatator() {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,90,"// -1 * Integer.MIN_VALUE is less than 0,"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,91,// test that ComparatorChain handles this edge case correctly
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,92,ComparatorChain<Integer> chain = new ComparatorChain<Integer>();
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,93,chain.addComparator(new Comparator<Integer>() {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,94,"public int compare(Integer a, Integer b) {"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,95,int result = a.compareTo(b);
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,96,if (result < 0) {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,97,return Integer.MIN_VALUE;
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,99,if (result > 0) {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,100,return Integer.MAX_VALUE;
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,102,return 0;
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,104,"}, true);"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,106,"assertTrue(chain.compare(new Integer(4), new Integer(5)) > 0);"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,107,"assertTrue(chain.compare(new Integer(5), new Integer(4)) < 0);"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,108,"assertTrue(chain.compare(new Integer(4), new Integer(4)) == 0);"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,111,@Override
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,112,public List<PseudoRow> getComparableObjectsOrdered() {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,113,List<PseudoRow> list = new LinkedList<PseudoRow>();
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,114,// this is the correct order assuming a
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,115,"// ""0th forward, 1st reverse, 2nd forward"" sort"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,116,"list.add(new PseudoRow(1, 2, 3));"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,117,"list.add(new PseudoRow(2, 3, 5));"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,118,"list.add(new PseudoRow(2, 2, 4));"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,119,"list.add(new PseudoRow(2, 2, 8));"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,120,"list.add(new PseudoRow(3, 1, 0));"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,121,"list.add(new PseudoRow(4, 4, 4));"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,122,"list.add(new PseudoRow(4, 4, 7));"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,123,return list;
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,126,"@SuppressWarnings(""serial"")"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,127,public static class PseudoRow implements Serializable {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,129,public int cols[] = new int[3];
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,131,"public PseudoRow(int col1, int col2, int col3) {"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,132,cols[0] = col1;
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,133,cols[1] = col2;
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,134,cols[2] = col3;
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,137,public int getColumn(int colIndex) {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,138,return cols[colIndex];
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,141,@Override
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,142,public String toString() {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,143,StringBuilder buf = new StringBuilder();
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,144,"buf.append(""["");"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,145,buf.append(cols[0]);
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,146,"buf.append("","");"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,147,buf.append(cols[1]);
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,148,"buf.append("","");"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,149,buf.append(cols[2]);
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,150,"buf.append(""]"");"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,151,return buf.toString();
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,154,@Override
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,155,public boolean equals(Object o) {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,156,if (!(o instanceof PseudoRow)) {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,157,return false;
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,160,PseudoRow row = (PseudoRow) o;
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,161,if (getColumn(0) != row.getColumn(0)) {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,162,return false;
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,165,if (getColumn(1) != row.getColumn(1)) {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,166,return false;
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,169,if (getColumn(2) != row.getColumn(2)) {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,170,return false;
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,173,return true;
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,178,"public static class ColumnComparator implements Comparator<PseudoRow>, Serializable {"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,179,private static final long serialVersionUID = -2284880866328872105L;
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,181,protected int colIndex = 0;
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,183,public ColumnComparator(int colIndex) {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,184,this.colIndex = colIndex;
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,187,"public int compare(PseudoRow o1, PseudoRow o2) {"
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,189,int col1 = o1.getColumn(colIndex);
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,190,int col2 = o2.getColumn(colIndex);
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,192,if (col1 > col2) {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,193,return 1;
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,195,if (col1 < col2) {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,196,return -1;
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,198,return 0;
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,201,@Override
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,202,public int hashCode() {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,203,return colIndex;
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,206,@Override
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,207,public boolean equals(Object that) {
True,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,src/test/java/org/apache/commons/lang3/compare/TestComparatorChain.java,208,return that instanceof ColumnComparator && colIndex == ((ColumnComparator) that).colIndex;

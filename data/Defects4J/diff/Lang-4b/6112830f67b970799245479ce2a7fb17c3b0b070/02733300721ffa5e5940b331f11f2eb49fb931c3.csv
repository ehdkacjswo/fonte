is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,15, limitations under the License.
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,17,ackage org.apache.commons.lang.enums;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,20,mport java.lang.reflect.InvocationTargetException;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,21,mport java.lang.reflect.Method;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,22,mport java.util.ArrayList;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,23,mport java.util.Collections;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,24,mport java.util.HashMap;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,25,mport java.util.Iterator;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,26,mport java.util.List;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,27,mport java.util.Map;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,28,mport java.util.WeakHashMap;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,30,mport org.apache.commons.lang.ClassUtils;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,31,mport org.apache.commons.lang.StringUtils;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,34, <p>Abstract superclass for type-safe enums.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,36, <p>One feature of the C programming language lacking in Java is enumerations. The
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,37, C implementation based on ints was poor and open to abuse. The original Java
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,38, recommendation and most of the JDK also uses int constants. It has been recognised
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,39, however that a more robust type-safe class-based solution can be designed. This
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,40, class follows the basic Java type-safe enumeration pattern.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,42," <p><em>NOTE:</em> Due to the way in which Java ClassLoaders work, comparing"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,43," Enum objects should always be done using <code>equals()</code>, not <code>==</code>."
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,44, The equals() method will try == first so in most cases the effect is the same.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,46," <p>Of course, if you actually want (or don't mind) Enums in different class"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,47," loaders being non-equal, then you can use <code>==</code>.</p>"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,49, <h4>Simple Enums</h4>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,51," <p>To use this class, it must be subclassed. For example:</p>"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,53, <pre>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,54, public final class ColorEnum extends Enum {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,55,"   public static final ColorEnum RED = new ColorEnum(""Red"");"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,56,"   public static final ColorEnum GREEN = new ColorEnum(""Green"");"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,57,"   public static final ColorEnum BLUE = new ColorEnum(""Blue"");"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,59,   private ColorEnum(String color) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,60,     super(color);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,63,   public static ColorEnum getEnum(String color) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,64,"     return (ColorEnum) getEnum(ColorEnum.class, color);"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,67,   public static Map getEnumMap() {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,68,     return getEnumMap(ColorEnum.class);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,71,   public static List getEnumList() {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,72,     return getEnumList(ColorEnum.class);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,75,   public static Iterator iterator() {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,76,     return iterator(ColorEnum.class);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,79, </pre>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,81," <p>As shown, each enum has a name. This can be accessed using <code>getName</code>.</p>"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,83, <p>The <code>getEnum</code> and <code>iterator</code> methods are recommended.
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,84," Unfortunately, Java restrictions require these to be coded as shown in each subclass."
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,85, An alternative choice is to use the {@link EnumUtils} class.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,87, <h4>Subclassed Enums</h4>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,88," <p>A hierarchy of Enum classes can be built. In this case, the superclass is"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,89, unaffected by the addition of subclasses (as per normal Java). The subclasses
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,90, may add additional Enum constants <em>of the type of the superclass</em>. The
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,91, query methods on the subclass will return all of the Enum constants from the
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,92, superclass and subclass.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,94, <pre>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,95, public final class ExtraColorEnum extends ColorEnum {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,96,"   // NOTE: Color enum declared above is final, change that to get this"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,97,   // example to compile.
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,98,"   public static final ColorEnum YELLOW = new ExtraColorEnum(""Yellow"");"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,100,   private ExtraColorEnum(String color) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,101,     super(color);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,104,   public static ColorEnum getEnum(String color) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,105,"     return (ColorEnum) getEnum(ExtraColorEnum.class, color);"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,108,   public static Map getEnumMap() {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,109,     return getEnumMap(ExtraColorEnum.class);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,112,   public static List getEnumList() {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,113,     return getEnumList(ExtraColorEnum.class);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,116,   public static Iterator iterator() {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,117,     return iterator(ExtraColorEnum.class);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,120, </pre>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,122," <p>This example will return RED, GREEN, BLUE, YELLOW from the List and iterator"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,123," methods in that order. The RED, GREEN and BLUE instances will be the same (==)"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,124, as those from the superclass ColorEnum. Note that YELLOW is declared as a
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,125, ColorEnum and not an ExtraColorEnum.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,127, <h4>Functional Enums</h4>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,129, <p>The enums can have functionality by defining subclasses and
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,130, overriding the <code>getEnumClass()</code> method:</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,132, <pre>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,133,   public static final OperationEnum PLUS = new PlusOperation();
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,134,   private static final class PlusOperation extends OperationEnum {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,135,     private PlusOperation() {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,136,"       super(""Plus"");"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,138,"     public int eval(int a, int b) {"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,139,       return a + b;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,142,   public static final OperationEnum MINUS = new MinusOperation();
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,143,   private static final class MinusOperation extends OperationEnum {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,144,     private MinusOperation() {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,145,"       super(""Minus"");"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,147,"     public int eval(int a, int b) {"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,148,       return a - b;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,152,   private OperationEnum(String color) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,153,     super(color);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,156,   public final Class getEnumClass() {     // NOTE: new method!
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,157,     return OperationEnum.class;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,160,"   public abstract double eval(double a, double b);"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,162,   public static OperationEnum getEnum(String name) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,163,"     return (OperationEnum) getEnum(OperationEnum.class, name);"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,166,   public static Map getEnumMap() {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,167,     return getEnumMap(OperationEnum.class);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,170,   public static List getEnumList() {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,171,     return getEnumList(OperationEnum.class);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,174,   public static Iterator iterator() {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,175,     return iterator(OperationEnum.class);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,178, </pre>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,179," <p>The code above will work on JDK 1.2. If JDK1.3 and later is used,"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,180, the subclasses may be defined as anonymous.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,182, <h4>Nested class Enums</h4>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,184, <p>Care must be taken with class loading when defining a static nested class
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,185, for enums. The static nested class can be loaded without the surrounding outer
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,186, class being loaded. This can result in an empty list/map/iterator being returned.
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,187, One solution is to define a static block that references the outer class where
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,188, the constants are defined. For example:</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,190, <pre>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,191, public final class Outer {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,192,"   public static final BWEnum BLACK = new BWEnum(""Black"");"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,193,"   public static final BWEnum WHITE = new BWEnum(""White"");"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,195,   // static nested enum class
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,196,   public static final class BWEnum extends Enum {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,198,     static {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,199,       // explicitly reference BWEnum class to force constants to load
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,200,       Object obj = Outer.BLACK;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,203,     // ... other methods omitted
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,206, </pre>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,208," <p>Although the above solves the problem, it is not recommended. The best solution"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,209," is to define the constants in the enum class, and hold references in the outer class:"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,211, <pre>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,212, public final class Outer {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,213,   public static final BWEnum BLACK = BWEnum.BLACK;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,214,   public static final BWEnum WHITE = BWEnum.WHITE;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,216,   // static nested enum class
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,217,   public static final class BWEnum extends Enum {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,218,     // only define constants in enum classes - private if desired
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,219,"     private static final BWEnum BLACK = new BWEnum(""Black"");"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,220,"     private static final BWEnum WHITE = new BWEnum(""White"");"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,222,     // ... other methods omitted
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,225, </pre>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,227," <p>For more details, see the 'Nested' test cases."
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,229, <h4>Lang Enums and Java 5.0 Enums</h4>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,231, <p>Enums were added to Java in Java 5.0. The main differences between Lang's
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,232, implementation and the new official JDK implementation are: </p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,233, <ul>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,234," <li>The standard Enum is a not just a superclass, but is a type baked into the"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,235, language. </li>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,236," <li>The standard Enum does not support extension, so the standard methods that"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,237, are provided in the Lang enum are not available. </li>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,238," <li>Lang mandates a String name, whereas the standard Enum uses the class"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,239, name as its name. getName() changes to name(). </li>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,240, </ul>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,242, <p>Generally people should use the standard Enum. Migrating from the Lang
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,243, enum to the standard Enum is not as easy as it might be due to the lack of
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,244, class inheritence in standard Enums. This means that it's not possible
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,245, to provide a 'super-enum' which could provide the same utility methods
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,246, that the Lang enum does. The following utility class is a Java 5.0
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,247, version of our EnumUtils class and provides those utility methods. </p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,249, <pre>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,250, import java.util.*;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,252, public class EnumUtils {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,254,"   public static Enum getEnum(Class enumClass, String token) {"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,255,"     return Enum.valueOf(enumClass, token);"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,258,   public static Map getEnumMap(Class enumClass) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,259,     HashMap map = new HashMap();
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,260,     Iterator itr = EnumUtils.iterator(enumClass);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,261,     while(itr.hasNext()) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,262,       Enum enm = (Enum) itr.next();
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,263,"       map.put( enm.name(), enm );"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,265,     return map;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,268,   public static List getEnumList(Class enumClass) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,269,     return new ArrayList( EnumSet.allOf(enumClass) );
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,272,   public static Iterator iterator(Class enumClass) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,273,     return EnumUtils.getEnumList(enumClass).iterator();
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,276, </pre>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,278, @author Apache Avalon project
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,279, @author Stephen Colebourne
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,280, @author Chris Webb
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,281, @author Mike Bowler
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,282, @author Matthias Eichel
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,283, @since 2.1 (class existed in enum package from v1.0)
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,284, @version $Id$
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,286,"ublic abstract class Enum implements Comparable, Serializable {"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,289, Required for serialization support.
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,291, @see java.io.Serializable
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,293,rivate static final long serialVersionUID = -487045951170455942L;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,295,"/ After discussion, the default size for HashMaps is used, as the"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,296,/ sizing algorithm changes across the JDK versions
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,298," An empty <code>Map</code>, as JDK1.2 didn't have an empty map."
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,300,rivate static final Map EMPTY_MAP = Collections.unmodifiableMap(new HashMap(0));
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,303," <code>Map</code>, key of class name, value of <code>Entry</code>."
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,305,rivate static Map cEnumClasses
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,306,"/ LANG-334: To avoid exposing a mutating map,"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,307,/ we copy it each time we add to it. This is cheaper than
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,308,/ using a synchronized map since we are almost entirely reads
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,309, new WeakHashMap();
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,312, The string representation of the Enum.
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,314,rivate final String iName;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,317, The hashcode representation of the Enum.
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,319,rivate transient final int iHashCode;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,322, The toString representation of the Enum.
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,323, @since 2.0
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,325,rotected transient String iToString = null;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,328, <p>Enable the iterator to retain the source code order.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,330,rivate static class Entry {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,332, Map of Enum name to Enum.
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,334,inal Map map = new HashMap();
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,336, Map of Enum name to Enum.
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,338,inal Map unmodifiableMap = Collections.unmodifiableMap(map);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,340, List of Enums in source code order.
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,342,inal List list = new ArrayList(25);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,344, Map of Enum name to Enum.
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,346,inal List unmodifiableList = Collections.unmodifiableList(list);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,349, <p>Restrictive constructor.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,351,rotected Entry() {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,352,uper();
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,357, <p>Constructor to add a new named item to the enumeration.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,359," @param name  the name of the enum object,"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,360,  must not be empty or <code>null</code>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,361, @throws IllegalArgumentException if the name is <code>null</code>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,362,  or an empty string
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,363, @throws IllegalArgumentException if the getEnumClass() method returns
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,364,  a null or invalid Class
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,366,rotected Enum(String name) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,367,uper();
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,368,nit(name);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,369,Name = name;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,370,HashCode = 7 + getEnumClass().hashCode() + 3 * name.hashCode();
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,371,/ cannot create toString here as subclasses may want to include other data
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,375, Initializes the enumeration.
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,377, @param name  the enum name
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,378, @throws IllegalArgumentException if the name is null or empty or duplicate
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,379, @throws IllegalArgumentException if the enumClass is null or invalid
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,381,rivate void init(String name) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,382,f (StringUtils.isEmpty(name)) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,383,"hrow new IllegalArgumentException(""The Enum name must not be empty or null"");"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,386,lass enumClass = getEnumClass();
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,387,f (enumClass == null) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,388,"hrow new IllegalArgumentException(""getEnumClass() must not be null"");"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,390,lass cls = getClass();
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,391,oolean ok = false;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,392,hile (cls != null && cls != Enum.class && cls != ValuedEnum.class) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,393,f (cls == enumClass) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,394,k = true;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,395,reak;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,397,ls = cls.getSuperclass();
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,399,f (ok == false) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,400,"hrow new IllegalArgumentException(""getEnumClass() must return a superclass of this class"");"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,403,ntry entry;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,404,ynchronized( Enum.class ) { // LANG-334
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,405,/ create entry
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,406,ntry = (Entry) cEnumClasses.get(enumClass);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,407,f (entry == null) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,408,ntry = createEntry(enumClass);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,409,ap myMap = new WeakHashMap( ); // we avoid the (Map) constructor to achieve JDK 1.2 support
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,410,yMap.putAll( cEnumClasses );
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,411,"yMap.put(enumClass, entry);"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,412,EnumClasses = myMap;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,415,f (entry.map.containsKey(name)) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,416,"hrow new IllegalArgumentException(""The Enum name must be unique, '"" + name + ""' has already been added"");"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,418,"ntry.map.put(name, this);"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,419,ntry.list.add(this);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,423, <p>Handle the deserialization of the class to ensure that multiple
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,424," copies are not wastefully created, or illegal enum types created.</p>"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,426, @return the resolved object
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,428,rotected Object readResolve() {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,429,ntry entry = (Entry) cEnumClasses.get(getEnumClass());
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,430,f (entry == null) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,431,eturn null;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,433,eturn entry.map.get(getName());
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,439, <p>Gets an <code>Enum</code> object by class and name.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,441," @param enumClass  the class of the Enum to get, must not"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,442,  be <code>null</code>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,443," @param name  the name of the <code>Enum</code> to get,"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,444,  may be <code>null</code>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,445," @return the enum object, or <code>null</code> if the enum does not exist"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,446, @throws IllegalArgumentException if the enum class
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,447,  is <code>null</code>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,449,"rotected static Enum getEnum(Class enumClass, String name) {"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,450,ntry entry = getEntry(enumClass);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,451,f (entry == null) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,452,eturn null;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,454,eturn (Enum) entry.map.get(name);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,458, <p>Gets the <code>Map</code> of <code>Enum</code> objects by
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,459, name using the <code>Enum</code> class.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,461, <p>If the requested class has no enum objects an empty
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,462, <code>Map</code> is returned.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,464," @param enumClass  the class of the <code>Enum</code> to get,"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,465,  must not be <code>null</code>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,466, @return the enum object Map
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,467, @throws IllegalArgumentException if the enum class is <code>null</code>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,468, @throws IllegalArgumentException if the enum class is not a subclass of Enum
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,470,rotected static Map getEnumMap(Class enumClass) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,471,ntry entry = getEntry(enumClass);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,472,f (entry == null) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,473,eturn EMPTY_MAP;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,475,eturn entry.unmodifiableMap;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,479, <p>Gets the <code>List</code> of <code>Enum</code> objects using the
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,480, <code>Enum</code> class.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,482, <p>The list is in the order that the objects were created (source code order).
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,483, If the requested class has no enum objects an empty <code>List</code> is
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,484, returned.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,486," @param enumClass  the class of the <code>Enum</code> to get,"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,487,  must not be <code>null</code>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,488, @return the enum object Map
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,489, @throws IllegalArgumentException if the enum class is <code>null</code>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,490, @throws IllegalArgumentException if the enum class is not a subclass of Enum
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,492,rotected static List getEnumList(Class enumClass) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,493,ntry entry = getEntry(enumClass);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,494,f (entry == null) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,495,eturn Collections.EMPTY_LIST;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,497,eturn entry.unmodifiableList;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,501, <p>Gets an <code>Iterator</code> over the <code>Enum</code> objects in
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,502, an <code>Enum</code> class.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,504, <p>The <code>Iterator</code> is in the order that the objects were
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,505, created (source code order). If the requested class has no enum
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,506, objects an empty <code>Iterator</code> is returned.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,508," @param enumClass  the class of the <code>Enum</code> to get,"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,509,  must not be <code>null</code>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,510, @return an iterator of the Enum objects
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,511, @throws IllegalArgumentException if the enum class is <code>null</code>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,512, @throws IllegalArgumentException if the enum class is not a subclass of Enum
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,514,rotected static Iterator iterator(Class enumClass) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,515,eturn Enum.getEnumList(enumClass).iterator();
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,520, <p>Gets an <code>Entry</code> from the map of Enums.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,522, @param enumClass  the class of the <code>Enum</code> to get
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,523, @return the enum entry
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,525,rivate static Entry getEntry(Class enumClass) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,526,f (enumClass == null) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,527,"hrow new IllegalArgumentException(""The Enum Class must not be null"");"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,529,f (Enum.class.isAssignableFrom(enumClass) == false) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,530,"hrow new IllegalArgumentException(""The Class must be a subclass of Enum"");"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,532,ntry entry = (Entry) cEnumClasses.get(enumClass);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,533,eturn entry;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,537, <p>Creates an <code>Entry</code> for storing the Enums.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,539, <p>This accounts for subclassed Enums.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,541, @param enumClass  the class of the <code>Enum</code> to get
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,542, @return the enum entry
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,544,rivate static Entry createEntry(Class enumClass) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,545,ntry entry = new Entry();
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,546,lass cls = enumClass.getSuperclass();
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,547,hile (cls != null && cls != Enum.class && cls != ValuedEnum.class) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,548,ntry loopEntry = (Entry) cEnumClasses.get(cls);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,549,f (loopEntry != null) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,550,ntry.list.addAll(loopEntry.list);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,551,ntry.map.putAll(loopEntry.map);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,552,"reak;  // stop here, as this will already have had superclasses added"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,554,ls = cls.getSuperclass();
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,556,eturn entry;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,561," <p>Retrieve the name of this Enum item, set in the constructor.</p>"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,563, @return the <code>String</code> name of this Enum item
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,565,ublic final String getName() {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,566,eturn iName;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,570," <p>Retrieves the Class of this Enum item, set in the constructor.</p>"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,572," <p>This is normally the same as <code>getClass()</code>, but for"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,573," advanced Enums may be different. If overridden, it must return a"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,574, constant value.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,576, @return the <code>Class</code> of the enum
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,577, @since 2.0
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,579,ublic Class getEnumClass() {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,580,eturn getClass();
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,584, <p>Tests for equality.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,586, <p>Two Enum objects are considered equal
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,587, if they have the same class names and the same names.
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,588," Identity is tested for first, so this method usually runs fast.</p>"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,590," <p>If the parameter is in a different class loader than this instance,"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,591, reflection is used to compare the names.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,593, @param other  the other object to compare for equality
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,594, @return <code>true</code> if the Enums are equal
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,596,ublic final boolean equals(Object other) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,597,f (other == this) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,598,eturn true;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,599, else if (other == null) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,600,eturn false;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,601, else if (other.getClass() == this.getClass()) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,602,/ Ok to do a class cast to Enum here since the test above
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,603,/ guarantee both
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,604,/ classes are in the same class loader.
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,605,eturn iName.equals(((Enum) other).iName);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,606, else {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,607,"/ This and other are in different class loaders, we must check indirectly"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,608,f (other.getClass().getName().equals(this.getClass().getName()) == false) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,609,eturn false;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,611,eturn iName.equals( getNameInOtherClassLoader(other) );
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,616, <p>Returns a suitable hashCode for the enumeration.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,618, @return a hashcode based on the name
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,620,ublic final int hashCode() {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,621,eturn iHashCode;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,625, <p>Tests for order.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,627," <p>The default ordering is alphabetic by name, but this"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,628, can be overridden by subclasses.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,630," <p>If the parameter is in a different class loader than this instance,"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,631, reflection is used to compare the names.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,633, @see java.lang.Comparable#compareTo(Object)
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,634, @param other  the other object to compare to
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,635," @return -ve if this is less than the other object, +ve if greater"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,636,"  than, <code>0</code> of equal"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,637, @throws ClassCastException if other is not an Enum
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,638, @throws NullPointerException if other is <code>null</code>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,640,ublic int compareTo(Object other) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,641,f (other == this) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,642,eturn 0;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,644,f (other.getClass() != this.getClass()) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,645,f (other.getClass().getName().equals(this.getClass().getName())) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,646,eturn iName.compareTo( getNameInOtherClassLoader(other) );
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,648,hrow new ClassCastException(
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,649,"Different enum class '"" + ClassUtils.getShortClassName(other.getClass()) + ""'"");"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,651,eturn iName.compareTo(((Enum) other).iName);
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,655, <p>Use reflection to return an objects class name.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,657, @param other The object to determine the class name for
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,658, @return The class name
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,660,rivate String getNameInOtherClassLoader(Object other) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,661,ry {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,662,"ethod mth = other.getClass().getMethod(""getName"", null);"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,663,"tring name = (String) mth.invoke(other, null);"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,664,eturn name;
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,665, catch (NoSuchMethodException e) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,666,/ ignore - should never happen
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,667, catch (IllegalAccessException e) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,668,/ ignore - should never happen
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,669, catch (InvocationTargetException e) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,670,/ ignore - should never happen
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,672,"hrow new IllegalStateException(""This should not happen"");"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,676, <p>Human readable description of this Enum item.</p>
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,678," @return String in the form <code>type[name]</code>, for example:"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,679, <code>Color[Red]</code>. Note that the package name is stripped from
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,680, the type name.
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,682,ublic String toString() {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,683,f (iToString == null) {
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,684,tring shortName = ClassUtils.getShortClassName(getEnumClass());
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,685,"ToString = shortName + ""["" + getName() + ""]"";"
False,src/java/org/apache/commons/lang/enums/Enum.java,src/java/org/apache/commons/lang/enums/Enum.java,687,eturn iToString;
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,15, limitations under the License.
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,17,ackage org.apache.commons.lang.enums;
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,19,mport java.util.Iterator;
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,20,mport java.util.List;
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,21,mport java.util.Map;
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,24, <p>Utility class for accessing and manipulating {@link Enum}s.</p>
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,26, @see Enum
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,27, @see ValuedEnum
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,28, @author Stephen Colebourne
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,29, @author Gary Gregory
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,30, @since 2.1 (class existed in enum package from v1.0)
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,31, @version $Id$
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,33,ublic class EnumUtils {
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,36, Public constructor. This class should not normally be instantiated.
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,37, @since 2.0
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,39,ublic EnumUtils() {
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,40,uper();
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,44, <p>Gets an <code>Enum</code> object by class and name.</p>
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,46, @param enumClass  the class of the <code>Enum</code> to get
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,47," @param name  the name of the Enum to get, may be <code>null</code>"
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,48, @return the enum object
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,49, @throws IllegalArgumentException if the enum class is <code>null</code>
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,51,"ublic static Enum getEnum(Class enumClass, String name) {"
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,52,"eturn Enum.getEnum(enumClass, name);"
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,56, <p>Gets a <code>ValuedEnum</code> object by class and value.</p>
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,58, @param enumClass  the class of the <code>Enum</code> to get
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,59, @param value  the value of the <code>Enum</code> to get
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,60," @return the enum object, or null if the enum does not exist"
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,61, @throws IllegalArgumentException if the enum class is <code>null</code>
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,63,"ublic static ValuedEnum getEnum(Class enumClass, int value) {"
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,64,"eturn (ValuedEnum) ValuedEnum.getEnum(enumClass, value);"
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,68, <p>Gets the <code>Map</code> of <code>Enum</code> objects by
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,69, name using the <code>Enum</code> class.</p>
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,71, <p>If the requested class has no enum objects an empty
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,72, <code>Map</code> is returned. The <code>Map</code> is unmodifiable.</p>
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,74, @param enumClass  the class of the <code>Enum</code> to get
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,75, @return the enum object Map
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,76, @throws IllegalArgumentException if the enum class is <code>null</code>
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,77, @throws IllegalArgumentException if the enum class is not a subclass
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,78,  of <code>Enum</code>
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,80,ublic static Map getEnumMap(Class enumClass) {
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,81,eturn Enum.getEnumMap(enumClass);
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,85, <p>Gets the <code>List</code> of <code>Enum</code> objects using
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,86, the <code>Enum</code> class.</p>
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,88, <p>The list is in the order that the objects were created
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,89, (source code order).</p>
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,91, <p>If the requested class has no enum objects an empty
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,92, <code>List</code> is returned. The <code>List</code> is unmodifiable.</p>
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,94, @param enumClass  the class of the Enum to get
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,95, @return the enum object Map
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,96, @throws IllegalArgumentException if the enum class is <code>null</code>
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,97, @throws IllegalArgumentException if the enum class is not a subclass
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,98,  of <code>Enum</code>
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,100,ublic static List getEnumList(Class enumClass) {
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,101,eturn Enum.getEnumList(enumClass);
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,105, <p>Gets an <code>Iterator</code> over the <code>Enum</code> objects
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,106, in an <code>Enum</code> class.</p>
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,108, <p>The iterator is in the order that the objects were created
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,109, (source code order).</p>
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,111, <p>If the requested class has no enum objects an empty
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,112, <code>Iterator</code> is returned. The <code>Iterator</code>
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,113, is unmodifiable.</p>
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,115, @param enumClass  the class of the <code>Enum</code> to get
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,116, @return an <code>Iterator</code> of the <code>Enum</code> objects
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,117, @throws IllegalArgumentException if the enum class is <code>null</code>
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,118, @throws IllegalArgumentException if the enum class is not a subclass of <code>Enum</code>
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,120,ublic static Iterator iterator(Class enumClass) {
False,src/java/org/apache/commons/lang/enums/EnumUtils.java,src/java/org/apache/commons/lang/enums/EnumUtils.java,121,eturn Enum.getEnumList(enumClass).iterator();
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,15, limitations under the License.
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,17,ackage org.apache.commons.lang.enums;
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,19,mport java.lang.reflect.InvocationTargetException;
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,20,mport java.lang.reflect.Method;
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,21,mport java.util.Iterator;
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,22,mport java.util.List;
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,24,mport org.apache.commons.lang.ClassUtils;
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,27, <p>Abstract superclass for type-safe enums with integer values suitable
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,28, for use in <code>switch</code> statements.</p>
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,30," <p><em>NOTE:</em>Due to the way in which Java ClassLoaders work, comparing"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,31," <code>Enum</code> objects should always be done using the equals() method,"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,32, not <code>==</code>. The equals() method will try <code>==</code> first so
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,33, in most cases the effect is the same.</p>
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,35," <p>To use this class, it must be subclassed. For example:</p>"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,37, <pre>
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,38, public final class JavaVersionEnum extends ValuedEnum {
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,39,   //standard enums for version of JVM
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,40,   public static final int  JAVA1_0_VALUE  = 100;
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,41,   public static final int  JAVA1_1_VALUE  = 110;
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,42,   public static final int  JAVA1_2_VALUE  = 120;
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,43,   public static final int  JAVA1_3_VALUE  = 130;
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,44,"   public static final JavaVersionEnum  JAVA1_0  = new JavaVersionEnum( ""Java 1.0"", JAVA1_0_VALUE );"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,45,"   public static final JavaVersionEnum  JAVA1_1  = new JavaVersionEnum( ""Java 1.1"", JAVA1_1_VALUE );"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,46,"   public static final JavaVersionEnum  JAVA1_2  = new JavaVersionEnum( ""Java 1.2"", JAVA1_2_VALUE );"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,47,"   public static final JavaVersionEnum  JAVA1_3  = new JavaVersionEnum( ""Java 1.3"", JAVA1_3_VALUE );"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,49,"   private JavaVersionEnum(String name, int value) {"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,50,"     super( name, value );"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,53,   public static JavaVersionEnum getEnum(String javaVersion) {
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,54,"     return (JavaVersionEnum) getEnum(JavaVersionEnum.class, javaVersion);"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,57,   public static JavaVersionEnum getEnum(int javaVersion) {
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,58,"     return (JavaVersionEnum) getEnum(JavaVersionEnum.class, javaVersion);"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,61,   public static Map getEnumMap() {
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,62,     return getEnumMap(JavaVersionEnum.class);
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,65,   public static List getEnumList() {
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,66,     return getEnumList(JavaVersionEnum.class);
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,69,   public static Iterator iterator() {
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,70,     return iterator(JavaVersionEnum.class);
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,73, </pre>
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,75," <p><em>NOTE:</em>These are declared <code>final</code>, so compilers may"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,76, inline the code. Ensure you recompile everything when using final. </p>
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,78, <p>The above class could then be used as follows:</p>
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,80, <pre>
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,81, public void doSomething(JavaVersionEnum ver) {
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,82,   switch (ver.getValue()) {
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,83,     case JAVA1_0_VALUE:
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,85,       break;
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,86,     case JAVA1_1_VALUE:
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,88,       break;
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,92, </pre>
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,94," <p>As shown, each enum has a name and a value. These can be accessed using"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,95, <code>getName</code> and <code>getValue</code>.</p>
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,97, <p><em>NOTE:</em> Because the switch is ultimately sitting on top of an
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,98," int, the example above is not type-safe. That is, there is nothing that"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,99, checks that JAVA1_0_VALUE is a legal constant for JavaVersionEnum. </p>
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,101, <p>The <code>getEnum</code> and <code>iterator</code> methods are recommended.
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,102," Unfortunately, Java restrictions require these to be coded as shown in each subclass."
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,103, An alternative choice is to use the {@link EnumUtils} class.</p>
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,105, @author Apache Avalon project
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,106, @author Stephen Colebourne
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,107, @since 2.1 (class existed in enum package from v1.0)
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,108, @version $Id$
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,110,ublic abstract class ValuedEnum extends Enum {
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,113, Required for serialization support.
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,115, @see java.io.Serializable
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,117,rivate static final long serialVersionUID = -7129650521543789085L;
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,120, The value contained in enum.
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,122,rivate final int iValue;
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,125, Constructor for enum item.
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,127, @param name  the name of enum item
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,128, @param value  the value of enum item
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,130,"rotected ValuedEnum(String name, int value) {"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,131,uper(name);
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,132,Value = value;
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,136, <p>Gets an <code>Enum</code> object by class and value.</p>
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,138," <p>This method loops through the list of <code>Enum</code>,"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,139, thus if there are many <code>Enum</code>s this will be
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,140, slow.</p>
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,142, @param enumClass  the class of the <code>Enum</code> to get
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,143, @param value  the value of the <code>Enum</code> to get
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,144," @return the enum object, or null if the enum does not exist"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,145, @throws IllegalArgumentException if the enum class is <code>null</code>
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,147,"rotected static Enum getEnum(Class enumClass, int value) {"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,148,f (enumClass == null) {
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,149,"hrow new IllegalArgumentException(""The Enum Class must not be null"");"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,151,ist list = Enum.getEnumList(enumClass);
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,152,or (Iterator it = list.iterator(); it.hasNext();) {
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,153,aluedEnum enumeration = (ValuedEnum) it.next();
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,154,f (enumeration.getValue() == value) {
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,155,eturn enumeration;
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,158,eturn null;
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,162, <p>Get value of enum item.</p>
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,164, @return the enum item's value.
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,166,ublic final int getValue() {
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,167,eturn iValue;
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,171, <p>Tests for order.</p>
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,173," <p>The default ordering is numeric by value, but this"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,174, can be overridden by subclasses.</p>
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,176, <p>NOTE: From v2.2 the enums must be of the same type.
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,177," If the parameter is in a different class loader than this instance,"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,178, reflection is used to compare the values.</p>
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,180, @see java.lang.Comparable#compareTo(Object)
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,181, @param other  the other object to compare to
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,182," @return -ve if this is less than the other object, +ve if greater than,"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,183,  <code>0</code> of equal
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,184, @throws ClassCastException if other is not an <code>Enum</code>
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,185, @throws NullPointerException if other is <code>null</code>
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,187,ublic int compareTo(Object other) {
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,188,f (other == this) {
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,189,eturn 0;
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,191,f (other.getClass() != this.getClass()) {
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,192,f (other.getClass().getName().equals(this.getClass().getName())) {
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,193,eturn iValue - getValueInOtherClassLoader(other);
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,195,hrow new ClassCastException(
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,196,"Different enum class '"" + ClassUtils.getShortClassName(other.getClass()) + ""'"");"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,198,eturn iValue - ((ValuedEnum) other).iValue;
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,202, <p>Use reflection to return an objects value.</p>
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,204, @param other  the object to determine the value for
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,205, @return the value
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,207,rivate int getValueInOtherClassLoader(Object other) {
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,208,ry {
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,209,"ethod mth = other.getClass().getMethod(""getValue"", null);"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,210,"nteger value = (Integer) mth.invoke(other, null);"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,211,eturn value.intValue();
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,212, catch (NoSuchMethodException e) {
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,213,/ ignore - should never happen
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,214, catch (IllegalAccessException e) {
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,215,/ ignore - should never happen
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,216, catch (InvocationTargetException e) {
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,217,/ ignore - should never happen
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,219,"hrow new IllegalStateException(""This should not happen"");"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,223, <p>Human readable description of this <code>Enum</code> item.</p>
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,225," @return String in the form <code>type[name=value]</code>, for example:"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,226,  <code>JavaVersion[Java 1.0=100]</code>. Note that the package name is
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,227,  stripped from the type name.
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,229,ublic String toString() {
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,230,f (iToString == null) {
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,231,tring shortName = ClassUtils.getShortClassName(getEnumClass());
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,232,"ToString = shortName + ""["" + getName() + ""="" + getValue() + ""]"";"
False,src/java/org/apache/commons/lang/enums/ValuedEnum.java,src/java/org/apache/commons/lang/enums/ValuedEnum.java,234,eturn iToString;

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,25,import java.text.SimpleDateFormat;
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,59,* <p>Note that the code only handles Gregorian calendars. The following non-Gregorian
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,60,"* calendars use SimpleDateFormat internally, and so will be slower:"
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,61,* <ul>
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,62,* <li>ja_JP_TH - Japanese Imperial</li>
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,63,* <li>th_TH (any variant) - Thai Buddhist</li>
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,64,* </ul>
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,65,* </p>
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,126,String localeName = locale.toString();
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,127,// These locales don't use the Gregorian calendar
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,128,// See http://docs.oracle.com/javase/6/docs/technotes/guides/intl/calendar.doc.html
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,129,"if (localeName.equals(""ja_JP_JP"") || localeName.startsWith(""th_TH"")) {"
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,130,collector.add(new SimpleDateFormatStrategy());
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,131,strategies= collector.toArray(new Strategy[collector.size()]);
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,132,"parsePattern= Pattern.compile(""(.*+)"");"
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,133,return;
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,820,* Dummy strategy which delegates to SimpleDateFormat.
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,822,private static class SimpleDateFormatStrategy implements Strategy {
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,824,@Override
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,825,public boolean isNumber() {
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,826,return false;
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,829,@Override
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,830,"public void setCalendar(FastDateParser parser, Calendar cal, String value) {"
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,831,String pat = parser.pattern;
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,832,Locale loc = parser.locale;
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,833,"SimpleDateFormat sdf = new SimpleDateFormat(pat, loc);"
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,834,try {
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,835,Date d = sdf.parse(value);
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,836,cal.setTime(d);
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,837,} catch (ParseException e) {
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,838,throw new IllegalArgumentException(
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,839,"""Unexpected error using pattern "" + pat + "" with locale "" + loc.toString(), e);"
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,843,@Override
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,844,"public boolean addRegex(FastDateParser parser, StringBuilder regex) {"
True,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,src/main/java/org/apache/commons/lang3/time/FastDateParser.java,845,return false;
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,33,import junit.framework.Assert;
False,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,194,alendar cal = Calendar.getInstance(tz);
False,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,195,al.clear();
False,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,196,"al.set(2003, 1, 10);"
False,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,197,ate in = cal.getTime();
False,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,198,"or(String format : new String[]{LONG_FORMAT, SHORT_FORMAT}) {"
False,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,199,"impleDateFormat sdf = new SimpleDateFormat(LONG_FORMAT, locale);"
False,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,200,tring fmt = sdf.format(in);
False,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,201,ate out = sdf.parse(fmt);
False,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,202,"ssertEquals(locale.toString()+"" ""+ format+ "" ""+tz.getID(), in, out);"
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,195,Calendar cal = Calendar.getInstance(tz);
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,196,"for(int year : new int[]{2003, 1940, 1868, 1867, 0, -1940}) {"
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,197,// http://docs.oracle.com/javase/6/docs/technotes/guides/intl/calendar.doc.html
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,198,"if (year < 1868 && locale.toString().equals(""ja_JP_JP"")) {"
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,199,continue; // Japanese imperial calendar does not support eras before 1868
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,201,cal.clear();
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,202,if (year < 0) {
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,203,"cal.set(-year, 1, 10);"
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,204,"cal.set(Calendar.ERA, GregorianCalendar.BC);"
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,205,} else {
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,206,"cal.set(year, 1, 10);"
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,208,Date in = cal.getTime();
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,209,"for(String format : new String[]{LONG_FORMAT, SHORT_FORMAT}) {"
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,210,"SimpleDateFormat sdf = new SimpleDateFormat(format, locale);"
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,211,if (format.equals(SHORT_FORMAT)) {
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,212,if (year < 1930) {
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,213,sdf.set2DigitYearStart(cal.getTime());
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,216,String fmt = sdf.format(in);
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,217,try {
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,218,Date out = sdf.parse(fmt);
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,220,"assertEquals(locale.toString()+"" ""+year+"" ""+ format+ "" ""+tz.getID(), in, out);"
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,221,} catch (ParseException pe) {
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,222,"System.out.println(fmt+"" ""+locale.toString()+"" ""+year+"" ""+ format+ "" ""+tz.getID());"
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,223,throw pe;
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,279,boolean failed = false;
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,281,// ja_JP_JP cannot handle dates before 1868 properly
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,282,"if (eraBC && format.equals(SHORT_FORMAT) && locale.toString().equals(""ja_JP_JP"")) {"
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,283,continue;
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,291,failed = true;
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,298,if (failed) {
True,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,299,"Assert.fail(""One or more tests failed, see above"");"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,17,package org.apache.commons.lang3.concurrent;
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,20,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,21,* An exception class used for reporting runtime error conditions related to
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,22,* accessing data of background tasks.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,23,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,24,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,25,* This class is an analogon of the {@link ConcurrentException} exception class.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,26,"* However, it is a runtime exception and thus does not need explicit catch"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,27,* clauses. Some methods of {@link ConcurrentUtils} throw {@code
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,28,* ConcurrentRuntimeException} exceptions rather than
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,29,* {@link ConcurrentException} exceptions. They can be used by client code that
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,30,* does not want to be bothered with checked exceptions.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,31,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,33,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,34,* @version $Id$
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,36,public class ConcurrentRuntimeException extends RuntimeException {
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,38,* The serial version UID.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,40,private static final long serialVersionUID = -6582182735562919670L;
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,43,"* Creates a new, uninitialized instance of {@code"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,44,* ConcurrentRuntimeException}.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,46,protected ConcurrentRuntimeException() {
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,47,super();
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,51,* Creates a new instance of {@code ConcurrentRuntimeException} and
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,52,* initializes it with the given cause.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,54,* @param cause the cause of this exception
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,55,* @throws IllegalArgumentException if the cause is not a checked exception
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,57,public ConcurrentRuntimeException(Throwable cause) {
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,58,super(ConcurrentUtils.checkedException(cause));
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,62,* Creates a new instance of {@code ConcurrentRuntimeException} and
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,63,* initializes it with the given message and cause.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,65,* @param msg the error message
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,66,* @param cause the cause of this exception
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,67,* @throws IllegalArgumentException if the cause is not a checked exception
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,69,"public ConcurrentRuntimeException(String msg, Throwable cause) {"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java,70,"super(msg, ConcurrentUtils.checkedException(cause));"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,69,* Inspects the cause of the specified {@code ExecutionException} and
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,70,* creates a {@code ConcurrentRuntimeException} with the checked cause if
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,71,* necessary. This method works exactly like
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,72,* {@link #extractCause(ExecutionException)}. The only difference is that
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,73,* the cause of the specified {@code ExecutionException} is extracted as a
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,74,* runtime exception. This is an alternative for client code that does not
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,75,* want to deal with checked exceptions.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,77,* @param ex the exception to be processed
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,78,* @return a {@code ConcurrentRuntimeException} with the checked cause
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,80,public static ConcurrentRuntimeException extractCauseUnchecked(
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,81,ExecutionException ex) {
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,82,if (ex == null || ex.getCause() == null) {
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,83,return null;
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,86,throwCause(ex);
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,87,"return new ConcurrentRuntimeException(ex.getMessage(), ex.getCause());"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,113,* Handles the specified {@code ExecutionException} and transforms it into a
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,114,* runtime exception. This method works exactly like
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,115,"* {@link #handleCause(ExecutionException)}, but instead of a"
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,116,* {@link ConcurrentException} it throws a
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,117,* {@link ConcurrentRuntimeException}. This is an alternative for client
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,118,* code that does not want to deal with checked exceptions.
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,120,* @param ex the exception to be handled
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,121,* @throws ConcurrentRuntimeException if the cause of the {@code
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,122,* ExecutionException} is a checked exception; this exception is then
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,123,* wrapped in the thrown runtime exception
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,125,public static void handleCauseUnchecked(ExecutionException ex) {
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,126,ConcurrentRuntimeException crex = extractCauseUnchecked(ex);
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,128,if (crex != null) {
True,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java,129,throw crex;
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,61,* Tries to create a ConcurrentRuntimeException with a runtime as cause.
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,63,@Test(expected = IllegalArgumentException.class)
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,64,public void testConcurrentRuntimeExceptionCauseUnchecked() {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,65,new ConcurrentRuntimeException(new RuntimeException());
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,69,* Tries to create a ConcurrentRuntimeException with an error as cause.
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,71,@Test(expected = IllegalArgumentException.class)
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,72,public void testConcurrentRuntimeExceptionCauseError() {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,73,"new ConcurrentRuntimeException(""An error"", new Error());"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,77,* Tries to create a ConcurrentRuntimeException with null as cause.
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,79,@Test(expected = IllegalArgumentException.class)
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,80,public void testConcurrentRuntimeExceptionCauseNull() {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,81,new ConcurrentRuntimeException(null);
False,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,95,ublic void testExtractCauseUnchecked() {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,119,public void testExtractCauseUncheckedException() {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,141,* Tests extractCauseUnchecked() for a null exception.
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,143,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,144,public void testExtractCauseUncheckedNull() {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,145,"assertNull(""Non null result"", ConcurrentUtils.extractCauseUnchecked(null));"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,149,* Tests extractCauseUnchecked() if the cause of the passed in exception is null.
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,151,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,152,public void testExtractCauseUncheckedNullCause() {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,153,"assertNull(""Non null result"", ConcurrentUtils"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,154,".extractCauseUnchecked(new ExecutionException(""Test"", null)));"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,158,* Tests extractCauseUnchecked() if the cause is an error.
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,160,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,161,public void testExtractCauseUncheckedError() {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,162,"Error err = new AssertionError(""Test"");"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,163,try {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,164,ConcurrentUtils.extractCauseUnchecked(new ExecutionException(err));
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,165,"fail(""Error not thrown!"");"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,166,} catch (Error e) {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,167,"assertEquals(""Wrong error"", err, e);"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,172,* Tests extractCauseUnchecked() if the cause is an unchecked exception.
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,174,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,175,public void testExtractCauseUncheckedUncheckedException() {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,176,"RuntimeException rex = new RuntimeException(""Test"");"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,177,try {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,178,ConcurrentUtils.extractCauseUnchecked(new ExecutionException(rex));
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,179,"fail(""Runtime exception not thrown!"");"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,180,} catch (RuntimeException r) {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,181,"assertEquals(""Wrong exception"", rex, r);"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,186,* Tests extractCauseUnchecked() if the cause is a checked exception.
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,188,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,189,public void testExtractCauseUncheckedChecked() {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,190,"Exception ex = new Exception(""Test"");"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,191,ConcurrentRuntimeException cex = ConcurrentUtils
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,192,.extractCauseUnchecked(new ExecutionException(ex));
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,193,"assertSame(""Wrong cause"", ex, cex.getCause());"
False,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,134,ublic void testHandleCauseUnchecked() throws ConcurrentException {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,214,public void testHandleCauseUncheckedException() throws ConcurrentException {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,250,* Tests handleCauseUnchecked() if the cause is an error.
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,252,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,253,public void testHandleCauseUncheckedError() throws ConcurrentException {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,254,"Error err = new AssertionError(""Test"");"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,255,try {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,256,ConcurrentUtils.handleCauseUnchecked(new ExecutionException(err));
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,257,"fail(""Error not thrown!"");"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,258,} catch (Error e) {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,259,"assertEquals(""Wrong error"", err, e);"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,264,* Tests handleCauseUnchecked() if the cause is an unchecked exception.
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,266,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,267,public void testHandleCauseUncheckedUncheckedException()
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,268,throws ConcurrentException {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,269,"RuntimeException rex = new RuntimeException(""Test"");"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,270,try {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,271,ConcurrentUtils.handleCauseUnchecked(new ExecutionException(rex));
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,272,"fail(""Runtime exception not thrown!"");"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,273,} catch (RuntimeException r) {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,274,"assertEquals(""Wrong exception"", rex, r);"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,279,* Tests handleCauseUnchecked() if the cause is a checked exception.
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,281,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,282,public void testHandleCauseUncheckedChecked() {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,283,"Exception ex = new Exception(""Test"");"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,284,try {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,285,ConcurrentUtils.handleCauseUnchecked(new ExecutionException(ex));
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,286,"fail(""ConcurrentRuntimeException not thrown!"");"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,287,} catch (ConcurrentRuntimeException crex) {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,288,"assertEquals(""Wrong cause"", ex, crex.getCause());"
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,293,* Tests handleCauseUnchecked() for a null parameter or a null cause. In
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,294,* this case the method should do nothing. We can only test that no
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,295,* exception is thrown.
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,297,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,298,public void testHandleCauseUncheckedNull() throws ConcurrentException {
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,299,ConcurrentUtils.handleCauseUnchecked(null);
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,300,"ConcurrentUtils.handleCauseUnchecked(new ExecutionException(""Test"","
True,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java,301,null));

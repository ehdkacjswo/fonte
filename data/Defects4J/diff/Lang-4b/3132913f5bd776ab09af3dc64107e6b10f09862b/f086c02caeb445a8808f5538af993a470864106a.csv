is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,375,* Calculate the intersection of {@code this} and an overlapping Range.
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,376,* @param other overlapping Range
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,377,* @return range representing the intersection of {@code this} and {@code other} ({@code this} if equal)
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,378,* @throws IllegalArgumentException if {@code other} does not overlap {@code this}
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,379,* @since 3.0.1
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,381,public Range<T> intersectionWith(Range<T> other) {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,382,if (!this.isOverlappedBy(other)) {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,383,throw new IllegalArgumentException(String.format(
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,384,"""Cannot calculate intersection with non-overlapping range %s"", other));"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,386,if (this.equals(other)) {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,387,return this;
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,389,"T min = getComparator().compare(minimum, other.minimum) < 0 ? other.minimum : minimum;"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,390,"T max = getComparator().compare(maximum, other.maximum) < 0 ? maximum : other.maximum;"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,391,"return between(min, max, getComparator());"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,345,@Test
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,346,public void testIntersectionWith() {
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,347,"assertSame(intRange, intRange.intersectionWith(intRange));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,348,"assertSame(byteRange, byteRange.intersectionWith(byteRange));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,349,"assertSame(longRange, longRange.intersectionWith(longRange));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,350,"assertSame(floatRange, floatRange.intersectionWith(floatRange));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,351,"assertSame(doubleRange, doubleRange.intersectionWith(doubleRange));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,353,"assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,356,@Test(expected = IllegalArgumentException.class)
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,357,public void testIntersectionWithNull() {
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,358,intRange.intersectionWith(null);
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,361,@Test(expected = IllegalArgumentException.class)
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,362,public void testIntersectionWithNonOverlapping() {
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,363,"intRange.intersectionWith(Range.between(0, 9));"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,15,* limitations under the License.
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,17,package org.apache.commons.lang;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,19,import java.util.Comparator;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,22,* <p><code>Range</code> represents a range of numbers of the same type.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,24,* @author Apache Software Foundation
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,25,* @since 3.0
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,26,* @version $Id: Range.java 830032 2009-10-27 00:15:00Z scolebourne $
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,28,// TODO: Serializable?
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,29,public class Range<T> {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,31,private final Comparator comparator;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,32,private final T minimum;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,33,private final T maximum;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,36,* <p>Constructs a new <code>Range</code> using the specified
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,37,* element as both the minimum and maximum in this range.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,38,* <p>The range uses the natural ordering of the elements to
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,39,* determine where values lie in the range.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,41,"* @param element  the value to use for this range, must not be <code>null</code>"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,42,* @throws IllegalArgumentException if the value is <code>null</code>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,44,// TODO: Ideally this would only support <T extends Comparable<? super T>>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,45,public Range(T element) {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,46,"this(element, element);"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,50,* <p>Constructs a new <code>Range</code> with the specified
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,51,* minimum and maximum values (both inclusive).</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,52,* <p>The range uses the natural ordering of the elements to
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,53,* determine where values lie in the range.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,55,"* <p>The arguments may be passed in the order (min,max) or (max,min). The"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,56,* getMinimum and getMaximum methods will return the correct values.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,58,"* @param element1  first value that defines the edge of the range, inclusive"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,59,"* @param element2  second value that defines the edge of the range, inclusive"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,60,* @throws IllegalArgumentException if either value is <code>null</code>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,62,// TODO: Ideally this would only support <T extends Comparable<? super T>>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,63,"public Range(T element1, T element2) {"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,64,"this(element1, element2, ComparableComparator.INSTANCE);"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,68,* <p>Constructs a new <code>Range</code> using the specified
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,69,* element as both the minimum and maximum in this range.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,70,* <p>The range uses the passed in <code>Comparator</code> to
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,71,* determine where values lie in the range.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,73,"* @param element  the value to use for this range, must not be <code>null</code>"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,74,* @throws IllegalArgumentException if the value is <code>null</code>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,76,"public Range(T element, Comparator c) {"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,77,"this(element, element, c);"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,81,* <p>Constructs a new <code>Range</code> with the specified
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,82,* minimum and maximum values (both inclusive).</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,83,* <p>The range uses the passed in <code>Comparator</code> to
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,84,* determine where values lie in the range.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,86,"* <p>The arguments may be passed in the order (min,max) or (max,min). The"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,87,* getMinimum and getMaximum methods will return the correct values.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,89,"* @param element1  first value that defines the edge of the range, inclusive"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,90,"* @param element2  second value that defines the edge of the range, inclusive"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,91,* @throws IllegalArgumentException if either value is <code>null</code>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,93,"public Range(T element1, T element2, Comparator c) {"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,94,if(element1 == null || element2 == null) {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,95,"throw new IllegalArgumentException(""Elements in a range must not be null: element1="" +"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,96,"element1 + "", element2="" + element2);"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,99,if(c == null) {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,100,"throw new IllegalArgumentException(""Comparator must not be null"");"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,103,"if(c.compare(element1, element2) < 1) {"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,104,this.minimum = element1;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,105,this.maximum = element2;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,106,} else {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,107,this.minimum = element2;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,108,this.maximum = element1;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,110,this.comparator = c;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,113,// Accessors
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,117,* <p>Gets the minimum value in this range.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,119,* @return the minimum value in this range
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,121,public T getMinimum() {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,122,return this.minimum;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,126,* <p>Gets the maximum value in this range.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,128,* @return the maximum value in this range
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,130,public T getMaximum() {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,131,return this.maximum;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,135,* <p>Gets the comparator being used to determine if objects are within the range. </p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,137,* @return the comparator being used
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,139,public Comparator getComparator() {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,140,return this.comparator;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,144,* <p>Whether or not the Range is using the default natural comparison method
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,145,* to compare elements. </p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,147,* @return whether or not the default Comparator is in use
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,149,public boolean isDefaultNaturalOrdering() {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,150,return this.comparator == ComparableComparator.INSTANCE;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,153,// Include tests
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,157,* <p>Tests whether the specified <code>Number</code> occurs within
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,158,* this range.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,160,* <p>The exact comparison implementation varies by subclass. It is
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,161,* intended that an <code>int</code> specific subclass will compare using
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,162,* <code>int</code> comparison.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,164,* <p><code>null</code> is handled and returns <code>false</code>.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,166,"* @param number  the number to test, may be <code>null</code>"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,167,* @return <code>true</code> if the specified number occurs within this range
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,168,* @throws IllegalArgumentException if the <code>Number</code> cannot be compared
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,170,public boolean contains(T t) {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,171,// TODO: Rewrite in terms of !lessThan and !greaterThan?
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,172,"return (comparator.compare(t, getMinimum()) > -1) && (comparator.compare(t, getMaximum()) < 1);"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,175,public boolean lessThan(T element) {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,176,if (element == null) {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,177,return false;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,180,"return this.comparator.compare(this.getMinimum(), element) < 1;"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,183,public boolean greaterThan(T element) {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,184,if (element == null) {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,185,return false;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,188,"return this.comparator.compare(getMaximum(), element) > -1;"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,191,// Range tests
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,195,* <p>Tests whether the specified range occurs entirely within this range.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,197,* <p>The exact comparison implementation varies by subclass. It is
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,198,* intended that an <code>int</code> specific subclass will compare using
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,199,* <code>int</code> comparison.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,201,* <p><code>null</code> is handled and returns <code>false</code>.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,203,* <p>This implementation uses the {@link #containsNumber(Number)} method.
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,204,* Subclasses may be able to optimise this.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,206,"* @param range  the range to test, may be <code>null</code>"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,207,* @return <code>true</code> if the specified range occurs entirely within
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,208,"*  this range; otherwise, <code>false</code>"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,209,* @throws IllegalArgumentException if the <code>Range</code> cannot be compared
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,211,public boolean containsRange(Range<T> range) {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,212,if (range == null) {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,213,return false;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,215,return contains(range.getMinimum())
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,216,&& contains(range.getMaximum());
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,220,* <p>Tests whether the specified range overlaps with this range.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,222,* <p>The exact comparison implementation varies by subclass. It is
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,223,* intended that an <code>int</code> specific subclass will compare using
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,224,* <code>int</code> comparison.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,226,* <p><code>null</code> is handled and returns <code>false</code>.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,228,* <p>This implementation uses the {@link #containsNumber(Number)} and
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,229,* {@link #containsRange(Range)} methods.
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,230,* Subclasses may be able to optimise this.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,232,"* @param range  the range to test, may be <code>null</code>"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,233,* @return <code>true</code> if the specified range overlaps with this
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,234,"*  range; otherwise, <code>false</code>"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,235,* @throws IllegalArgumentException if the <code>Range</code> cannot be compared
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,237,public boolean overlapsRange(Range<T> range) {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,238,if (range == null) {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,239,return false;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,241,return range.contains(getMinimum())
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,242,|| range.contains(getMaximum())
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,243,|| contains(range.getMinimum());
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,246,// Basics
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,250,* <p>Compares this range to another object to test if they are equal.</p>.
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,252,"* <p>To be equal, the class, minimum and maximum must be equal.</p>"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,254,* <p>This implementation uses the {@link #getMinimumNumber()} and
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,255,* {@link #getMaximumNumber()} methods.
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,256,* Subclasses may be able to optimise this.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,258,* @param obj the reference object with which to compare
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,259,* @return <code>true</code> if this object is equal
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,261,@Override
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,262,public boolean equals(Object obj) {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,263,if (obj == this) {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,264,return true;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,265,} else if (obj == null || obj.getClass() != getClass()) {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,266,return false;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,267,} else {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,268,Range range = (Range) obj;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,269,return getMinimum().equals(range.getMinimum()) &&
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,270,getMaximum().equals(range.getMaximum());
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,275,* <p>Gets a hashCode for the range.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,277,* <p>This implementation uses the {@link #getMinimumNumber()} and
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,278,* {@link #getMaximumNumber()} methods.
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,279,* Subclasses may be able to optimise this.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,281,* @return a hash code value for this object
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,283,@Override
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,284,public int hashCode() {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,285,int result = 17;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,286,result = 37 * result + getClass().hashCode();
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,287,result = 37 * result + getMinimum().hashCode();
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,288,result = 37 * result + getMaximum().hashCode();
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,289,return result;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,293,* <p>Gets the range as a <code>String</code>.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,295,"* <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,297,* <p>This implementation uses the {@link #getMinimumNumber()} and
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,298,* {@link #getMaximumNumber()} methods.
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,299,* Subclasses may be able to optimise this.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,301,* @return the <code>String</code> representation of this range
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,303,@Override
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,304,public String toString() {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,305,StringBuilder buf = new StringBuilder(32);
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,306,"buf.append(""Range["");"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,307,buf.append(getMinimum());
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,308,"buf.append(',');"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,309,buf.append(getMaximum());
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,310,buf.append(']');
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,311,return buf.toString();
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,315,// Taken from Commons Collections - documentation removed as not a public class
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,316,private static class ComparableComparator<E extends Comparable<? super E>> implements Comparator<E> {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,318,"@SuppressWarnings(""unchecked"")"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,319,public static final ComparableComparator<?> INSTANCE = new ComparableComparator();
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,321,"@SuppressWarnings(""unchecked"")"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,322,public static <E extends Comparable<? super E>> ComparableComparator<E> getInstance() {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,323,return (ComparableComparator<E>) INSTANCE;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,326,public ComparableComparator() {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,327,super();
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,330,"public int compare(E obj1, E obj2) {"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,331,return obj1.compareTo(obj2);
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,334,public int hashCode() {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,335,"return ""ComparableComparator"".hashCode();"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,338,public boolean equals(Object object) {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,339,return (this == object) ||
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,340,((null != object) && (object.getClass().equals(this.getClass())));
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,18,package org.apache.commons.lang;
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,20,import junit.framework.Test;
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,22,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,25,* <p>
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,26,* Tests the methods in the {@link org.apache.commons.lang.Range} class.
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,27,* </p>
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,29,* @version $Id: RangeTest.java 754804 2009-03-16 02:06:18Z sebb $
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,31,public class RangeTest extends TestCase {
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,33,private Range byteRange;
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,34,private Range byteRange2;
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,35,private Range byteRange3;
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,37,private Range<Integer> intRange;
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,38,private Range<Long> longRange;
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,39,private Range<Float> floatRange;
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,40,private Range<Double> doubleRange;
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,42,@Override
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,43,public void setUp() {
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,44,"byteRange   = new Range((byte) 0, (byte) 5);"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,45,"byteRange2  = new Range((byte) 0, (byte) 5);"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,46,"byteRange3  = new Range((byte) 0, (byte) 10);"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,48,"intRange    = new Range<Integer>((int) 10, (int) 20);"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,49,"longRange   = new Range<Long>((long) 10, (long) 20);"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,50,"floatRange  = new Range<Float>((float) 10, (float) 20);"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,51,"doubleRange = new Range<Double>((double) 10, (double) 20);"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,55,* Test method for 'org.apache.commons.lang.Range.equals(Object)'
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,57,public void testEqualsObject() {
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,58,"assertEquals(byteRange, byteRange);"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,59,"assertEquals(byteRange, byteRange2);"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,60,"assertEquals(byteRange2, byteRange2);"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,61,assertTrue(byteRange.equals(byteRange));
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,62,assertTrue(byteRange2.equals(byteRange2));
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,63,assertTrue(byteRange3.equals(byteRange3));
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,64,assertFalse(byteRange2.equals(byteRange3));
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,65,assertFalse(byteRange2.equals(null));
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,66,"assertFalse(byteRange2.equals(""Ni!""));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,70,* Test method for 'org.apache.commons.lang.Range.hashCode()'
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,72,public void testHashCode() {
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,73,"assertEquals(byteRange.hashCode(), byteRange2.hashCode());"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,74,assertFalse(byteRange.hashCode() == byteRange3.hashCode());
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,78,* Test method for 'org.apache.commons.lang.Range.toString()'
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,80,public void testToString() {
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,81,assertNotNull(byteRange.toString());
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,85,public void testGetMinimum() {
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,86,"assertEquals(10, (int) intRange.getMinimum());"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,87,"assertEquals(10L, (long) longRange.getMinimum());"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,88,"assertEquals(10f, floatRange.getMinimum(), 0.00001f);"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,89,"assertEquals(10d, doubleRange.getMinimum(), 0.00001d);"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,92,public void testGetMaximum() {
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,93,"assertEquals(20, (int) intRange.getMaximum());"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,94,"assertEquals(20L, (long) longRange.getMaximum());"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,95,"assertEquals(20f, floatRange.getMaximum(), 0.00001f);"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,96,"assertEquals(20d, doubleRange.getMaximum(), 0.00001d);"

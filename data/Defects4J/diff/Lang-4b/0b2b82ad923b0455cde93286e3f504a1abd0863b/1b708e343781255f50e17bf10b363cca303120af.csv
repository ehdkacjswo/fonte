is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/lang3/math/Fraction.java,src/main/java/org/apache/commons/lang3/math/Fraction.java,582,"/if either op. is abs 0 or 1, return 1:"
False,src/main/java/org/apache/commons/lang3/math/Fraction.java,src/main/java/org/apache/commons/lang3/math/Fraction.java,583,f (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
True,src/main/java/org/apache/commons/lang3/math/Fraction.java,src/main/java/org/apache/commons/lang3/math/Fraction.java,582,// From Commons Math:
True,src/main/java/org/apache/commons/lang3/math/Fraction.java,src/main/java/org/apache/commons/lang3/math/Fraction.java,583,if ((u == 0) || (v == 0)) {
True,src/main/java/org/apache/commons/lang3/math/Fraction.java,src/main/java/org/apache/commons/lang3/math/Fraction.java,584,if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {
True,src/main/java/org/apache/commons/lang3/math/Fraction.java,src/main/java/org/apache/commons/lang3/math/Fraction.java,585,"throw new ArithmeticException(""overflow: gcd is 2^31"");"
True,src/main/java/org/apache/commons/lang3/math/Fraction.java,src/main/java/org/apache/commons/lang3/math/Fraction.java,587,return Math.abs(u) + Math.abs(v);
True,src/main/java/org/apache/commons/lang3/math/Fraction.java,src/main/java/org/apache/commons/lang3/math/Fraction.java,589,"//if either operand is abs 1, return 1:"
True,src/main/java/org/apache/commons/lang3/math/Fraction.java,src/main/java/org/apache/commons/lang3/math/Fraction.java,590,if (Math.abs(u) == 1 || Math.abs(v) == 1) {
True,src/test/java/org/apache/commons/lang3/math/FractionTest.java,src/test/java/org/apache/commons/lang3/math/FractionTest.java,334,// LANG-662
True,src/test/java/org/apache/commons/lang3/math/FractionTest.java,src/test/java/org/apache/commons/lang3/math/FractionTest.java,335,"f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);"
True,src/test/java/org/apache/commons/lang3/math/FractionTest.java,src/test/java/org/apache/commons/lang3/math/FractionTest.java,336,"assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());"
True,src/test/java/org/apache/commons/lang3/math/FractionTest.java,src/test/java/org/apache/commons/lang3/math/FractionTest.java,337,"assertEquals(1, f.getDenominator());"
True,src/test/java/org/apache/commons/lang3/math/FractionTest.java,src/test/java/org/apache/commons/lang3/math/FractionTest.java,652,"f = Fraction.getFraction(Integer.MIN_VALUE, 2);"
True,src/test/java/org/apache/commons/lang3/math/FractionTest.java,src/test/java/org/apache/commons/lang3/math/FractionTest.java,653,result = f.reduce();
True,src/test/java/org/apache/commons/lang3/math/FractionTest.java,src/test/java/org/apache/commons/lang3/math/FractionTest.java,654,"assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());"
True,src/test/java/org/apache/commons/lang3/math/FractionTest.java,src/test/java/org/apache/commons/lang3/math/FractionTest.java,655,"assertEquals(1, result.getDenominator());"

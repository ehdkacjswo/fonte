is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,21,import java.util.Collections;
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,37,"private static final String NULL_ELEMENTS_NOT_PERMITTED = ""null elements not permitted"";"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,38,"private static final String CANNOT_STORE_S_S_VALUES_IN_S_BITS = ""Cannot store %s %s values in %s bits"";"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,39,"private static final String S_DOES_NOT_SEEM_TO_BE_AN_ENUM_TYPE = ""%s does not seem to be an Enum type"";"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,40,"private static final String ENUM_CLASS_MUST_BE_DEFINED = ""EnumClass must be defined."";"
False,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,127," @param values    the values we want to convert, not {@code null}"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,133,"* @param values    the values we want to convert, not {@code null}, neither containing {@code null}"
False,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,129, @return a long whose binary value represents the given set of enum values.
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,135,* @return a long whose value provides a binary representation of the given set of enum values.
False,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,131, @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,137,"* @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values,"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,138,*                                  or if any {@code values} {@code null}
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,140,"* @see #generateBitVectors(Class, Iterable)"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,147,"Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,154,* <p>Creates a bit vector representation of the given subset of an Enum using as many {@code long}s as needed.</p>
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,156,* <p>This generates a value that is usable by {@link EnumUtils#processBitVectors}.</p>
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,158,* <p>Use this method if you have more than 64 values in your Enum.</p>
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,160,"* @param enumClass the class of the enum we are working with, not {@code null}"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,161,"* @param values    the values we want to convert, not {@code null}, neither containing {@code null}"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,162,* @param <E>       the type of the enumeration
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,163,* @return a long[] whose values provide a binary representation of the given set of enum values
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,164,*         with least significant digits rightmost.
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,165,* @throws NullPointerException if {@code enumClass} or {@code values} is {@code null}
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,166,"* @throws IllegalArgumentException if {@code enumClass} is not an enum class, or if any {@code values} {@code null}"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,167,* @since 3.2
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,169,"public static <E extends Enum<E>> long[] generateBitVectors(Class<E> enumClass, Iterable<E> values) {"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,170,asEnum(enumClass);
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,171,Validate.notNull(values);
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,172,final EnumSet<E> condensed = EnumSet.noneOf(enumClass);
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,173,for (E constant : values) {
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,174,"Validate.isTrue(constant != null, NULL_ELEMENTS_NOT_PERMITTED);"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,175,condensed.add(constant);
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,177,final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,178,for (E value : condensed) {
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,179,result[value.ordinal() / Long.SIZE] |= 1 << (value.ordinal() % Long.SIZE);
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,181,ArrayUtils.reverse(result);
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,182,return result;
False,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,155, @return a long whose binary value represents the given set of enum values.
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,196,* @return a long whose value provides a binary representation of the given set of enum values.
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,200,"* @see #generateBitVectors(Class, Iterable)"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,208,* <p>Creates a bit vector representation of the given subset of an Enum using as many {@code long}s as needed.</p>
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,210,* <p>This generates a value that is usable by {@link EnumUtils#processBitVectors}.</p>
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,212,* <p>Use this method if you have more than 64 values in your Enum.</p>
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,214,"* @param enumClass the class of the enum we are working with, not {@code null}"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,215,"* @param values    the values we want to convert, not {@code null}, neither containing {@code null}"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,216,* @param <E>       the type of the enumeration
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,217,* @return a long[] whose values provide a binary representation of the given set of enum values
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,218,*         with least significant digits rightmost.
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,219,* @throws NullPointerException if {@code enumClass} or {@code values} is {@code null}
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,220,"* @throws IllegalArgumentException if {@code enumClass} is not an enum class, or if any {@code values} {@code null}"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,221,* @since 3.2
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,223,"public static <E extends Enum<E>> long[] generateBitVectors(Class<E> enumClass, E... values) {"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,224,asEnum(enumClass);
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,225,Validate.noNullElements(values);
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,226,final EnumSet<E> condensed = EnumSet.noneOf(enumClass);
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,227,"Collections.addAll(condensed, values);"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,228,final long[] result = new long[(enumClass.getEnumConstants().length - 1) / Long.SIZE + 1];
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,229,for (E value : condensed) {
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,230,result[value.ordinal() / Long.SIZE] |= 1 << (value.ordinal() % Long.SIZE);
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,232,ArrayUtils.reverse(result);
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,233,return result;
False,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,179,inal E[] constants = checkBitVectorable(enumClass).getEnumConstants();
False,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,180,inal EnumSet<E> results = EnumSet.noneOf(enumClass);
False,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,181,or (E constant : constants) {
False,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,182,f ((value & 1 << constant.ordinal()) != 0) {
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,250,checkBitVectorable(enumClass).getEnumConstants();
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,251,"return processBitVectors(enumClass, value);"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,255,* <p>Convert a {@code long[]} created by {@link EnumUtils#generateBitVectors} into the set of
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,256,* enum values that it represents.</p>
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,258,"* <p>If you store this value, beware any changes to the enum that would affect ordinal values.</p>"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,259,"* @param enumClass the class of the enum we are working with, not {@code null}"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,260,"* @param values     the long[] bearing the representation of a set of enum values, least significant digits rightmost, not {@code null}"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,261,* @param <E>       the type of the enumeration
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,262,* @return a set of enum values
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,263,* @throws NullPointerException if {@code enumClass} is {@code null}
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,264,* @throws IllegalArgumentException if {@code enumClass} is not an enum class
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,265,* @since 3.2
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,267,"public static <E extends Enum<E>> EnumSet<E> processBitVectors(Class<E> enumClass, long... values) {"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,268,final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,269,values = ArrayUtils.clone(Validate.notNull(values));
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,270,ArrayUtils.reverse(values);
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,271,for (E constant : enumClass.getEnumConstants()) {
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,272,int block = constant.ordinal() / Long.SIZE;
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,273,if (block < values.length && (values[block] & 1 << (constant.ordinal() % Long.SIZE)) != 0) {
False,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,199,"alidate.notNull(enumClass, ""EnumClass must be defined."");"
False,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,201,inal E[] constants = enumClass.getEnumConstants();
False,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,202,"alidate.isTrue(constants != null, ""%s does not seem to be an Enum type"", enumClass);"
False,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,203,"alidate.isTrue(constants.length <= Long.SIZE, ""Cannot store %s %s values in %s bits"", constants.length,"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,290,final E[] constants = asEnum(enumClass).getEnumConstants();
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,291,"Validate.isTrue(constants.length <= Long.SIZE, CANNOT_STORE_S_S_VALUES_IN_S_BITS, constants.length,"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,298,* Validate {@code enumClass}.
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,299,* @param <E> the type of the enumeration
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,300,* @param enumClass to check
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,301,* @return {@code enumClass}
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,302,* @throws NullPointerException if {@code enumClass} is {@code null}
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,303,* @throws IllegalArgumentException if {@code enumClass} is not an enum class
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,304,* @since 3.2
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,306,private static <E extends Enum<E>> Class<E> asEnum(Class<E> enumClass) {
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,307,"Validate.notNull(enumClass, ENUM_CLASS_MUST_BE_DEFINED);"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,308,"Validate.isTrue(enumClass.isEnum(), S_DOES_NOT_SEEM_TO_BE_AN_ENUM_TYPE, enumClass);"
True,src/main/java/org/apache/commons/lang3/EnumUtils.java,src/main/java/org/apache/commons/lang3/EnumUtils.java,309,return enumClass;
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,26,import java.util.Arrays;
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,31,import org.junit.Assert;
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,102,@Test(expected=NullPointerException.class)
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,103,public void test_generateBitVectors_nullClass() {
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,104,"EnumUtils.generateBitVectors(null, EnumSet.of(Traffic.RED));"
False,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,102,"numUtils.generateBitVector(null, (Iterable<Traffic>) null);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,109,"EnumUtils.generateBitVector(Traffic.class, (Iterable<Traffic>) null);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,112,@Test(expected=NullPointerException.class)
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,113,public void test_generateBitVectors_nullIterable() {
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,114,"EnumUtils.generateBitVectors(null, (Iterable<Traffic>) null);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,117,@Test(expected=IllegalArgumentException.class)
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,118,public void test_generateBitVector_nullElement() {
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,119,"EnumUtils.generateBitVector(Traffic.class, Arrays.asList(Traffic.RED, null));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,122,@Test(expected=IllegalArgumentException.class)
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,123,public void test_generateBitVectors_nullElement() {
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,124,"EnumUtils.generateBitVectors(Traffic.class, Arrays.asList(Traffic.RED, null));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,132,@Test(expected=NullPointerException.class)
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,133,public void test_generateBitVectors_nullClassWithArray() {
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,134,"EnumUtils.generateBitVectors(null, Traffic.RED);"
False,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,112,"numUtils.generateBitVector(null, (Traffic[]) null);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,139,"EnumUtils.generateBitVector(Traffic.class, (Traffic[]) null);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,142,@Test(expected=NullPointerException.class)
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,143,public void test_generateBitVectors_nullArray() {
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,144,"EnumUtils.generateBitVectors(Traffic.class, (Traffic[]) null);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,147,@Test(expected=IllegalArgumentException.class)
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,148,public void test_generateBitVector_nullArrayElement() {
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,149,"EnumUtils.generateBitVector(Traffic.class, Traffic.RED, null);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,152,@Test(expected=IllegalArgumentException.class)
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,153,public void test_generateBitVectors_nullArrayElement() {
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,154,"EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, null);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,177,"@SuppressWarnings(""unchecked"")"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,178,@Test(expected=IllegalArgumentException.class)
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,179,public void test_generateBitVectors_nonEnumClass() {
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,180,"@SuppressWarnings(""rawtypes"")"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,181,Class rawType = Object.class;
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,182,"@SuppressWarnings(""rawtypes"")"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,183,List rawList = new ArrayList();
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,184,"EnumUtils.generateBitVectors(rawType, rawList);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,195,"@SuppressWarnings(""unchecked"")"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,196,@Test(expected=IllegalArgumentException.class)
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,197,public void test_generateBitVectors_nonEnumClassWithArray() {
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,198,"@SuppressWarnings(""rawtypes"")"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,199,Class rawType = Object.class;
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,200,EnumUtils.generateBitVectors(rawType);
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,215,@Test
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,216,public void test_generateBitVectors() {
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,217,"assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.noneOf(Traffic.class)), 0L);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,218,"assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED)), 1L);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,219,"assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.AMBER)), 2L);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,220,"assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.GREEN)), 4L);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,221,"assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER)), 3L);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,222,"assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.GREEN)), 5L);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,223,"assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.AMBER, Traffic.GREEN)), 6L);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,224,"assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN)), 7L);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,241,@Test
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,242,public void test_generateBitVectorsFromArray() {
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,243,"assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class), 0L);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,244,"assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED), 1L);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,245,"assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.AMBER), 2L);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,246,"assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.GREEN), 4L);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,247,"assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER), 3L);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,248,"assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.GREEN), 5L);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,249,"assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.AMBER, Traffic.GREEN), 6L);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,250,"assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN), 7L);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,251,//gracefully handles duplicates:
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,252,"assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN, Traffic.GREEN), 7L);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,255,"private void assertArrayEquals(long[] actual, long... expected) {"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,256,"Assert.assertArrayEquals(expected, actual);"
False,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,175,Test(expected=IllegalArgumentException.class)
False,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,176,ublic void test_processBitVector_longClass() {
False,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,177,"numUtils.processBitVector(TooMany.class, 0L);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,265,@Test(expected=NullPointerException.class)
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,266,public void test_processBitVectors_nullClass() {
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,267,final Class<Traffic> empty = null;
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,268,"EnumUtils.processBitVectors(empty, 0L);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,283,@Test
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,284,public void test_processBitVectors() {
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,285,"assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVectors(Traffic.class, 0L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,286,"assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVectors(Traffic.class, 1L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,287,"assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 2L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,288,"assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 3L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,289,"assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 4L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,290,"assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 5L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,291,"assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 6L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,292,"assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 7L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,294,"assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVectors(Traffic.class, 0L, 0L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,295,"assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVectors(Traffic.class, 0L, 1L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,296,"assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 0L, 2L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,297,"assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 0L, 3L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,298,"assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 0L, 4L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,299,"assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 0L, 5L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,300,"assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 0L, 6L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,301,"assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 0L, 7L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,303,// demonstrate tolerance of irrelevant high-order digits:
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,304,"assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVectors(Traffic.class, 666L, 0L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,305,"assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVectors(Traffic.class, 666L, 1L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,306,"assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 666L, 2L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,307,"assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 666L, 3L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,308,"assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 666L, 4L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,309,"assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 666L, 5L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,310,"assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 666L, 6L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,311,"assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 666L, 7L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,314,@Test(expected=IllegalArgumentException.class)
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,315,public void test_processBitVector_longClass() {
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,316,"EnumUtils.processBitVector(TooMany.class, 0L);"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,319,public void test_processBitVectors_longClass() {
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,320,"assertEquals(EnumSet.noneOf(TooMany.class), EnumUtils.processBitVectors(TooMany.class, 0L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,321,"assertEquals(EnumSet.of(TooMany.A), EnumUtils.processBitVectors(TooMany.class, 1L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,322,"assertEquals(EnumSet.of(TooMany.B), EnumUtils.processBitVectors(TooMany.class, 2L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,323,"assertEquals(EnumSet.of(TooMany.A, TooMany.B), EnumUtils.processBitVectors(TooMany.class, 3L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,324,"assertEquals(EnumSet.of(TooMany.C), EnumUtils.processBitVectors(TooMany.class, 4L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,325,"assertEquals(EnumSet.of(TooMany.A, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 5L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,326,"assertEquals(EnumSet.of(TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 6L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,327,"assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 7L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,329,"assertEquals(EnumSet.noneOf(TooMany.class), EnumUtils.processBitVectors(TooMany.class, 0L, 0L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,330,"assertEquals(EnumSet.of(TooMany.A), EnumUtils.processBitVectors(TooMany.class, 0L, 1L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,331,"assertEquals(EnumSet.of(TooMany.B), EnumUtils.processBitVectors(TooMany.class, 0L, 2L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,332,"assertEquals(EnumSet.of(TooMany.A, TooMany.B), EnumUtils.processBitVectors(TooMany.class, 0L, 3L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,333,"assertEquals(EnumSet.of(TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 4L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,334,"assertEquals(EnumSet.of(TooMany.A, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 5L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,335,"assertEquals(EnumSet.of(TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 6L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,336,"assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 7L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,337,"assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 7L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,339,"assertEquals(EnumSet.of(TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 0L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,340,"assertEquals(EnumSet.of(TooMany.A, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 1L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,341,"assertEquals(EnumSet.of(TooMany.B, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 2L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,342,"assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 3L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,343,"assertEquals(EnumSet.of(TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 4L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,344,"assertEquals(EnumSet.of(TooMany.A, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 5L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,345,"assertEquals(EnumSet.of(TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 6L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,346,"assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 7L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,347,"assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 7L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,349,// demonstrate tolerance of irrelevant high-order digits:
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,350,"assertEquals(EnumSet.of(TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 0L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,351,"assertEquals(EnumSet.of(TooMany.A, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 1L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,352,"assertEquals(EnumSet.of(TooMany.B, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 2L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,353,"assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 3L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,354,"assertEquals(EnumSet.of(TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 4L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,355,"assertEquals(EnumSet.of(TooMany.A, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 5L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,356,"assertEquals(EnumSet.of(TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 6L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,357,"assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 7L));"
True,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,src/test/java/org/apache/commons/lang3/EnumUtilsTest.java,358,"assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 7L));"

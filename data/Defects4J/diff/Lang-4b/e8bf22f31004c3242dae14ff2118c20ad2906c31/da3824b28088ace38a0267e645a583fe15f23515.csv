is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,15,* limitations under the License.
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,17,package org.apache.commons.lang.concurrent;
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,19,import java.util.concurrent.Callable;
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,20,import java.util.concurrent.ExecutorService;
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,23,* <p>
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,24,* A specialized {@link BackgroundInitializer} implementation that wraps a
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,25,* {@code Callable} object.
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,26,* </p>
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,27,* <p>
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,28,* An instance of this class is initialized with a {@code Callable} object when
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,29,* it is constructed. The implementation of the {@link #initialize()} method
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,30,* defined in the super class delegates to this {@code Callable} so that the
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,31,* {@code Callable} is executed in the background thread.
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,32,* </p>
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,33,* <p>
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,34,* The {@code java.util.concurrent.Callable} interface is a standard mechanism
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,35,* of the JDK to define tasks to be executed by another thread. The {@code
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,36,* CallableBackgroundInitializer} class allows combining this standard interface
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,37,* with the background initializer API.
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,38,* </p>
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,39,* <p>
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,40,* Usage of this class is very similar to the default usage pattern of the
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,41,* {@link BackgroundInitializer} class: Just create an instance and provide the
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,42,"* {@code Callable} object to be executed, then call the initializer's"
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,43,* {@link #start()} method. This causes the {@code Callable} to be executed in
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,44,* another thread. When the results of the {@code Callable} are needed the
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,45,* initializer's {@link #get()} method can be called (which may block until
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,46,* background execution is complete). The following code fragment shows a
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,47,* typical usage example:
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,49,* <pre>
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,50,* // a Callable that performs a complex computation
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,51,* Callable<Integer> computationCallable = new MyComputationCallable();
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,53,* // setup the background initializer
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,54,* CallableBackgroundInitializer<Integer> initializer =
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,55,*     new CallableBackgroundInitializer(computationCallable);
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,56,* initializer.start();
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,58,* // Now do some other things. Initialization runs in a parallel thread
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,60,* // Wait for the end of initialization and access the result
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,61,* Integer result = initializer.get();
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,62,* </pre>
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,64,* </p>
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,66,* @version $Id: $
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,67,* @param <T> the type of the object managed by this initializer class
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,69,public class CallableBackgroundInitializer<T> extends BackgroundInitializer<T> {
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,70,/** The Callable to be executed. */
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,71,private final Callable<T> callable;
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,74,* Creates a new instance of {@code CallableBackgroundInitializer} and sets
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,75,* the {@code Callable} to be executed in a background thread.
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,77,* @param call the {@code Callable} (must not be <b>null</b>)
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,78,* @throws IllegalArgumentException if the {@code Callable} is <b>null</b>
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,80,public CallableBackgroundInitializer(Callable<T> call) {
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,81,checkCallable(call);
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,82,callable = call;
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,86,* Creates a new instance of {@code CallableBackgroundInitializer} and
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,87,* initializes it with the {@code Callable} to be executed in a background
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,88,* thread and the {@code ExecutorService} for managing the background
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,89,* execution.
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,91,* @param call the {@code Callable} (must not be <b>null</b>)
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,92,* @param exec an external {@code ExecutorService} to be used for task
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,93,* execution
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,94,* @throws IllegalArgumentException if the {@code Callable} is <b>null</b>
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,96,"public CallableBackgroundInitializer(Callable<T> call, ExecutorService exec) {"
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,97,super(exec);
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,98,checkCallable(call);
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,99,callable = call;
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,103,* Performs initialization in a background thread. This implementation
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,104,* delegates to the {@code Callable} passed at construction time of this
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,105,* object.
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,107,* @return the result of the initialization
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,108,* @throws Exception if an error occurs
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,110,@Override
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,111,protected T initialize() throws Exception {
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,112,return callable.call();
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,116,* Tests the passed in {@code Callable} and throws an exception if it is
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,117,* undefined.
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,119,* @param call the object to check
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,120,* @throws IllegalArgumentException if the {@code Callable} is <b>null</b>
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,122,private void checkCallable(Callable<T> call) {
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,123,if (call == null) {
True,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java,124,"throw new IllegalArgumentException(""Callable must not be null!"");"
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,17,package org.apache.commons.lang.concurrent;
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,19,import java.util.concurrent.Callable;
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,20,import java.util.concurrent.ExecutorService;
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,21,import java.util.concurrent.Executors;
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,23,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,26,* Test class for {@code CallableBackgroundInitializer}
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,28,* @version $Id$
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,30,public class CallableBackgroundInitializerTest extends TestCase {
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,31,/** Constant for the result of the call() invocation. */
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,32,private static final Integer RESULT = 42;
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,35,* Tries to create an instance without a Callable. This should cause an
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,36,* exception.
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,38,public void testInitNullCallable() {
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,39,try {
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,40,new CallableBackgroundInitializer<Object>(null);
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,41,"fail(""Could create instance without a Callable!"");"
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,42,} catch (IllegalArgumentException iex) {
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,43,// ok
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,48,* Tests whether the executor service is correctly passed to the super
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,49,* class.
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,51,public void testInitExecutor() {
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,52,ExecutorService exec = Executors.newSingleThreadExecutor();
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,53,CallableBackgroundInitializer<Integer> init = new CallableBackgroundInitializer<Integer>(
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,54,"new TestCallable(), exec);"
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,55,"assertEquals(""Executor not set"", exec, init.getExternalExecutor());"
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,59,* Tries to pass a null Callable to the constructor that takes an executor.
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,60,* This should cause an exception.
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,62,public void testInitExecutorNullCallable() {
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,63,ExecutorService exec = Executors.newSingleThreadExecutor();
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,64,try {
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,65,"new CallableBackgroundInitializer<Integer>(null, exec);"
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,66,"fail(""Could create instance without a Callable!"");"
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,67,} catch (IllegalArgumentException iex) {
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,68,// ok
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,73,* Tests the implementation of initialize().
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,75,public void testInitialize() throws Exception {
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,76,TestCallable call = new TestCallable();
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,77,CallableBackgroundInitializer<Integer> init = new CallableBackgroundInitializer<Integer>(
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,78,call);
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,79,"assertEquals(""Wrong result"", RESULT, init.initialize());"
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,80,"assertEquals(""Wrong number of invocations"", 1, call.callCount);"
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,84,* A test Callable implementation for checking the initializer's
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,85,* implementation of the initialize() method.
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,87,private static class TestCallable implements Callable<Integer> {
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,88,/** A counter for the number of call() invocations. */
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,89,int callCount;
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,92,* Records this invocation and returns the test result.
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,94,public Integer call() throws Exception {
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,95,callCount++;
True,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,src/test/org/apache/commons/lang/concurrent/CallableBackgroundInitializerTest.java,96,return RESULT;

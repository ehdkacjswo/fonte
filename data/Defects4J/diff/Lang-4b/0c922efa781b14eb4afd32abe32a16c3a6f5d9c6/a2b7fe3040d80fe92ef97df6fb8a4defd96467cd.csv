is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,17,package org.apache.commons.lang3;
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,20,* <p>Operations on {@link java.lang.CharSequence} that are
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,21,* {@code null} safe.</p>
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,23,* @see java.lang.CharSequence
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,24,* @since 3.0
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,25,* @version $Id: StringUtils.java 1089734 2011-04-07 04:37:52Z bayard $
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,27,public class CharSequenceUtils {
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,30,* <p>{@code CharSequenceUtils} instances should NOT be constructed in
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,31,* standard programming. </p>
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,33,* <p>This constructor is public to permit tools that require a JavaBean
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,34,* instance to operate.</p>
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,36,public CharSequenceUtils() {
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,37,super();
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,42,* <p>Returns a new {@code CharSequence} that is a subsequence of this
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,43,* sequence starting with the {@code char} value at the specified index.</p>
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,45,* <p>This provides the {@code CharSequence} equivalent to {@link String#substring(int)}.
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,46,"* The length (in {@code char}) of the returned sequence is {@code length() - start},"
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,47,* so if {@code start == end} then an empty sequence is returned.</p>
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,49,"* @param cs  the specified subsequence, null returns null"
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,50,"* @param start  the start index, inclusive, valid"
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,51,"* @return a new subsequence, may be null"
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,52,* @throws IndexOutOfBoundsException if {@code start} is negative or if
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,53,*  {@code start} is greater than {@code length()}
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,55,"public static CharSequence subSequence(CharSequence cs, int start) {"
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,56,"return cs == null ? null : cs.subSequence(start, cs.length());"
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,62,* Used by the indexOf(CharSequence methods) as a green implementation of
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,63,* indexOf.
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,65,* @param cs the {@code CharSequence} to be processed
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,66,* @param searchChar the char to be searched for
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,67,* @param start the start index
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,68,* @return the index where the search char was found
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,70,"static int indexOf(CharSequence cs, int searchChar, int start) {"
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,71,if (cs instanceof String) {
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,72,"return ((String) cs).indexOf(searchChar, start);"
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,73,} else {
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,74,int sz = cs.length();
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,75,if ( start < 0 ) {
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,76,start = 0;
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,78,for ( int i=start; i < sz; i++ ) {
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,79,if ( cs.charAt(i) == searchChar) {
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,80,return i;
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,83,return -1;
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,88,* Used by the indexOf(CharSequence methods) as a green implementation of indexOf.
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,90,* @param cs the {@code CharSequence} to be processed
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,91,* @param searchChar the {@code CharSequence} to be searched for
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,92,* @param start the start index
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,93,* @return the index where the search sequence was found
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,95,"static int indexOf(CharSequence cs, CharSequence searchChar, int start) {"
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,96,if (cs instanceof String && searchChar instanceof String) {
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,97,// TODO: Do we assume searchChar is usually relatively small;
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,98,//       If so then calling toString() on it is better than reverting to
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,99,//       the green implementation in the else block
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,100,"return ((String) cs).indexOf( (String) searchChar, start);"
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,101,} else {
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,102,// TODO: Implement rather than convert to String
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,103,"return cs.toString().indexOf(searchChar.toString(), start);"
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,108,* Used by the lastIndexOf(CharSequence methods) as a green implementation of lastIndexOf
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,110,* @param cs the {@code CharSequence} to be processed
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,111,* @param searchChar the char to be searched for
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,112,* @param start the start index
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,113,* @return the index where the search char was found
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,115,"static int lastIndexOf(CharSequence cs, int searchChar, int start) {"
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,116,if (cs instanceof String) {
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,117,"return ((String) cs).lastIndexOf(searchChar, start);"
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,118,} else {
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,119,int sz = cs.length();
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,120,if ( start < 0 ) {
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,121,return -1;
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,123,if ( start >= sz ) {
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,124,start = sz - 1;
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,126,for ( int i=start; i >= 0; --i ) {
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,127,if ( cs.charAt(i) == searchChar) {
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,128,return i;
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,131,return -1;
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,136,* Used by the lastIndexOf(CharSequence methods) as a green implementation of lastIndexOf
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,138,* @param cs the {@code CharSequence} to be processed
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,139,* @param searchChar the {@code CharSequence} to be searched for
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,140,* @param start the start index
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,141,* @return the index where the search sequence was found
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,143,"static int lastIndexOf(CharSequence cs, CharSequence searchChar, int start) {"
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,144,if (cs instanceof String && searchChar instanceof String) {
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,145,// TODO: Do we assume searchChar is usually relatively small;
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,146,//       If so then calling toString() on it is better than reverting to
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,147,//       the green implementation in the else block
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,148,"return ((String) cs).lastIndexOf( (String) searchChar, start);"
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,149,} else {
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,150,// TODO: Implement rather than convert to String
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,151,"return cs.toString().lastIndexOf(searchChar.toString(), start);"
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,156,* Green implementation of toCharArray.
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,158,* @param cs the {@code CharSequence} to be processed
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,159,* @return the resulting char array
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,161,static char[] toCharArray(CharSequence cs) {
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,162,if (cs instanceof String) {
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,163,return ((String) cs).toCharArray();
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,164,} else {
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,165,int sz = cs.length();
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,166,char[] array = new char[cs.length()];
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,167,for (int i=0; i < sz; i++) {
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,168,array[i] = cs.charAt(i);
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,170,return array;
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,175,* Green implementation of regionMatches.
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,177,* @param cs the {@code CharSequence} to be processed
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,178,* @param ignoreCase whether or not to be case insensitive
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,179,* @param thisStart the index to start on the {@code cs} CharSequence
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,180,* @param substring the {@code CharSequence} to be looked for
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,181,* @param start the index to start on the {@code substring} CharSequence
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,182,* @param length character length of the region
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,183,* @return whether the region matched
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,185,"static boolean regionMatches(CharSequence cs, boolean ignoreCase, int thisStart,"
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,186,"CharSequence substring, int start, int length)"
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,188,if (cs instanceof String && substring instanceof String) {
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,189,"return ((String) cs).regionMatches(ignoreCase, thisStart, ((String)substring), start, length);"
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,190,} else {
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,191,// TODO: Implement rather than convert to String
True,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,src/main/java/org/apache/commons/lang3/CharSequenceUtils.java,192,"return cs.toString().regionMatches(ignoreCase, thisStart, substring.toString(), start, length);"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,799,"eturn regionMatchesSequence(str1, true, 0, str2, 0, Math.max(str1.length(), str2.length()));"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,799,"return CharSequenceUtils.regionMatches(str1, true, 0, str2, 0, Math.max(str1.length(), str2.length()));"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,828,"eturn StringUtils.indexOfSequence(seq, searchChar, 0);"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,828,"return CharSequenceUtils.indexOf(seq, searchChar, 0);"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,860,"eturn StringUtils.indexOfSequence(seq, searchChar, startPos);"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,860,"return CharSequenceUtils.indexOf(seq, searchChar, startPos);"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,890,"eturn StringUtils.indexOfSequence(seq, searchSeq, 0);"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,890,"return CharSequenceUtils.indexOf(seq, searchSeq, 0);"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,929,"eturn StringUtils.indexOfSequence(seq, searchSeq, startPos);"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,929,"return CharSequenceUtils.indexOf(seq, searchSeq, startPos);"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,994,"ndex = lastIndexOfSequence(str, searchStr, index - 1);"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,994,"index = CharSequenceUtils.lastIndexOf(str, searchStr, index - 1);"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,996,"ndex = indexOfSequence(str, searchStr, index + 1);"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,996,"index = CharSequenceUtils.indexOf(str, searchStr, index + 1);"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1080,"f (regionMatchesSequence(str, true, i, searchStr, 0, searchStr.length())) {"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1080,"if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1112,"eturn StringUtils.lastIndexOfSequence(seq, searchChar, seq.length());"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1112,"return CharSequenceUtils.lastIndexOf(seq, searchChar, seq.length());"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1146,"eturn StringUtils.lastIndexOfSequence(seq, searchChar, startPos);"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1146,"return CharSequenceUtils.lastIndexOf(seq, searchChar, startPos);"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1175,"eturn StringUtils.lastIndexOfSequence(seq, searchSeq, seq.length());"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1175,"return CharSequenceUtils.lastIndexOf(seq, searchSeq, seq.length());"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1247,"eturn StringUtils.lastIndexOfSequence(seq, searchSeq, startPos);"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1247,"return CharSequenceUtils.lastIndexOf(seq, searchSeq, startPos);"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1322,"f (regionMatchesSequence(str, true, i, searchStr, 0, searchStr.length())) {"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1322,"if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1354,"eturn indexOfSequence(seq, searchChar, 0) >= 0;"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1354,"return CharSequenceUtils.indexOf(seq, searchChar, 0) >= 0;"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1382,"eturn indexOfSequence(seq, searchSeq, 0) >= 0;"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1382,"return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1415,"f (regionMatchesSequence(str, true, i, searchStr, 0, len)) {"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1415,"if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, len)) {"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1613,"eturn containsAny(cs, toCharArraySequence(searchChars));"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1613,"return containsAny(cs, CharSequenceUtils.toCharArray(searchChars));"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1698,"oolean chFound = indexOfSequence(searchChars, ch, 0) >= 0;"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1698,"boolean chFound = CharSequenceUtils.indexOf(searchChars, ch, 0) >= 0;"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1701,"f (chFound && indexOfSequence(searchChars, ch2, 0) < 0) {"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1701,"if (chFound && CharSequenceUtils.indexOf(searchChars, ch2, 0) < 0) {"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1909,"mp = indexOfSequence(str, search, 0);"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1909,"tmp = CharSequenceUtils.indexOf(str, search, 0);"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1959,"mp = lastIndexOfSequence(str, search, str.length());"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,1959,"tmp = CharSequenceUtils.lastIndexOf(str, search, str.length());"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,5136,"hile ((idx = indexOfSequence(str, sub, idx)) != INDEX_NOT_FOUND) {"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,5136,"while ((idx = CharSequenceUtils.indexOf(str, sub, idx)) != INDEX_NOT_FOUND) {"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6197,"eturn regionMatchesSequence(str, ignoreCase, 0, prefix, 0, prefix.length());"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6197,"return CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0, prefix.length());"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6305,"eturn regionMatchesSequence(str, ignoreCase, strOffset, suffix, 0, suffix.length());"
True,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6305,"return CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix, 0, suffix.length());"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6389, <p>Returns a new {@code CharSequence} that is a subsequence of this
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6390, sequence starting with the {@code char} value at the specified index.</p>
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6392, <p>This provides the {@code CharSequence} equivalent to {@link String#substring(int)}.
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6393," The length (in {@code char}) of the returned sequence is {@code length() - start},"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6394, so if {@code start == end} then an empty sequence is returned.</p>
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6396," @param cs  the specified subsequence, null returns null"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6397," @param start  the start index, inclusive, valid"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6398," @return a new subsequence, may be null"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6399, @throws IndexOutOfBoundsException if {@code start} is negative or if
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6400,  {@code start} is greater than {@code length()}
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6402,"ublic static CharSequence subSequence(CharSequence cs, int start) {"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6403,"eturn cs == null ? null : cs.subSequence(start, cs.length());"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6409, Used by the indexOf(CharSequence methods) as a green implementation of
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6410, indexOf.
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6412, @param cs the {@code CharSequence} to be processed
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6413, @param searchChar the char to be searched for
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6414, @param start the start index
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6415, @return the index where the search char was found
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6417,"tatic int indexOfSequence(CharSequence cs, int searchChar, int start) {"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6418,f (cs instanceof String) {
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6419,"eturn ((String) cs).indexOf(searchChar, start);"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6420, else {
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6421,nt sz = cs.length();
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6422,f ( start < 0 ) {
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6423,tart = 0;
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6425,or ( int i=start; i < sz; i++ ) {
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6426,f ( cs.charAt(i) == searchChar) {
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6427,eturn i;
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6430,eturn -1;
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6435, Used by the indexOf(CharSequence methods) as a green implementation of indexOf.
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6437, @param cs the {@code CharSequence} to be processed
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6438, @param searchChar the {@code CharSequence} to be searched for
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6439, @param start the start index
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6440, @return the index where the search sequence was found
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6442,"tatic int indexOfSequence(CharSequence cs, CharSequence searchChar, int start) {"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6443,f (cs instanceof String && searchChar instanceof String) {
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6444,/ TODO: Do we assume searchChar is usually relatively small;
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6445,/       If so then calling toString() on it is better than reverting to
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6446,/       the green implementation in the else block
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6447,"eturn ((String) cs).indexOf( (String) searchChar, start);"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6448, else {
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6449,/ TODO: Implement rather than convert to String
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6450,"eturn cs.toString().indexOf(searchChar.toString(), start);"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6455, Used by the lastIndexOf(CharSequence methods) as a green implementation of lastIndexOf
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6457, @param cs the {@code CharSequence} to be processed
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6458, @param searchChar the char to be searched for
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6459, @param start the start index
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6460, @return the index where the search char was found
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6462,"tatic int lastIndexOfSequence(CharSequence cs, int searchChar, int start) {"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6463,f (cs instanceof String) {
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6464,"eturn ((String) cs).lastIndexOf(searchChar, start);"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6465, else {
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6466,nt sz = cs.length();
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6467,f ( start < 0 ) {
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6468,eturn -1;
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6470,f ( start >= sz ) {
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6471,tart = sz - 1;
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6473,or ( int i=start; i >= 0; --i ) {
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6474,f ( cs.charAt(i) == searchChar) {
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6475,eturn i;
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6478,eturn -1;
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6483, Used by the lastIndexOf(CharSequence methods) as a green implementation of lastIndexOf
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6485, @param cs the {@code CharSequence} to be processed
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6486, @param searchChar the {@code CharSequence} to be searched for
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6487, @param start the start index
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6488, @return the index where the search sequence was found
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6490,"tatic int lastIndexOfSequence(CharSequence cs, CharSequence searchChar, int start) {"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6491,f (cs instanceof String && searchChar instanceof String) {
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6492,/ TODO: Do we assume searchChar is usually relatively small;
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6493,/       If so then calling toString() on it is better than reverting to
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6494,/       the green implementation in the else block
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6495,"eturn ((String) cs).lastIndexOf( (String) searchChar, start);"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6496, else {
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6497,/ TODO: Implement rather than convert to String
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6498,"eturn cs.toString().lastIndexOf(searchChar.toString(), start);"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6503, Green implementation of toCharArray.
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6505, @param cs the {@code CharSequence} to be processed
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6506, @return the resulting char array
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6508,tatic char[] toCharArraySequence(CharSequence cs) {
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6509,f (cs instanceof String) {
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6510,eturn ((String) cs).toCharArray();
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6511, else {
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6512,nt sz = cs.length();
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6513,har[] array = new char[cs.length()];
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6514,or (int i=0; i < sz; i++) {
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6515,rray[i] = cs.charAt(i);
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6517,eturn array;
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6522, Green implementation of regionMatches.
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6524, @param cs the {@code CharSequence} to be processed
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6525, @param ignoreCase whether or not to be case insensitive
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6526, @param thisStart the index to start on the {@code cs} CharSequence
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6527, @param substring the {@code CharSequence} to be looked for
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6528, @param start the index to start on the {@code substring} CharSequence
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6529, @param length character length of the region
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6530, @return whether the region matched
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6532,"tatic boolean regionMatchesSequence(CharSequence cs, boolean ignoreCase, int thisStart,"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6533,"harSequence substring, int start, int length)"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6535,f (cs instanceof String && substring instanceof String) {
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6536,"eturn ((String) cs).regionMatches(ignoreCase, thisStart, ((String)substring), start, length);"
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6537, else {
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6538,/ TODO: Implement rather than convert to String
False,src/main/java/org/apache/commons/lang3/StringUtils.java,src/main/java/org/apache/commons/lang3/StringUtils.java,6539,"eturn cs.toString().regionMatches(ignoreCase, thisStart, substring.toString(), start, length);"
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,17,package org.apache.commons.lang3;
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,19,import java.lang.reflect.Constructor;
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,20,import java.lang.reflect.Modifier;
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,22,import junit.framework.Assert;
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,23,import junit.framework.TestCase;
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,26,* Tests CharSequenceUtils
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,28,* @author Gary Gregory
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,29,* @version $Id: CharSequenceUtilsTest.java 1066341 2011-02-02 06:21:53Z bayard $
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,31,public class CharSequenceUtilsTest extends TestCase {
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,34,public void testConstructor() {
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,35,assertNotNull(new CharSequenceUtils());
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,36,Constructor<?>[] cons = CharSequenceUtils.class.getDeclaredConstructors();
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,37,"assertEquals(1, cons.length);"
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,38,"assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));"
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,39,"assertEquals(true, Modifier.isPublic(CharSequenceUtils.class.getModifiers()));"
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,40,"assertEquals(false, Modifier.isFinal(CharSequenceUtils.class.getModifiers()));"
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,44,public void testSubSequence() {
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,46,// null input
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,48,"Assert.assertEquals(null, CharSequenceUtils.subSequence(null, -1));"
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,49,"Assert.assertEquals(null, CharSequenceUtils.subSequence(null, 0));"
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,50,"Assert.assertEquals(null, CharSequenceUtils.subSequence(null, 1));"
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,52,// non-null input
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,54,"Assert.assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence(StringUtils.EMPTY, 0));"
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,55,"Assert.assertEquals(""012"", CharSequenceUtils.subSequence(""012"", 0));"
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,56,"Assert.assertEquals(""12"", CharSequenceUtils.subSequence(""012"", 1));"
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,57,"Assert.assertEquals(""2"", CharSequenceUtils.subSequence(""012"", 2));"
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,58,"Assert.assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence(""012"", 3));"
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,60,// Exception expected
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,62,try {
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,63,"Assert.assertEquals(null, CharSequenceUtils.subSequence(StringUtils.EMPTY, -1));"
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,64,"Assert.fail(""Expected "" + IndexOutOfBoundsException.class.getName());"
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,65,} catch (IndexOutOfBoundsException e) {
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,66,// Expected
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,68,try {
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,69,"Assert.assertEquals(null, CharSequenceUtils.subSequence(StringUtils.EMPTY, 1));"
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,70,"Assert.fail(""Expected "" + IndexOutOfBoundsException.class.getName());"
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,71,} catch (IndexOutOfBoundsException e) {
True,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java,72,// Expected
False,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,315,ublic void testSubSequence() {
False,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,317,/ null input
False,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,319,"ssert.assertEquals(null, StringUtils.subSequence(null, -1));"
False,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,320,"ssert.assertEquals(null, StringUtils.subSequence(null, 0));"
False,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,321,"ssert.assertEquals(null, StringUtils.subSequence(null, 1));"
False,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,323,/ non-null input
False,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,325,"ssert.assertEquals(StringUtils.EMPTY, StringUtils.subSequence(StringUtils.EMPTY, 0));"
False,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,326,"ssert.assertEquals(""012"", StringUtils.subSequence(""012"", 0));"
False,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,327,"ssert.assertEquals(""12"", StringUtils.subSequence(""012"", 1));"
False,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,328,"ssert.assertEquals(""2"", StringUtils.subSequence(""012"", 2));"
False,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,329,"ssert.assertEquals(StringUtils.EMPTY, StringUtils.subSequence(""012"", 3));"
False,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,331,/ Exception expected
False,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,333,ry {
False,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,334,"ssert.assertEquals(null, StringUtils.subSequence(StringUtils.EMPTY, -1));"
False,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,335,"ssert.fail(""Expected "" + IndexOutOfBoundsException.class.getName());"
False,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,336, catch (IndexOutOfBoundsException e) {
False,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,337,/ Expected
False,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,339,ry {
False,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,340,"ssert.assertEquals(null, StringUtils.subSequence(StringUtils.EMPTY, 1));"
False,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,341,"ssert.fail(""Expected "" + IndexOutOfBoundsException.class.getName());"
False,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,342, catch (IndexOutOfBoundsException e) {
False,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java,343,/ Expected

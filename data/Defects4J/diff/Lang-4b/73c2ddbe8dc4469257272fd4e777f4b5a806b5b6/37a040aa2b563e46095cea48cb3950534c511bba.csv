is_addition,old_file_path,new_file_path,line_num,content
False,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,76,"ssertEquals(true, ArrayUtils.hashCode(array1) == ArrayUtils.hashCode(array1));"
False,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,77,"ssertEquals(false, ArrayUtils.hashCode(array1) == ArrayUtils.hashCode(array2));"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,76,assertTrue(ArrayUtils.hashCode(array1) == ArrayUtils.hashCode(array1));
True,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,77,assertFalse(ArrayUtils.hashCode(array1) == ArrayUtils.hashCode(array2));
False,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,81,"ssertEquals(true, ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array3));"
False,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,82,"ssertEquals(true, ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array4));"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,81,assertTrue(ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array3));
True,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,82,assertTrue(ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array4));
False,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,86,"ssertEquals(true, ArrayUtils.hashCode(arrayB) == ArrayUtils.hashCode(arrayA));"
True,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java,86,assertTrue(ArrayUtils.hashCode(arrayB) == ArrayUtils.hashCode(arrayA));
False,src/test/java/org/apache/commons/lang3/CharRangeTest.java,src/test/java/org/apache/commons/lang3/CharRangeTest.java,151,"ssertEquals(true, rangea.hashCode() == rangea.hashCode());"
False,src/test/java/org/apache/commons/lang3/CharRangeTest.java,src/test/java/org/apache/commons/lang3/CharRangeTest.java,152,"ssertEquals(true, rangea.hashCode() == CharRange.is('a').hashCode());"
False,src/test/java/org/apache/commons/lang3/CharRangeTest.java,src/test/java/org/apache/commons/lang3/CharRangeTest.java,153,"ssertEquals(true, rangeae.hashCode() == rangeae.hashCode());"
False,src/test/java/org/apache/commons/lang3/CharRangeTest.java,src/test/java/org/apache/commons/lang3/CharRangeTest.java,154,"ssertEquals(true, rangeae.hashCode() == CharRange.isIn('a', 'e').hashCode());"
False,src/test/java/org/apache/commons/lang3/CharRangeTest.java,src/test/java/org/apache/commons/lang3/CharRangeTest.java,155,"ssertEquals(true, rangenotbf.hashCode() == rangenotbf.hashCode());"
False,src/test/java/org/apache/commons/lang3/CharRangeTest.java,src/test/java/org/apache/commons/lang3/CharRangeTest.java,156,"ssertEquals(true, rangenotbf.hashCode() == CharRange.isIn('b', 'f').hashCode());"
True,src/test/java/org/apache/commons/lang3/CharRangeTest.java,src/test/java/org/apache/commons/lang3/CharRangeTest.java,151,assertTrue(rangea.hashCode() == rangea.hashCode());
True,src/test/java/org/apache/commons/lang3/CharRangeTest.java,src/test/java/org/apache/commons/lang3/CharRangeTest.java,152,assertTrue(rangea.hashCode() == CharRange.is('a').hashCode());
True,src/test/java/org/apache/commons/lang3/CharRangeTest.java,src/test/java/org/apache/commons/lang3/CharRangeTest.java,153,assertTrue(rangeae.hashCode() == rangeae.hashCode());
True,src/test/java/org/apache/commons/lang3/CharRangeTest.java,src/test/java/org/apache/commons/lang3/CharRangeTest.java,154,"assertTrue(rangeae.hashCode() == CharRange.isIn('a', 'e').hashCode());"
True,src/test/java/org/apache/commons/lang3/CharRangeTest.java,src/test/java/org/apache/commons/lang3/CharRangeTest.java,155,assertTrue(rangenotbf.hashCode() == rangenotbf.hashCode());
True,src/test/java/org/apache/commons/lang3/CharRangeTest.java,src/test/java/org/apache/commons/lang3/CharRangeTest.java,156,"assertTrue(rangenotbf.hashCode() == CharRange.isIn('b', 'f').hashCode());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java,95,"ssertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java,96,"ssertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java,97,"ssertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java,98,"ssertEquals(true, mutNumA.hashCode() == Byte.valueOf((byte) 0).hashCode());"
True,src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java,95,assertTrue(mutNumA.hashCode() == mutNumA.hashCode());
True,src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java,96,assertTrue(mutNumA.hashCode() == mutNumB.hashCode());
True,src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java,97,assertFalse(mutNumA.hashCode() == mutNumC.hashCode());
True,src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java,98,assertTrue(mutNumA.hashCode() == Byte.valueOf((byte) 0).hashCode());
False,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,107,"ssertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,108,"ssertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,109,"ssertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,110,"ssertEquals(true, mutNumA.hashCode() == Double.valueOf(0d).hashCode());"
True,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,107,assertTrue(mutNumA.hashCode() == mutNumA.hashCode());
True,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,108,assertTrue(mutNumA.hashCode() == mutNumB.hashCode());
True,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,109,assertFalse(mutNumA.hashCode() == mutNumC.hashCode());
True,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java,110,assertTrue(mutNumA.hashCode() == Double.valueOf(0d).hashCode());
False,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,107,"ssertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,108,"ssertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,109,"ssertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,110,"ssertEquals(true, mutNumA.hashCode() == Float.valueOf(0f).hashCode());"
True,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,107,assertTrue(mutNumA.hashCode() == mutNumA.hashCode());
True,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,108,assertTrue(mutNumA.hashCode() == mutNumB.hashCode());
True,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,109,assertFalse(mutNumA.hashCode() == mutNumC.hashCode());
True,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java,110,assertTrue(mutNumA.hashCode() == Float.valueOf(0f).hashCode());
False,src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java,102,"ssertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java,103,"ssertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java,104,"ssertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java,105,"ssertEquals(true, mutNumA.hashCode() == Integer.valueOf(0).hashCode());"
True,src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java,102,assertTrue(mutNumA.hashCode() == mutNumA.hashCode());
True,src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java,103,assertTrue(mutNumA.hashCode() == mutNumB.hashCode());
True,src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java,104,assertFalse(mutNumA.hashCode() == mutNumC.hashCode());
True,src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java,105,assertTrue(mutNumA.hashCode() == Integer.valueOf(0).hashCode());
False,src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java,95,"ssertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java,96,"ssertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java,97,"ssertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java,98,"ssertEquals(true, mutNumA.hashCode() == Long.valueOf(0).hashCode());"
True,src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java,95,assertTrue(mutNumA.hashCode() == mutNumA.hashCode());
True,src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java,96,assertTrue(mutNumA.hashCode() == mutNumB.hashCode());
True,src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java,97,assertFalse(mutNumA.hashCode() == mutNumC.hashCode());
True,src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java,98,assertTrue(mutNumA.hashCode() == Long.valueOf(0).hashCode());
False,src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java,82,"ssertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java,83,"ssertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java,84,"ssertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java,85,"ssertEquals(false, mutNumA.hashCode() == mutNumD.hashCode());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java,86,"ssertEquals(true, mutNumA.hashCode() == ""ALPHA"".hashCode());"
True,src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java,82,assertTrue(mutNumA.hashCode() == mutNumA.hashCode());
True,src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java,83,assertTrue(mutNumA.hashCode() == mutNumB.hashCode());
True,src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java,84,assertFalse(mutNumA.hashCode() == mutNumC.hashCode());
True,src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java,85,assertFalse(mutNumA.hashCode() == mutNumD.hashCode());
True,src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java,86,"assertTrue(mutNumA.hashCode() == ""ALPHA"".hashCode());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java,95,"ssertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java,96,"ssertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java,97,"ssertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());"
False,src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java,98,"ssertEquals(true, mutNumA.hashCode() == Short.valueOf((short) 0).hashCode());"
True,src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java,95,assertTrue(mutNumA.hashCode() == mutNumA.hashCode());
True,src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java,96,assertTrue(mutNumA.hashCode() == mutNumB.hashCode());
True,src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java,97,assertFalse(mutNumA.hashCode() == mutNumC.hashCode());
True,src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java,src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java,98,assertTrue(mutNumA.hashCode() == Short.valueOf((short) 0).hashCode());

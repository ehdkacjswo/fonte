is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,18,mport java.io.Serializable;
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,20,mport org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,18,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,19,import org.apache.commons.math.ConvergenceException;
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,23," Implements the <a href=""http://mathworld.wolfram.com/Bisection.html"">bisection algorithm</a>"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,24,  for finding zeros of univariate real functions.  This algorithm will find only one zero in the given interval.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,22,"* Implements the <a href=""http://mathworld.wolfram.com/Bisection.html"">"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,23,* bisection algorithm</a> for finding zeros of univariate real functions.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,24,* <p>
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,26, @version $Revision: 1.17 $ $Date: 2004/06/23 16:26:14 $
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,27,* @version $Revision: 1.18 $ $Date: 2004/07/17 21:19:39 $
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,28,ublic class BisectionSolver extends UnivariateRealSolverImpl implements Serializable {
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,29,public class BisectionSolver extends UnivariateRealSolverImpl {
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,47, @throws MathException if the iteration count was exceeded or the
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,48,  solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,50,* @throws ConvergenceException the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,51,* @throws FunctionEvaluationException if an error occurs evaluating
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,52,*  the function
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,53,* @throws IllegalArgumentException if min is not less than max
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,51,hrows MathException {
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,56,"throws ConvergenceException, FunctionEvaluationException {"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,58, @param min the lower bound for the interval.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,59, @param max the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,64,* @param min the lower bound for the interval
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,65,* @param max the upper bound for the interval
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,61, @throws MathException if the iteration count was exceeded or the
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,62,  solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,67,* @throws ConvergenceException if the maximum iteration count is exceeded.
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,68,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,69,* function
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,70,* @throws IllegalArgumentException if min is not less than max
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,64,"ublic double solve(double min, double max) throws MathException {"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,72,"public double solve(double min, double max) throws ConvergenceException,"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,73,FunctionEvaluationException {
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,76,"verifyInterval(min,max);"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,74,min = f.value(min);
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,75,m = f.value(m);
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,84,fmin = f.value(min);
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,85,fm = f.value(m);
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,94,"hrow new MathException(""Maximum number of iterations exceeded"");"
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,104,throw new ConvergenceException
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,105,"(""Maximum number of iterations exceeded: ""  + maximalIterationCount);"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,20,mport org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,20,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,21,import org.apache.commons.math.FunctionEvaluationException;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,23," Implements the <a href=""http://mathworld.wolfram.com/BrentsMethod.html"">Brent algorithm</a>"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,24, for  finding zeros of real univariate
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,25, functions. This algorithm will find only one zero in the given interval.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,24,"* Implements the <a href=""http://mathworld.wolfram.com/BrentsMethod.html"">"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,25,* Brent algorithm</a> for  finding zeros of real univariate functions.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,26,* <p>
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,28, @version $Revision: 1.16 $ $Date: 2004/06/23 16:26:14 $
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,29,* @version $Revision: 1.17 $ $Date: 2004/07/17 21:19:39 $
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,30,ublic class BrentSolver extends UnivariateRealSolverImpl implements Serializable {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,31,public class BrentSolver extends UnivariateRealSolverImpl {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,47,* <p>
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,48,* Throws <code>ConvergenceException</code> if the values of the function
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,49,* at the endpoints of the interval have the same sign.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,49, @throws MathException if the iteration count was exceeded or the
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,50,  solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,55,* @throws ConvergenceException the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,56,* @throws FunctionEvaluationException if an error occurs evaluating
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,57,*  the function
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,58,* @throws IllegalArgumentException if initial is not between min and max
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,53,hrows MathException {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,61,"throws ConvergenceException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,68,* <p>
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,69,* Requires that the values of the function at the endpoints have opposite
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,70,* signs. An <code>IllegalArgumentException</code> is thrown if this is not
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,71,* the case.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,63, @throws MathException if the iteration count was exceeded or the
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,64,  solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,76,* @throws ConvergenceException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,77,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,78,* function
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,79,* @throws IllegalArgumentException if min is not less than max or the
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,80,* signs of the values of the function at the endpoints are not opposites
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,66,"ublic double solve(double min, double max) throws MathException {"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,82,"public double solve(double min, double max) throws ConvergenceException,"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,83,FunctionEvaluationException {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,86,"verifyBracketing(min, max, f);"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,73,ouble y0 = f.value(x0);
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,74,ouble y1 = f.value(x1);
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,75,f ((y0 > 0) == (y1 > 0)) {
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,76,"hrow new MathException(""Interval doesn't bracket a zero."");"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,93,double y0;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,94,double y1;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,95,y0 = f.value(x0);
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,96,y1 = f.value(x1);
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,164,"hrow new MathException(""Maximum number of iterations exceeded."");"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,184,"throw new ConvergenceException(""Maximum number of iterations exceeded."");"
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,21,mport org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,19,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,20,import org.apache.commons.math.FunctionEvaluationException;
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,25, Newton's Method</a> for finding zeros of real univariate functions. This
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,26, algorithm will find only one zero in the given interval.  The function should
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,27, be continuous but not necessarily smooth.
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,24,* Newton's Method</a> for finding zeros of real univariate functions.
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,25,* <p>
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,26,* The function should be continuous but not necessarily smooth.
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,29, @version $Revision: 1.5 $ $Date: 2004/06/23 16:26:14 $
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,28,* @version $Revision: 1.6 $ $Date: 2004/07/17 21:19:39 $
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,31,ublic class NewtonSolver extends UnivariateRealSolverImpl implements Serializable {
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,30,public class NewtonSolver extends UnivariateRealSolverImpl {
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,50, @param min the lower bound for the interval.
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,51, @param max the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,50,* @param min the lower bound for the interval
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,51,* @param max the upper bound for the interval
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,53, @throws MathException if the iteration count was exceeded or the
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,54,  solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,53,* @throws ConvergenceException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,54,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,55,* function or derivative
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,56,* @throws IllegalArgumentException if min is not less than max
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,56,"ublic double solve(double min, double max) throws MathException {"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,58,"public double solve(double min, double max) throws ConvergenceException,"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,59,FunctionEvaluationException  {
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,66, @throws MathException if the iteration count was exceeded or the
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,67,  solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,70,* @throws ConvergenceException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,71,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,72,* function or derivative
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,73,* @throws IllegalArgumentException if startValue is not between min and max
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,70,hrows MathException {
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,76,"throws ConvergenceException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,79,"verifySequence(min, startValue, max);"
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,91,"hrow new MathException(""Maximum number of iterations exceeded"");"
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,97,throw new ConvergenceException
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,98,"(""Maximum number of iterations exceeded "" + i);"
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,21,mport org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,21,import org.apache.commons.math.FunctionEvaluationException;
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,44, @version $Revision: 1.6 $ $Date: 2004/06/23 16:26:14 $
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,44,* @version $Revision: 1.7 $ $Date: 2004/07/17 21:19:39 $
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,107, @throws MathException if the function couldn't be computed due to
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,108,  missing additional data or other environmental problems.
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,109, @see UnivariateRealFunction#value(double)
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,107,* @throws FunctionEvaluationException if v is outside of the domain of
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,108,* of the spline function (less than the smallest knot point or greater
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,109,* than the largest knot point)
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,111,ublic double value(double v) throws MathException {
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,111,public double value(double v) throws FunctionEvaluationException {
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,113,"hrow new IllegalArgumentException(""Argument outside domain"");"
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,113,"throw new FunctionEvaluationException(v,""Argument outside domain"");"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,20,mport org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,20,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,21,import org.apache.commons.math.FunctionEvaluationException;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,27, The algorithm is modified to maintain bracketing of a root by subsequent approximations.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,28," Because of forced bracketing, convergence may be slower than the unrestricted secant algorithm."
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,29," However, this implementation  should in general outperform the"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,30," <a href=""http://mathworld.wolfram.com/MethodofFalsePosition.html"">regula falsi method.</a>"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,29,* The algorithm is modified to maintain bracketing of a root by successive
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,30,"* approximations. Because of forced bracketing, convergence may be slower than"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,31,"* the unrestricted secant algorithm. However, this implementation should in"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,32,* general outperform the
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,33,"* <a href=""http://mathworld.wolfram.com/MethodofFalsePosition.html"">"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,34,* regula falsi method.</a>
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,32, The function is supposed to be continuous but not necessarily smooth.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,36,* The function is assumed to be continuous but not necessarily smooth.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,34, @version $Revision: 1.16 $ $Date: 2004/06/23 16:26:14 $
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,38,* @version $Revision: 1.17 $ $Date: 2004/07/17 21:19:39 $
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,51, @param min the lower bound for the interval.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,52, @param max the upper bound for the interval.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,53, @param initial the start value to use (ignored).
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,56,* @param min the lower bound for the interval
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,57,* @param max the upper bound for the interval
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,58,* @param initial the start value to use (ignored)
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,55, @throws MathException if the iteration count was exceeded or the
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,56,  solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,60,* @throws ConvergenceException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,61,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,62,* function
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,63,* @throws IllegalArgumentException if min is not less than max or the
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,64,* signs of the values of the function at the endpoints are not opposites
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,59,hrows MathException {
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,67,"throws ConvergenceException, FunctionEvaluationException {"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,69, @throws MathException if the iteration count was exceeded or the
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,70,  solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,77,* @throws ConvergenceException  if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,78,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,79,* function
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,80,* @throws IllegalArgumentException if min is not less than max or the
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,81,* signs of the values of the function at the endpoints are not opposites
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,72,"ublic double solve(double min, double max) throws MathException {"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,83,"public double solve(double min, double max) throws ConvergenceException,"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,84,FunctionEvaluationException {
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,87,"verifyBracketing(min, max, f);"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,83,f ((y0 > 0) == (y1 > 0)) {
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,84,"hrow new MathException(""Interval doesn't bracket a zero."");"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,132,"hrow new MathException(""Maximal iteration number exceeded"");"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,144,"throw new ConvergenceException(""Maximal iteration number exceeded"" + i);"
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,18,mport org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,18,import org.apache.commons.math.FunctionEvaluationException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,23, @version $Revision: 1.13 $ $Date: 2004/06/23 16:26:14 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,23,* @version $Revision: 1.14 $ $Date: 2004/07/17 21:19:39 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,30, @throws MathException if the function couldn't be computed due to
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,31,  missing additional data or other environmental problems.
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,30,* @throws FunctionEvaluationException if the function evaluation fails
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,33,ublic double value(double x) throws MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,32,public double value(double x) throws FunctionEvaluationException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,18,mport org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,18,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,19,import org.apache.commons.math.FunctionEvaluationException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,25, @version $Revision: 1.13 $ $Date: 2004/06/23 16:26:14 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,27,* @version $Revision: 1.14 $ $Date: 2004/07/17 21:19:39 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,36, An exception will be thrown if the number is exceeded.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,38,* A <code>ConvergenceException</code> will be thrown if this number
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,39,* is exceeded.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,40,ublic void setMaximalIterationCount(int count);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,43,void setMaximalIterationCount(int count);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,47,ublic int getMaximalIterationCount();
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,50,int getMaximalIterationCount();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,56,ublic void resetMaximalIterationCount();
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,59,void resetMaximalIterationCount();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,70, @throws MathException if the accuracy can't be achieved by the solver or
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,71,         is otherwise deemed unreasonable.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,73,* @throws IllegalArgumentException if the accuracy can't be achieved by
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,74,* the solver or is otherwise deemed unreasonable.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,73,ublic void setAbsoluteAccuracy(double accuracy) throws MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,76,void setAbsoluteAccuracy(double accuracy);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,80,ublic double getAbsoluteAccuracy();
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,83,double getAbsoluteAccuracy();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,87,ublic void resetAbsoluteAccuracy();
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,90,void resetAbsoluteAccuracy();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,100, @throws MathException if the accuracy can't be achieved by the solver or
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,101,         is otherwise deemed unreasonable.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,103,* @throws IllegalArgumentException if the accuracy can't be achieved by
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,104,*  the solver or is otherwise deemed unreasonable.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,103,ublic void setRelativeAccuracy(double accuracy) throws MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,106,void setRelativeAccuracy(double accuracy);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,109,ublic double getRelativeAccuracy();
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,112,double getRelativeAccuracy();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,115,ublic void resetRelativeAccuracy();
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,118,void resetRelativeAccuracy();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,127, @throws MathException if the accuracy can't be achieved by the solver or
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,128,         is otherwise deemed unreasonable.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,130,* @throws IllegalArgumentException if the accuracy can't be achieved by
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,131,* the solver or is otherwise deemed unreasonable.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,130,ublic void setFunctionValueAccuracy(double accuracy) throws MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,133,void setFunctionValueAccuracy(double accuracy);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,136,ublic double getFunctionValueAccuracy();
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,139,double getFunctionValueAccuracy();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,142,ublic void resetFunctionValueAccuracy();
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,145,void resetFunctionValueAccuracy();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,151, @throws MathException if the iteration count was exceeded or the
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,152,  solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,154,* @throws ConvergenceException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,155,* or the solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,156,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,157,* function
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,158,* @throws IllegalArgumentException if min > max or the endpoints do not
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,159,* satisfy the requirements specified by the solver
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,154,"ublic double solve(double min, double max) throws MathException;"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,161,"double solve(double min, double max) throws ConvergenceException,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,162,FunctionEvaluationException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,164, @throws MathException if the iteration count was exceeded or the
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,165,  solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,172,* @throws ConvergenceException if the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,173,* or the solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,174,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,175,* function
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,176,* @throws IllegalArgumentException if min > max or the arguments do not
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,177,* satisfy the requirements specified by the solver
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,167,"ublic double solve(double min, double max, double startValue)"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,168,hrows MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,179,"double solve(double min, double max, double startValue)"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,180,"throws ConvergenceException, FunctionEvaluationException;"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,173," @throws MathException if there is no result available, either"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,186,"* @throws IllegalStateException if there is no result available, either"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,176,ublic double getResult() throws MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,189,double getResult();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,188," @throws MathException if there is no result available, either"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,201,"* @throws IllegalStateException if there is no result available, either"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,191,ublic int getIterationCount() throws MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,204,int getIterationCount();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,21,mport org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,21,import org.apache.commons.math.FunctionEvaluationException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,27, @version $Revision: 1.14 $ $Date: 2004/06/23 16:26:14 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,27,* @version $Revision: 1.15 $ $Date: 2004/07/17 21:19:39 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,29,"ublic abstract class UnivariateRealSolverImpl implements UnivariateRealSolver, Serializable {"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,29,"public abstract class UnivariateRealSolverImpl implements UnivariateRealSolver,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,30,Serializable {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,74, @param defaultAbsoluteAccuracy maximum absolue error.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,75, @param defaultMaximalIterationCount maximum number of iterations.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,76, @throws IllegalArgumentException if function is null.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,76,* @param defaultAbsoluteAccuracy maximum absolute error
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,77,* @param defaultMaximalIterationCount maximum number of iterations
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,78,* @throws IllegalArgumentException if f is null or the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,79,* defaultAbsoluteAccuracy is not valid
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,102, @return the last computed root.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,103, @throws MathException if no root has been computed.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,106,* @return the last computed root
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,107,* @throws IllegalStateException if no root has been computed
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,105,ublic double getResult() throws MathException {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,109,public double getResult() {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,109,"hrow new MathException(""No result available"");"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,113,"throw new IllegalStateException(""No result available"");"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,115, @return the last iteration count.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,116, @throws MathException if no root has been computed.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,120,* @return the last iteration count
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,121,* @throws IllegalStateException if no root has been computed
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,119,ublic int getIterationCount() throws MathException {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,124,public int getIterationCount() {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,123,"hrow new MathException(""No result available"");"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,128,"throw new IllegalStateException(""No result available"");"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,149, @throws MathException if the accuracy can't be achieved by the solver or
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,150,         is otherwise deemed unreasonable.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,155,* @throws IllegalArgumentException if the accuracy can't be achieved by
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,156,*  the solver or is otherwise deemed unreasonable.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,152,ublic void setAbsoluteAccuracy(double accuracy)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,153,hrows MathException {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,158,public void setAbsoluteAccuracy(double accuracy) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,202, @throws MathException if the accuracy can't be achieved by the solver or
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,203,         is otherwise deemed unreasonable.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,207,* @throws IllegalArgumentException if the accuracy can't be achieved by
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,208,*  the solver or is otherwise deemed unreasonable.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,205,ublic void setRelativeAccuracy(double accuracy) throws MathException {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,210,public void setRelativeAccuracy(double accuracy) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,228, @throws MathException if the accuracy can't be achieved by the solver or
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,229,         is otherwise deemed unreasonable.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,233,* @throws IllegalArgumentException if the accuracy can't be achieved by
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,234,* the solver or is otherwise deemed unreasonable.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,231,ublic void setFunctionValueAccuracy(double accuracy)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,232,hrows MathException {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,236,public void setFunctionValueAccuracy(double accuracy) {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,257,* Returns true iff the function takes opposite signs at the endpoints.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,259,* @param lower  the lower endpoint
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,260,* @param upper  the upper endpoint
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,261,* @param f the function
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,262,* @return true if f(lower) * f(upper) < 0
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,263,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,264,* function at the endpoints
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,266,"protected boolean isBracketing(double lower, double upper,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,267,UnivariateRealFunction f) throws FunctionEvaluationException {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,268,return  (f.value(lower) * f.value(upper) < 0);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,272,* Returns true if the arguments form a (strictly) increasing sequence
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,274,* @param start  first number
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,275,* @param mid   second number
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,276,* @param end  third number
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,277,* @return true if the arguments form an increasing sequence
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,279,"protected boolean isSequence(double start, double mid, double end) {"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,280,return (start < mid) && (mid < end);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,284,"* Verifies that the endpoints specify an interval,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,285,* throws IllegalArgumentException if not
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,287,* @param lower  lower endpoint
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,288,* @param upper upper endpoint
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,289,* @throws IllegalArgumentException
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,291,"protected void verifyInterval(double lower, double upper) {"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,292,if (lower >= upper) {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,293,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,294,"(""Endpoints do not specify an interval: ["" + lower +"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,295,""","" + upper + ""]"");"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,300,* Verifies that <code>lower < initial < upper</code>
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,301,* throws IllegalArgumentException if not
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,303,* @param lower  lower endpoint
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,304,* @param initial initial value
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,305,* @param upper upper endpoint
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,306,* @throws IllegalArgumentException
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,308,"protected void verifySequence(double lower, double initial, double upper) {"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,309,"if (!isSequence(lower, initial, upper)) {"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,310,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,311,"(""Invalid interval, initial value parameters:  lower="" +"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,312,"lower + "" initial="" + initial + "" upper="" + upper);"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,317,* Verifies that the endpoints specify an interval and the function takes
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,318,"* opposite signs at the enpoints, throws IllegalArgumentException if not"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,320,* @param lower  lower endpoint
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,321,* @param upper upper endpoint
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,322,* @param f function
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,323,* @throws IllegalArgumentException
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,324,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,325,* function at the endpoints
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,327,"protected void verifyBracketing(double lower, double upper,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,328,UnivariateRealFunction f) throws FunctionEvaluationException {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,330,"verifyInterval(lower, upper);"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,331,"if (!isBracketing(lower, upper, f)) {"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,332,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,333,"(""Function values at endpoints do not have different signs."" +"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,334,"""  Endpoints: ["" + lower + "","" + upper + ""]"" +"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,335,"""  Values: ["" + f.value(lower) + "","" + f.value(upper) + ""]"");"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,18,mport org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,18,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,19,import org.apache.commons.math.ConvergenceException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,22, @version $Revision: 1.9 $ $Date: 2004/06/23 16:26:14 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,24,* @version $Revision: 1.10 $ $Date: 2004/07/17 21:19:39 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,34,/** Cached solver factory */
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,35,private static UnivariateRealSolverFactory factory = null;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,33, Method to solve for zeros of real univariate functions.  A
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,34, default solver is created and used for solving.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,38,* Convenience method to find a zero of a univariate real function.  A default
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,39,* solver is used.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,39, @throws MathException if the iteration count was exceeded or the
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,40,         solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,45,* @throws ConvergenceException if the iteration count was exceeded
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,46,* @throws FunctionEvaluationException if an error occurs evaluating
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,47,* the function
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,48,* @throws IllegalArgumentException if f is null or the endpoints do not
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,49,* specify a valid interval
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,43,hrows MathException
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,45,f(f == null){
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,46,"hrow new IllegalArgumentException(""f can not be null."");"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,49,eturn UnivariateRealSolverFactory.newInstance().newDefaultSolver(f)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,50,"solve(x0, x1);"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,52,"throws ConvergenceException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,53,setup(f);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,54,"return factory.newDefaultSolver(f).solve(x0, x1);"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,54, Convience method to solve for zeros of real univariate functions.  A
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,55, default solver is created and used for solving.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,56, @param f the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,57, @param x0 the lower bound for the interval.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,58, @param x1 the upper bound for the interval.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,59, @param absoluteAccuracy the accuracy to be used by the solver.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,60, @return a value where the function is zero.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,61, @throws MathException if the iteration count was exceeded or the
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,62,         solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,58,* Convenience method to find a zero of a univariate real function.  A default
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,59,* solver is used.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,61,* @param f the function
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,62,* @param x0 the lower bound for the interval
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,63,* @param x1 the upper bound for the interval
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,64,* @param absoluteAccuracy the accuracy to be used by the solver
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,65,* @return a value where the function is zero
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,66,* @throws ConvergenceException if the iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,67,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,68,* function
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,69,"* @throws IllegalArgumentException if f is null, the endpoints do not"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,70,"* specify a valid interval, or the absoluteAccuracy is not valid for the"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,71,* default solver
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,64,ublic static double solve(
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,65,"nivariateRealFunction f,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,66,"ouble x0,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,67,"ouble x1,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,68,ouble absoluteAccuracy)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,69,hrows MathException
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,71,f(f == null){
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,72,"hrow new IllegalArgumentException(""f can not be null."");"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,75,nivariateRealSolver solver = UnivariateRealSolverFactory.newInstance()
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,76,newDefaultSolver(f);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,73,"public static double solve(UnivariateRealFunction f, double x0, double x1,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,74,"double absoluteAccuracy) throws ConvergenceException,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,75,FunctionEvaluationException {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,77,setup(f);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,78,UnivariateRealSolver solver = factory.newDefaultSolver(f);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,82," For a function, f, this method returns two values, a and b that bracket"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,83," a root of f.  That is to say, there exists a value c between a and b"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,84, such that f(c) = 0.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,84,* This method attempts to find two values a and b satisfying <ul>
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,85,* <li> <code> lowerBound <= a < initial < b <= upperBound</code> </li>
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,86,* <li> <code> f(a) * f(b) < 0 </code></li>
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,87,* </ul>
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,88,"* If f is continuous on <code>[a,b],</code> this means that <code>a</code>"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,89,* and <code>b</code> bracket a root of f.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,90,* <p>
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,91,* The algorithm starts by setting
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,92,"* <code>a := initial -1; b := initial +1,</code> examines the value of the"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,93,* function at <code>a</code> and <code>b</code> and keeps moving
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,94,* the endpoints out by one unit each time through a loop that terminates
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,95,* when one of the following happens: <ul>
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,96,* <li> <code> f(a) * f(b) < 0 </code> --  success!</li>
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,97,* <li> <code> a = lower </code> and <code> b = upper</code>
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,98,* -- ConvergenceException </li>
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,99,* <li> <code> Integer.MAX_VALUE</code> iterations elapse
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,100,* -- ConvergenceException </li>
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,101,* </ul>
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,102,* <p>
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,103,* <strong>Note: </strong> this method can take
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,104,* <code>Integer.MAX_VALUE</code> iterations to throw a
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,105,* <code>ConvergenceException.</code>  Unless you are confident that there
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,106,* is a root between <code>lowerBound</code> and <code>upperBound</code>
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,107,"* near <code>initial,</code> it is better to use"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,108,"* {@link #bracket(UnivariateRealFunction, double, double, double, int)},"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,109,* explicitly specifying the maximum number of iterations.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,87, @param initial midpoint of the returned range.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,88," @param lowerBound for numerical safety, a never is less than this value."
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,89," @param upperBound for numerical safety, b never is greater than this"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,90,                   value.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,91," @return a two element array holding {a, b}."
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,92, @throws MathException if a root can not be bracketted.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,112,* @param initial initial midpoint of interval being expanded to
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,113,* bracket a root
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,114,* @param lowerBound lower bound (a is never lower than this value)
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,115,* @param upperBound upper bound (b never is greater than this
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,116,* value)
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,117,"* @return a two element array holding {a, b}"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,118,* @throws ConvergenceException if a root can not be bracketted
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,119,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,120,* function
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,121,"* @throws IllegalArgumentException if function is null, maximumIterations"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,122,"* is not positive, or initial is not between lowerBound and upperBound"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,94,"ublic static double[] bracket(UnivariateRealFunction function,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,95,"ouble initial,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,96,"ouble lowerBound,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,97,ouble upperBound) throws MathException {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,124,"public static double[] bracket(UnivariateRealFunction function,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,125,"double initial, double lowerBound, double upperBound)"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,126,"throws ConvergenceException, FunctionEvaluationException {"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,103," For a function, f, this method returns two values, a and b that bracket"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,104," a root of f.  That is to say, there exists a value c between a and b"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,105, such that f(c) = 0.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,132,* This method attempts to find two values a and b satisfying <ul>
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,133,* <li> <code> lowerBound <= a < initial < b <= upperBound</code> </li>
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,134,* <li> <code> f(a) * f(b) < 0 </code> </li>
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,135,* </ul>
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,136,"* If f is continuous on <code>[a,b],</code> this means that <code>a</code>"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,137,* and <code>b</code> bracket a root of f.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,138,* <p>
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,139,* The algorithm starts by setting
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,140,"* <code>a := initial -1; b := initial +1,</code> examines the value of the"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,141,* function at <code>a</code> and <code>b</code> and keeps moving
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,142,* the endpoints out by one unit each time through a loop that terminates
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,143,* when one of the following happens: <ul>
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,144,* <li> <code> f(a) * f(b) < 0 </code> --  success!</li>
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,145,* <li> <code> a = lower </code> and <code> b = upper</code>
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,146,* -- ConvergenceException </li>
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,147,* <li> <code> maximumIterations</code> iterations elapse
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,148,* -- ConvergenceException </li></ul>
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,108, @param initial midpoint of the returned range.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,109," @param lowerBound for numerical safety, a never is less than this value."
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,110," @param upperBound for numerical safety, b never is greater than this"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,111,                   value.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,112," @param maximumIterations to guard against infinite looping, maximum"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,113,                          number of iterations to perform
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,151,* @param initial initial midpoint of interval being expanded to
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,152,* bracket a root
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,153,* @param lowerBound lower bound (a is never lower than this value)
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,154,* @param upperBound upper bound (b never is greater than this
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,155,* value)
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,156,* @param maximumIterations maximum number of iterations to perform
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,115, @throws MathException if a root can not be bracketted.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,158,* @throws ConvergenceException if the algorithm fails to find a and b
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,159,* satisfying the desired conditions
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,160,* @throws FunctionEvaluationException if an error occurs evaluating the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,161,* function
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,162,"* @throws IllegalArgumentException if function is null, maximumIterations"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,163,"* is not positive, or initial is not between lowerBound and upperBound"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,118,"ouble initial,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,119,"ouble lowerBound,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,120,"ouble upperBound,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,121,nt maximumIterations) throws MathException {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,166,"double initial, double lowerBound, double upperBound,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,167,"int maximumIterations) throws ConvergenceException,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,168,FunctionEvaluationException {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,170,if (function == null) {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,171,"throw new IllegalArgumentException (""function is null."");"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,173,if (maximumIterations <= 0)  {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,174,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,175,"(""bad value for maximumIterations: "" + maximumIterations);"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,177,if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,178,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,179,"(""Invalid endpoint parameters:  lowerBound="" + lowerBound +"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,180,""" initial="" + initial + "" upperBound="" + upperBound);"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,133,umIterations += 1 ;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,134, while ( (fa * fb > 0.0) && ( numIterations < maximumIterations ) );
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,194,numIterations++ ;
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,195,} while ((fa * fb > 0.0) && (numIterations < maximumIterations) &&
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,196,((a > lowerBound) || (b < upperBound)));
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,198,if (fa * fb >= 0.0 ) {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,199,throw new ConvergenceException
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,200,"(""Number of iterations= "" + numIterations +"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,201,""" maximum iterations= ""  + maximumIterations +"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,202,""" initial= "" + initial + "" lowerBound="" + lowerBound +"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,203,""" upperBound="" + upperBound + "" final a value="" + a +"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,204,""" final b value="" + b + "" f(a)="" + fa + "" f(b)="" + fb);"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,222,"* Checks to see if f is null, throwing IllegalArgumentException if so."
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,223,* Also initializes factory if factory is null.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,225,* @param f  input function
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,226,* @throws IllegalArgumentException if f is null
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,228,private static void setup(UnivariateRealFunction f) {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,230,if (f == null) {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,231,"throw new IllegalArgumentException(""function can not be null."");"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,234,if (factory == null) {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,235,factory = UnivariateRealSolverFactory.newInstance();
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,20,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,21,import org.apache.commons.math.FunctionEvaluationException;
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,29, @version $Revision: 1.24 $ $Date: 2004/06/23 16:26:15 $
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,31,* @version $Revision: 1.25 $ $Date: 2004/07/17 21:19:39 $
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,82,"/ by default, do simple root finding using bracketing and bisection."
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,84,"// by default, do simple root finding using bracketing and default solver."
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,87,ublic double value(double x) throws MathException {
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,88,eturn cumulativeProbability(x) - p;
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,89,public double value(double x) throws FunctionEvaluationException {
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,90,try {
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,91,return cumulativeProbability(x) - p;
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,92,} catch (MathException ex) {
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,93,throw new FunctionEvaluationException
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,94,"(x, ""Error computing cdf"", ex);"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,92,/ bracket root
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,93,ouble[] bracket =
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,94,nivariateRealSolverUtils.bracket(
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,95,"ootFindingFunction,"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,96,"etInitialDomain(p),"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,97,"etDomainLowerBound(p),"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,98,etDomainUpperBound(p));
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,99,"// Try to bracket root, test domain endoints if this fails"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,100,double lowerBound = getDomainLowerBound(p);
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,101,double upperBound = getDomainUpperBound(p);
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,102,double[] bracket = null;
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,103,try {
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,104,bracket = UnivariateRealSolverUtils.bracket(
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,105,"rootFindingFunction, getInitialDomain(p),"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,106,"lowerBound, upperBound);"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,107,}  catch (ConvergenceException ex) {
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,109,* Check domain endpoints to see if one gives value that is within
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,110,* the default solver's defaultAbsoluteAccuracy of 0 (will be the
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,111,* case if density has bounded support and p is 0 or 1).
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,113,"* TODO: expose the default solver, defaultAbsoluteAccuracy as"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,114,* a constant.
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,116,if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,117,return lowerBound;
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,119,if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,120,return upperBound;
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,122,// Failed bracket convergence was not because of corner solution
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,123,throw new MathException(ex);
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,101,ouble root =
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,102,nivariateRealSolverUtils.solve(
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,103,"ootFindingFunction,"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,104,"racket[0],"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,105,racket[1]);
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,127,"double root = UnivariateRealSolverUtils.solve(rootFindingFunction,"
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,128,"bracket[0],bracket[1]);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,22,mport org.apache.commons.math.stat.univariate.DescriptiveStatistics;
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,27, @version $Revision: 1.11 $ $Date: 2004/06/02 00:11:53 $
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,26,* @version $Revision: 1.12 $ $Date: 2004/07/17 21:19:39 $
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,85,"assertEquals(result, solver.getResult(), 0);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,86,assertTrue(solver.getIterationCount() > 0);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,91,ouble expected = 1.0e-2;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,93,double expected = 1.0e-2;
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,95,ry {
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,96,olver.setFunctionValueAccuracy(expected);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,97,"ssertEquals(expected, solver.getFunctionValueAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,98, catch (MathException ex) {
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,99,ail(ex.getMessage());
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,96,solver.setFunctionValueAccuracy(expected);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,97,"assertEquals(expected, solver.getFunctionValueAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,107,ouble newValue = 1.0e-2;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,104,double newValue = 1.0e-2;
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,111,ry {
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,112,ouble oldValue = solver.getFunctionValueAccuracy();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,113,olver.setFunctionValueAccuracy(newValue);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,114,olver.resetFunctionValueAccuracy();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,115,"ssertEquals(oldValue, solver.getFunctionValueAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,116, catch(MathException ex){
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,117,ail(ex.getMessage());
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,107,double oldValue = solver.getFunctionValueAccuracy();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,108,solver.setFunctionValueAccuracy(newValue);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,109,solver.resetFunctionValueAccuracy();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,110,"assertEquals(oldValue, solver.getFunctionValueAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,125,ouble expected = 1.0e-2;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,117,double expected = 1.0e-2;
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,129,ry {
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,130,olver.setAbsoluteAccuracy(expected);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,131,"ssertEquals(expected, solver.getAbsoluteAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,132, catch(MathException ex){
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,133,ail(ex.getMessage());
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,120,solver.setAbsoluteAccuracy(expected);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,121,"assertEquals(expected, solver.getAbsoluteAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,141,ouble newValue = 1.0e-2;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,128,double newValue = 1.0e-2;
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,145,ry {
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,146,ouble oldValue = solver.getAbsoluteAccuracy();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,147,olver.setAbsoluteAccuracy(newValue);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,148,olver.resetAbsoluteAccuracy();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,149,"ssertEquals(oldValue, solver.getAbsoluteAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,150, catch(MathException ex){
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,151,ail(ex.getMessage());
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,131,double oldValue = solver.getAbsoluteAccuracy();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,132,solver.setAbsoluteAccuracy(newValue);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,133,solver.resetAbsoluteAccuracy();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,134,"assertEquals(oldValue, solver.getAbsoluteAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,189,ry {
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,190,olver.setRelativeAccuracy(expected);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,191,"ssertEquals(expected, solver.getRelativeAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,192, catch(MathException ex){
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,193,ail(ex.getMessage());
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,171,solver.setRelativeAccuracy(expected);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,172,"assertEquals(expected, solver.getRelativeAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,201,ouble newValue = 1.0e-2;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,179,double newValue = 1.0e-2;
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,205,ry {
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,206,ouble oldValue = solver.getRelativeAccuracy();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,207,olver.setRelativeAccuracy(newValue);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,208,olver.resetRelativeAccuracy();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,209,"ssertEquals(oldValue, solver.getRelativeAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,210, catch(MathException ex){
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,211,ail(ex.getMessage());
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,182,double oldValue = solver.getRelativeAccuracy();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,183,solver.setRelativeAccuracy(newValue);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,184,solver.resetRelativeAccuracy();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,185,"assertEquals(oldValue, solver.getRelativeAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,218,ublic void testSerialization() {
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,191,public void testSerialization() throws MathException {
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,192,UnivariateRealFunction f = (UnivariateRealFunction)TestUtils.serializeAndRecover(new QuinticFunction());
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,193,double result;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,195,BisectionSolver solver = new BisectionSolver(f);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,196,UnivariateRealSolver solver2 = (UnivariateRealSolver)TestUtils.serializeAndRecover(solver);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,198,"result = solver.solve(-0.2, 0.2);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,199,"assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,200,"assertEquals(solver2.solve(-0.2, 0.2), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,202,"result = solver.solve(-0.1, 0.3);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,203,"assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,204,"assertEquals(solver2.solve(-0.1, 0.3), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,221,ry {
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,222,nivariateRealFunction f = (UnivariateRealFunction)TestUtils.serializeAndRecover(new QuinticFunction());
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,223,ouble result;
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,225,isectionSolver solver = new BisectionSolver(f);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,226,nivariateRealSolver solver2 = (UnivariateRealSolver)TestUtils.serializeAndRecover(solver);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,228,"esult = solver.solve(-0.2, 0.2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,229,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,230,"ssertEquals(solver2.solve(-0.2, 0.2), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,232,"esult = solver.solve(-0.1, 0.3);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,233,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,234,"ssertEquals(solver2.solve(-0.1, 0.3), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,236,"esult = solver.solve(-0.3, 0.45);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,237,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,238,"ssertEquals(solver2.solve(-0.3, 0.45), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,240,"esult = solver.solve(0.3, 0.7);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,241,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,242,"ssertEquals(solver2.solve(0.3, 0.7), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,244,"esult = solver.solve(0.2, 0.6);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,245,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,246,"ssertEquals(solver2.solve(0.2, 0.6), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,248,"esult = solver.solve(0.05, 0.95);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,249,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,250,"ssertEquals(solver2.solve(0.05, 0.95), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,252,"esult = solver.solve(0.85, 1.25);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,253,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,254,"ssertEquals(solver2.solve(0.85, 1.25), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,256,"esult = solver.solve(0.8, 1.2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,257,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,258,"ssertEquals(solver2.solve(0.8, 1.2), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,260,"esult = solver.solve(0.85, 1.75);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,261,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,262,"ssertEquals(solver2.solve(0.85, 1.75), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,264,"esult = solver.solve(0.55, 1.45);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,265,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,266,"ssertEquals(solver2.solve(0.55, 1.45), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,268,"esult = solver.solve(0.85, 5);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,269,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,270,"ssertEquals(solver2.solve(0.85, 5), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,272, catch(MathException ex){
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,273,ail(ex.getMessage());
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,206,"result = solver.solve(-0.3, 0.45);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,207,"assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,208,"assertEquals(solver2.solve(-0.3, 0.45), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,210,"result = solver.solve(0.3, 0.7);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,211,"assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,212,"assertEquals(solver2.solve(0.3, 0.7), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,214,"result = solver.solve(0.2, 0.6);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,215,"assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,216,"assertEquals(solver2.solve(0.2, 0.6), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,218,"result = solver.solve(0.05, 0.95);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,219,"assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,220,"assertEquals(solver2.solve(0.05, 0.95), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,222,"result = solver.solve(0.85, 1.25);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,223,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,224,"assertEquals(solver2.solve(0.85, 1.25), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,226,"result = solver.solve(0.8, 1.2);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,227,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,228,"assertEquals(solver2.solve(0.8, 1.2), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,230,"result = solver.solve(0.85, 1.75);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,231,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,232,"assertEquals(solver2.solve(0.85, 1.75), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,234,"result = solver.solve(0.55, 1.45);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,235,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,236,"assertEquals(solver2.solve(0.55, 1.45), result, solver2.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,238,"result = solver.solve(0.85, 5);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,239,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,240,"assertEquals(solver2.solve(0.85, 5), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,277,ry{
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,278,ouble newValue = 1.0e-2;
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,279,nivariateRealFunction f = (UnivariateRealFunction)TestUtils.serializeAndRecover(new QuinticFunction());
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,280,nivariateRealSolver solver = new BisectionSolver(f);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,282,ouble oldValue = solver.getRelativeAccuracy();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,283,olver.setRelativeAccuracy(newValue);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,284,olver.resetRelativeAccuracy();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,285,"ssertEquals(oldValue, solver.getRelativeAccuracy(), 1.0e-2);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,243,double newValue = 1.0e-2;
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,244,f = (UnivariateRealFunction)TestUtils.serializeAndRecover(new QuinticFunction());
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,245,solver = new BisectionSolver(f);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,287,nivariateRealSolver  solver2 = (UnivariateRealSolver)TestUtils.serializeAndRecover(solver);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,247,double oldValue = solver.getRelativeAccuracy();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,248,solver.setRelativeAccuracy(newValue);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,249,solver.resetRelativeAccuracy();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,250,"assertEquals(oldValue, solver.getRelativeAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,289,"ssertEquals(oldValue, solver2.getRelativeAccuracy(), 1.0e-2);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,252,solver2 = (UnivariateRealSolver)TestUtils.serializeAndRecover(solver);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,291,olver2.setRelativeAccuracy(newValue);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,292,olver2.resetRelativeAccuracy();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,254,"assertEquals(oldValue, solver2.getRelativeAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,294,"ssertEquals(oldValue, solver2.getRelativeAccuracy(), 1.0e-2);"
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,256,solver2.setRelativeAccuracy(newValue);
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,257,solver2.resetRelativeAccuracy();
True,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,259,"assertEquals(oldValue, solver2.getRelativeAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,296, catch(MathException ex){
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,297,ail(ex.getMessage());
False,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,25, @version $Revision: 1.1 $ $Date: 2004/04/08 21:19:17 $
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,25,* @version $Revision: 1.2 $ $Date: 2004/07/17 21:19:39 $
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,42,"//TODO:  create abstract solver test class, move these there"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,43,"assertEquals(result, solver.getResult(), 0);"
True,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/NewtonSolverTest.java,44,assertTrue(solver.getIterationCount() > 0);
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,20,mport org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,20,import org.apache.commons.math.FunctionEvaluationException;
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,25, @version $Revision: 1.13 $ $Date: 2004/06/02 00:12:01 $
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,25,* @version $Revision: 1.14 $ $Date: 2004/07/17 21:19:39 $
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,34,ublic double value(double x) throws MathException {
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,34,public double value(double x) throws FunctionEvaluationException {
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,40,ublic double value(double x) throws MathException {
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,40,public double value(double x) throws FunctionEvaluationException {
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,18,mport org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,18,import org.apache.commons.math.FunctionEvaluationException;
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,28, @version $Revision: 1.12 $ $Date: 2004/04/08 21:19:17 $
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,28,* @version $Revision: 1.13 $ $Date: 2004/07/17 21:19:39 $
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,35,ublic double value(double x) throws MathException {
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,35,public double value(double x) throws FunctionEvaluationException {
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,43,ublic double value(double x) throws MathException {
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,43,public double value(double x) throws FunctionEvaluationException {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,19,import org.apache.commons.math.ConvergenceException;
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,24, @version $Revision: 1.7 $ $Date: 2004/02/21 21:35:16 $
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,25,* @version $Revision: 1.8 $ $Date: 2004/07/17 21:19:39 $
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,30,ublic void testSolveNull(){
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,29,protected UnivariateRealFunction sin = new SinFunction();
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,31,public void testSolveNull() throws MathException {
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,34, catch(MathException ex){
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,35,"ail(""math exception should no be thrown."");"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,44,ublic void testSolveSin(){
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,45,ry {
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,46,"ouble x = UnivariateRealSolverUtils.solve(new SinFunction(), 1.0,"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,40,public void testSolveBadParameters() throws MathException {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,41,try { // bad endpoints
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,42,"double x = UnivariateRealSolverUtils.solve(sin,0.0, 4.0, 4.0);"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,43,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,44,// expected
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,46,try { // bad accuracy
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,47,"double x = UnivariateRealSolverUtils.solve(sin, 0.0, 4.0, 0.0);"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,48,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,49,// expected
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,53,public void testSolveSin() throws MathException {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,54,"double x = UnivariateRealSolverUtils.solve(sin, 1.0,"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,48,"ssertEquals(Math.PI, x, 1.0e-4);"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,49, catch(MathException ex){
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,50,"ail(""math exception should no be thrown."");"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,56,"assertEquals(Math.PI, x, 1.0e-4);"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,57,ublic void testSolveAccuracyNull(){
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,59,public void testSolveAccuracyNull()  throws MathException {
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,62, catch(MathException ex){
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,63,"ail(""math exception should no be thrown."");"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,72,ublic void testSolveAccuracySin(){
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,73,ry {
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,74,ouble accuracy = 1.0e-6;
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,75,"ouble x = UnivariateRealSolverUtils.solve(new SinFunction(), 1.0,"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,69,public void testSolveAccuracySin() throws MathException {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,70,double accuracy = 1.0e-6;
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,71,"double x = UnivariateRealSolverUtils.solve(sin, 1.0,"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,77,"ssertEquals(Math.PI, x, accuracy);"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,78, catch(MathException ex){
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,79,"ail(""math exception should no be thrown."");"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,73,"assertEquals(Math.PI, x, accuracy);"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,76,public void testSolveNoRoot() throws MathException {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,77,try {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,78,"double x = UnivariateRealSolverUtils.solve(sin, 1.0,"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,79,1.5);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,80,"fail(""Expecting IllegalArgumentException "");"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,81,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,82,// expected
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,86,public void testBracketSin() throws MathException {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,87,"double[] result = UnivariateRealSolverUtils.bracket(sin,"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,88,"0.0, -2.0, 2.0);"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,89,assertTrue(sin.value(result[0]) < 0);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,90,assertTrue(sin.value(result[1]) > 0);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,93,public void testBracketCornerSolution() throws MathException {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,94,try {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,95,"double[] result = UnivariateRealSolverUtils.bracket(sin,"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,96,"1.5, 0, 2.0);"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,97,"fail(""Expecting ConvergenceException"");"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,98,} catch (ConvergenceException ex) {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,99,// expected
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,103,public void testBadParameters() throws MathException {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,104,try { // null function
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,105,"double[] result = UnivariateRealSolverUtils.bracket(null, 1.5, 0, 2.0);"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,106,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,107,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,108,// expected
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,110,try { // initial not between endpoints
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,111,"double[] result = UnivariateRealSolverUtils.bracket(sin, 2.5, 0, 2.0);"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,112,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,113,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,114,// expected
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,116,try { // endpoints not valid
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,117,"double[] result = UnivariateRealSolverUtils.bracket(sin, 1.5, 2.0, 1.0);"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,118,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,119,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,120,// expected
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,122,try { // bad maximum iterations
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,123,"double[] result = UnivariateRealSolverUtils.bracket(sin, 1.5, 0, 2.0, 0);"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,124,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,125,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,126,// expected

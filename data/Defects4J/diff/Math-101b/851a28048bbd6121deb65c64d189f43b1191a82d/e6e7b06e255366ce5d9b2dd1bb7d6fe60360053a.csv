is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,4,* Copyright (c) 2003-2004 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,68,* <li>HyperGeometric</li>
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,69,* <li>Normal</li>
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,78, @version $Revision: 1.17 $ $Date: 2003/11/15 16:01:35 $
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,80,* @version $Revision: 1.18 $ $Date: 2004/01/26 03:04:31 $
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,171,* Create a new normal distribution with the given mean and standard
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,172,* deviation values.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,173,* @param mean arithmetic mean.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,174,* @param sd standard deviation.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,175,* @return a new normal distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,177,public abstract NormalDistribution
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,178,"createNormalDistribution(double mean, double sd);"
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,181,* Create a new normal distribution with the mean equal to zero and standard
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,182,* deviation equal to one.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,183,* @return a new normal distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,185,public abstract NormalDistribution createNormalDistribution();
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,4,* Copyright (c) 2003-2004 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,63, @version $Revision: 1.16 $ $Date: 2003/11/19 03:22:53 $
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,63,* @version $Revision: 1.17 $ $Date: 2004/01/26 03:04:31 $
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,158,* Create a new normal distribution with the given mean and standard
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,159,* deviation values.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,160,* @param mean arithmetic mean.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,161,* @param sd standard deviation.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,162,* @return a new normal distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,164,"public NormalDistribution createNormalDistribution(double mean, double sd) {"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,165,"return new NormalDistributionImpl(mean, sd);"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,169,* Create a new normal distribution with the mean equal to zero and standard
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,170,* deviation equal to one.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,171,* @return a new normal distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,173,public NormalDistribution createNormalDistribution() {
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,174,return new NormalDistributionImpl();
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,4,* Copyright (c) 2004 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,5,* reserved.
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,9,* are met:
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,17,*    distribution.
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,55,package org.apache.commons.math.distribution;
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,58,* Normal (Gauss) Distribution.
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,59,* Instances of NormalDistribution objects should be created using
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,60,"* {@link DistributionFactory#createNormalDistribution(double, double)}.<p>"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,62,* References:<p>
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,63,* <ul>
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,64,"* <li><a href=""http://mathworld.wolfram.com/NormalDistribution.html"">"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,65,* Normal Distribution</a></li>
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,66,* </ul>
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,69,public interface NormalDistribution extends ContinuousDistribution {
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,71,* Access the mean.
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,72,* @return mean for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,74,double getMean();
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,76,* Modify the mean.
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,77,* @param mean for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,79,void setMean(double mean);
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,81,* Access the standard deviation.
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,82,* @return standard deviation for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,84,double getStandardDeviation();
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,86,* Modify the standard deviation.
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,87,* @param sd standard deviation for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,89,void setStandardDeviation(double sd);
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,92,* Access algorithm used to calculate cummulative probability
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,93,* @return cdfAlgorithm the value of cummulative probability
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,95,public NormalCDFAlgorithm getCdfAlgorithm();
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,98,* Modify the algorithm used to calculate cummulative probability
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,99,* @param normalCDF the algorithm used to calculate cummulative probability
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,101,public void setCdfAlgorithm(NormalCDFAlgorithm normalCDF);
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,4,* Copyright (c) 2004 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,9,* are met:
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,55,package org.apache.commons.math.distribution;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,57,import java.io.Serializable;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,60,* Default implementation of
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,61,* {@link org.apache.commons.math.distribution.NormalDistribution}.<p>
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,62,* You can choose the algorithm used to calculate cummulative probability
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,63,* using method {@link #setCdfAlgorithm}. The deafault is the Cody algorithm
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,64,* {@link org.apache.commons.math.distribution.NormalCDFPreciseAlgorithm}
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,66,public class NormalDistributionImpl extends AbstractContinuousDistribution
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,67,"implements NormalDistribution, Serializable {"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,68,private double mean = 0;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,69,private double standardDeviation = 1;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,70,private NormalCDFAlgorithm cdfAlgorithm = new NormalCDFPreciseAlgorithm();
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,73,* Create a normal distribution using the given mean and standard deviation.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,74,* @param mean mean for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,75,* @param sd standard deviation for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,77,"public NormalDistributionImpl(double mean, double sd){"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,78,super();
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,79,setMean(mean);
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,80,setStandardDeviation(sd);
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,83,* Creates normal distribution with the mean equal to zero and standard
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,84,* deviation equal to one.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,86,public NormalDistributionImpl(){
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,87,super();
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,88,setMean(0.0);
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,89,setStandardDeviation(1.0);
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,92,* Access the mean.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,93,* @return mean for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,95,public double getMean() {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,96,return mean;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,99,* Modify the mean.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,100,* @param mean for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,102,public void setMean(double mean) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,103,this.mean = mean;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,107,* Access the standard deviation.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,108,* @return standard deviation for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,110,public double getStandardDeviation() {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,111,return standardDeviation;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,115,* Modify the standard deviation.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,116,* @param sd standard deviation for this distribution
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,118,public void setStandardDeviation(double sd) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,119,if (sd < 0.0) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,120,"throw new IllegalArgumentException(""Standard deviation must be"" +"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,123,standardDeviation = sd;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,127,"* For this disbution, X, this method returns P(X &lt; <code>x</code>)."
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,128,* @param x the value at which the CDF is evaluated.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,129,* @return CDF evaluted at <code>x</code>.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,131,public double cummulativeProbability(double x) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,132,double z = x;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,133,if(standardDeviation > 0){
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,134,z = (x - mean)/standardDeviation;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,135,}else{
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,136,return 0.0;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,138,return cdfAlgorithm.cdf(z);
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,143,"* For this distribution, X, this method returns the critical point x, such"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,144,* that P(X &lt; x) = <code>p</code>.<p>
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,145,* Provided implementation is adopted from
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,146,"* <a href=""http://www.r-project.org/"">R statistical package</a> function"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,147,* <code>qnorm(...)</code>.<p>
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,148,* References:
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,149,* <ul>
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,150,* <li>
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,151,"*  Beasley, J. D. and S. G. Springer (1977)."
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,152,"*  <a href=""http://lib.stat.cmu.edu/apstat/111"">"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,153,"*	Algorithm AS 111: The percentage points of the normal distribution</a>,"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,154,"*	Applied Statistics, 26, 118-121."
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,155,* </li>
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,156,* <li>
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,157,"*  Wichura, M.J. (1988)."
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,158,"*  <a href=""http://lib.stat.cmu.edu/apstat/241"">"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,159,*  Algorithm AS 241: The Percentage Points of the Normal Distribution.</a>
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,160,"*  Applied Statistics, 37, 477-484."
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,161,* </li>
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,162,* </ul>
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,164,* @param p the desired probability
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,165,"* @return x, such that P(X &lt; x) = <code>p</code>"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,167,public double inverseCummulativeProbability(double p) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,168,if (p < 0.0 || p > 1.0) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,169,"throw new IllegalArgumentException(""p must be between 0.0 and 1.0, inclusive."");"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,172,//TODO is this ok?
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,173,if(standardDeviation == 0){
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,174,return mean;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,177,"double r, val;"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,178,double q = p - 0.5;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,180,if (Math.abs(q) <= .425) {/* 0.075 <= p <= 0.925 */
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,181,r = 0.180625 - q*q;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,182,val =
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,183,q * (((((((r * 2509.0809287301226727 +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,184,33430.575583588128105) * r + 67265.770927008700853) * r +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,185,45921.953931549871457) * r + 13731.693765509461125) * r +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,186,1971.5909503065514427) * r + 133.14166789178437745) * r +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,187,3.387132872796366608)
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,188,/ (((((((r * 5226.495278852854561 +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,189,28729.085735721942674) * r + 39307.89580009271061) * r +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,190,21213.794301586595867) * r + 5394.1960214247511077) * r +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,191,687.1870074920579083) * r + 42.313330701600911252) * r + 1.);
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,192,"}else { //closer than 0.075 from {0,1} boundary"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,193,if (q > 0)
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,194,r = 1 - p;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,195,else
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,196,r = p;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,197,r = Math.sqrt(- Math.log(r));
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,198,if (r <= 5.0) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,199,r += -1.6;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,200,val = (((((((r * 7.7454501427834140764e-4 +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,201,0.0227238449892691845833) * r + 0.24178072517745061177) *
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,202,r + 1.27045825245236838258) * r +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,203,3.64784832476320460504) * r + 5.7694972214606914055) *
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,204,r + 4.6303378461565452959) * r +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,205,1.42343711074968357734)
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,206,/ (((((((r *
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,207,1.05075007164441684324e-9 + 5.475938084995344946e-4) *
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,208,r + 0.0151986665636164571966) * r +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,209,0.14810397642748007459) * r + 0.68976733498510000455) *
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,210,r + 1.6763848301838038494) * r +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,211,2.05319162663775882187) * r + 1.0);
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,212,}else { //very close to  0 or 1
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,213,r += -5.;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,214,val = (((((((r * 2.01033439929228813265e-7 +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,215,2.71155556874348757815e-5) * r +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,216,0.0012426609473880784386) * r + 0.026532189526576123093) *
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,217,r + 0.29656057182850489123) * r +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,218,1.7848265399172913358) * r + 5.4637849111641143699) *
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,219,r + 6.6579046435011037772)
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,220,/ (((((((r *
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,221,2.04426310338993978564e-15 + 1.4215117583164458887e-7)*
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,222,r + 1.8463183175100546818e-5) * r +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,223,7.868691311456132591e-4) * r + 0.0148753612908506148525)
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,224,* r + 0.13692988092273580531) * r +
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,225,0.59983220655588793769) * r + 1.0);
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,227,if(q < 0.0)
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,228,val = -val;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,230,return mean + standardDeviation*val;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,235,* Access algorithm used to calculate cummulative probability
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,236,* @return cdfAlgorithm the value of cummulative probability
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,238,public NormalCDFAlgorithm getCdfAlgorithm() {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,239,return cdfAlgorithm;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,244,* Modify the algorithm used to calculate cummulative probability
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,245,* @param normalCDF the algorithm used to calculate cummulative probability
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,247,public void setCdfAlgorithm(NormalCDFAlgorithm normalCDF) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,248,cdfAlgorithm = normalCDF;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,253,"* Access the domain value lower bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,254,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,255,* {@link #inverseCummulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,257,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,258,"* @return domain value lower bound, i.e."
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,259,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,261,protected double getDomainLowerBound(double p) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,262,return -Double.MAX_VALUE;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,266,"* Access the domain value upper bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,267,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,268,* {@link #inverseCummulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,270,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,271,"* @return domain value upper bound, i.e."
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,272,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,274,protected double getDomainUpperBound(double p) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,275,return Double.MAX_VALUE;
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,279,"* Access the initial domain value, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,280,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,281,* {@link #inverseCummulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,283,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,284,* @return initial domain value
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,286,protected double getInitialDomain(double p) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,287,return 0.0;
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,4,* Copyright (c) 2004 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,5,* reserved.
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,9,* are met:
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,55,package org.apache.commons.math.distribution;
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,57,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,59,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,62,*  Tests for NormalDistribution implementation
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,64,"* ""True"" results are taken from R - the same as in Mathematica"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,67,public class NormalDistributionTest extends TestCase {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,69,private NormalDistribution z;
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,70,private static final double PRECISION = 10e-6;
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,71,private static final double M = 2.1;
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,72,private static final double SD = 1.4;
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,75,* Constructor for NormalDistributionTest.
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,76,* @param arg0
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,78,public NormalDistributionTest(String arg0) {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,79,super(arg0);
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,82,public static void main(String[] args) {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,83,junit.swingui.TestRunner.run(NormalDistributionTest.class);
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,86,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,87,super.setUp();
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,88,"z = DistributionFactory.newInstance().createNormalDistribution(M, SD);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,91,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,92,super.tearDown();
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,93,z = null;
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,96,public void testCummulativeProbabilitydoubleM_MINUS_2SD() throws MathException {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,97,"testProbability(M - 2*SD, 0.02275013);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,100,public void testCummulativeProbabilitydoubleM_MINUS_SD() throws MathException {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,101,"testProbability(M - SD, 0.1586553);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,104,public void testCummulativeProbabilitydoubleM() throws MathException {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,105,"testProbability(M, 0.5);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,108,public void testCummulativeProbabilitydoubleM_PLUS_SD() throws MathException {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,109,"testProbability(M + SD, 0.8413447);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,112,public void testCummulativeProbabilitydoubleM_PLUS_2SD() throws MathException {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,113,"testProbability(M + 2*SD, 0.9772499);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,116,public void testCummulativeProbabilitydoubleM_PLUS_3SD() throws MathException {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,117,"testProbability(M + 3*SD, 0.9986501);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,120,public void testCummulativeProbabilitydoubleM_PLUS_4SD() throws MathException {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,121,"testProbability(M + 4*SD, 0.9999683);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,124,public void testCummulativeProbabilitydoubleM_PLUS_5SD() throws MathException {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,125,"testProbability(M + 5*SD, 0.9999997);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,128,public void testInverseCummulativeProbability0() throws MathException {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,129,"assertEquals(Double.isNaN(z.inverseCummulativeProbability(0.0)), true);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,132,public void testInverseCummulativeProbability001() throws MathException {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,133,"testValue(-2.226325, .001);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,136,public void testInverseCumulativeProbability010() throws MathException{
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,137,"testValue(-1.156887, .010);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,140,public void testInverseCumulativeProbability025() throws MathException{
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,141,"testValue(-0.6439496, .025);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,144,public void testInverseCumulativeProbability050() throws MathException{
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,145,"testValue(-0.2027951, .050);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,148,public void testInverseCumulativeProbability100() throws MathException{
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,149,"testValue(0.3058278, .100);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,152,public void testInverseCumulativeProbability900() throws MathException{
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,153,"testValue(3.894172, .900);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,156,public void testInverseCumulativeProbability950() throws MathException{
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,157,"testValue(4.402795, .950);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,160,public void testInverseCumulativeProbability975() throws MathException{
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,161,"testValue(4.84395, .975);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,164,public void testInverseCumulativeProbability990() throws MathException{
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,165,"testValue(5.356887, .990);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,168,public void testInverseCummulativeProbability999() throws MathException{
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,169,"testValue(6.426325, .999);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,172,public void testInverseCummulativeProbability1() throws MathException {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,173,"assertEquals(Double.isNaN(z.inverseCummulativeProbability(1.0)), true);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,176,public void testGetMean() {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,177,"assertEquals(M, z.getMean(), 0);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,180,public void testSetMean() throws MathException {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,181,double mu = Math.random();
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,182,z.setMean(mu);
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,183,"assertEquals(mu, z.getMean(), 0);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,184,"assertEquals(0.5d, z.cummulativeProbability(mu), PRECISION);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,187,public void testGetStandardDeviation() {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,188,"assertEquals(SD, z.getStandardDeviation(), 0);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,191,public void testSetStandardDeviation() throws MathException{
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,192,double sigma = 0.1d + Math.random();
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,193,z.setStandardDeviation(sigma);
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,194,"assertEquals(sigma, z.getStandardDeviation(), 0);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,195,"assertEquals(0.84134475, z.cummulativeProbability(z.getMean() + z.getStandardDeviation()), PRECISION );"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,198,public void testGetCdfAlgorithm() {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,199,assertTrue(z.getCdfAlgorithm() != null);
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,202,public void testSetCdfAlgorithm() {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,203,z.setCdfAlgorithm(new NormalCDFFastAlgorithm());
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,204,assertTrue(z.getCdfAlgorithm() instanceof NormalCDFFastAlgorithm);
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,207,"private void testProbability(double x, double expected) throws MathException {"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,208,double actual = Double.NaN;
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,209,z.setCdfAlgorithm(new NormalCDFPreciseAlgorithm());
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,210,actual =  z.cummulativeProbability(x);
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,211,"assertEquals(expected, actual, PRECISION);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,212,z.setCdfAlgorithm(new NormalCDFFastAlgorithm());
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,213,actual =  z.cummulativeProbability(x);
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,214,"assertEquals(expected, actual, PRECISION);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,217,"private void testValue(double expected, double p) throws MathException {"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,218,double actual = z.inverseCummulativeProbability(p);
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,219,"assertEquals(expected, actual, PRECISION);"

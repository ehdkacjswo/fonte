is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,253,SummaryStatistics) binStats.get(
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,254,"ath.max((int) Math.ceil((val - min) / delta) - 1, 0));"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,253,"(SummaryStatistics) binStats.get(findBin(min, val, delta));"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,319,ath.max((int) Math.ceil(
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,320,"inputArray[i] - min) / delta)- 1, 0));"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,318,"findBin(min, inputArray[i], delta));"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,378,* Returns the index of the bin to which the given value belongs
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,380,* @param min  the minimum value
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,381,* @param value  the value whose bin we are trying to find
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,382,* @param delta  the grid size
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,383,* @return
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,385,"private int findBin(double min, double value, double delta) {"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,386,return Math.min(
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,387,"Math.max((int) Math.ceil((value- min) / delta) - 1, 0),"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,388,binCount - 1);
False,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,57,* (non-Javadoc)
False,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,58, @see java.util.Random#nextBoolean()
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,58,"* Returns the next pseudorandom, uniformly distributed"
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,59,* <code>boolean</code> value from this random number generator's
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,60,* sequence.
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,62,"* @return  the next pseudorandom, uniformly distributed"
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,63,* <code>boolean</code> value from this random number generator's
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,64,* sequence
False,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,64,* (non-Javadoc)
False,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,65, @see java.util.Random#nextBytes(byte[])
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,71,* Generates random bytes and places them into a user-supplied
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,72,* byte array.  The number of random bytes produced is equal to
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,73,* the length of the byte array.
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,75,* @param bytes the non-null byte array in which to put the
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,76,* random bytes
False,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,71,* (non-Javadoc)
False,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,72, @see java.util.Random#nextDouble()
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,83,"* Returns the next pseudorandom, uniformly distributed"
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,84,* <code>double</code> value between <code>0.0</code> and
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,85,* <code>1.0</code> from this random number generator's sequence.
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,87,"* @return  the next pseudorandom, uniformly distributed"
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,88,*  <code>double</code> value between <code>0.0</code> and
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,89,*  <code>1.0</code> from this random number generator's sequence
False,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,78,* (non-Javadoc)
False,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,79, @see java.util.Random#nextFloat()
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,96,"* Returns the next pseudorandom, uniformly distributed <code>float</code>"
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,97,* value between <code>0.0</code> and <code>1.0</code> from this random
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,98,* number generator's sequence.
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,100,"* @return  the next pseudorandom, uniformly distributed <code>float</code>"
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,101,* value between <code>0.0</code> and <code>1.0</code> from this
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,102,* random number generator's sequence
False,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,85,* (non-Javadoc)
False,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,86, @see java.util.Random#nextGaussian()
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,109,"* Returns the next pseudorandom, Gaussian (""normally"") distributed"
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,110,* <code>double</code> value with mean <code>0.0</code> and standard
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,111,* deviation <code>1.0</code> from this random number generator's sequence.
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,113,"* @return  the next pseudorandom, Gaussian (""normally"") distributed"
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,114,* <code>double</code> value with mean <code>0.0</code> and
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,115,* standard deviation <code>1.0</code> from this random number
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,116,*  generator's sequence
False,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,92,* (non-Javadoc)
False,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,93, @see java.util.Random#nextInt()
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,123,"* Returns the next pseudorandom, uniformly distributed <code>int</code>"
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,124,* value from this random number generator's sequence.
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,125,"* All 2<font size=""-1""><sup>32</sup></font> possible <tt>int</tt> values"
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,126,* should be produced with  (approximately) equal probability.
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,128,"* @return the next pseudorandom, uniformly distributed <code>int</code>"
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,129,*  value from this random number generator's sequence
False,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,99,* (non-Javadoc)
False,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,100, @see java.util.Random#nextInt(int)
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,136,"* Returns a pseudorandom, uniformly distributed <tt>int</tt> value"
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,137,"* between 0 (inclusive) and the specified value (exclusive), drawn from"
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,138,* this random number generator's sequence.
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,140,* @param n the bound on the random number to be returned.  Must be
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,141,* positive.
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,142,"* @return  a pseudorandom, uniformly distributed <tt>int</tt>"
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,143,* value between 0 (inclusive) and n (exclusive).
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,144,* @throws IllegalArgumentException  if n is not positive.
False,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,106,* (non-Javadoc)
False,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,107, @see java.util.Random#nextLong()
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,151,"* Returns the next pseudorandom, uniformly distributed <code>long</code>"
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,152,* value from this random number generator's sequence.  All
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,153,"* 2<font size=""-1""><sup>64</sup></font> possible <tt>long</tt> values"
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,154,* should be produced with (approximately) equal probability.
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,156,"* @return  the next pseudorandom, uniformly distributed <code>long</code>"
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,157,*value from this random number generator's sequence
False,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,113,* (non-Javadoc)
False,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,114, @see java.util.Random#setSeed(long)
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,164,* Sets the seed of the underyling random number generator using a
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,165,* <code>long</code> seed.  Sequences of values generated starting with the
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,166,* same seeds should be identical.
True,src/java/org/apache/commons/math/random/RandomAdaptor.java,src/java/org/apache/commons/math/random/RandomAdaptor.java,168,* @param seed the seed value
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,416,public void testEqualsAndHashCode() {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,417,"Fraction zero  = new Fraction(0,1);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,418,Fraction nullFraction = null;
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,419,int zeroHash = zero.hashCode();
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,420,assertTrue( zero.equals(zero));
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,421,assertFalse(zero.equals(nullFraction));
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,422,assertFalse(zero.equals(new Double(0)));
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,423,"Fraction zero2 = new Fraction(0,2);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,424,assertTrue(zero.equals(zero2));
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,425,"assertEquals(zero.hashCode(), zero2.hashCode());"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,426,"Fraction one = new Fraction(1,1);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,427,assertFalse((one.equals(zero) ||zero.equals(one)));
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,430,public void testGetReducedFraction() {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,431,"Fraction threeFourths = new Fraction(3, 4);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,432,"assertTrue(threeFourths.equals(Fraction.getReducedFraction(6, 8)));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,433,"assertTrue(Fraction.ZERO.equals(Fraction.getReducedFraction(0, -1)));"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,434,try {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,435,"Fraction f = Fraction.getReducedFraction(1, 0);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,436,"fail(""expecting ArithmeticException"");"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,437,} catch (ArithmeticException ex) {
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,438,// expected
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,440,assertEquals(Fraction.getReducedFraction
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,441,"(2, Integer.MIN_VALUE).getNumerator(),-1);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,442,assertEquals(Fraction.getReducedFraction
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,443,"(1, -1).getNumerator(), -1);"
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,20,import org.apache.commons.math.stat.Frequency;
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,31,protected TestRandomGenerator testGenerator = new TestRandomGenerator();
False,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,29,andomData = new RandomDataImpl(new TestRandomGenerator());
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,35,randomData = new RandomDataImpl(testGenerator);
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,44,public void testNextInt() {
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,45,try {
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,46,int x = testGenerator.nextInt(-1);
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,47,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,48,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,51,Frequency freq = new Frequency();
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,52,int value = 0;
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,53,for (int i=0; i<smallSampleSize; i++) {
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,54,value = testGenerator.nextInt(4);
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,55,"assertTrue(""nextInt range"",(value >= 0) && (value <= 3));"
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,56,freq.addValue(value);
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,58,long[] observed = new long[4];
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,59,for (int i=0; i<4; i++) {
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,60,observed[i] = freq.getCount(i);
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,63,"/* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,64,* Change to 11.34 for alpha = .01
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,66,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,67,"testStatistic.chiSquare(expected,observed) < 16.27);"
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,70,public void testNextLong() {
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,71,long q1 = Long.MAX_VALUE/4;
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,72,long q2 = 2 *  q1;
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,73,long q3 = 3 * q1;
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,75,Frequency freq = new Frequency();
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,76,long val = 0;
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,77,int value = 0;
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,78,for (int i=0; i<smallSampleSize; i++) {
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,79,val = testGenerator.nextLong();
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,80,if (val < q1) {
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,81,value = 0;
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,82,} else if (val < q2) {
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,83,value = 1;
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,84,} else if (val < q3) {
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,85,value = 2;
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,86,} else {
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,87,value = 3;
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,89,freq.addValue(value);
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,91,long[] observed = new long[4];
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,92,for (int i=0; i<4; i++) {
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,93,observed[i] = freq.getCount(i);
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,96,"/* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,97,* Change to 11.34 for alpha = .01
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,99,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,100,"testStatistic.chiSquare(expected,observed) < 16.27);"
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,103,public void testNextBoolean() {
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,104,long halfSampleSize = smallSampleSize / 2;
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,105,"double[] expected = {halfSampleSize, halfSampleSize};"
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,106,long[] observed = new long[2];
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,107,for (int i=0; i<smallSampleSize; i++) {
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,108,if (testGenerator.nextBoolean()) {
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,109,observed[0]++;
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,110,} else {
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,111,observed[1]++;
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,114,"/* Use ChiSquare dist with df = 2-1 = 1, alpha = .001"
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,115,* Change to 6.635 for alpha = .01
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,117,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,118,"testStatistic.chiSquare(expected,observed) < 10.828);"
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,121,public void testNextFloat() {
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,122,Frequency freq = new Frequency();
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,123,float val = 0;
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,124,int value = 0;
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,125,for (int i=0; i<smallSampleSize; i++) {
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,126,val = testGenerator.nextFloat();
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,127,if (val < 0.25) {
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,128,value = 0;
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,129,} else if (val < 0.5) {
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,130,value = 1;
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,131,} else if (val < 0.75) {
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,132,value = 2;
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,133,} else {
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,134,value = 3;
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,136,freq.addValue(value);
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,138,long[] observed = new long[4];
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,139,for (int i=0; i<4; i++) {
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,140,observed[i] = freq.getCount(i);
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,143,"/* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,144,* Change to 11.34 for alpha = .01
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,146,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,147,"testStatistic.chiSquare(expected,observed) < 16.27);"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,164,* Test bin index overflow problem (BZ 36450)
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,166,public void testBinIndexOverflow() throws Exception {
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,167,"double[] x = new double[] {9474.94326071674, 2080107.8865462579};"
True,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,168,new EmpiricalDistributionImpl().load(x);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,42,rivate long smallSampleSize = 1000;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,43,"rivate double[] expected = {250,250,250,250};"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,44,rivate int largeSampleSize = 10000;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,42,protected long smallSampleSize = 1000;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,43,"protected double[] expected = {250,250,250,250};"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,44,protected int largeSampleSize = 10000;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,49,rivate ChiSquareTestImpl testStatistic = new ChiSquareTestImpl();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,49,protected ChiSquareTestImpl testStatistic = new ChiSquareTestImpl();

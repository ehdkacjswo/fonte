is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,235,** Normalize the instance.
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,235,/** Get a normalized vector aligned with the instance.
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,237, @exception ArithmeticException if the norm is null
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,237,* @exception ArithmeticException if the norm is zero
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,242,"hrow new ArithmeticException(""null norm"");"
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,242,"throw new ArithmeticException(""cannot normalize a zero norm vector"");"
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,244,eturn multiply(1 / s);
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,244,return scalarMultiply(1 / s);
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,326,ublic Vector3D multiply(double a) {
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,326,public Vector3D scalarMultiply(double a) {
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,360,rivate static final long serialVersionUID = 7318440192750283659L;
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,360,private static final long serialVersionUID = -5721105387745193385L;
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,101,"heckVector(r.applyTo(u.multiply(v.getNorm())), v.multiply(u.getNorm()));"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,101,"checkVector(r.applyTo(u.scalarMultiply(v.getNorm())), v.scalarMultiply(u.getNorm()));"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,87, = v.multiply(3);
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,87,v = v.scalarMultiply(3);
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,90,"heckVector(v.multiply(0.5), 1.5, 3, 4.5);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,90,"checkVector(v.scalarMultiply(0.5), 1.5, 3, 4.5);"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,128,ector3D v2 = k.multiply(Math.cos(1.2)).add(i.multiply(Math.sin(1.2)));
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,128,Vector3D v2 = k.scalarMultiply(Math.cos(1.2)).add(i.scalarMultiply(Math.sin(1.2)));

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1287, Make sure that the access of this property is ok.
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1287,* Emit a warning if we can prove that a property cannot possibly be
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1288,* defined on an object. Note the difference between JS and a strictly
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1289,* statically typed language: we're checking if the property
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1290,"* *cannot be defined*, whereas a java compiler would check if the"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1291,* property *can be undefined*.
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1291,bjectType objectType = childType.dereference();
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1292,f (objectType != null) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1293,SType propType = getJSType(n);
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1294,f ((!objectType.hasProperty(propName) ||
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1295,bjectType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) &&
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1296,ropType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1297,f (objectType instanceof EnumType) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1298,"eport(t, n, INEXISTENT_ENUM_ELEMENT, propName);"
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1299, else if (!objectType.isEmptyType() &&
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1300,eportMissingProperties && !isPropertyTest(n)) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1301,"f (!typeRegistry.canPropertyBeDefined(objectType, propName)) {"
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1302,"eport(t, n, INEXISTENT_PROPERTY, propName,"
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1303,"alidator.getReadableJSTypeName(n.getFirstChild(), true));"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1295,"// If the property type is unknown, check the object type to see if it"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1296,// can ever be defined. We explicitly exclude CHECKED_UNKNOWN (for
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1297,"// properties where we've checked that it exists, or for properties on"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1298,// objects that aren't in this binary).
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1299,JSType propType = getJSType(n);
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1300,if (propType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1301,childType = childType.autobox();
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1302,ObjectType objectType = ObjectType.cast(childType);
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1303,if (objectType != null) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1304,// We special-case object types so that checks on enums can be
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1305,"// much stricter, and so that we can use hasProperty (which is much"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1306,// faster in most cases).
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1307,if (!objectType.hasProperty(propName) ||
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1308,objectType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1309,if (objectType instanceof EnumType) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1310,"report(t, n, INEXISTENT_ENUM_ELEMENT, propName);"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1311,} else {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1312,"checkPropertyAccessHelper(objectType, propName, t, n);"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1316,} else {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1317,"checkPropertyAccessHelper(childType, propName, t, n);"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1322,"private void checkPropertyAccessHelper(JSType objectType, String propName,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1323,"NodeTraversal t, Node n) {"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1324,if (!objectType.isEmptyType() &&
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1325,reportMissingProperties && !isPropertyTest(n)) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1326,"if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1327,"report(t, n, INEXISTENT_PROPERTY, propName,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1328,"validator.getReadableJSTypeName(n.getFirstChild(), true));"
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1307, else {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1308,/ TODO(nicksantos): might want to flag the access on a non object when
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1309,/ it's impossible to get a property from this type.
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,544,* Dereference a type for property access.
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,546,"* Autoboxes the type, and filters null/undefined, and returns the result."
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,548,public JSType autobox() {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,549,JSType restricted = restrictByNotNullOrUndefined();
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,550,JSType autobox = restricted.autoboxesTo();
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,551,return autobox == null ? restricted : autobox;
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,550,SType restricted = restrictByNotNullOrUndefined();
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,551,SType autobox = restricted.autoboxesTo();
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,552,eturn ObjectType.cast(autobox == null ? restricted : autobox);
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,561,return ObjectType.cast(autobox());
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,209,@Override
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,210,public JSType autobox() {
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,211,UnionTypeBuilder restricted = new UnionTypeBuilder(registry);
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,212,for (JSType t : alternates) {
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,213,restricted.addAlternate(t.autobox());
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,215,return restricted.build();
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6221,"assignment to property foo of (Object|null|number)\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6221,"""assignment to property foo of Object\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8467,public void testMissingProperty38() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8468,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8469,"""/** @constructor */ function Foo() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8470,"""/** @constructor */ function Bar() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8471,"""/** @return {Foo|Bar} */ function f() { return new Foo(); }"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8472,"""f().missing;"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8473,"""Property missing never defined on (Bar|Foo|null)"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8476,public void testMissingProperty39() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8477,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8478,"""/** @return {string|number} */ function f() { return 3; }"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8479,"""f().length;"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8482,public void testMissingProperty40() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8483,testClosureTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8484,"""goog.addDependency('zzz.js', ['MissingType'], []);"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8485,"""/** @param {(Array|MissingType)} x */"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8486,"""function f(x) { x.impossible(); }"", null);"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8489,public void testMissingProperty41() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8490,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8491,"""/** @param {(Array|Date)} x */"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8492,"""function f(x) { if (x.impossible) x.impossible(); }"");"

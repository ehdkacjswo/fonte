is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,204,"// For all variables V not in unsafeCrossRange,"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,205,"// LiveRangeChecker(V, X) and LiveRangeChecker(Y, V) will never add a edge"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,206,"// to the interferenceGraph. In other words, we don't need to use"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,207,"// LiveRangeChecker on variable pair (A, B) if both A and B are not"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,208,// in the unsafeCrossRangeSet. See PrescreenCrossLiveRange for details.
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,209,Set<Var> unsafeCrossRangeSet = Sets.newHashSet();
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,212,"for (DiGraphNode<Node, Branch> cfgNode : cfg.getDirectedGraphNodes()) {"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,213,if (cfg.isImplicitReturn(cfgNode)) {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,214,continue;
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,217,for (Iterator<Var> i = scope.getVars(); i.hasNext();) {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,218,final Var v = i.next();
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,220,if (!unsafeCrossRangeSet.contains(v)) {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,221,FlowState<LiveVariableLattice> state = cfgNode.getAnnotation();
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,222,PrescreenCrossLiveRange check =
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,223,"new PrescreenCrossLiveRange(v, state.getOut());"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,225,"NodeTraversal.traverse(compiler, cfgNode.getValue(), check);"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,227,if (!check.isSafe()) {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,228,unsafeCrossRangeSet.add(v);
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,298,if (!unsafeCrossRangeSet.contains(v1) &&
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,299,!unsafeCrossRangeSet.contains(v2)) {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,300,continue NEXT_VAR_PAIR;
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,467,* The crossed live range check is pretty traversal happy and it needs to
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,468,* live range crossing between all coalescing candidate x and y at each
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,469,* CFG node. Since this type of live range crossing within a CFG node happens
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,470,"* rarely, we can pre-screen the variables' usages and eliminate the"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,471,* cross live range check if it can never cross another variable's live range
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,472,* within a CFG node.
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,474,private static class PrescreenCrossLiveRange
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,475,extends AbstractCfgNodeTraversalCallback {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,476,private int count;
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,477,private final LiveVariableLattice lattice;
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,478,private final Var var;
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,480,// Dead assignments has a strange effect on variable name coalescing.
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,481,// Consider y = 3; x = 2; print(y)
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,482,"// Since x is never live, it would appear x and y's live range never"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,483,"// intersects. However, merging x and y means the = 2 assignment suddenly"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,484,// becomes live so we need to do the live range check when that happens.
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,485,private boolean hasDeadAssignment = false;
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,487,"public PrescreenCrossLiveRange(Var var, LiveVariableLattice lattice) {"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,488,this.lattice = lattice;
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,489,this.var = var;
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,492,@Override
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,493,"public void visit(NodeTraversal t, Node n, Node parent) {"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,494,if (!NodeUtil.isName(n) || !var.name.equals(n.getString())) {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,495,return;
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,497,count++;
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,498,if (// is a=b or var a=b
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,499,((NodeUtil.isAssign(parent) && parent.getFirstChild() == n) ||
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,500,(NodeUtil.isVar(parent) && n.hasChildren()))
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,502,&& !lattice.isLive(var)) {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,503,hasDeadAssignment = true;
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,507,private boolean isSafe() {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,508,return count < 2 && !hasDeadAssignment;
False,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,169,"nFunction(""var x = 6; var y; y = 4; x"");"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,169,"inFunction(""var x = 6; var y; y = 4 ; x"");"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,170,"inFunction(""var y = 3; var y; y += 4; x"");"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,171,"inFunction(""var y = 3; var y; y ++  ; x"");"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,172,"inFunction(""y = 3; var x; var y = 1 ; x"");"

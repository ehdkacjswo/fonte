is_addition,old_file_path,new_file_path,line_num,content
False,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,423,"erifySubtypeOf(""out2"", OBJECT_TYPE);"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,423,"verify(""out2"", OBJECT_TYPE);"
False,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,431,"erifySubtypeOf(""out2"", STRING_OBJECT_TYPE);"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,431,"verify(""out2"", STRING_OBJECT_TYPE);"
False,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,439,"erifySubtypeOf(""out2"", STRING_OBJECT_TYPE);"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,439,"verify(""out2"", UNKNOWN_TYPE);"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,442,public void testAssertInstanceof4() {
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,443,JSType startType = registry.getNativeType(STRING_OBJECT_TYPE);
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,444,"assuming(""x"", startType);"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,445,"inFunction(""out1 = x; goog.asserts.assertInstanceof(x, Object); out2 = x;"");"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,446,"verify(""out1"", startType);"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,447,"verify(""out2"", STRING_OBJECT_TYPE);"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,450,public void testAssertInstanceof5() {
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,451,JSType startType = registry.getNativeType(ALL_TYPE);
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,452,"assuming(""x"", startType);"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,453,inFunction(
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,454,"""out1 = x; goog.asserts.assertInstanceof(x, String); var r = x;"");"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,455,"verify(""out1"", startType);"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,456,"verify(""x"", STRING_OBJECT_TYPE);"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,800,public void testInstanceOf6() {
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,801,"// Here we are using ""instanceof"" to restrict the unknown type to"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,802,// the type of the instance.  This has the following problems:
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,803,//   1) The type may actually be any sub-type
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,804,//   2) The type may implement any interface
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,805,// After the instanceof we will require casts for methods that require
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,806,// sub-type or unrelated interfaces which would not have been required
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,807,// before.
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,808,JSType startType = registry.getNativeType(UNKNOWN_TYPE);
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,809,"assuming(""x"", startType);"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,810,"inFunction(""out1 = x; if (x instanceof String) out2 = x;"");"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,811,"verify(""out1"", startType);"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,812,"verify(""out2"", STRING_OBJECT_TYPE);"

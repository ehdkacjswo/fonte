is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1101,PreprocessorSymbolTable preprocessorSymbolTable =
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1102,ensureDefaultPassConfig().getPreprocessorSymbolTable();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1103,if (preprocessorSymbolTable != null) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1104,symbolTable.addSymbolsFrom(preprocessorSymbolTable);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,95,* A symbol table for registering references that get removed during
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,96,* preprocessing.
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,98,private PreprocessorSymbolTable preprocessorSymbolTable = null;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,172,PreprocessorSymbolTable getPreprocessorSymbolTable() {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,173,return preprocessorSymbolTable;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,880,if (options.ideMode) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,881,preprocessorSymbolTable =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,882,new PreprocessorSymbolTable(compiler.getRoot());
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,871,"ompiler, options.getAliasTransformationHandler());"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,886,"compiler,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,887,"preprocessorSymbolTable,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,888,options.getAliasTransformationHandler());
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,2,* Copyright 2011 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,19,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,20,import com.google.common.collect.ArrayListMultimap;
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,21,import com.google.common.collect.Maps;
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,22,import com.google.common.collect.Multimap;
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,23,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,24,import com.google.javascript.rhino.jstype.JSType;
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,25,import com.google.javascript.rhino.jstype.SimpleReference;
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,26,import com.google.javascript.rhino.jstype.SimpleSlot;
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,27,import com.google.javascript.rhino.jstype.StaticScope;
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,28,import com.google.javascript.rhino.jstype.StaticSymbolTable;
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,30,import java.util.Collections;
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,31,import java.util.Map;
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,34,* A symbol table for references that are removed by preprocessor passes
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,35,* (like {@code ProcessClosurePrimitives}).
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,37,* @author nicksantos@google.com (Nick Santos)
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,39,final class PreprocessorSymbolTable
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,40,"implements StaticScope<JSType>,"
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,41,"StaticSymbolTable<SimpleSlot,"
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,42,PreprocessorSymbolTable.Reference> {
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,45,* All preprocessor symbols are globals.
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,47,"private final Map<String, SimpleSlot> symbols = Maps.newHashMap();"
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,49,"private final Multimap<String, Reference> refs ="
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,50,ArrayListMultimap.create();
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,52,private final Node root;
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,54,PreprocessorSymbolTable(Node root) {
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,55,this.root = root;
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,58,@Override
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,59,public Node getRootNode() { return root; }
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,61,@Override
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,62,public JSType getTypeOfThis() { return null; }
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,64,@Override
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,65,public StaticScope<JSType> getParentScope() { return null; }
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,67,@Override
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,68,public SimpleSlot getSlot(String name) {
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,69,return symbols.get(name);
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,72,@Override
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,73,public SimpleSlot getOwnSlot(String name) {
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,74,return getSlot(name);
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,77,@Override
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,78,public Iterable<Reference> getReferences(SimpleSlot symbol) {
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,79,return Collections.unmodifiableCollection(refs.get(symbol.getName()));
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,82,@Override
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,83,public Iterable<SimpleSlot> getAllSymbols() {
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,84,return Collections.unmodifiableCollection(symbols.values());
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,87,@Override
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,88,public StaticScope<JSType> getScope(SimpleSlot slot) {
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,89,return this;
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,92,void addReference(Node node) {
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,93,String name = node.getQualifiedName();
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,94,Preconditions.checkNotNull(name);
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,96,if (!symbols.containsKey(name)) {
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,97,"symbols.put(name, new SimpleSlot(name, null, true));"
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,100,"refs.put(name, new Reference(symbols.get(name), node));"
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,103,static final class Reference extends SimpleReference<SimpleSlot> {
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,104,"Reference(SimpleSlot symbol, Node node) {"
True,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,src/com/google/javascript/jscomp/PreprocessorSymbolTable.java,105,"super(symbol, node);"
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,32,import javax.annotation.Nullable;
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,55,private final PreprocessorSymbolTable preprocessorSymbolTable;
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,90,"@Nullable PreprocessorSymbolTable preprocessorSymbolTable,"
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,93,this.preprocessorSymbolTable = preprocessorSymbolTable;
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,271,if (preprocessorSymbolTable != null) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,272,preprocessorSymbolTable.addReference(n.getFirstChild());
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,24,import com.google.javascript.rhino.jstype.SimpleReference;
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,28,mport com.google.javascript.rhino.jstype.StaticSourceFile;
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,188,f (decl == null) {
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,189,ontinue;
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,192,ode declNode = decl.getNode();
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,193,f (declNode == null || declNode.getStaticSourceFile() == null) {
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,194,ontinue;
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,197,ymbol mySymbol = symbols.get(declNode);
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,198,f (mySymbol == null) {
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,199,ySymbol = new Symbol(
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,200,"therSymbol.getName(),"
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,201,"therSymbol.getType(),"
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,202,"therSymbol.isTypeInferred(),"
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,203,yScope);
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,204,"ymbols.put(declNode, mySymbol);"
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,205,"yScope.ownSymbols.put(mySymbol.getName(), mySymbol);"
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,207,"ySymbol.setDeclaration(new Reference(mySymbol, declNode));"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,188,Node declNode = decl == null ? null : decl.getNode();
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,189,Symbol mySymbol = null;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,190,if (declNode != null && declNode.getStaticSourceFile() != null) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,191,"// If we have a declaration node, we can ensure the symbol is declared."
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,192,mySymbol = symbols.get(declNode);
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,193,if (mySymbol == null) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,194,mySymbol = new Symbol(
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,195,"otherSymbol.getName(),"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,196,"otherSymbol.getType(),"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,197,"otherSymbol.isTypeInferred(),"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,198,myScope);
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,199,"symbols.put(declNode, mySymbol);"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,200,"myScope.ownSymbols.put(mySymbol.getName(), mySymbol);"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,202,"mySymbol.setDeclaration(new Reference(mySymbol, declNode));"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,204,} else {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,205,"// If we don't have a declaration node, we won't be able to declare"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,206,// a symbol in this symbol table. But we may be able to salvage the
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,207,// references if we already have a symbol.
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,208,mySymbol = myScope.getOwnSlot(otherSymbol.getName());
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,210,or (R otherRef : otherSymbolTable.getReferences(otherSymbol)) {
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,211,ySymbol.defineReferenceAt(otherRef.getNode());
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,211,if (mySymbol != null) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,212,for (R otherRef : otherSymbolTable.getReferences(otherSymbol)) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,213,mySymbol.defineReferenceAt(otherRef.getNode());
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,266,reconditions.checkState(scopes.isEmpty());
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,269,Preconditions.checkState(
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,270,"scopes.isEmpty(), ""Global scopes found at different roots"");"
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,336,ublic static final class Reference implements StaticReference<JSType> {
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,337,rivate final Symbol symbol;
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,338,rivate final Node node;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,340,public static final class Reference extends SimpleReference<Symbol> {
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,341,his.symbol = symbol;
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,342,his.node = node;
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,345,Override
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,346,ublic Symbol getSymbol() {
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,347,eturn symbol;
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,350,Override
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,351,ublic Node getNode() {
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,352,eturn node;
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,355,Override
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,356,ublic StaticSourceFile getSourceFile() {
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,357,eturn node.getStaticSourceFile();
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,360,Override
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,361,ublic String toString() {
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,362,tring sourceName = node == null ? null : node.getSourceFileName();
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,363,nt lineNo = node == null ? -1 : node.getLineno();
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,364,"eturn node.getQualifiedName() + ""@"" + sourceName + "":"" + lineNo;"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,342,"super(symbol, node);"
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,3,* ***** BEGIN LICENSE BLOCK *****
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,4,* Version: MPL 1.1/GPL 2.0
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,6,* The contents of this file are subject to the Mozilla Public License Version
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,7,"* 1.1 (the ""License""); you may not use this file except in compliance with"
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,8,* the License. You may obtain a copy of the License at
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,9,* http://www.mozilla.org/MPL/
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,11,"* Software distributed under the License is distributed on an ""AS IS"" basis,"
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,12,"* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License"
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,13,* for the specific language governing rights and limitations under the
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,14,* License.
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,16,"* The Original Code is Rhino code, released"
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,17,"* May 6, 1999."
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,19,* The Initial Developer of the Original Code is
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,20,* Netscape Communications Corporation.
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,21,* Portions created by the Initial Developer are Copyright (C) 1997-1999
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,22,* the Initial Developer. All Rights Reserved.
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,24,* Contributor(s):
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,25,*   Nick Santos
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,26,*   Google Inc.
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,28,"* Alternatively, the contents of this file may be used under the terms of"
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,29,"* the GNU General Public License Version 2 or later (the ""GPL""), in which"
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,30,* case the provisions of the GPL are applicable instead of those above. If
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,31,* you wish to allow use of your version of this file only under the terms of
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,32,* the GPL and not to allow others to use your version of this file under the
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,33,"* MPL, indicate your decision by deleting the provisions above and replacing"
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,34,* them with the notice and other provisions required by the GPL. If you do
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,35,"* not delete the provisions above, a recipient may use your version of this"
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,36,* file under either the MPL or the GPL.
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,38,* ***** END LICENSE BLOCK ***** */
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,40,package com.google.javascript.rhino.jstype;
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,42,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,45,* A simple immutable reference.
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,46,* @author nicksantos@google.com (Nick Santos)
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,48,public class SimpleReference<T extends StaticSlot<JSType>>
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,49,implements StaticReference<JSType> {
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,50,private final T symbol;
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,51,private final Node node;
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,53,"public SimpleReference(T symbol, Node node) {"
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,54,this.symbol = symbol;
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,55,this.node = node;
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,58,@Override
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,59,final public T getSymbol() {
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,60,return symbol;
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,63,@Override
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,64,final public Node getNode() {
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,65,return node;
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,68,@Override
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,69,final public StaticSourceFile getSourceFile() {
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,70,return node.getStaticSourceFile();
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,73,@Override
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,74,public String toString() {
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,75,String sourceName = node == null ? null : node.getSourceFileName();
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,76,int lineNo = node == null ? -1 : node.getLineno();
True,src/com/google/javascript/rhino/jstype/SimpleReference.java,src/com/google/javascript/rhino/jstype/SimpleReference.java,77,"return node.getQualifiedName() + ""@"" + sourceName + "":"" + lineNo;"
False,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,499,"eturn new ScopedAliases(compiler, transformationHandler);"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,499,"return new ScopedAliases(compiler, null, transformationHandler);"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,90,public void testGoogScopeReferences() throws Exception {
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,91,SymbolTable table = createSymbolTable(
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,92,"""var goog = {};"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,93,"""goog.scope = function() {};"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,94,"""goog.scope(function() {});"");"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,95,"Symbol googScope = getGlobalVar(table, ""goog.scope"");"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,96,assertNotNull(googScope);
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,97,"assertEquals(2, Iterables.size(table.getReferences(googScope)));"

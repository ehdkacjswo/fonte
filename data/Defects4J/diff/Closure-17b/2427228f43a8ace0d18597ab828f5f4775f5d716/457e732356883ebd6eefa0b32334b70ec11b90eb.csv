is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,167,"cope.inferQualifiedSlot(qualifiedName, origType, type);"
True,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java,167,"scope.inferQualifiedSlot(node, qualifiedName, origType, type);"
True,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,29,* @author mkretzschmar@google.com (Martin Kretzschmar)
True,src/com/google/javascript/jscomp/FlowScope.java,src/com/google/javascript/jscomp/FlowScope.java,19,import com.google.javascript.rhino.Node;
False,src/com/google/javascript/jscomp/FlowScope.java,src/com/google/javascript/jscomp/FlowScope.java,58,"oid inferQualifiedSlot(String symbol, JSType bottomType,"
True,src/com/google/javascript/jscomp/FlowScope.java,src/com/google/javascript/jscomp/FlowScope.java,58,"void inferQualifiedSlot(Node node, String symbol, JSType bottomType,"
False,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,111,"ublic void inferQualifiedSlot(String symbol, JSType bottomType,"
True,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,111,"public void inferQualifiedSlot(Node node, String symbol, JSType bottomType,"
False,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,120,"unctionScope.declare(symbol, null, bottomType, null);"
True,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,120,"int firstDot = symbol.indexOf(""."");"
True,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,121,Preconditions.checkState(firstDot != -1);
True,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,122,"Var owner = functionScope.getVar(symbol.substring(0, firstDot));"
True,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,123,Scope ownerScope = owner == null ? functionScope : owner.getScope();
True,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,124,"ownerScope.declare(symbol, node, bottomType, null);"
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,466,"ropertyQualifiedName, unknownType, unknownType);"
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,466,"object, propertyQualifiedName, unknownType, unknownType);"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,402,/** Gets all the scopes in this symbol table. */
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,403,Collection<SymbolScope> getAllScopes() {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,404,return Collections.unmodifiableCollection(scopes.values());
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,475,"cope.inferQualifiedSlot(qualifiedName,"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,475,"scope.inferQualifiedSlot(left, qualifiedName,"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,809,"ode.getQualifiedName(), getJSType(node), narrowed);"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,809,"node, node.getQualifiedName(), getJSType(node), narrowed);"
True,test/com/google/javascript/jscomp/CheckMissingGetCssNameTest.java,test/com/google/javascript/jscomp/CheckMissingGetCssNameTest.java,20,* @author mkretzschmar@google.com (Martin Kretzschmar)
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,405,public void testGlobalQualifiedNamesInLocalScopes() {
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,406,SymbolTable table = createSymbolTable(
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,407,"""/** @const */ var x = {}; function f() { x.number = 3; }"");"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,408,"Symbol xNumber = getLocalVar(table, ""x.number"");"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,409,assertNotNull(xNumber);
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,410,assertTrue(table.getScope(xNumber).isGlobalScope());
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,412,"assertEquals(""?"", xNumber.getType().toString());"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,415,public void testLocalQualifiedNamesInLocalScopes() {
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,416,SymbolTable table = createSymbolTable(
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,417,"""function f() { var x = {}; x.number = 3; }"");"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,418,"Symbol xNumber = getLocalVar(table, ""x.number"");"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,419,assertNotNull(xNumber);
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,420,assertFalse(table.getScope(xNumber).isGlobalScope());
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,422,"assertEquals(""?"", xNumber.getType().toString());"
False,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,410,or (Symbol symbol : table.getAllSymbols()) {
False,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,411,f (symbol.getName().equals(name) &&
False,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,412,able.getScope(symbol).getParentScope() != null) {
False,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,413,eturn symbol;
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,430,for (SymbolScope scope : table.getAllScopes()) {
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,431,if (!scope.isGlobalScope() && scope.isLexicalScope() &&
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,432,scope.getSlot(name) != null) {
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,433,return scope.getSlot(name);

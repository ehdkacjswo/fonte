is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,198,ode actualParameterIterator = NodeUtil.getFnParameters(exportedFunction)
False,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,199,getFirstChild();
False,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,201,hile (actualParameterIterator != null) {
False,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,202,xternParameters.add(actualParameterIterator.cloneNode());
False,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,204,ctualParameterIterator = actualParameterIterator.getNext();
True,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,198,for (Node param : NodeUtil.getFnParameters(exportedFunction).children()) {
True,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,199,externParameters.add(param.cloneNode());
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,67,"private static final double MAX_FOLD_NUMBER = Math.pow(2, 53);"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,561,tring.valueOf(lval).length() + String.valueOf(rval).length() + 1) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,563,String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,565,// Do not try to fold arithmetic for numbers > 2^53. After that
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,566,"// point, fixed-point math starts to break down and become inaccurate."
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,567,Math.abs(result) <= MAX_FOLD_NUMBER) {
True,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,21,import com.google.javascript.jscomp.CommandLineRunner;
False,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,35,mport java.io.FileWriter;
True,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,36,import java.io.FileOutputStream;
True,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,39,import java.io.OutputStreamWriter;
True,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,40,import java.nio.charset.Charset;
True,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,59,"private String encoding = ""UTF-8"";"
True,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,60,"private String outputEncoding = ""UTF-8"";"
True,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,63,private boolean manageDependencies;
True,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,73,this.manageDependencies = false;
True,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,121,public void setManageDependencies(boolean value) {
True,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,122,this.manageDependencies = value;
True,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,140,* Set input file encoding
True,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,142,public void setEncoding(String encoding) {
True,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,143,this.encoding = encoding;
True,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,147,* Set output file encoding
True,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,149,public void setOutputEncoding(String outputEncoding) {
True,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,150,this.outputEncoding = outputEncoding;
True,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,199,options.setManageClosureDependencies(manageDependencies);
False,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,218,"iles.add(JSSourceFile.fromFile(new File(baseDir, included)));"
True,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,244,"files.add(JSSourceFile.fromFile(new File(baseDir, included),"
True,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,245,Charset.forName(encoding)));
False,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,256,ileWriter out = new FileWriter(this.outputFile);
True,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,283,OutputStreamWriter out = new OutputStreamWriter(
True,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,284,"new FileOutputStream(this.outputFile), outputEncoding);"
True,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,286,out.flush();
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,1271,public void testShortCircuitLargeNumberFolding() {
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,1272,"fold(""var b = 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000;"","
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,1273,"""var b = 1000000000000000 * 1000 * 1000;"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3768,public void testInferredReturn7() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3769,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3770,"""/** @constructor */ function Foo() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3771,"""/** @param {number} x */ Foo.prototype.bar = function(x) {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3772,"""Foo.prototype.bar = function(x) { return 3; };"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3773,"""inconsistent return type\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3774,"""found   : number\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3775,"""required: undefined"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3778,public void testInferredParam1() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3779,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3780,"""/** @constructor */ function Foo() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3781,"""/** @param {number} x */ Foo.prototype.bar = function(x) {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3782,"""/** @param {string} x */ function f(x) {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3783,"""Foo.prototype.bar = function(y) { f(y); };"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3784,"""actual parameter 1 of f does not match formal parameter\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3785,"""found   : number\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3786,"""required: string"");"

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,66,"hildCtor, childCtor.getSource());"
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,66,// Notice that constructor functions do not need to be covariant
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,67,// on the superclass.
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,68,"// So if G extends F, new G() and new F() can accept completely"
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,69,"// different argument types, but G.prototype.constructor needs"
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,70,// to be covariant on F.prototype.constructor.
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,71,"// To get around this, we just turn off type-checking on arguments"
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,72,// and return types of G.prototype.constructor.
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,73,"childCtor.cloneWithoutArrowType(),"
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,74,childCtor.getSource());
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,1199,/** Create a new constructor with the parameters and return type stripped. */
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,1200,public FunctionType cloneWithoutArrowType() {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,1201,FunctionType result = new FunctionType(
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,1202,"registry, getReferenceName(), source,"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,1203,"registry.createArrowType(null, null), getInstanceType(),"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,1204,"null, true, false);"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,1205,result.setPrototypeBasedOn(getInstanceType());
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,1206,return result;
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,2710,"function (new:derived): undefined"");"
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,2710,"""function (new:derived, ...[?]): ?"");"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3313,"function (new:derived): undefined"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3313,"""function (new:derived, ...[?]): ?"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3416,public void testGoodExtends17() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3417,testFunctionType(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3418,"""Function.prototype.inherits = function(x) {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3419,"""/** @constructor */function base() {}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3420,"""/** @param {number} x */ base.prototype.bar = function(x) {};\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3421,"""/** @extends {base}\n * @constructor */function derived() {}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3422,"""derived.inherits(base);"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3423,"""(new derived).constructor.prototype.bar"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3424,"""function (this:base, number): undefined"");"

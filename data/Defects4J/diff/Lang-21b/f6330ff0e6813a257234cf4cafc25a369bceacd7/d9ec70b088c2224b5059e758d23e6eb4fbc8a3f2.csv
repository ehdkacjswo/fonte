is_addition,old_file_path,new_file_path,line_num,content
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,15, limitations under the License.
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,17,ackage org.apache.commons.lang.math;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,19,mport java.util.Random;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,21,mport junit.framework.Test;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,22,mport junit.framework.TestCase;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,23,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,26, Test cases for the {@link RandomUtils} class.
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,28," @author <a href=""mailto:phil@steitz.com"">Phil Steitz</a>"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,29, @version $Revision$ $Date$
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,32,ublic final class RandomUtilsTest extends TestCase {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,34,ublic RandomUtilsTest(String name) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,35,uper(name);
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,38,Override
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,39,ublic void setUp() {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,42,ublic static Test suite() {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,43,estSuite suite = new TestSuite(RandomUtilsTest.class);
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,44,"uite.setName(""RandomUtils Tests"");"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,45,eturn suite;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,48,** test distribution of nextInt() */
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,49,ublic void testNextInt() {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,50,stNextInt(null);
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,52,ssertTrue (RandomUtils.nextInt() >= 0);
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,55,** test distribution of nextInt(Random) */
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,56,ublic void testNextInt2() {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,57,andom rnd = new Random();
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,58,nd.setSeed(System.currentTimeMillis());
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,59,stNextInt(rnd);
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,62,** test distribution of JVMRandom.nextInt() */
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,63,ublic void testJvmRandomNextInt() {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,64,stNextInt(RandomUtils.JVM_RANDOM);
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,69, Generate 1000 values for nextInt(bound) and compare
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,70, the observed frequency counts to expected counts using
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,71, a chi-square test.
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,72, @param rnd Random to use if not null
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,74,rivate void tstNextInt(Random rnd) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,75,nt bound = 0;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,76,nt result = 0;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,77,/ test boundary condition: n = Integer.MAX_VALUE;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,78,ound = Integer.MAX_VALUE;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,79,f (rnd == null) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,80,esult = RandomUtils.nextInt(bound);
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,81, else {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,82,"esult = RandomUtils.nextInt(rnd,bound);"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,84,"ssertTrue(""result less than bound"",result < bound);"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,85,"ssertTrue(""result non-negative"",result >= 0);"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,87,/ test uniformity -- use Chi-Square test at .01 level
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,88,ound = 4;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,89,"nt[] expected = new int[] {250,250,250,250};"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,90,"nt[] observed = new int[] {0,0,0,0};"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,91,or (int i = 0; i < 1000; i ++) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,92,f (rnd == null) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,93,esult = RandomUtils.nextInt(bound);
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,94, else {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,95,"esult = RandomUtils.nextInt(rnd,bound);"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,97,ssertTrue(result < bound);
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,98,ssertTrue(result >= 0);
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,99,bserved[result]++;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,101,"* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,102, Change to 11.34 for alpha = .01
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,104,ssertTrue(
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,105,"chi-square test -- will fail about 1 in 1000 times"","
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,106,"hiSquare(expected,observed) < 16.27);"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,109,** test distribution of nextLong() */
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,110,ublic void testNextLong() {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,111,stNextLong(null);
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,114,** test distribution of nextLong(Random) BROKEN
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,115,  contract of nextLong(Random) is different from
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,116, nextLong() */
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,117,ublic void testNextLong2() {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,118,andom rnd = new Random();
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,119,nd.setSeed(System.currentTimeMillis());
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,120,stNextLong(rnd);
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,124, Generate 1000 values for nextLong and check that
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,125, p(value < long.MAXVALUE/2) ~ 0.5. Use chi-square test
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,126, with df = 2-1 = 1
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,127, @param rnd Random to use if not null
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,129,rivate void tstNextLong(Random rnd) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,130,"nt[] expected = new int[] {500,500};"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,131,"nt[] observed = new int[] {0,0};"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,132,ong result = 0;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,133,ong midPoint = Long.MAX_VALUE/2;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,134,or (int i = 0; i < 1000; i ++) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,135,f (rnd == null) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,136,esult = Math.abs(RandomUtils.nextLong());
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,137, else {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,138,esult = Math.abs(RandomUtils.nextLong(rnd));
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,140,f (result < midPoint) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,141,bserved[0]++;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,142, else {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,143,bserved[1]++;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,146,"* Use ChiSquare dist with df = 2-1 = 1, alpha = .001"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,147, Change to 6.64 for alpha = .01
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,149,ssertTrue(
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,150,"chi-square test -- will fail about 1 in 1000 times"","
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,151,"hiSquare(expected,observed) < 10.83);"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,155,** test distribution of nextBoolean() */
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,156,ublic void testNextBoolean() {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,157,stNextBoolean(null);
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,160,** test distribution of nextBoolean(Random) */
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,161,ublic void testNextBoolean2() {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,162,andom rnd = new Random();
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,163,nd.setSeed(System.currentTimeMillis());
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,164,stNextBoolean(rnd);
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,168, Generate 1000 values for nextBoolean and check that
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,169, p(value = false) ~ 0.5. Use chi-square test
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,170, with df = 2-1 = 1
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,171, @param rnd Random to use if not null
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,173,rivate void tstNextBoolean(Random rnd) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,174,"nt[] expected = new int[] {500,500};"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,175,"nt[] observed = new int[] {0,0};"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,176,oolean result = false;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,177,or (int i = 0; i < 1000; i ++) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,178,f (rnd == null) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,179,esult = RandomUtils.nextBoolean();
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,180, else {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,181,esult = RandomUtils.nextBoolean(rnd);
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,183,f (result) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,184,bserved[0]++;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,185, else {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,186,bserved[1]++;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,189,"* Use ChiSquare dist with df = 2-1 = 1, alpha = .001"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,190, Change to 6.64 for alpha = .01
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,192,ssertTrue(
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,193,"chi-square test -- will fail about 1 in 1000 times"","
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,194,"hiSquare(expected,observed) < 10.83 );"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,197,** test distribution of nextFloat() */
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,198,ublic void testNextFloat() {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,199,stNextFloat(null);
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,202,** test distribution of nextFloat(Random) */
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,203,ublic void testNextFloat2() {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,204,andom rnd = new Random();
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,205,nd.setSeed(System.currentTimeMillis());
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,206,stNextFloat(rnd);
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,210, Generate 1000 values for nextFloat and check that
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,211, p(value < 0.5) ~ 0.5. Use chi-square test
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,212, with df = 2-1 = 1
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,213, @param rnd Random to use if not null
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,215,rivate void tstNextFloat(Random rnd) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,216,"nt[] expected = new int[] {500,500};"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,217,"nt[] observed = new int[] {0,0};"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,218,loat result = 0;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,219,or (int i = 0; i < 1000; i ++) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,220,f (rnd == null) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,221,esult = RandomUtils.nextFloat();
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,222, else {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,223,esult = RandomUtils.nextFloat(rnd);
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,225,f (result < 0.5) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,226,bserved[0]++;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,227, else {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,228,bserved[1]++;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,231,"* Use ChiSquare dist with df = 2-1 = 1, alpha = .001"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,232, Change to 6.64 for alpha = .01
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,234,ssertTrue(
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,235,"chi-square test -- will fail about 1 in 1000 times"","
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,236,"hiSquare(expected,observed) < 10.83);"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,239,** test distribution of nextDouble() */
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,240,ublic void testNextDouble() {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,241,stNextDouble(null);
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,244,** test distribution of nextDouble(Random) */
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,245,ublic void testNextDouble2() {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,246,andom rnd = new Random();
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,247,nd.setSeed(System.currentTimeMillis());
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,248,stNextDouble(rnd);
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,252, Generate 1000 values for nextFloat and check that
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,253, p(value < 0.5) ~ 0.5. Use chi-square test
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,254, with df = 2-1 = 1
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,255, @param rnd Random to use if not null
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,257,rivate void tstNextDouble(Random rnd) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,258,"nt[] expected = new int[] {500,500};"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,259,"nt[] observed = new int[] {0,0};"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,260,ouble result = 0;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,261,or (int i = 0; i < 1000; i ++) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,262,f (rnd == null) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,263,esult = RandomUtils.nextDouble();
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,264, else {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,265,esult = RandomUtils.nextDouble(rnd);
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,267,f (result < 0.5) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,268,bserved[0]++;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,269, else {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,270,bserved[1]++;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,273,"* Use ChiSquare dist with df = 2-1 = 1, alpha = .001"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,274, Change to 6.64 for alpha = .01
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,276,ssertTrue(
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,277,"chi-square test -- will fail about 1 in 1000 times"","
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,278,"hiSquare(expected,observed) < 10.83);"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,281,** make sure that unimplemented methods fail */
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,282,ublic void testUnimplementedMethods() {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,284,ry {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,285,andomUtils.JVM_RANDOM.setSeed(1000);
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,286,"ail(""expecting UnsupportedOperationException"");"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,287, catch (UnsupportedOperationException ex) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,288,/ empty
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,291,ry {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,292,andomUtils.JVM_RANDOM.nextGaussian();
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,293,"ail(""expecting UnsupportedOperationException"");"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,294, catch (UnsupportedOperationException ex) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,295,/ empty
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,298,ry {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,299,andomUtils.JVM_RANDOM.nextBytes(null);
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,300,"ail(""expecting UnsupportedOperationException"");"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,301, catch (UnsupportedOperationException ex) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,302,/ empty
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,307,** make sure that illegal arguments fail */
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,308,ublic void testIllegalArguments() {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,310,ry {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,311,andomUtils.JVM_RANDOM.nextInt(-1);
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,312,"ail(""expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,313, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,314,/ empty
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,317,ry {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,318,VMRandom.nextLong( -1L );
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,319,"ail(""expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,320, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,321,/ empty
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,327, Computes Chi-Square statistic given observed and expected counts
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,328, @param observed array of observed frequency counts
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,329, @param expected array of expected frequency counts
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,331,"rivate double chiSquare(int[] expected, int[] observed) {"
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,332,ouble sumSq = 0.0d;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,333,ouble dev = 0.0d;
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,334,or (int i = 0; i< observed.length; i++) {
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,335,ev = (observed[i] - expected[i]);
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,336,umSq += dev*dev/expected[i];
False,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,338,eturn sumSq;

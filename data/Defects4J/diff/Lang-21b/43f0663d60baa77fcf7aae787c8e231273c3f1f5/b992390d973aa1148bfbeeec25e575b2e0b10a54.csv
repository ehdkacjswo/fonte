is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,203,* <p>Tests where the specified element occurs relative to this range.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,204,* <p>The API is reminiscent of the Comparable interface returning <code>-1</code> if
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,205,"* the element is before the range, <code>0</code> if contained within the range and"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,206,* <code>1</code> if the element is after the range. </p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,208,* @param element  the element to test
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,209,"* @return -1, 0 or +1 depending on the element's location relative to the range"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,211,public int elementCompareTo(T element) {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,212,if(element == null) {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,213,// Comparable API says throw NPE on null
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,214,"throw new NullPointerException(""Element is null"");"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,216,if(elementBefore(element)) {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,217,return -1;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,218,} else
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,219,if(elementAfter(element)) {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,220,return 1;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,221,} else {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,222,return 0;
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,149,public void testElementCompareTo() {
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,150,try {
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,151,intRange.elementCompareTo(null);
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,152,"fail(""NullPointerException should have been thrown"");"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,153,} catch(NullPointerException npe) {
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,154,// expected
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,157,"assertEquals(-1, intRange.elementCompareTo(5));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,158,"assertEquals(0, intRange.elementCompareTo(10));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,159,"assertEquals(0, intRange.elementCompareTo(15));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,160,"assertEquals(0, intRange.elementCompareTo(20));"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,161,"assertEquals(1, intRange.elementCompareTo(25));"

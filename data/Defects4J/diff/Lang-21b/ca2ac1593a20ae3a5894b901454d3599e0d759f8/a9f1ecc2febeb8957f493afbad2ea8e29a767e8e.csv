is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/exception/ContextedException.java,src/java/org/apache/commons/lang/exception/ContextedException.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/lang/exception/ContextedException.java,src/java/org/apache/commons/lang/exception/ContextedException.java,144," Note:  If the value provided isn't Serializable, one solution would be"
False,src/java/org/apache/commons/lang/exception/ContextedException.java,src/java/org/apache/commons/lang/exception/ContextedException.java,145, to provide its toString() if it has a meaningful implementation or
False,src/java/org/apache/commons/lang/exception/ContextedException.java,src/java/org/apache/commons/lang/exception/ContextedException.java,146, individual properties of the value object instead.
True,src/java/org/apache/commons/lang/exception/ContextedException.java,src/java/org/apache/commons/lang/exception/ContextedException.java,143,* Note: This exception is only serializable if the object added is serializable.
False,src/java/org/apache/commons/lang/exception/ContextedException.java,src/java/org/apache/commons/lang/exception/ContextedException.java,152,"ublic ContextedException addLabeledValue(String label, Serializable value) {"
True,src/java/org/apache/commons/lang/exception/ContextedException.java,src/java/org/apache/commons/lang/exception/ContextedException.java,149,"public ContextedException addLabeledValue(String label, Object value) {"
False,src/java/org/apache/commons/lang/exception/ContextedException.java,src/java/org/apache/commons/lang/exception/ContextedException.java,163,ublic Serializable getLabeledValue(String label) {
True,src/java/org/apache/commons/lang/exception/ContextedException.java,src/java/org/apache/commons/lang/exception/ContextedException.java,160,public Object getLabeledValue(String label) {
False,src/java/org/apache/commons/lang/exception/ContextedRuntimeException.java,src/java/org/apache/commons/lang/exception/ContextedRuntimeException.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/lang/exception/ContextedRuntimeException.java,src/java/org/apache/commons/lang/exception/ContextedRuntimeException.java,145," Note:  If the value provided isn't Serializable, one solution would be"
False,src/java/org/apache/commons/lang/exception/ContextedRuntimeException.java,src/java/org/apache/commons/lang/exception/ContextedRuntimeException.java,146, to provide its toString() if it has a meaningful implementation or
False,src/java/org/apache/commons/lang/exception/ContextedRuntimeException.java,src/java/org/apache/commons/lang/exception/ContextedRuntimeException.java,147, individual properties of the value object instead.
True,src/java/org/apache/commons/lang/exception/ContextedRuntimeException.java,src/java/org/apache/commons/lang/exception/ContextedRuntimeException.java,144,* Note: This exception is only serializable if the object added is serializable.
False,src/java/org/apache/commons/lang/exception/ContextedRuntimeException.java,src/java/org/apache/commons/lang/exception/ContextedRuntimeException.java,153,"ublic ContextedRuntimeException addLabeledValue(String label, Serializable value) {"
True,src/java/org/apache/commons/lang/exception/ContextedRuntimeException.java,src/java/org/apache/commons/lang/exception/ContextedRuntimeException.java,150,"public ContextedRuntimeException addLabeledValue(String label, Object value) {"
False,src/java/org/apache/commons/lang/exception/ContextedRuntimeException.java,src/java/org/apache/commons/lang/exception/ContextedRuntimeException.java,164,ublic Serializable getLabeledValue(String label) {
True,src/java/org/apache/commons/lang/exception/ContextedRuntimeException.java,src/java/org/apache/commons/lang/exception/ContextedRuntimeException.java,161,public Object getLabeledValue(String label) {
True,src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java,src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java,28,* <p>
True,src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java,src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java,29,"* This implementation is serializable, however this is dependent on the values that"
True,src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java,src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java,30,* are added also being serializable.
False,src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java,src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java,32,lass DefaultExceptionContext implements ExceptionContext {
True,src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java,src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java,35,"class DefaultExceptionContext implements ExceptionContext, Serializable {"
False,src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java,src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java,37,"rivate Map<String, Serializable> contextValueMap = new LinkedHashMap<String, Serializable>();"
True,src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java,src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java,40,"private Map<String, Object> contextValueMap = new LinkedHashMap<String, Object>();"
False,src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java,src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java,48,"ublic ExceptionContext addLabeledValue(String label, Serializable value) {"
True,src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java,src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java,51,"public ExceptionContext addLabeledValue(String label, Object value) {"
False,src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java,src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java,59,ublic Serializable getLabeledValue(String label) {
True,src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java,src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java,62,public Object getLabeledValue(String label) {
False,src/java/org/apache/commons/lang/exception/ExceptionContext.java,src/java/org/apache/commons/lang/exception/ExceptionContext.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/lang/exception/ExceptionContext.java,src/java/org/apache/commons/lang/exception/ExceptionContext.java,24, Provides context information for exceptions. It is available as separate interface to allow
False,src/java/org/apache/commons/lang/exception/ExceptionContext.java,src/java/org/apache/commons/lang/exception/ExceptionContext.java,25, it usage independently from the {@link ContextedException} and
False,src/java/org/apache/commons/lang/exception/ExceptionContext.java,src/java/org/apache/commons/lang/exception/ExceptionContext.java,26, {@link ContextedRuntimeException}.
True,src/java/org/apache/commons/lang/exception/ExceptionContext.java,src/java/org/apache/commons/lang/exception/ExceptionContext.java,22,* Allows the storage and retrieval of contextual information based on label-value
True,src/java/org/apache/commons/lang/exception/ExceptionContext.java,src/java/org/apache/commons/lang/exception/ExceptionContext.java,23,* pairs for exceptions.
False,src/java/org/apache/commons/lang/exception/ExceptionContext.java,src/java/org/apache/commons/lang/exception/ExceptionContext.java,33,ublic interface ExceptionContext extends Serializable {
True,src/java/org/apache/commons/lang/exception/ExceptionContext.java,src/java/org/apache/commons/lang/exception/ExceptionContext.java,30,public interface ExceptionContext {
False,src/java/org/apache/commons/lang/exception/ExceptionContext.java,src/java/org/apache/commons/lang/exception/ExceptionContext.java,44,"ublic ExceptionContext addLabeledValue(String label, Serializable value);"
True,src/java/org/apache/commons/lang/exception/ExceptionContext.java,src/java/org/apache/commons/lang/exception/ExceptionContext.java,41,"public ExceptionContext addLabeledValue(String label, Object value);"
False,src/java/org/apache/commons/lang/exception/ExceptionContext.java,src/java/org/apache/commons/lang/exception/ExceptionContext.java,52,ublic Serializable getLabeledValue(String label);
True,src/java/org/apache/commons/lang/exception/ExceptionContext.java,src/java/org/apache/commons/lang/exception/ExceptionContext.java,49,public Object getLabeledValue(String label);
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,21,mport java.io.Serializable;
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,29,mport java.util.Collections;
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,31,mport java.util.Set;
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,34,/import net.jcip.annotations.GuardedBy;
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,35,/import net.jcip.annotations.ThreadSafe;
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,98, An empty {@link ExceptionContext}.
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,99, @since 3.0
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,101,ublic static final ExceptionContext EMPTY_CONTEXT = new ExceptionContext() {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,103,rivate static final long serialVersionUID = 1L;
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,105,"ublic ExceptionContext addLabeledValue(String label, Serializable value) {"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,106,hrow new UnsupportedOperationException();
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,109,ublic Serializable getLabeledValue(String label) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,110,eturn null;
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,113,ublic Set<String> getLabelSet() {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,114,eturn Collections.<String>emptySet();
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,117,ublic String getFormattedExceptionMessage(String baseMessage) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,118,eturn baseMessage;

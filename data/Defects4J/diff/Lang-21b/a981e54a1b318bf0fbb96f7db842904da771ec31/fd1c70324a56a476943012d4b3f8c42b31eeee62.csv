is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,20,import java.io.ByteArrayOutputStream;
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,22,import java.io.ObjectInputStream;
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,23,import java.io.ObjectOutputStream;
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,24,import java.io.Serializable;
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,29,import java.util.ArrayList;
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,58,* Serializing an {@link EventListenerSupport} instance will result in any
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,59,* non-{@link Serializable} listeners being silently dropped.
False,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,57,ublic class EventListenerSupport<L>
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,66,public class EventListenerSupport<L> implements Serializable
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,68,/** Serialization version */
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,69,private static final long serialVersionUID = 3593265990380473632L;
False,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,60, The list used to hold the registered listeners. This list is
False,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,61, intentionally a thread-safe copy-on-write-array so that traversals over
False,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,62, the list of listeners will be atomic.
False,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,64,rivate final List<L> listeners = new CopyOnWriteArrayList<L>();
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,72,* The list used to hold the registered listeners. This list is
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,73,* intentionally a thread-safe copy-on-write-array so that traversals over
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,74,* the list of listeners will be atomic.
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,76,private List<L> listeners = new CopyOnWriteArrayList<L>();
False,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,70,rivate final L proxy;
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,82,private transient L proxy;
False,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,75,rivate final L[] prototypeArray;
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,87,private transient L[] prototypeArray;
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,141,this();
False,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,131,"alidate.isTrue(listenerInterface.isInterface(),"
False,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,132,"Class {0} is not an interface"","
False,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,133,istenerInterface.getName());
False,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,134,"roxy = listenerInterface.cast(Proxy.newProxyInstance(classLoader,"
False,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,135,"ew Class[]{listenerInterface},"
False,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,136,ew ProxyInvocationHandler()));
False,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,137,"SuppressWarnings(""unchecked"")"
False,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,138,"inal L[] prototypeArray = (L[]) Array.newInstance(listenerInterface, 0);"
False,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,139,his.prototypeArray = prototypeArray;
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,144,"Validate.isTrue(listenerInterface.isInterface(), ""Class {0} is not an interface"","
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,145,listenerInterface.getName());
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,146,"initializeTransientFields(listenerInterface, classLoader);"
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,150,* Create a new EventListenerSupport instance.
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,151,* Serialization-friendly constructor.
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,153,private EventListenerSupport() {
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,222,* Create the proxy object.
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,223,* @param listenerInterface
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,224,* @param classLoader
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,226,"private void createProxy(Class<L> listenerInterface, ClassLoader classLoader) {"
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,227,"proxy = listenerInterface.cast(Proxy.newProxyInstance(classLoader,"
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,228,"new Class[]{listenerInterface},"
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,229,new ProxyInvocationHandler()));
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,233,* Serialize.
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,234,* @param objectOutputStream
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,235,* @throws IOException
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,237,private void writeObject(ObjectOutputStream objectOutputStream) throws IOException {
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,238,ArrayList<L> serializableListeners = new ArrayList<L>();
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,240,// don't just rely on instanceof Serializable:
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,241,ObjectOutputStream testObjectOutputStream = new ObjectOutputStream(new ByteArrayOutputStream());
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,242,for (L listener : listeners) {
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,243,try {
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,244,testObjectOutputStream.writeObject(listener);
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,245,serializableListeners.add(listener);
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,246,} catch (IOException exception) {
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,247,//recreate test stream in case of indeterminate state
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,248,testObjectOutputStream = new ObjectOutputStream(new ByteArrayOutputStream());
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,252,"* we can reconstitute everything we need from an array of our listeners,"
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,253,* which has the additional advantage of typically requiring less storage than a list:
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,255,objectOutputStream.writeObject(serializableListeners.toArray(prototypeArray));
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,259,* Deserialize.
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,260,* @param objectInputStream
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,261,* @throws IOException
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,262,* @throws ClassNotFoundException
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,264,"private void readObject(ObjectInputStream objectInputStream) throws IOException, ClassNotFoundException {"
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,265,"@SuppressWarnings(""unchecked"")"
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,266,L[] listeners = (L[]) objectInputStream.readObject();
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,268,this.listeners = new CopyOnWriteArrayList<L>(listeners);
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,270,"@SuppressWarnings(""unchecked"")"
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,271,Class<L> listenerInterface = (Class<L>) listeners.getClass().getComponentType();
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,273,"initializeTransientFields(listenerInterface, Thread.currentThread().getContextClassLoader());"
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,277,* Initialize transient fields.
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,278,* @param listenerInterface
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,279,* @param classLoader
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,281,"private void initializeTransientFields(Class<L> listenerInterface, ClassLoader classLoader) {"
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,282,"createProxy(listenerInterface, classLoader);"
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,283,"@SuppressWarnings(""unchecked"")"
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,284,"L[] array = (L[]) Array.newInstance(listenerInterface, 0);"
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,285,this.prototypeArray = array;
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,293,/** Serialization version */
True,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java,294,private static final long serialVersionUID = 1L;
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,24,import java.io.ByteArrayInputStream;
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,25,import java.io.ByteArrayOutputStream;
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,26,import java.io.IOException;
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,27,import java.io.ObjectInputStream;
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,28,import java.io.ObjectOutputStream;
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,29,import java.io.Serializable;
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,127,"assertEquals(ActionListener.class, listeners.getClass().getComponentType());"
False,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,128,"ssertEquals(ActionListener.class, listenerSupport.getListeners().getClass().getComponentType());"
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,144,"public void testSerialization() throws IOException, ClassNotFoundException {"
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,145,EventListenerSupport<ActionListener> listenerSupport = EventListenerSupport.create(ActionListener.class);
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,146,listenerSupport.addListener(new ActionListener() {
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,148,public void actionPerformed(ActionEvent e) {
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,151,listenerSupport.addListener(EasyMock.createNiceMock(ActionListener.class));
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,153,//serialize:
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,154,ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,155,ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream);
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,157,objectOutputStream.writeObject(listenerSupport);
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,158,objectOutputStream.close();
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,160,//deserialize:
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,161,"@SuppressWarnings(""unchecked"")"
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,162,EventListenerSupport<ActionListener> deserializedListenerSupport = (EventListenerSupport<ActionListener>) new ObjectInputStream(
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,163,new ByteArrayInputStream(outputStream.toByteArray())).readObject();
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,165,"//make sure we get a listener array back, of the correct component type, and that it contains only the serializable mock"
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,166,ActionListener[] listeners = deserializedListenerSupport.getListeners();
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,167,"assertEquals(ActionListener.class, listeners.getClass().getComponentType());"
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,168,"assertEquals(1, listeners.length);"
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,170,//now verify that the mock still receives events; we can infer that the proxy was correctly reconstituted
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,171,ActionListener listener = listeners[0];
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,172,"ActionEvent evt = new ActionEvent(new Object(), 666, ""sit"");"
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,173,listener.actionPerformed(evt);
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,174,EasyMock.replay(listener);
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,175,deserializedListenerSupport.fire().actionPerformed(evt);
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,176,EasyMock.verify(listener);
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,178,//remove listener and verify we get an empty array of listeners
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,179,deserializedListenerSupport.removeListener(listener);
True,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java,180,"assertEquals(0, deserializedListenerSupport.getListeners().length);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,15,* limitations under the License.
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,17,package org.apache.commons.lang.reflect;
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,19,import java.lang.reflect.Array;
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,20,import java.lang.reflect.GenericArrayType;
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,21,import java.lang.reflect.ParameterizedType;
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,22,import java.lang.reflect.Type;
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,23,import java.lang.reflect.TypeVariable;
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,25,import org.apache.commons.lang.Validate;
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,28,"* <p>Utility methods focusing on type inspection, particularly with regard to"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,29,* generics.</p>
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,30,* @author James Carman
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,31,* @author Matt Benson
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,32,* @since 3.0
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,33,* @version $Id$
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,35,public class TypeUtils {
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,38,"* Get the raw type of a Java type, given its context. Primarily for use"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,39,"* with {@link TypeVariable}s and {@link GenericArrayType}s, or when you do"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,40,* not know the runtime type of <code>type</code>: if you know you have a
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,41,"* {@link Class} instance, it is already raw; if you know you have a"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,42,"* {@link ParameterizedType}, its raw type is only a method call away."
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,43,* @param enclosingType context
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,44,* @param type to read
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,45,* @return Class<?>
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,47,"// original code stolen from commons [proxy]'s 2.0 branch, then kneaded until firm"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,48,"public static Class<?> getRawType(Type enclosingType, Type type) {"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,49,if (type instanceof Class<?>) {
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,50,"// it is raw, no problem"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,51,return (Class<?>) type;
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,53,if (type instanceof ParameterizedType) {
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,54,// simple enough to get the raw type of a ParameterizedType
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,55,return (Class<?>) ((ParameterizedType) type).getRawType();
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,57,if (type instanceof TypeVariable<?>) {
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,58,"Validate.notNull(enclosingType,"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,59,"""Cannot get raw type of TypeVariable without enclosing type"");"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,60,"// resolve the variable against the enclosing type, hope for the best (casting)"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,61,"return (Class<?>) resolveVariable(enclosingType, (TypeVariable<?>) type);"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,63,if (type instanceof GenericArrayType) {
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,64,"Validate.notNull(enclosingType,"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,65,"""Cannot get raw type of GenericArrayType without enclosing type"");"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,66,"// not included in original code, but not too difficult:  just have to get raw component type..."
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,67,"Class<?> rawComponentType = getRawType(enclosingType, ((GenericArrayType) type)"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,68,.getGenericComponentType());
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,69,"// ...and know how to reflectively create array types, uncommon but not unheard of:"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,70,"return Array.newInstance(rawComponentType, 0).getClass();"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,72,throw new IllegalArgumentException(String.valueOf(type));
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,76,"* We plan to return Class<?> from the top-level call, as evidenced by the"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,77,"* cast in the above method, but to handle recursion and falling back up the"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,78,"* graph, as it were, return Type"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,79,* @param enclosingType
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,80,* @param typeVar
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,81,* @return Type resolved
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,83,"// original code stolen from commons [proxy]'s 2.0 branch, then kneaded until firm"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,84,"private static Type resolveVariable(Type enclosingType, TypeVariable<?> typeVar) {"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,85,if (enclosingType instanceof ParameterizedType) {
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,86,ParameterizedType parameterizedEnclosingType = (ParameterizedType) enclosingType;
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,87,"TypeVariable<?>[] typeVariables = getRawType(null,"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,88,parameterizedEnclosingType.getRawType()).getTypeParameters();
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,89,//look for the matching variable:
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,90,for (int i = 0; i < typeVariables.length; i++) {
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,91,if (typeVariables[i].equals(typeVar)) {
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,92,return parameterizedEnclosingType.getActualTypeArguments()[i];
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,95,//otherwise recurse to try against raw class
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,96,"Type result = resolveVariable(parameterizedEnclosingType.getRawType(), typeVar);"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,97,//unroll variable if returned
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,98,if (result instanceof TypeVariable<?>) {
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,99,"return resolveVariable(enclosingType, (TypeVariable<?>) result);"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,101,return result;
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,103,if (enclosingType instanceof Class<?>) {
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,104,Class<?> enclosingClass = (Class<?>) enclosingType;
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,105,Type result = null;
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,106,Type genericSuperclass = enclosingClass.getGenericSuperclass();
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,107,if (genericSuperclass != null && !Object.class.equals(genericSuperclass)) {
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,108,"result = resolveVariable(genericSuperclass, typeVar);"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,110,if (result == null) {
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,111,for (Type genericInterface : enclosingClass.getGenericInterfaces()) {
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,112,"result = resolveVariable(genericInterface, typeVar);"
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,113,if (result != null) {
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,114,break;
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,118,if (result != null) {
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,119,return result;
True,src/java/org/apache/commons/lang/reflect/TypeUtils.java,src/java/org/apache/commons/lang/reflect/TypeUtils.java,122,throw new IllegalArgumentException(String.valueOf(typeVar));
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,17,package org.apache.commons.lang.reflect;
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,19,import static junit.framework.Assert.*;
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,21,import java.lang.reflect.Field;
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,22,import java.lang.reflect.TypeVariable;
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,23,import java.util.List;
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,25,import org.apache.commons.lang.reflect.testbed.*;
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,26,import org.junit.Before;
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,27,import org.junit.Test;
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,30,* Test TypeUtils
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,31,* @author mbenson
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,32,* @version $Id$
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,34,public class TypeUtilsTest {
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,35,private Field stringParentField;
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,36,private Field integerParentField;
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,37,private Field foosField;
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,38,private Field barParentsField;
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,39,private TypeVariable<?> genericParentT;
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,40,private TypeVariable<?> listType;
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,41,private TypeVariable<?> iterableType;
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,43,@Before
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,44,public void setup() throws Exception {
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,45,"stringParentField = GenericTypeHolder.class.getDeclaredField(""stringParent"");"
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,46,"integerParentField = GenericTypeHolder.class.getDeclaredField(""integerParent"");"
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,47,"foosField = GenericTypeHolder.class.getDeclaredField(""foos"");"
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,48,"barParentsField = GenericTypeHolder.class.getDeclaredField(""barParents"");"
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,49,genericParentT = GenericParent.class.getTypeParameters()[0];
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,50,listType = List.class.getTypeParameters()[0];
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,51,iterableType = Iterable.class.getTypeParameters()[0];
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,54,@Test
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,55,public void testGetRawTypeClass() throws Exception {
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,56,"assertEquals(GenericParent.class, TypeUtils.getRawType(null, GenericParent.class));"
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,59,@Test
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,60,public void testGetRawTypeParameterizedType() throws Exception {
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,61,"assertEquals(GenericParent.class, TypeUtils.getRawType(GenericTypeHolder.class,"
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,62,stringParentField.getGenericType()));
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,63,"assertEquals(GenericParent.class, TypeUtils.getRawType(GenericTypeHolder.class,"
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,64,integerParentField.getGenericType()));
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,65,"assertEquals(List.class, TypeUtils.getRawType(GenericTypeHolder.class, foosField"
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,66,.getGenericType()));
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,69,@Test
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,70,public void testGetRawTypeTypeVariable() throws Exception {
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,71,"assertEquals(String.class, TypeUtils.getRawType(StringParameterizedChild.class,"
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,72,genericParentT));
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,73,"assertEquals(String.class, TypeUtils.getRawType(stringParentField.getGenericType(),"
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,74,genericParentT));
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,75,"assertEquals(Foo.class, TypeUtils.getRawType(foosField.getGenericType(), iterableType));"
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,76,"assertEquals(Foo.class, TypeUtils.getRawType(foosField.getGenericType(), listType));"
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,79,@Test(expected = IllegalArgumentException.class)
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,80,public void testGetRawTypeUnresolvableTypeVariable() {
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,81,"TypeUtils.getRawType(GenericParent.class, genericParentT);"
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,84,@Test
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,85,public void testGetRawTypeGenericArray() throws Exception {
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,86,"assertEquals(GenericParent[].class, TypeUtils.getRawType(GenericTypeHolder.class,"
True,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java,87,barParentsField.getGenericType()));
True,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,17,package org.apache.commons.lang.reflect.testbed;
True,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,20,* Class declaring a parameter variable.
True,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,21,* @author mbenson
True,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,22,* @version $Id$
True,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java,24,public class GenericParent<T> {
True,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,17,package org.apache.commons.lang.reflect.testbed;
True,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,19,import java.util.List;
True,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,22,* Holds generic testbed types.
True,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,23,* @author mbenson
True,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,24,* @version $Id$
True,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,26,public class GenericTypeHolder {
True,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,27,public GenericParent<String> stringParent;
True,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,28,public GenericParent<Integer> integerParent;
True,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,29,public List<Foo> foos;
True,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java,30,public GenericParent<Bar>[] barParents;
True,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,17,package org.apache.commons.lang.reflect.testbed;
True,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,20,* {@link GenericParent} subclass that explicitly specifies <T> as {@link String}.
True,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,21,* @author mbenson
True,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,22,* @version $Id$
True,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java,24,public class StringParameterizedChild extends GenericParent<String> {

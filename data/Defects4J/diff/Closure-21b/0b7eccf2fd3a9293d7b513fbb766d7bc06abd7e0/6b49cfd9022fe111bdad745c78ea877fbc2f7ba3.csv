is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,288,Override
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,289,ublic boolean allowsUndeclaredVariables() {
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,290,eturn true;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,417,odeUtil.isRValue(name);
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,417,"!NodeUtil.isLhs(name, name.getParent());"
False,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,219,ublic boolean allowsUndeclaredVariables();
True,src/com/google/javascript/jscomp/CompilationLevel.java,src/com/google/javascript/jscomp/CompilationLevel.java,89,options.closurePass = true;
False,src/com/google/javascript/jscomp/CompilationLevel.java,src/com/google/javascript/jscomp/CompilationLevel.java,105,/ Pretty much all external JS libraries use things like setTimeout()
False,src/com/google/javascript/jscomp/CompilationLevel.java,src/com/google/javascript/jscomp/CompilationLevel.java,106,/ directly rather than specifying window.setTimeout().
False,src/com/google/javascript/jscomp/CompilationLevel.java,src/com/google/javascript/jscomp/CompilationLevel.java,107,"ptions.setWarningLevel(DiagnosticGroups.UNDEFINED_VARIABLES,"
False,src/com/google/javascript/jscomp/CompilationLevel.java,src/com/google/javascript/jscomp/CompilationLevel.java,108,heckLevel.OFF);
True,src/com/google/javascript/jscomp/CompilationLevel.java,src/com/google/javascript/jscomp/CompilationLevel.java,121,options.closurePass = true;
False,src/com/google/javascript/jscomp/CompilationLevel.java,src/com/google/javascript/jscomp/CompilationLevel.java,139,/ Pretty much all external JS libraries use things like setTimeout()
False,src/com/google/javascript/jscomp/CompilationLevel.java,src/com/google/javascript/jscomp/CompilationLevel.java,140,/ directly rather than specifying window.setTimeout().
False,src/com/google/javascript/jscomp/CompilationLevel.java,src/com/google/javascript/jscomp/CompilationLevel.java,141,"ptions.setWarningLevel(DiagnosticGroups.UNDEFINED_VARIABLES,"
False,src/com/google/javascript/jscomp/CompilationLevel.java,src/com/google/javascript/jscomp/CompilationLevel.java,142,heckLevel.OFF);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1488,"arCheck v = new VarCheck(this, false);"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1488,"VarCheck v = new VarCheck(this, true);"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1662,boolean preserveAnonymousFunctionNames =
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1663,anonFunctionNamePolicy != AnonymousFunctionNamingPolicy.OFF;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1663,"his, renamePrefix, renameLocalVarsOnly, prevVariableMap,"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1665,"this, renamePrefix,"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1666,"renameLocalVarsOnly, preserveAnonymousFunctionNames,"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1667,"prevVariableMap,"
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,155,** Allow bad Closure require calls. Use brokenClosureRequiresLevel instead */
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,156,Deprecated
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,157,ublic boolean allowBrokenClosureRequires;
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,351, Devirtualize prototype method by rewriting them to be static calls that
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,347,* Devirtualize prototype method by rewriting them to be static calls that
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,550,llowBrokenClosureRequires = false;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,546,brokenClosureRequiresLevel = CheckLevel.ERROR;
False,src/com/google/javascript/jscomp/CompilerRunner.java,src/com/google/javascript/jscomp/CompilerRunner.java,55,"FlagSpec(help = ""Specifies the compilation level to use"")"
True,src/com/google/javascript/jscomp/CompilerRunner.java,src/com/google/javascript/jscomp/CompilerRunner.java,55,"@FlagSpec(help = ""Specifies the compilation level to use. Options: "" +"
True,src/com/google/javascript/jscomp/CompilerRunner.java,src/com/google/javascript/jscomp/CompilerRunner.java,56,"""WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS, ADVANCED_OPTIMIZATIONS"")"
True,src/com/google/javascript/jscomp/CompilerRunner.java,src/com/google/javascript/jscomp/CompilerRunner.java,60,"@FlagSpec(help = ""Specifies the warning level to use. Options: "" +"
True,src/com/google/javascript/jscomp/CompilerRunner.java,src/com/google/javascript/jscomp/CompilerRunner.java,61,"""QUIET, DEFAULT, VERBOSE"")"
True,src/com/google/javascript/jscomp/CompilerRunner.java,src/com/google/javascript/jscomp/CompilerRunner.java,62,static final Flag<WarningLevel> FLAG_warning_level
True,src/com/google/javascript/jscomp/CompilerRunner.java,src/com/google/javascript/jscomp/CompilerRunner.java,63,= Flag.value(WarningLevel.DEFAULT);
True,src/com/google/javascript/jscomp/CompilerRunner.java,src/com/google/javascript/jscomp/CompilerRunner.java,114,WarningLevel wLevel = FLAG_warning_level.get();
True,src/com/google/javascript/jscomp/CompilerRunner.java,src/com/google/javascript/jscomp/CompilerRunner.java,115,wLevel.setOptionsForWarningLevel(options);
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,167,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,168,ublic boolean allowsUndeclaredVariables() {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,169,eturn true;
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,131,f (options.checkSymbols) {
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,132,hecks.add(checkVars);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,131,// All passes must run the variable check. This synthesizes
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,132,// variables later so that the compiler doesn't crash. It also
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,133,// checks the externs file for validity. If you don't want to warn
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,134,"// about missing variable declarations, we shut that specific"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,135,// error off.
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,136,if (!options.checkSymbols) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,137,"options.setWarningLevel(DiagnosticGroups.UNDEFINED_VARIABLES,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,138,CheckLevel.OFF);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,141,checks.add(checkVars);
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,474,inal ProcessClosurePrimitives pass =
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,475,ptions.brokenClosureRequiresLevel != null ?
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,476,ew ProcessClosurePrimitives(
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,477,"ompiler,"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,478,"ptions.brokenClosureRequiresLevel,"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,479,ptions.rewriteNewDateGoogNow) :
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,480,ew ProcessClosurePrimitives(
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,481,"ompiler,"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,482,"ptions.allowBrokenClosureRequires,"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,483,ptions.rewriteNewDateGoogNow);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,482,final ProcessClosurePrimitives pass = new ProcessClosurePrimitives(
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,483,"compiler,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,484,"options.brokenClosureRequiresLevel,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,485,options.rewriteNewDateGoogNow);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,810,ode name1 = thenAssign.getFirstChild();
True,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,810,Node maybeName1 = thenAssign.getFirstChild();
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,813,f (name2.hasChildren() && name1.getString().equals(name2.getString())) {
True,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,813,if (name2.hasChildren()
True,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,814,&& maybeName1.getType() == Token.NAME
True,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,815,&& maybeName1.getString().equals(name2.getString())) {
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,322,& NodeUtil.isRValue(callNode)
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,322,"&& !NodeUtil.isLhs(callNode, parent)"
False,src/com/google/javascript/jscomp/GoogleCodingConvention.java,src/com/google/javascript/jscomp/GoogleCodingConvention.java,139,Override
False,src/com/google/javascript/jscomp/GoogleCodingConvention.java,src/com/google/javascript/jscomp/GoogleCodingConvention.java,140,ublic boolean allowsUndeclaredVariables() {
False,src/com/google/javascript/jscomp/GoogleCodingConvention.java,src/com/google/javascript/jscomp/GoogleCodingConvention.java,141,eturn false;
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,454,eturn NodeUtil.isLiteralValue(
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,455,eclaration.getNameNode().getFirstChild());
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,454,// Anonymous functions and other mutable objects can move within
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,455,// the same basic block.
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,456,Node value = declaration.getNameNode().getFirstChild();
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,457,return NodeUtil.isLiteralValue(value)
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,458,|| value.getType() == Token.FUNCTION;
False,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,475,/ Function name
False,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,476,"raverseBranch(fnName, n);"
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,475,boolean anonymous = parent != null && NodeUtil.isFunctionAnonymous(n);
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,477,if (!anonymous) {
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,478,// Named functions are parent of the containing scope.
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,479,"traverseBranch(fnName, n);"
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,485,if (anonymous) {
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,486,// Anonymous function names are parent of the contained scope.
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,487,"traverseBranch(fnName, n);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,695, Determines if the given node is ever used as an L-value of an expression.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,696," In other words, returns true if the value of the node is being written"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,697, (as opposed to only being read).
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,699," @param n The node in question, which must be the current node in the"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,700,"          traversal, or one of its parents."
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,701, @throws IllegalArgumentException if {@code n} is not the current
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,702,   node (or a parent of) in the traversal.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,704,tatic boolean isLValue(Node n) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,705,eturn getRValue(n) != null;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,709, Determines the R-Value of a node that is used as a L-Value.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,711, @return The node that is the R-Value or {@code null} if {@code n} is not an
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,712,     L-Value node.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,714,tatic Node getRValue(Node n) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,715,ode current = n;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,716,ode ancestor;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,717,hile ((ancestor = current.getParent()) != null) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,718,witch (ancestor.getType()) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,719,ase Token.EXPR_RESULT:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,720,ase Token.GETPROP:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,721,/ Expression statements and get prop's don't indicate how the
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,722,/ value is being used. We have to look at the parent.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,723,reak;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,724,ase Token.ASSIGN:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,725,f (ancestor.getFirstChild() == current) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,726,/ The L-value because it's on the left hand side of the assign
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,727,eturn ancestor.getLastChild();
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,729,"/ Otherwise, it's an R-value, but we have to continue examining"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,730,/ ancestors because this assignment may also be used as a L-value.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,731,reak;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,733,ase Token.SCRIPT:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,734,ase Token.FUNCTION:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,735,ase Token.LP:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,736,ase Token.BLOCK:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,737,"/ These parents indicate that the value was read, but not written."
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,738,eturn null;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,740,ase Token.VAR:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,741,/ The value was written.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,742,f (n.hasChildren()) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,743,eturn n.getFirstChild();
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,744, else {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,745,eturn null;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,748,efault:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,749,/ Other parent nodes indicate that the value is being read.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,750,eturn null;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,752,urrent = ancestor;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,755,/ Reached the top of the script. Definitely not an l-value.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,756,eturn null;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,760, Determines if the given node is ever used as an R-value of an expression.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,761," In other words, returns true if the value of the node is being read"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,762, (as opposed to only being written to).
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,764," @param n The node in question, which must be the current node in the"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,765,"          traversal, or one of its parents."
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,767,tatic boolean isRValue(Node n) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,768,ode current = n;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,769,ode parent;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,770,hile ((parent = current.getParent()) != null) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,771,witch (parent.getType()) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,772,ase Token.EXPR_RESULT:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,773,ase Token.GETPROP:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,774,/ Expression statements and get prop's don't indicate how the
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,775,/ value is being used. We have to look at the parent.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,776,reak;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,777,ase Token.ASSIGN:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,778,f (parent.getFirstChild() != current) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,779,"/ Not the L-value, so it's on the right hand side of the assign"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,780,eturn true;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,782,"/ Otherwise, it's an L-value, but we have to continue examining"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,783,/ ancestors because this assignment may also be used as a R-value.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,784,reak;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,786,ase Token.SCRIPT:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,787,ase Token.FUNCTION:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,788,ase Token.LP:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,789,ase Token.BLOCK:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,790,ase Token.VAR:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,791,eturn false;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,793,efault:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,794,/ Other parent nodes indicate that the value is being read.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,795,eturn true;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,797,urrent = parent;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,800,/ Reached the top of the script. Definitely not an r-value.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,801,eturn false;
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,110,"rocessClosurePrimitives(AbstractCompiler compiler,"
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,111,"oolean allowBrokenRequires,"
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,112,oolean rewriteNewDateGoogNow) {
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,113,"his(compiler,"
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,114,"llowBrokenRequires ? CheckLevel.WARNING : CheckLevel.ERROR,"
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,115,ewriteNewDateGoogNow);
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,128, Updates block statck and invokes any additional behavior.
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,128,* Updates block stack and invokes any additional behavior.
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,135,/ Handle bleeding functions (named functions that create a variable
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,136,"/ declaration inside their scope, for recursion. such as:"
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,137,/ var x = function y() { return y(); }
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,138,"/ This is a special case because the declaration of ""y"" does not"
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,139,"/ actually appear in the inner scope, even though it is a part of the"
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,140,/ inner scope.
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,141,f (n.getType() == Token.FUNCTION) {
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,142,tring fnName = n.getFirstChild().getString();
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,143,cope s = t.getScope();
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,144,f (!fnName.isEmpty() && s.getVar(fnName).scope == s) {
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,145,"ddReference(t, s.getVar(fnName),"
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,146,"eference.newBleedingFunction(t, parent, n));"
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,103,"* Whether anonymous function names should be preserved. Typically, for"
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,104,* debugging purposes.
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,105,* @see NameAnonymousFunctions
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,107,private boolean preserveAnonymousFunctionNames;
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,108,"enameVars(AbstractCompiler compiler, String prefix,"
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,109,"oolean localRenamingOnly, VariableMap prevUsedRenameMap,"
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,115,"RenameVars(AbstractCompiler compiler,"
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,116,"String prefix,"
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,117,"boolean localRenamingOnly,"
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,118,"boolean preserveAnonymousFunctionNames,"
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,119,"VariableMap prevUsedRenameMap,"
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,125,this.preserveAnonymousFunctionNames = preserveAnonymousFunctionNames;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,188,// Are we renaming anonymous function names?
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,189,if (preserveAnonymousFunctionNames
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,190,&& var != null
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,191,&& NodeUtil.isAnonymousFunction(var.getParentNode())) {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,192,reservedNames.add(name);
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,193,return;
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,22, Show warnings only for specific path. The rest of warnings should be
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,23, suppressed.
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,22,* Control whether warnings should be restricted or suppressed for specified
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,23,* paths.
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,28,rivate final String[] checkWarningsOnlyForPath;
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,29,* Controls whether warnings should be restricted to a specified path or
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,30,* suppressed within the specified path.
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,32,public enum ShowType {
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,33,"INCLUDE,  // Suppress warnings outside the path."
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,34,EXCLUDE;  // Suppress warnings within the path.
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,37,private final String[] paths;
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,38,private final ShowType showType;
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,31,reconditions.checkArgument(checkWarningsOnlyForPath != null);
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,32,his.checkWarningsOnlyForPath = new String[] { checkWarningsOnlyForPath };
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,41,"this(checkWarningsOnlyForPath, ShowType.INCLUDE);"
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,36,reconditions.checkArgument(checkWarningsOnlyForPath != null);
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,37,his.checkWarningsOnlyForPath = checkWarningsOnlyForPath;
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,45,"this(checkWarningsOnlyForPath, ShowType.INCLUDE);"
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,48,"public ShowByPathWarningsGuard(String path, ShowType showType) {"
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,49,"this(new String[] { path }, showType);"
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,52,"public ShowByPathWarningsGuard(String[] paths, ShowType showType) {"
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,53,Preconditions.checkArgument(paths != null);
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,54,Preconditions.checkArgument(showType != null);
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,55,this.paths = paths;
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,56,this.showType = showType;
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,42,/ Check if we dont want to see these warnings
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,43,inal String filePath = error.sourceName;
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,45,f (error.level != CheckLevel.ERROR && filePath != null) {
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,46,oolean checkMe = false;
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,47,or (String checkedPath : checkWarningsOnlyForPath) {
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,48,heckMe |= filePath.contains(checkedPath);
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,61,final String errorPath = error.sourceName;
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,62,if (error.level != CheckLevel.ERROR && errorPath != null) {
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,63,boolean inPath = false;
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,64,for (String path : paths) {
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,65,inPath |= errorPath.contains(path);
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,51,f (!checkMe) {
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,67,if (inPath ^ (showType == ShowType.INCLUDE)) {
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,80,** Gets all the code in this source file. */
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,81,* Gets all the code in this source file.
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,82,* @throws IOException
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,36,@Override
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1029,SType delegateType = typeRegistry.getType(
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1030,odingConvention.getDelegateSuperclassName());
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1029,String delegateName = codingConvention.getDelegateSuperclassName();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1030,JSType delegateType = delegateName == null ?
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1031,null : typeRegistry.getType(delegateName);
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,69,rivate final boolean nonStrictModuleChecks;
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,69,// Whether this is the post-processing sanity check.
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,70,private final boolean sanityCheck;
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,72,"his(compiler, true);"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,73,"this(compiler, false);"
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,75,"arCheck(AbstractCompiler compiler, boolean nonStrictModuleChecks) {"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,76,"VarCheck(AbstractCompiler compiler, boolean sanityCheck) {"
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,77,his.nonStrictModuleChecks = nonStrictModuleChecks;
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,78,this.sanityCheck = sanityCheck;
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,121,/ Create a new variable in a synthetic script. This will prevent
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,123,"ode nameNode = Node.newString(Token.NAME, varName);"
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,124,etSynthesizedExternsRoot().addChildToBack(
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,125,"ew Node(Token.VAR, nameNode));"
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,126,"cope.declare(varName, nameNode,"
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,127,"ull, getSynthesizedExternsInput());"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,122,if (sanityCheck) {
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,123,"throw new IllegalStateException(""Unexpected variable "" + varName);"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,124,} else {
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,125,// Create a new variable in a synthetic script. This will prevent
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,126,// subsequent compiler passes from crashing.
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,127,"Node nameNode = Node.newString(Token.NAME, varName);"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,128,getSynthesizedExternsRoot().addChildToBack(
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,129,"new Node(Token.VAR, nameNode));"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,130,"scope.declare(varName, nameNode,"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,131,"null, getSynthesizedExternsInput());"
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,147,f (nonStrictModuleChecks && scope.isGlobal()) {
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,152,if (!sanityCheck && scope.isGlobal()) {
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,2,* Copyright 2009 Google Inc.
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,19,import com.google.javascript.jscomp.CheckLevel;
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,20,import com.google.javascript.jscomp.CompilerOptions;
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,23,* Convert the warnings level to an Options object.
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,27,public enum WarningLevel {
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,28,"QUIET,"
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,30,"DEFAULT,"
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,32,VERBOSE;
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,34,public void setOptionsForWarningLevel(CompilerOptions options) {
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,35,switch (this) {
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,36,case QUIET:
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,37,// Nothing to do
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,38,break;
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,39,case DEFAULT:
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,40,addDefaultWarnings(options);
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,41,break;
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,42,case VERBOSE:
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,43,addVerboseWarnings(options);
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,44,break;
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,45,default:
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,46,"throw new RuntimeException(""Unknown warning level."");"
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,51,* Add the default checking pass to the compilation options.
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,52,* @param options The CompilerOptions object to set the options on.
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,54,private static void addDefaultWarnings(CompilerOptions options) {
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,55,options.checkSymbols = true;
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,56,options.checkSuspiciousCode = true;
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,57,// TODO(user): This is deprecated. We should turn on the
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,58,// new one once it is default in command line JSCompiler.
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,59,options.checkUndefinedProperties = CheckLevel.OFF;
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,60,options.checkUnusedPropertiesEarly = false;
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,64,* Add all the check pass that are possibly relevant to a non googler.
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,65,* @param options The CompilerOptions object to set the options on.
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,67,private static void addVerboseWarnings(CompilerOptions options) {
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,68,addDefaultWarnings(options);
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,70,// checkSuspiciousCode needs to be enabled for CheckGlobalThis to get run.
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,71,options.checkSuspiciousCode = true;
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,72,options.checkGlobalThisLevel = CheckLevel.WARNING;
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,74,// checkTypes and checkFunctions have the side-effect of asserting that the
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,75,// correct number of arguments are passed to a function.
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,76,// Because the CodingConvention used with the web service does not provide a
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,77,"// way for optional arguments to be specified, these warnings may result in"
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,78,// false positives.
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,79,options.checkTypes = true;
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,80,options.checkFunctions = CheckLevel.WARNING;
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,82,options.checkMethods = CheckLevel.WARNING;
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,83,options.checkGlobalNamesLevel = CheckLevel.WARNING;
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,84,options.aggressiveVarCheck = CheckLevel.WARNING;
True,src/com/google/javascript/rhino/JSDocInfoBuilder.java,src/com/google/javascript/rhino/JSDocInfoBuilder.java,189,if (parseDocumentation) {
True,src/com/google/javascript/rhino/JSDocInfoBuilder.java,src/com/google/javascript/rhino/JSDocInfoBuilder.java,190,populated = true;
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,2,* Copyright 2009 Google Inc.
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,19,import com.google.common.base.Join;
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,20,import com.google.common.flags.Flags;
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,21,import com.google.javascript.rhino.Node;
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,23,import junit.framework.TestCase;
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,26,* Tests for {@link CompilerRunner}.
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,30,public class CompilerRunnerTest extends TestCase {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,32,/** Externs for the test */
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,33,private final JSSourceFile[] externs = new JSSourceFile[] {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,34,"JSSourceFile.fromCode(""externs"","
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,35,"""/** @constructor */ function Window() {}\n"""
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,36,"+ ""/** @type {string} */ Window.prototype.name;\n"""
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,37,"+ ""/** @type {Window} */ var window;"""
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,38,"+ ""/** @nosideeffects */ function noSideEffects() {}"")"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,41,@Override
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,42,public void setUp() {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,43,Flags.disableStateCheckingForTest();
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,46,@Override
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,47,public void tearDown() {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,48,Flags.resetAllFlagsForTest();
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,49,Flags.enableStateCheckingForTest();
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,52,public void testTypeCheckingOffByDefault() {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,53,"test(""function f(x) { return x; } f();"","
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,54,"""function f(a) { return a; } f();"");"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,57,public void testTypeCheckingOnWithVerbose() {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,58,CompilerRunner.FLAG_warning_level.setForTest(WarningLevel.VERBOSE);
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,59,"test(""function f(x) { return x; } f();"", TypeCheck.WRONG_ARGUMENT_COUNT);"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,62,private void testSame(String original) {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,63,testSame(new String[] { original });
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,66,private void testSame(String[] original) {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,67,"test(original, original);"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,70,"private void test(String original, String compiled) {"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,71,"test(new String[] { original }, new String[] { compiled });"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,75,"* Asserts that when compiling with the given compiler options,"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,76,* {@code original} is transformed into {@code compiled}.
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,78,"private void test(String[] original, String[] compiled) {"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,79,Compiler compiler = compile(original);
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,80,"assertEquals(""Expected no warnings or errors\n"" +"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,81,"""Errors: \n"" + Join.join(""\n"", compiler.getErrors()) +"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,82,"""Warnings: \n"" + Join.join(""\n"", compiler.getWarnings()),"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,83,"0, compiler.getErrors().length + compiler.getWarnings().length);"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,85,Node root = compiler.getRoot().getLastChild();
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,86,Node expectedRoot = parse(compiled);
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,87,String explanation = expectedRoot.checkTreeEquals(root);
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,88,"assertNull(""\nExpected: "" + compiler.toSource(expectedRoot) +"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,89,"""\nResult: "" + compiler.toSource(root) +"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,90,"""\n"" + explanation, explanation);"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,94,"* Asserts that when compiling, there is an error or warning."
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,96,"private void test(String original, DiagnosticType warning) {"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,97,"test(new String[] { original }, warning);"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,101,"* Asserts that when compiling, there is an error or warning."
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,103,"private void test(String[] original, DiagnosticType warning) {"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,104,Compiler compiler = compile(original);
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,105,"assertEquals(""Expected exactly one warning or error"","
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,106,"1, compiler.getErrors().length + compiler.getWarnings().length);"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,107,if (compiler.getErrors().length > 0) {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,108,"assertEquals(warning, compiler.getErrors()[0].getType());"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,109,} else {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,110,"assertEquals(warning, compiler.getWarnings()[0].getType());"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,114,private Compiler compile(String original) {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,115,return compile( new String[] { original });
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,118,private Compiler compile(String[] original) {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,119,CompilerRunner runner = new CompilerRunner(new String[] {});
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,120,Compiler compiler = runner.createCompiler();
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,121,JSSourceFile[] inputs = new JSSourceFile[original.length];
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,122,for (int i = 0; i < original.length; i++) {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,123,"inputs[i] = JSSourceFile.fromCode(""input"" + i, original[i]);"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,125,compiler.compile(
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,126,"externs, CompilerTestCase.createModuleChain(original),"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,127,runner.createOptions());
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,128,return compiler;
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,131,private Node parse(String[] original) {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,132,CompilerRunner runner = new CompilerRunner(new String[] {});
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,133,Compiler compiler = runner.createCompiler();
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,134,JSSourceFile[] inputs = new JSSourceFile[original.length];
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,135,for (int i = 0; i < inputs.length; i++) {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,136,"inputs[i] = JSSourceFile.fromCode(""input"" + i, original[i]);"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,138,"compiler.init(externs, inputs, new CompilerOptions());"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,139,Node all = compiler.parseInputs();
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,140,Node n = all.getLastChild();
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,141,Node externs = all.getFirstChild();
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,142,"(new Normalize(compiler, false)).process(externs, n);"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,143,(new MakeDeclaredNamesUnique.UndoConstantRenaming(compiler)).process(
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,144,"externs, n);"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,145,(MakeDeclaredNamesUnique.getContextualRenameInverter(compiler)).process(
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,146,"externs, n);"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,147,return n;
False,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,31, Tests for {@link StaticMethodOptimizer}
True,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,31,* Tests for {@link DevirtualizePrototypeMethods}
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,1041,public void testBugIssue3() {
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,1042,"foldSame(""function foo() {"" +"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,1043,"""  if(sections.length != 1) children[i] = 0;"" +"
True,test/com/google/javascript/jscomp/FoldConstantsTest.java,test/com/google/javascript/jscomp/FoldConstantsTest.java,1044,"""  else var selectedid = children[i]"" +"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,433,public void testInlineFunctionDeclaration() {
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,434,"test(""var f = function () {}; var a = f;"","
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,435,"""var a = function () {};"");"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,436,"test(""var f = function () {}; foo(); var a = f;"","
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,437,"""foo(); var a = function () {};"");"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,438,"test(""var f = function () {}; foo(f);"","
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,439,"""foo(function () {});"");"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,441,"testSame(""var f = function () {}; function g() {var a = f;}"");"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,442,"testSame(""var f = function () {}; function g() {h(f);}"");"
False,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,49,"eturn new ProcessClosurePrimitives(compiler, false, true);"
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,49,"return new ProcessClosurePrimitives(compiler, CheckLevel.ERROR, true);"
False,test/com/google/javascript/jscomp/RenameLocalVarsTest.java,test/com/google/javascript/jscomp/RenameLocalVarsTest.java,30,"eturn new RenameVars(compiler, prefix, true, null, null, null);"
True,test/com/google/javascript/jscomp/RenameLocalVarsTest.java,test/com/google/javascript/jscomp/RenameLocalVarsTest.java,30,"return new RenameVars(compiler, prefix, true, false, null, null, null);"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,37,private boolean preserveAnonymousFunctionNames = false;
False,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,44,"ocalRenamingOnly, previouslyUsedMap, null, null);"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,45,"localRenamingOnly, preserveAnonymousFunctionNames,"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,46,"previouslyUsedMap, null, null);"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,62,preserveAnonymousFunctionNames = false;
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,98,public void testRecursiveFunctions1() {
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,99,"test(""var walk = function walk(node, aFunction) {"" +"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,100,"""  walk(node, aFunction);"" +"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,102,"""var d = function a(b, c) {"" +"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,103,"""  a(b, c);"" +"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,106,localRenamingOnly = true;
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,108,"test(""var walk = function walk(node, aFunction) {"" +"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,109,"""  walk(node, aFunction);"" +"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,111,"""var walk = function a(b, c) {"" +"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,112,"""  a(b, c);"" +"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,116,public void testRecursiveFunctions2() {
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,117,preserveAnonymousFunctionNames = true;
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,119,"test(""var walk = function walk(node, aFunction) {"" +"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,120,"""  walk(node, aFunction);"" +"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,122,"""var c = function walk(a, b) {"" +"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,123,"""  walk(a, b);"" +"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,126,localRenamingOnly = true;
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,128,"test(""var walk = function walk(node, aFunction) {"" +"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,129,"""  walk(node, aFunction);"" +"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,131,"""var walk = function walk(a, b) {"" +"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,132,"""  walk(a, b);"" +"
False,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,440,"ew ProcessClosurePrimitives(compiler, true, true);"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,481,"new ProcessClosurePrimitives(compiler, CheckLevel.WARNING, true);"
False,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,443,"alse, previouslyUsedMap, null,"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,484,"false, false, previouslyUsedMap, null,"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,65,"heckSourceMap(""function(foo, bar) { foo = foo + bar + 2; return foo; }"","
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,65,"checkSourceMap(""function f(foo, bar) { foo = foo + bar + 2; return foo; }"","
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,70,"[0,0,0,0,0,0,0,0,2,4,4,4,4,5,5,5,5,3,8,8,8,8,9,9,9,9,"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,70,"""[0,0,0,0,0,0,0,0,2,2,2,4,4,4,4,5,5,5,5,3,8,8,8,8,9,9,9,9,"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,77,"[\""testcode\"",1,8]\n"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,78,"[\""testcode\"",1,8,\""\""]\n"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,79,"[\""testcode\"",1,8]\n"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,80,"[\""testcode\"",1,9,\""foo\""]\n"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,81,"[\""testcode\"",1,14,\""bar\""]\n"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,82,"[\""testcode\"",1,19]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,77,"""[\""testcode\"",1,9]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,78,"""[\""testcode\"",1,9,\""f\""]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,79,"""[\""testcode\"",1,10]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,80,"""[\""testcode\"",1,11,\""foo\""]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,81,"""[\""testcode\"",1,16,\""bar\""]\n"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,84,"[\""testcode\"",1,21,\""foo\""]\n"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,85,"[\""testcode\"",1,27,\""foo\""]\n"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,86,"[\""testcode\"",1,33,\""bar\""]\n"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,87,"[\""testcode\"",1,39]\n"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,88,"[\""testcode\"",1,42]\n"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,89,"[\""testcode\"",1,49,\""foo\""]\n"");"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,83,"""[\""testcode\"",1,23]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,84,"""[\""testcode\"",1,23,\""foo\""]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,85,"""[\""testcode\"",1,29,\""foo\""]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,86,"""[\""testcode\"",1,35,\""bar\""]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,87,"""[\""testcode\"",1,41]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,88,"""[\""testcode\"",1,44]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,89,"""[\""testcode\"",1,51,\""foo\""]\n"");"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,93,"heckSourceMap(""function(foo, bar) {\r\n\n\n\nfoo = foo + bar + foo;"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,93,"checkSourceMap(""function f(foo, bar) {\r\n\n\n\nfoo = foo + bar + foo;"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,99,"[0,0,0,0,0,0,0,0,2,4,4,4,4,5,5,5,5,3,8,8,8,8,9,9,9,"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,99,"""[0,0,0,0,0,0,0,0,2,2,2,4,4,4,4,5,5,5,5,3,8,8,8,8,9,9,9,"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,107,"[\""testcode\"",1,8]\n"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,108,"[\""testcode\"",1,8,\""\""]\n"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,109,"[\""testcode\"",1,8]\n"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,110,"[\""testcode\"",1,9,\""foo\""]\n"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,111,"[\""testcode\"",1,14,\""bar\""]\n"" +"
False,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,112,"[\""testcode\"",1,19]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,107,"""[\""testcode\"",1,9]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,108,"""[\""testcode\"",1,9,\""f\""]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,109,"""[\""testcode\"",1,10]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,110,"""[\""testcode\"",1,11,\""foo\""]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,111,"""[\""testcode\"",1,16,\""bar\""]\n"" +"
True,test/com/google/javascript/jscomp/SourceMapTest.java,test/com/google/javascript/jscomp/SourceMapTest.java,112,"""[\""testcode\"",1,21]\n"" +"
False,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,29,rivate boolean nonStrictModuleChecks = true;
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,29,private boolean sanityCheck = false;
False,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,39,onStrictModuleChecks = true;
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,39,sanityCheck = false;
False,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,52,"eturn new VarCheck(compiler, nonStrictModuleChecks);"
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,52,"return new VarCheck(compiler, sanityCheck);"
False,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,149,onStrictModuleChecks = false;
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,149,sanityCheck = true;
False,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,155,onStrictModuleChecks = false;
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,155,sanityCheck = true;
False,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,161,onStrictModuleChecks = false;
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,161,sanityCheck = true;
False,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,168,onStrictModuleChecks = false;
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,168,sanityCheck = true;
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,245,public void testSimpleSanityCheck() {
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,246,sanityCheck = true;
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,247,try {
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,248,"checkSynthesizedExtern(""x"", """");"
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,249,} catch (RuntimeException e) {
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,250,"assertTrue(e.getMessage().indexOf(""Unexpected variable x"") != -1);"
False,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,306,"new VarCheck(compiler)).process(externs, root);"
False,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,307,"new VariableTestCheck(compiler)).process(externs, root);"
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,315,"(new VarCheck(compiler, sanityCheck)).process(externs, root);"
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,316,if (!sanityCheck) {
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,317,"(new VariableTestCheck(compiler)).process(externs, root);"

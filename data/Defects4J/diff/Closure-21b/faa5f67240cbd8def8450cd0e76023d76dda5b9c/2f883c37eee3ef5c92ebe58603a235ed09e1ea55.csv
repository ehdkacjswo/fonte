is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,19,mport com.google.common.collect.ImmutableList;
False,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,97,terable<JSType> types = ImmutableList.copyOf(
False,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,98,ypeRegistry.getTypesWithProperty(propName));
False,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,99,or (JSType type : types) {
False,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,100,bjectType objType = type.toObjectType();
False,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,101,f (objType != null) {
False,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,102,ode pNode = objType.getPropertyNode(propName);
False,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,103,f (pNode != null && srcName.equals(pNode.getSourceFileName())) {
False,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,104,"ypeRegistry.unregisterPropertyOnType(propName, type);"
False,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,105,bjType.removeProperty(propName);
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,96,JSType type = n.getFirstChild().getJSType();
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,97,if (type == null || type.toObjectType() == null) {
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,98,// Note cases like <primitive>.field
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,99,return;
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,101,"removeProperty(type.toObjectType(), propName);"
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,106,* Removes a given property from a type and updates type-registry.
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,108,"* @param type the object type to be updated, should not be null"
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,109,* @param propName the property to remove
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,111,"private void removeProperty(ObjectType type, String propName) {"
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,112,Node pNode = type.getPropertyNode(propName);
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,113,if (pNode != null && srcName.equals(pNode.getSourceFileName())) {
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,114,"typeRegistry.unregisterPropertyOnType(propName, type);"
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,115,type.removeProperty(propName);
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,660,// TODO(bashir): typesIndexedByProperty should also be updated!

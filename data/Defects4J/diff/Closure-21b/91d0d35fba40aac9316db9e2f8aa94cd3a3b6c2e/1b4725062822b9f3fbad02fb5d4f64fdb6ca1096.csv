is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,251,"aramType.getJSType(), paramName.getString());"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,251,"paramType.getJSType(), paramName.cloneTree());"
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,292,"rivate Node createCheckTypeCallNode(JSType type, String varName) {"
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,293,"eturn createCheckTypeCallNode(type, Node.newString(Token.NAME, varName));"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,50,public void testConstValue() {
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,51,"// User a variable that's immutable by the google coding convention,"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,52,// to ensure the immutable annotations are preserved.
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,53,"testChecks(""/** @param {number} CONST */ function f(CONST) {}"","
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,54,"""function f(CONST) {"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,55,"""  jscomp.typecheck.checkType(CONST, "" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,56,"""      [jscomp.typecheck.valueChecker('number')]);"" +"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,20,import org.apache.commons.math.optimization.direct.DirectSearchOptimizer;
False,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,35, @param simplex ordered simplex (all points in the simplex have
False,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,36, been eavluated and are sorted from lowest to largest cost)
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,38,* <p>
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,39,"* When this method is called, all points in the simplex have been evaluated"
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,40,* and are sorted from lowest to largest value. The values are either the
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,41,* original objective function values if the optimizer was configured for
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,42,"* minimization, or the opposites of the original objective function values"
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,43,* if the optimizer was configured for maximization.
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,44,* </p>
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,45,* @param simplex ordered simplex
False,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,39,ublic boolean converged (PointCostPair[] simplex);
True,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/java/org/apache/commons/math/optimization/ConvergenceChecker.java,48,boolean converged(PointValuePair[] simplex);
True,src/java/org/apache/commons/math/optimization/CostFunction.java,src/java/org/apache/commons/math/optimization/GoalType.java,20,import java.io.Serializable;
False,src/java/org/apache/commons/math/optimization/CostFunction.java,src/java/org/apache/commons/math/optimization/GoalType.java,21, This interface represents a cost function to be minimized.
True,src/java/org/apache/commons/math/optimization/CostFunction.java,src/java/org/apache/commons/math/optimization/GoalType.java,23,* Goal type for an optimization problem.
False,src/java/org/apache/commons/math/optimization/CostFunction.java,src/java/org/apache/commons/math/optimization/GoalType.java,23, @since 1.2
True,src/java/org/apache/commons/math/optimization/CostFunction.java,src/java/org/apache/commons/math/optimization/GoalType.java,25,* @since 2.0
False,src/java/org/apache/commons/math/optimization/CostFunction.java,src/java/org/apache/commons/math/optimization/GoalType.java,25,ublic interface CostFunction {
True,src/java/org/apache/commons/math/optimization/CostFunction.java,src/java/org/apache/commons/math/optimization/GoalType.java,27,public enum GoalType implements Serializable {
True,src/java/org/apache/commons/math/optimization/CostFunction.java,src/java/org/apache/commons/math/optimization/GoalType.java,29,/** Maximization goal. */
True,src/java/org/apache/commons/math/optimization/CostFunction.java,src/java/org/apache/commons/math/optimization/GoalType.java,30,"MAXIMIZE,"
False,src/java/org/apache/commons/math/optimization/CostFunction.java,src/java/org/apache/commons/math/optimization/GoalType.java,29, Compute the cost associated to the given parameters array.
False,src/java/org/apache/commons/math/optimization/CostFunction.java,src/java/org/apache/commons/math/optimization/GoalType.java,30, @param x parameters array
False,src/java/org/apache/commons/math/optimization/CostFunction.java,src/java/org/apache/commons/math/optimization/GoalType.java,31, @return cost associated to the parameters array
False,src/java/org/apache/commons/math/optimization/CostFunction.java,src/java/org/apache/commons/math/optimization/GoalType.java,32, @exception CostException if no cost can be computed for the parameters
False,src/java/org/apache/commons/math/optimization/CostFunction.java,src/java/org/apache/commons/math/optimization/GoalType.java,33, @see PointCostPair
False,src/java/org/apache/commons/math/optimization/CostFunction.java,src/java/org/apache/commons/math/optimization/GoalType.java,35,ublic double cost(double[] x) throws CostException;
True,src/java/org/apache/commons/math/optimization/CostFunction.java,src/java/org/apache/commons/math/optimization/GoalType.java,32,/** Minimization goal. */
True,src/java/org/apache/commons/math/optimization/CostFunction.java,src/java/org/apache/commons/math/optimization/GoalType.java,33,MINIMIZE
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,18,package org.apache.commons.math.optimization;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,20,import org.apache.commons.math.linear.RealMatrix;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,22,/** This class converts {@link MultiObjectiveFunction vectorial
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,23,* objective functions} to {@link ObjectiveFunction scalar objective functions}
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,24,* when the goal is to minimize them.
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,25,* <p>
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,26,* This class is mostly used when the vectorial objective function represents
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,27,"* residuals, i.e. differences between a theoretical result computed from a"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,28,* variables set applied to a model and a reference. Residuals are intended to be
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,29,* minimized in order to get the variables set that best fit the model to the
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,30,* reference. The reference may be obtained for example from physical measurements
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,31,* whether the model is built from theoretical considerations.
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,32,* </p>
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,33,* <p>
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,34,"* This class computes a possibly weighted squared sum of the residuals, which is"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,35,* a scalar value. It implements the {@link ObjectiveFunction} interface and can
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,36,* therefore be minimized by any optimizer supporting scalar objectives functions.
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,37,* This correspond to a least square estimation.
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,38,* </p>
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,39,* <p>
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,40,* This class support combination of residuals with or without weights and correlations.
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,41,* </p>
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,43,* @see ObjectiveFunction
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,44,* @see MultiObjectiveFunction
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,45,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,46,* @since 2.0
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,49,public class LeastSquaresConverter implements ObjectiveFunction {
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,51,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,52,private static final long serialVersionUID = -5174886571116126798L;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,54,/** Underlying vectorial function. */
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,55,private final MultiObjectiveFunction function;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,57,/** Optional weights for the residuals. */
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,58,private final double[] weights;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,60,/** Optional scaling matrix (weight and correlations) for the residuals. */
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,61,private final RealMatrix scale;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,63,/** Build a simple converter for uncorrelated residuals with the same weight.
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,64,* @param function vectorial residuals function to wrap
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,66,public LeastSquaresConverter (final MultiObjectiveFunction function) {
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,67,this.function = function;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,68,this.weights  = null;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,69,this.scale    = null;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,72,/** Build a simple converter for uncorrelated residuals with the specific weights.
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,73,* <p>
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,74,* The scalar objective function value is computed as:
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,75,* <pre>
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,76,* objective = &sum;(weight<sub>i</sub>residual<sub>i</sub>)<sup>2</sup>
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,77,* </pre>
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,78,* </p>
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,79,* <p>
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,80,* Weights can be used for example to combine residuals with different standard
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,81,"* deviations. As an example, consider a 2000 elements residuals array in which"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,82,* even elements are angular measurements in degrees with a 0.01&deg; standard
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,83,* deviation and off elements are distance measurements in meters with a 15m
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,84,"* standard deviation. In this case, the weights array should be initialized with"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,85,* value 1.0/0.01 in the even elements and 1.0/15.0 in the odd elements.
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,86,* </p>
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,87,* <p>
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,88,* The residuals array computed by the function and the weights array must
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,89,* have consistent sizes or a {@link ObjectiveException} will be triggered while
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,90,* computing the scalar objective.
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,91,* </p>
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,92,* @param function vectorial residuals function to wrap
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,93,* @param weights weights to apply to the residuals
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,95,"public LeastSquaresConverter (final MultiObjectiveFunction function,"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,96,final double[] weights) {
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,97,this.function = function;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,98,this.weights  = weights.clone();
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,99,this.scale    = null;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,102,/** Build a simple convertor for correlated residuals with the specific weights.
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,103,* <p>
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,104,* The scalar objective function value is computed as:
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,105,* <pre>
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,106,* objective = &sum;(y<sub>i</sub>)<sup>2</sup> with y = scale&times;residual
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,107,* </pre>
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,108,* </p>
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,109,* <p>
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,110,* The residuals array computed by the function and the scaling matrix must
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,111,* have consistent sizes or a {@link ObjectiveException} will be triggered while
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,112,* computing the scalar objective.
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,113,* </p>
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,114,* @param function vectorial residuals function to wrap
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,115,* @param scale scaling matrix (
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,117,"public LeastSquaresConverter (final MultiObjectiveFunction function,"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,118,final RealMatrix scale) {
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,119,this.function = function;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,120,this.weights  = null;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,121,this.scale    = scale.copy();
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,124,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,125,public double objective(final double[] variables) throws ObjectiveException {
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,127,final double[] residuals = function.objective(variables);
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,128,double sumSquares = 0;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,130,if (weights != null) {
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,131,if (weights.length != residuals.length) {
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,132,"throw new ObjectiveException(""dimension mismatch {0} != {1}"","
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,133,"weights.length, residuals.length);"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,135,for (int i = 0; i < weights.length; ++i) {
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,136,final double ai = residuals[i] * weights[i];
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,137,sumSquares += ai * ai;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,139,} else if (scale != null) {
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,140,if (scale.getColumnDimension() != residuals.length) {
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,141,"throw new ObjectiveException(""dimension mismatch {0} != {1}"","
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,142,"scale.getColumnDimension(), residuals.length);"
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,144,for (final double yi : scale.operate(residuals)) {
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,145,sumSquares += yi * yi;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,147,} else {
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,148,for (final double ri : residuals) {
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,149,sumSquares += ri * ri;
True,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,153,return sumSquares;
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,15, limitations under the License.
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,18,ackage org.apache.commons.math.optimization;
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,21, This class implements the multi-directional direct search method.
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,23, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,24, @see NelderMead
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,25, @since 1.2
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,27,ublic class MultiDirectional
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,28,xtends DirectSearchOptimizer {
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,30,** Build a multi-directional optimizer with default coefficients.
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,31, <p>The default values are 2.0 for khi and 0.5 for gamma.</p>
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,33,ublic MultiDirectional() {
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,34,uper();
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,35,his.khi   = 2.0;
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,36,his.gamma = 0.5;
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,39,** Build a multi-directional optimizer with specified coefficients.
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,40, @param khi expansion coefficient
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,41, @param gamma contraction coefficient
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,43,"ublic MultiDirectional(double khi, double gamma) {"
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,44,uper();
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,45,his.khi   = khi;
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,46,his.gamma = gamma;
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,49,** Compute the next simplex of the algorithm.
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,50, @exception CostException if the function cannot be evaluated at
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,51, some point
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,53,rotected void iterateSimplex()
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,54,hrows CostException {
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,56,hile (true) {
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,58,/ save the original vertex
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,59,ointCostPair[] original = simplex;
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,60,ouble originalCost = original[0].getCost();
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,62,/ perform a reflection step
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,63,"ouble reflectedCost = evaluateNewSimplex(original, 1.0);"
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,64,f (reflectedCost < originalCost) {
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,66,/ compute the expanded simplex
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,67,ointCostPair[] reflected = simplex;
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,68,"ouble expandedCost = evaluateNewSimplex(original, khi);"
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,69,f (reflectedCost <= expandedCost) {
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,70,/ accept the reflected simplex
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,71,implex = reflected;
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,74,eturn;
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,78,/ compute the contracted simplex
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,79,"ouble contractedCost = evaluateNewSimplex(original, gamma);"
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,80,f (contractedCost < originalCost) {
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,81,/ accept the contracted simplex
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,82,eturn;
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,89,** Compute and evaluate a new simplex.
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,90, @param original original simplex (to be preserved)
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,91, @param coeff linear coefficient
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,92, @return smallest cost in the transformed simplex
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,93, @exception CostException if the function cannot be evaluated at
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,94, some point
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,96,"rivate double evaluateNewSimplex(PointCostPair[] original, double coeff)"
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,97,hrows CostException {
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,99,ouble[] xSmallest = original[0].getPoint();
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,100,nt n = xSmallest.length;
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,102,/ create the linearly transformed simplex
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,103,implex = new PointCostPair[n + 1];
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,104,implex[0] = original[0];
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,105,or (int i = 1; i <= n; ++i) {
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,106,ouble[] xOriginal    = original[i].getPoint();
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,107,ouble[] xTransformed = new double[n];
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,108,or (int j = 0; j < n; ++j) {
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,109,Transformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]);
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,111,"implex[i] = new PointCostPair(xTransformed, Double.NaN);"
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,114,/ evaluate it
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,115,valuateSimplex();
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,116,eturn simplex[0].getCost();
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,120,** Expansion coefficient. */
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,121,rivate double khi;
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,123,** Contraction coefficient. */
False,src/java/org/apache/commons/math/optimization/MultiDirectional.java,src/java/org/apache/commons/math/optimization/MultiDirectional.java,124,rivate double gamma;
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,18,package org.apache.commons.math.optimization;
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,23,* This interface represents a vectorial objective function to be either minimized or maximized.
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,24,* @see LeastSquaresConverter
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,25,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,26,* @since 2.0
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,28,public interface MultiObjectiveFunction extends Serializable {
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,31,* Compute the function value for the given variables set.
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,32,* @param variables variables set
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,33,* @return function value for the given variables set
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,34,* @exception ObjectiveException if no cost can be computed for the parameters
True,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java,36,double[] objective(double[] variables) throws ObjectiveException;
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,15, limitations under the License.
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,18,ackage org.apache.commons.math.optimization;
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,21, This class implements the Nelder-Mead direct search method.
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,23, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,24, @see MultiDirectional
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,25, @since 1.2
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,27,ublic class NelderMead
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,28,xtends DirectSearchOptimizer {
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,30,** Build a Nelder-Mead optimizer with default coefficients.
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,31," <p>The default coefficients are 1.0 for rho, 2.0 for khi and 0.5"
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,32, for both gamma and sigma.</p>
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,34,ublic NelderMead() {
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,35,uper();
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,36,his.rho   = 1.0;
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,37,his.khi   = 2.0;
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,38,his.gamma = 0.5;
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,39,his.sigma = 0.5;
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,42,** Build a Nelder-Mead optimizer with specified coefficients.
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,43, @param rho reflection coefficient
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,44, @param khi expansion coefficient
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,45, @param gamma contraction coefficient
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,46, @param sigma shrinkage coefficient
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,48,"ublic NelderMead(double rho, double khi, double gamma, double sigma) {"
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,49,uper();
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,50,his.rho   = rho;
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,51,his.khi   = khi;
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,52,his.gamma = gamma;
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,53,his.sigma = sigma;
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,56,** Compute the next simplex of the algorithm.
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,57, @exception CostException if the function cannot be evaluated at
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,58, some point
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,60,rotected void iterateSimplex()
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,61,hrows CostException {
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,63,/ the simplex has n+1 point if dimension is n
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,64,nt n = simplex.length - 1;
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,66,/ interesting costs
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,67,ouble   smallest      = simplex[0].getCost();
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,68,ouble   secondLargest = simplex[n-1].getCost();
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,69,ouble   largest       = simplex[n].getCost();
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,70,ouble[] xLargest      = simplex[n].getPoint();
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,72,/ compute the centroid of the best vertices
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,73,/ (dismissing the worst point at index n)
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,74,ouble[] centroid = new double[n];
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,75,or (int i = 0; i < n; ++i) {
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,76,ouble[] x = simplex[i].getPoint();
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,77,or (int j = 0; j < n; ++j) {
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,78,entroid[j] += x[j];
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,81,ouble scaling = 1.0 / n;
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,82,or (int j = 0; j < n; ++j) {
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,83,entroid[j] *= scaling;
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,86,/ compute the reflection point
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,87,ouble[] xR       = new double[n];
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,88,or (int j = 0; j < n; ++j) {
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,89,R[j] = centroid[j] + rho * (centroid[j] - xLargest[j]);
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,91,ouble costR = evaluateCost(xR);
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,93,f ((smallest <= costR) && (costR < secondLargest)) {
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,95,/ accept the reflected point
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,96,"eplaceWorstPoint(new PointCostPair(xR, costR));"
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,98, else if (costR < smallest) {
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,100,/ compute the expansion point
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,101,ouble[] xE = new double[n];
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,102,or (int j = 0; j < n; ++j) {
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,103,E[j] = centroid[j] + khi * (xR[j] - centroid[j]);
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,105,ouble costE = evaluateCost(xE);
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,107,f (costE < costR) {
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,108,/ accept the expansion point
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,109,"eplaceWorstPoint(new PointCostPair(xE, costE));"
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,110, else {
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,111,/ accept the reflected point
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,112,"eplaceWorstPoint(new PointCostPair(xR, costR));"
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,115, else {
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,117,f (costR < largest) {
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,119,/ perform an outside contraction
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,120,ouble[] xC = new double[n];
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,121,or (int j = 0; j < n; ++j) {
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,122,C[j] = centroid[j] + gamma * (xR[j] - centroid[j]);
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,124,ouble costC = evaluateCost(xC);
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,126,f (costC <= costR) {
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,127,/ accept the contraction point
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,128,"eplaceWorstPoint(new PointCostPair(xC, costC));"
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,129,eturn;
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,132, else {
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,134,/ perform an inside contraction
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,135,ouble[] xC = new double[n];
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,136,or (int j = 0; j < n; ++j) {
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,137,C[j] = centroid[j] - gamma * (centroid[j] - xLargest[j]);
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,139,ouble costC = evaluateCost(xC);
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,141,f (costC < largest) {
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,142,/ accept the contraction point
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,143,"eplaceWorstPoint(new PointCostPair(xC, costC));"
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,144,eturn;
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,149,/ perform a shrink
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,150,ouble[] xSmallest = simplex[0].getPoint();
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,151,or (int i = 1; i < simplex.length; ++i) {
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,152,ouble[] x = simplex[i].getPoint();
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,153,or (int j = 0; j < n; ++j) {
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,154,[j] = xSmallest[j] + sigma * (x[j] - xSmallest[j]);
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,156,"implex[i] = new PointCostPair(x, Double.NaN);"
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,158,valuateSimplex();
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,164,** Reflection coefficient. */
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,165,rivate double rho;
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,167,** Expansion coefficient. */
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,168,rivate double khi;
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,170,** Contraction coefficient. */
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,171,rivate double gamma;
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,173,** Shrinkage coefficient. */
False,src/java/org/apache/commons/math/optimization/NelderMead.java,src/java/org/apache/commons/math/optimization/NelderMead.java,174,rivate double sigma;
False,src/java/org/apache/commons/math/optimization/CostException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,23, This class represents exceptions thrown by cost functions.
True,src/java/org/apache/commons/math/optimization/CostException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,23,* This class represents exceptions thrown by obective functions.
False,src/java/org/apache/commons/math/optimization/CostException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,29,ublic class CostException
True,src/java/org/apache/commons/math/optimization/CostException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,29,public class ObjectiveException
False,src/java/org/apache/commons/math/optimization/CostException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,33,rivate static final long serialVersionUID = 467695563268795689L;
True,src/java/org/apache/commons/math/optimization/CostException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,33,private static final long serialVersionUID = 8738657724051397417L;
False,src/java/org/apache/commons/math/optimization/CostException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,36, Constructs a new <code>MathException</code> with specified
True,src/java/org/apache/commons/math/optimization/CostException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,36,* Constructs a new <code>ObjectiveException</code> with specified
False,src/java/org/apache/commons/math/optimization/CostException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,42,"ublic CostException(String pattern, Object ... arguments) {"
True,src/java/org/apache/commons/math/optimization/CostException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,42,"public ObjectiveException(String pattern, Object ... arguments) {"
False,src/java/org/apache/commons/math/optimization/CostException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,47, Constructs a new <code>MathException</code> with specified
True,src/java/org/apache/commons/math/optimization/CostException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,47,* Constructs a new <code>ObjectiveException</code> with specified
False,src/java/org/apache/commons/math/optimization/CostException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,53,ublic CostException(Throwable rootCause) {
True,src/java/org/apache/commons/math/optimization/CostException.java,src/java/org/apache/commons/math/optimization/ObjectiveException.java,53,public ObjectiveException(Throwable rootCause) {
True,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,20,import java.io.Serializable;
False,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,21, This class holds a point and its associated cost.
False,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,22, <p>This is a simple immutable container.</p>
True,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,23,* This interface represents a scalar objective function to be either minimized or maximized.
False,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,24, @see CostFunction
False,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,27,ublic class PointCostPair {
False,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,29,** Build a point/cost pair.
False,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,30, @param point point coordinates (the built instance will store
False,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,31," a copy of the array, not the array passed as argument)"
False,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,32, @param cost point cost
False,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,34,"ublic PointCostPair(double[] point, double cost) {"
False,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,35,his.point = (double[]) point.clone();
False,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,36,his.cost = cost;
False,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,39,** Get the point.
False,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,40, @return a copy of the stored point
False,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,42,ublic double[] getPoint() {
False,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,43,eturn (double[]) point.clone();
False,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,46,** Get the cost.
False,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,47, @return the stored cost
False,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,49,ublic double getCost() {
False,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,50,eturn cost;
False,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,53,** Point coordinates. */
False,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,54,rivate final double[] point;
False,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,56,** Cost associated to the point. */
False,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,57,rivate final double cost;
True,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,27,public interface ObjectiveFunction extends Serializable {
True,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,30,* Compute the function value for the given variables set.
True,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,31,* @param variables variables set
True,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,32,* @return function value for the given variables set
True,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,33,* @exception ObjectiveException if no value can be computed for the parameters
True,src/java/org/apache/commons/math/optimization/PointCostPair.java,src/java/org/apache/commons/math/optimization/ObjectiveFunction.java,35,double objective(double[] variables) throws ObjectiveException;
False,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/optimization/OptimizationException.java,18,ackage org.apache.commons.math.estimation;
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/optimization/OptimizationException.java,18,package org.apache.commons.math.optimization;
False,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/optimization/OptimizationException.java,20,mport org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/optimization/OptimizationException.java,20,import org.apache.commons.math.ConvergenceException;
False,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/optimization/OptimizationException.java,30,ublic class EstimationException
False,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/optimization/OptimizationException.java,31,xtends MathException {
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/optimization/OptimizationException.java,30,public class OptimizationException extends ConvergenceException {
False,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/optimization/OptimizationException.java,34,rivate static final long serialVersionUID = -573038581493881337L;
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/optimization/OptimizationException.java,33,private static final long serialVersionUID = -781139167958631145L;
False,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/optimization/OptimizationException.java,42,"ublic EstimationException(String specifier, Object ... parts) {"
True,src/java/org/apache/commons/math/estimation/EstimationException.java,src/java/org/apache/commons/math/optimization/OptimizationException.java,41,"public OptimizationException(String specifier, Object ... parts) {"
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,18,package org.apache.commons.math.optimization;
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,23,* This interface represents an optimization algorithm.
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,24,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,25,* @since 2.0
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,27,public interface Optimizer extends Serializable {
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,29,/** Set the maximal number of objective function calls.
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,30,* @param maxEvaluations maximal number of function calls for each
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,31,* start (note that the number may be checked <em>after</em>
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,32,"* a few related calls have been made, this means that in some"
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,33,"* cases this number will be exceeded by a few units, depending on"
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,34,* the dimension of the problem and kind of optimizer).
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,36,void setMaxEvaluations(int maxEvaluations);
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,38,/** Set the convergence checker.
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,39,* @param checker object to use to check for convergence
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,41,void setConvergenceChecker(ConvergenceChecker checker);
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,43,/** Optimizes an objective function.
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,44,* @param f objective function
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,45,* @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,46,* or {@link GoalType#MINIMIZE}
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,47,* @return the point/value pair giving the optimal value for objective function
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,48,* @exception ObjectiveException if the objective function throws one during
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,49,* the search
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,50,* @exception OptimizationException if the algorithm failed to converge
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,52,"PointValuePair optimize(final ObjectiveFunction f, final GoalType goalType)"
True,src/java/org/apache/commons/math/optimization/Optimizer.java,src/java/org/apache/commons/math/optimization/Optimizer.java,53,"throws ObjectiveException, OptimizationException;"
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,18,package org.apache.commons.math.optimization;
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,24,* This class holds a point and the value of an objective function at this point.
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,25,* <p>This is a simple immutable container.</p>
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,26,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,27,* @see ObjectiveFunction
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,28,* @since 2.0
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,30,public class PointValuePair implements Serializable {
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,32,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,33,private static final long serialVersionUID = 2254035971797977063L;
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,35,/** Point coordinates. */
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,36,private final double[] point;
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,38,/** Value of the objective function at the point. */
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,39,private final double value;
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,41,/** Build a point/objective function value pair.
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,42,* @param point point coordinates (the built instance will store
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,43,"* a copy of the array, not the array passed as argument)"
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,44,* @param value value of an objective function at the point
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,46,"public PointValuePair(final double[] point, final double value) {"
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,47,this.point = point.clone();
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,48,this.value  = value;
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,51,/** Get the point.
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,52,* @return a copy of the stored point
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,54,public double[] getPoint() {
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,55,return point.clone();
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,58,/** Get the value of the objective function.
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,59,* @return the stored value of the objective function
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,61,public double getValue() {
True,src/java/org/apache/commons/math/optimization/PointValuePair.java,src/java/org/apache/commons/math/optimization/PointValuePair.java,62,return value;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,18,ackage org.apache.commons.math.optimization;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,18,package org.apache.commons.math.optimization.direct;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,29,import org.apache.commons.math.optimization.ConvergenceChecker;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,30,import org.apache.commons.math.optimization.ObjectiveException;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,31,import org.apache.commons.math.optimization.ObjectiveFunction;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,32,import org.apache.commons.math.optimization.PointValuePair;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,41," <p>Direct search methods only use cost function values, they don't"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,46,"* <p>Direct search methods only use objective function values, they don't"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,54, the cost function values at the vertices of a simplex (which is a
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,59,* the objective function values at the vertices of a simplex (which is a
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,58, <p>Minimization can be attempted either in single-start or in
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,63,* <p>Optimization can be attempted either in single-start or in
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,60, being trapped in a local minimum and miss the global minimum of a
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,65,* being trapped in a local optimum and miss the global optimum of a
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,62, algorithm. The various multi-start-enabled <code>minimize</code>
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,63," methods return the best minimum found after all starts, and the"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,64, {@link #getMinima getMinima} method can be used to retrieve all
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,65, minima from all starts (including the one already provided by the
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,66," {@link #minimize(CostFunction, int, ConvergenceChecker, double[],"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,67, double[]) minimize} method).</p>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,67,* algorithm. The various multi-start-enabled <code>optimize</code>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,68,"* methods return the best optimum found after all starts, and the"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,69,* {@link #getOptimum getOptimum} method can be used to retrieve all
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,70,* optima from all starts (including the one already provided by the
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,71,"* {@link #optimize(ObjectiveFunction, int, ConvergenceChecker, double[],"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,72,* double[]) optimize} method).</p>
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,74, @see CostFunction
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,79,* @see ObjectiveFunction
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,80,ublic abstract class DirectSearchOptimizer {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,85,public abstract class DirectSearchOptimizer implements Serializable {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,87,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,88,private static final long serialVersionUID = -3913013760494455466L;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,90,/** Comparator for {@link PointValuePair} objects. */
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,91,private static final Comparator<PointValuePair> PAIR_COMPARATOR =
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,92,new Comparator<PointValuePair>() {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,93,"public int compare(PointValuePair o1, PointValuePair o2) {"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,94,if (o1 == null) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,95,return (o2 == null) ? 0 : +1;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,96,} else if (o2 == null) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,97,return -1;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,99,return (o1.getValue() < o2.getValue()) ? -1 : ((o1 == o2) ? 0 : +1);
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,103,/** Simplex. */
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,104,protected PointValuePair[] simplex;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,106,/** Objective function. */
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,107,private ObjectiveFunction f;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,109,/** Indicator for minimization. */
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,110,private boolean minimizing;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,112,/** Number of evaluations already performed for the current start. */
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,113,private int evaluations;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,115,/** Number of evaluations already performed for all starts. */
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,116,private int totalEvaluations;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,118,/** Number of starts to go. */
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,119,private int starts;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,121,/** Random generator for multi-start. */
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,122,private RandomVectorGenerator generator;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,124,/** Found optima. */
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,125,private PointValuePair[] optima;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,87,** Minimizes a cost function.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,132,/** Optimizes an objective function.
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,96, @param f cost function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,141,* @param f objective function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,148,"* @param minimizing if true, function must be minimize otherwise it must be maximized"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,105, @return the point/cost pairs giving the minimal cost
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,106, @exception CostException if the cost function throws one during
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,151,* @return the point/value pairs giving the optimal value for objective function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,152,* @exception ObjectiveException if the objective function throws one during
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,111,"ublic PointCostPair minimize(CostFunction f, int maxEvaluations,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,112,"onvergenceChecker checker,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,113,"ouble[] vertexA, double[] vertexB)"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,114,"hrows CostException, ConvergenceException {"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,157,"public PointValuePair optimize(final ObjectiveFunction f, final int maxEvaluations,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,158,"final ConvergenceChecker checker, final boolean minimizing,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,159,"final double[] vertexA, final double[] vertexB)"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,160,"throws ObjectiveException, ConvergenceException {"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,120,/ compute minimum
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,121,"eturn minimize(f, maxEvaluations, checker);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,166,// compute optimum
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,167,"return optimize(f, maxEvaluations, checker, minimizing);"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,125,** Minimizes a cost function.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,171,/** Optimizes an objective function.
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,134, @param f cost function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,180,* @param f objective function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,187,"* @param minimizing if true, function must be minimize otherwise it must be maximized"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,147, @return the point/cost pairs giving the minimal cost
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,148, @exception CostException if the cost function throws one during
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,194,* @return the point/value pairs giving the optimal value for objective function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,195,* @exception ObjectiveException if the obective function throws one during
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,153,"ublic PointCostPair minimize(CostFunction f, int maxEvaluations,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,154,"onvergenceChecker checker,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,155,"ouble[] vertexA, double[] vertexB,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,156,"nt starts, long seed)"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,157,"hrows CostException, ConvergenceException {"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,200,"public PointValuePair optimize(final ObjectiveFunction f, final int maxEvaluations,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,201,"final ConvergenceChecker checker, final boolean minimizing,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,202,"final double[] vertexA, final double[] vertexB,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,203,"final int starts, final long seed)"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,204,"throws ObjectiveException, ConvergenceException {"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,165,ouble[] mean              = new double[vertexA.length];
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,166,ouble[] standardDeviation = new double[vertexA.length];
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,212,final double[] mean              = new double[vertexA.length];
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,213,final double[] standardDeviation = new double[vertexA.length];
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,172,andomGenerator rg = new JDKRandomGenerator();
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,219,final RandomGenerator rg = new JDKRandomGenerator();
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,174,niformRandomGenerator urg = new UniformRandomGenerator(rg);
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,175,andomVectorGenerator rvg =
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,221,final UniformRandomGenerator urg = new UniformRandomGenerator(rg);
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,222,final RandomVectorGenerator rvg =
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,179,/ compute minimum
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,180,"eturn minimize(f, maxEvaluations, checker);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,226,// compute optimum
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,227,"return optimize(f, maxEvaluations, checker, minimizing);"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,184,** Minimizes a cost function.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,231,/** Optimizes an objective function.
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,187, @param f cost function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,234,* @param f objective function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,241,"* @param minimizing if true, function must be minimize otherwise it must be maximized"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,195, @return the point/cost pairs giving the minimal cost
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,196, @exception CostException if the cost function throws one during
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,243,* @return the point/value pairs giving the optimal value for objective function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,244,* @exception ObjectiveException if the objective function throws one during
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,201,"ublic PointCostPair minimize(CostFunction f, int maxEvaluations,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,202,"onvergenceChecker checker,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,203,ouble[][] vertices)
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,204,"hrows CostException, ConvergenceException {"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,249,"public PointValuePair optimize(final ObjectiveFunction f, final int maxEvaluations,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,250,"final ConvergenceChecker checker, final boolean minimizing,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,251,final double[][] vertices)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,252,"throws ObjectiveException, ConvergenceException {"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,210,/ compute minimum
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,211,"eturn minimize(f, maxEvaluations, checker);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,258,// compute optimum
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,259,"return optimize(f, maxEvaluations, checker, minimizing);"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,215,** Minimizes a cost function.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,263,/** Optimizes an objective function.
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,218, @param f cost function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,266,* @param f objective function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,273,"* @param minimizing if true, function must be minimize otherwise it must be maximized"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,230, @return the point/cost pairs giving the minimal cost
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,279,* @return the point/value pairs giving the optimal value for objective function
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,233, @exception CostException if the cost function throws one during
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,282,* @exception ObjectiveException if the objective function throws one during
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,238,"ublic PointCostPair minimize(CostFunction f, int maxEvaluations,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,239,"onvergenceChecker checker,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,240,"ouble[][] vertices,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,241,"nt starts, long seed)"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,242,"hrows NotPositiveDefiniteMatrixException,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,243,"ostException, ConvergenceException {"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,287,"public PointValuePair optimize(final ObjectiveFunction f, final int maxEvaluations,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,288,"final ConvergenceChecker checker, final boolean minimizing,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,289,"final double[][] vertices,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,290,"final int starts, final long seed)"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,291,"throws NotPositiveDefiniteMatrixException, ObjectiveException, ConvergenceException {"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,250,ectorialMean meanStat = new VectorialMean(vertices[0].length);
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,251,"ectorialCovariance covStat = new VectorialCovariance(vertices[0].length, true);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,298,final VectorialMean meanStat = new VectorialMean(vertices[0].length);
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,299,"final VectorialCovariance covStat = new VectorialCovariance(vertices[0].length, true);"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,256,ouble[] mean = meanStat.getResult();
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,257,ealMatrix covariance = covStat.getResult();
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,304,final double[] mean = meanStat.getResult();
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,305,final RealMatrix covariance = covStat.getResult();
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,260,andomGenerator rg = new JDKRandomGenerator();
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,308,final RandomGenerator rg = new JDKRandomGenerator();
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,262,andomVectorGenerator rvg =
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,310,final RandomVectorGenerator rvg =
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,268,/ compute minimum
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,269,"eturn minimize(f, maxEvaluations, checker);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,316,// compute optimum
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,317,"return optimize(f, maxEvaluations, checker, minimizing);"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,278,** Minimizes a cost function.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,326,/** Optimizes an objective function.
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,281, @param f cost function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,329,* @param f objective function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,336,"* @param minimizing if true, function must be minimize otherwise it must be maximized"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,289, @return the point/cost pairs giving the minimal cost
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,290, @exception CostException if the cost function throws one during
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,338,* @return the point/value pairs giving the optimal value for objective function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,339,* @exception ObjectiveException if the objective function throws one during
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,295,"ublic PointCostPair minimize(CostFunction f, int maxEvaluations,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,296,"onvergenceChecker checker,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,297,andomVectorGenerator generator)
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,298,"hrows CostException, ConvergenceException {"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,344,"public PointValuePair optimize(final ObjectiveFunction f, final int maxEvaluations,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,345,"final ConvergenceChecker checker, final boolean minimizing,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,346,final RandomVectorGenerator generator)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,347,"throws ObjectiveException, ConvergenceException {"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,304,/ compute minimum
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,305,"eturn minimize(f, maxEvaluations, checker);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,353,// compute optimum
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,354,"return optimize(f, maxEvaluations, checker, minimizing);"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,309,** Minimizes a cost function.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,358,/** Optimizes an objective function.
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,312, @param f cost function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,361,* @param f objective function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,368,"* @param minimizing if true, function must be minimize otherwise it must be maximized"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,323, @return the point/cost pairs giving the minimal cost
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,324, @exception CostException if the cost function throws one during
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,373,* @return the point/value pairs giving the optimal value for objective function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,374,* @exception ObjectiveException if the objective function throws one during
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,329,"ublic PointCostPair minimize(CostFunction f, int maxEvaluations,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,330,"onvergenceChecker checker,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,331,"andomVectorGenerator generator,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,332,nt starts)
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,333,"hrows CostException, ConvergenceException {"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,379,"public PointValuePair optimize(final ObjectiveFunction f, final int maxEvaluations,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,380,"final ConvergenceChecker checker, final boolean minimizing,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,381,"final RandomVectorGenerator generator,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,382,final int starts)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,383,"throws ObjectiveException, ConvergenceException {"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,339,/ compute minimum
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,340,"eturn minimize(f, maxEvaluations, checker);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,389,// compute optimum
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,390,"return optimize(f, maxEvaluations, checker, minimizing);"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,355,"rivate void buildSimplex(double[] vertexA, double[] vertexB) {"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,405,"private void buildSimplex(final double[] vertexA, final double[] vertexB) {"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,357,nt n = vertexA.length;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,358,implex = new PointCostPair[n + 1];
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,407,final int n = vertexA.length;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,408,simplex = new PointValuePair[n + 1];
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,362,ouble[] vertex = new double[n];
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,412,final double[] vertex = new double[n];
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,369,"implex[i] = new PointCostPair(vertex, Double.NaN);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,419,"simplex[i] = new PointValuePair(vertex, Double.NaN);"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,377,rivate void buildSimplex(double[][] vertices) {
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,378,nt n = vertices.length - 1;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,379,implex = new PointCostPair[n + 1];
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,427,private void buildSimplex(final double[][] vertices) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,428,final int n = vertices.length - 1;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,429,simplex = new PointValuePair[n + 1];
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,381,"implex[i] = new PointCostPair(vertices[i], Double.NaN);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,431,"simplex[i] = new PointValuePair(vertices[i], Double.NaN);"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,388,rivate void buildSimplex(RandomVectorGenerator generator) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,438,private void buildSimplex(final RandomVectorGenerator generator) {
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,391,ouble[] vertex = generator.nextVector();
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,392,nt n = vertex.length;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,393,implex = new PointCostPair[n + 1];
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,394,"implex[0] = new PointCostPair(vertex, Double.NaN);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,441,final double[] vertex = generator.nextVector();
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,442,final int n = vertex.length;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,443,simplex = new PointValuePair[n + 1];
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,444,"simplex[0] = new PointValuePair(vertex, Double.NaN);"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,398,"implex[i] = new PointCostPair(generator.nextVector(), Double.NaN);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,448,"simplex[i] = new PointValuePair(generator.nextVector(), Double.NaN);"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,408,inima    = null;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,458,optima    = null;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,417,"rivate void setMultiStart(int starts, RandomVectorGenerator generator) {"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,467,"private void setMultiStart(final int starts, final RandomVectorGenerator generator) {"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,421,inima         = null;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,471,optima         = null;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,425,inima         = null;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,475,optima         = null;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,429,** Get all the minima found during the last call to {@link
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,430," #minimize(CostFunction, int, ConvergenceChecker, double[], double[])"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,479,/** Get all the optima found during the last call to {@link
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,480,"* #optimize(ObjectiveFunction, int, ConvergenceChecker, double[], double[])"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,432, <p>The optimizer stores all the minima found during a set of
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,482,* <p>The optimizer stores all the optima found during a set of
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,434," #minimize(CostFunction, int, ConvergenceChecker, double[], double[])"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,435, minimize} method returns the best point only. This method
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,484,"* #optimize(ObjectiveFunction, int, ConvergenceChecker, double[], double[])"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,485,* optimize} method returns the best point only. This method
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,437," the best one already returned by the {@link #minimize(CostFunction,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,438," int, ConvergenceChecker, double[], double[]) minimize} method."
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,487,"* the best one already returned by the {@link #optimize(ObjectiveFunction,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,488,"* int, ConvergenceChecker, double[], double[]) optimize} method."
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,441, <p>The array containing the minima is ordered with the results
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,491,* <p>The array containing the optimum is ordered with the results
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,443," highest minimum cost, and null elements corresponding to the runs"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,444, that did not converge (all elements will be null if the {@link
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,445," #minimize(CostFunction, int, ConvergenceChecker, double[], double[])"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,446, minimize} method did throw a {@link ConvergenceException
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,447, ConvergenceException}).</p>
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,448," @return array containing the minima, or null if {@link"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,449," #minimize(CostFunction, int, ConvergenceChecker, double[], double[])"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,450, minimize} has not been called
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,493,"* highest objective value if minimizing (from highest to lowest if maximizing),"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,494,* and null elements corresponding to the runs that did not converge. This means
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,495,"* all elements will be null if the {@link #optimize(ObjectiveFunction, int,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,496,"* ConvergenceChecker, double[], double[]) optimize} method did throw a {@link"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,497,* ConvergenceException ConvergenceException}). This also means that if the first
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,498,"* element is non null, it is the best point found accross all starts.</p>"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,499,"* @return array containing the optima, or null if {@link"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,500,"* #optimize(ObjectiveFunction, int, ConvergenceChecker, double[], double[])"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,501,* optimize} has not been called
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,452,ublic PointCostPair[] getMinima() {
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,453,eturn (PointCostPair[]) minima.clone();
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,503,public PointValuePair[] getOptima() {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,504,return (PointValuePair[]) optima.clone();
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,456,** Minimizes a cost function.
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,457, @param f cost function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,507,/** Optimizes an objective function.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,508,* @param f objective function
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,464, @return the point/cost pairs giving the minimal cost
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,465, @exception CostException if the cost function throws one during
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,515,"* @param minimizing if true, function must be minimize otherwise it must be maximized"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,516,* @return the point/value pairs giving the optimal value for objective function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,517,* @exception ObjectiveException if the objective function throws one during
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,470,"rivate PointCostPair minimize(CostFunction f, int maxEvaluations,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,471,onvergenceChecker checker)
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,472,"hrows CostException, ConvergenceException {"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,522,"private PointValuePair optimize(final ObjectiveFunction f, final int maxEvaluations,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,523,"final ConvergenceChecker checker, final boolean minimizing)"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,524,"throws ObjectiveException, ConvergenceException {"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,474,his.f = f;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,475,inima = new PointCostPair[starts];
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,526,this.f          = f;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,527,this.minimizing = minimizing;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,528,optima = new PointValuePair[starts];
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,529,totalEvaluations = 0;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,485,/ we have found a minimum
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,486,inima[i] = simplex[0];
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,539,// we have found an optimum
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,540,optima[i] = simplex[0];
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,490,inima[i] = null;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,544,optima[i] = null;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,551,totalEvaluations += evaluations;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,504,"/ sort the minima from lowest cost to highest cost, followed by"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,560,"// sort the optima from best to poorest, followed by"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,506,"rrays.sort(minima, pointCostPairComparator);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,562,"Arrays.sort(optima, PAIR_COMPARATOR);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,564,if (!minimizing) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,565,// revert objective function sign to match user original definition
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,566,for (int i = 0; i < optima.length; ++i) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,567,final PointValuePair current = optima[i];
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,568,if (current != null) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,569,"optima[i] = new PointValuePair(current.getPoint(), -current.getValue());"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,508,/ return the found point given the lowest cost
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,509,f (minima[0] == null) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,574,// return the found point given the best objective function value
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,575,if (optima[0] == null) {
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,514,eturn minima[0];
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,580,return optima[0];
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,584,/** Get the total number of evaluations of the objective function.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,585,* <p>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,586,* The total number of evaluations includes all evaluations for all
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,587,* starts if in optimization was done in multi-start mode.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,588,* </p>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,589,* @return total number of evaluations of the objective function
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,591,public int getTotalEvaluations() {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,592,return totalEvaluations;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,519, @exception CostException if the function cannot be evaluated at
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,596,* @exception ObjectiveException if the function cannot be evaluated at
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,522,rotected abstract void iterateSimplex()
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,523,hrows CostException;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,599,protected abstract void iterateSimplex() throws ObjectiveException;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,525,** Evaluate the cost on one point.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,601,/** Evaluate the objective function on one point.
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,528, @param x point on which the cost function should be evaluated
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,529, @return cost at the given point
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,530, @exception CostException if no cost can be computed for the parameters
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,604,* @param x point on which the objective function should be evaluated
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,605,* @return objective function value at the given point
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,606,* @exception ObjectiveException if no value can be computed for the parameters
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,532,rotected double evaluateCost(double[] x)
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,533,hrows CostException {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,608,protected double evaluate(final double[] x) throws ObjectiveException {
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,535,eturn f.cost(x);
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,610,return minimizing ? f.objective(x) : -f.objective(x);
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,539, @exception CostException if no cost can be computed for the parameters
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,614,* @exception ObjectiveException if no value can be computed for the parameters
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,541,rotected void evaluateSimplex()
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,542,hrows CostException {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,616,protected void evaluateSimplex() throws ObjectiveException {
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,544,/ evaluate the cost at all non-evaluated simplex points
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,618,// evaluate the objective function at all non-evaluated simplex points
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,546,ointCostPair pair = simplex[i];
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,547,f (Double.isNaN(pair.getCost())) {
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,548,"implex[i] = new PointCostPair(pair.getPoint(), evaluateCost(pair.getPoint()));"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,620,PointValuePair pair = simplex[i];
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,621,if (Double.isNaN(pair.getValue())) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,622,"simplex[i] = new PointValuePair(pair.getPoint(), evaluate(pair.getPoint()));"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,552,/ sort the simplex from lowest cost to highest cost
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,553,"rrays.sort(simplex, pointCostPairComparator);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,626,// sort the simplex from best to poorest
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,627,"Arrays.sort(simplex, PAIR_COMPARATOR);"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,558, @param pointCostPair point to insert
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,632,* @param pointValuePair point to insert
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,560,rotected void replaceWorstPoint(PointCostPair pointCostPair) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,634,protected void replaceWorstPoint(PointValuePair pointValuePair) {
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,563,f (simplex[i].getCost() > pointCostPair.getCost()) {
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,564,ointCostPair tmp = simplex[i];
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,565,implex[i]        = pointCostPair;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,566,ointCostPair     = tmp;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,637,if (simplex[i].getValue() > pointValuePair.getValue()) {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,638,PointValuePair tmp = simplex[i];
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,639,simplex[i]        = pointValuePair;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,640,pointValuePair     = tmp;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,569,implex[n] = pointCostPair;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,643,simplex[n] = pointValuePair;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,572,** Comparator for {@link PointCostPair PointCostPair} objects. */
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,573,rivate static Comparator<PointCostPair> pointCostPairComparator =
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,574,ew Comparator<PointCostPair>() {
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,575,"ublic int compare(PointCostPair o1, PointCostPair o2) {"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,576,f (o1 == null) {
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,577,eturn (o2 == null) ? 0 : +1;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,578, else if (o2 == null) {
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,579,eturn -1;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,581,eturn (o1.getCost() < o2.getCost()) ? -1 : ((o1 == o2) ? 0 : +1);
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,585,** Simplex. */
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,586,rotected PointCostPair[] simplex;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,588,** Cost function. */
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,589,rivate CostFunction f;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,591,** Number of evaluations already performed. */
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,592,rivate int evaluations;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,594,** Number of starts to go. */
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,595,rivate int starts;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,597,** Random generator for multi-start. */
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,598,rivate RandomVectorGenerator generator;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,600,** Found minima. */
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,601,rivate PointCostPair[] minima;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,18,package org.apache.commons.math.optimization.direct;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,20,import org.apache.commons.math.optimization.ObjectiveException;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,21,import org.apache.commons.math.optimization.PointValuePair;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,24,* This class implements the multi-directional direct search method.
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,26,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,27,* @see NelderMead
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,28,* @since 1.2
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,30,public class MultiDirectional extends DirectSearchOptimizer {
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,32,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,33,private static final long serialVersionUID = -5347711305645019145L;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,35,/** Expansion coefficient. */
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,36,private final double khi;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,38,/** Contraction coefficient. */
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,39,private final double gamma;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,41,/** Build a multi-directional optimizer with default coefficients.
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,42,* <p>The default values are 2.0 for khi and 0.5 for gamma.</p>
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,44,public MultiDirectional() {
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,45,this.khi   = 2.0;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,46,this.gamma = 0.5;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,49,/** Build a multi-directional optimizer with specified coefficients.
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,50,* @param khi expansion coefficient
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,51,* @param gamma contraction coefficient
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,53,"public MultiDirectional(final double khi, final double gamma) {"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,54,this.khi   = khi;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,55,this.gamma = gamma;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,58,/** Compute the next simplex of the algorithm.
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,59,* @exception ObjectiveException if the function cannot be evaluated at
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,60,* some point
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,62,protected void iterateSimplex() throws ObjectiveException {
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,64,while (true) {
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,66,// save the original vertex
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,67,final PointValuePair[] original = simplex;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,68,final double originalValue = original[0].getValue();
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,70,// perform a reflection step
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,71,"final double reflectedValue = evaluateNewSimplex(original, 1.0);"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,72,if (reflectedValue < originalValue) {
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,74,// compute the expanded simplex
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,75,final PointValuePair[] reflected = simplex;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,76,"final double expandedValue = evaluateNewSimplex(original, khi);"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,77,if (reflectedValue <= expandedValue) {
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,78,// accept the reflected simplex
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,79,simplex = reflected;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,82,return;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,86,// compute the contracted simplex
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,87,"final double contractedValue = evaluateNewSimplex(original, gamma);"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,88,if (contractedValue < originalValue) {
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,89,// accept the contracted simplex
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,90,return;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,97,/** Compute and evaluate a new simplex.
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,98,* @param original original simplex (to be preserved)
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,99,* @param coeff linear coefficient
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,100,* @return smallest value in the transformed simplex
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,101,* @exception ObjectiveException if the function cannot be evaluated at
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,102,* some point
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,104,"private double evaluateNewSimplex(final PointValuePair[] original,"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,105,final double coeff)
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,106,throws ObjectiveException {
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,108,final double[] xSmallest = original[0].getPoint();
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,109,final int n = xSmallest.length;
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,111,// create the linearly transformed simplex
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,112,simplex = new PointValuePair[n + 1];
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,113,simplex[0] = original[0];
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,114,for (int i = 1; i <= n; ++i) {
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,115,final double[] xOriginal    = original[i].getPoint();
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,116,final double[] xTransformed = new double[n];
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,117,for (int j = 0; j < n; ++j) {
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,118,xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]);
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,120,"simplex[i] = new PointValuePair(xTransformed, Double.NaN);"
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,123,// evaluate it
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,124,evaluateSimplex();
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,125,return simplex[0].getValue();
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,18,package org.apache.commons.math.optimization.direct;
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,20,import org.apache.commons.math.optimization.ObjectiveException;
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,21,import org.apache.commons.math.optimization.PointValuePair;
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,24,* This class implements the Nelder-Mead direct search method.
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,26,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,27,* @see MultiDirectional
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,28,* @since 1.2
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,30,public class NelderMead extends DirectSearchOptimizer {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,32,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,33,private static final long serialVersionUID = -5810365844886183056L;
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,35,/** Reflection coefficient. */
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,36,private final double rho;
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,38,/** Expansion coefficient. */
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,39,private final double khi;
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,41,/** Contraction coefficient. */
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,42,private final double gamma;
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,44,/** Shrinkage coefficient. */
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,45,private final double sigma;
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,47,/** Build a Nelder-Mead optimizer with default coefficients.
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,48,"* <p>The default coefficients are 1.0 for rho, 2.0 for khi and 0.5"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,49,* for both gamma and sigma.</p>
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,51,public NelderMead() {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,52,this.rho   = 1.0;
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,53,this.khi   = 2.0;
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,54,this.gamma = 0.5;
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,55,this.sigma = 0.5;
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,58,/** Build a Nelder-Mead optimizer with specified coefficients.
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,59,* @param rho reflection coefficient
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,60,* @param khi expansion coefficient
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,61,* @param gamma contraction coefficient
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,62,* @param sigma shrinkage coefficient
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,64,"public NelderMead(final double rho, final double khi,"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,65,"final double gamma, final double sigma) {"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,66,this.rho   = rho;
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,67,this.khi   = khi;
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,68,this.gamma = gamma;
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,69,this.sigma = sigma;
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,72,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,73,protected void iterateSimplex() throws ObjectiveException {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,75,// the simplex has n+1 point if dimension is n
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,76,final int n = simplex.length - 1;
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,78,// interesting values
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,79,final double   smallest      = simplex[0].getValue();
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,80,final double   secondLargest = simplex[n-1].getValue();
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,81,final double   largest       = simplex[n].getValue();
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,82,final double[] xLargest      = simplex[n].getPoint();
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,84,// compute the centroid of the best vertices
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,85,// (dismissing the worst point at index n)
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,86,final double[] centroid = new double[n];
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,87,for (int i = 0; i < n; ++i) {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,88,final double[] x = simplex[i].getPoint();
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,89,for (int j = 0; j < n; ++j) {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,90,centroid[j] += x[j];
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,93,final double scaling = 1.0 / n;
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,94,for (int j = 0; j < n; ++j) {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,95,centroid[j] *= scaling;
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,98,// compute the reflection point
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,99,final double[] xR = new double[n];
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,100,for (int j = 0; j < n; ++j) {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,101,xR[j] = centroid[j] + rho * (centroid[j] - xLargest[j]);
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,103,final double valueR = evaluate(xR);
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,105,if ((smallest <= valueR) && (valueR < secondLargest)) {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,107,// accept the reflected point
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,108,"replaceWorstPoint(new PointValuePair(xR, valueR));"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,110,} else if (valueR < smallest) {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,112,// compute the expansion point
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,113,final double[] xE = new double[n];
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,114,for (int j = 0; j < n; ++j) {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,115,xE[j] = centroid[j] + khi * (xR[j] - centroid[j]);
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,117,final double valueE = evaluate(xE);
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,119,if (valueE < valueR) {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,120,// accept the expansion point
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,121,"replaceWorstPoint(new PointValuePair(xE, valueE));"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,122,} else {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,123,// accept the reflected point
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,124,"replaceWorstPoint(new PointValuePair(xR, valueR));"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,127,} else {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,129,if (valueR < largest) {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,131,// perform an outside contraction
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,132,final double[] xC = new double[n];
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,133,for (int j = 0; j < n; ++j) {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,134,xC[j] = centroid[j] + gamma * (xR[j] - centroid[j]);
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,136,final double valueC = evaluate(xC);
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,138,if (valueC <= valueR) {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,139,// accept the contraction point
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,140,"replaceWorstPoint(new PointValuePair(xC, valueC));"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,141,return;
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,144,} else {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,146,// perform an inside contraction
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,147,final double[] xC = new double[n];
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,148,for (int j = 0; j < n; ++j) {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,149,xC[j] = centroid[j] - gamma * (centroid[j] - xLargest[j]);
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,151,final double valueC = evaluate(xC);
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,153,if (valueC < largest) {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,154,// accept the contraction point
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,155,"replaceWorstPoint(new PointValuePair(xC, valueC));"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,156,return;
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,161,// perform a shrink
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,162,final double[] xSmallest = simplex[0].getPoint();
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,163,for (int i = 1; i < simplex.length; ++i) {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,164,final double[] x = simplex[i].getPoint();
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,165,for (int j = 0; j < n; ++j) {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,166,x[j] = xSmallest[j] + sigma * (x[j] - xSmallest[j]);
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,168,"simplex[i] = new PointValuePair(x, Double.NaN);"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,170,evaluateSimplex();
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,18,ackage org.apache.commons.math.estimation;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,18,package org.apache.commons.math.optimization.general;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,26,import org.apache.commons.math.optimization.OptimizationException;
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,101, @exception EstimationException if the number of cost evaluations
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,102,* @exception OptimizationException if the number of cost evaluations
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,105,hrows EstimationException {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,106,throws OptimizationException {
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,108,"hrow new EstimationException(""maximal number of evaluations exceeded ({0})"","
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,109,"throw new OptimizationException(""maximal number of evaluations exceeded ({0})"","
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,163, @exception EstimationException if the covariance matrix
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,164,* @exception OptimizationException if the covariance matrix
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,167,hrows EstimationException {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,168,throws OptimizationException {
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,194,"hrow new EstimationException(""unable to compute covariances: singular problem"");"
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,195,"throw new OptimizationException(""unable to compute covariances: singular problem"");"
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,204, @exception EstimationException if the covariances matrix cannot be computed
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,205,* @exception OptimizationException if the covariances matrix cannot be computed
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,209,hrows EstimationException {
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,210,throws OptimizationException {
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,213,hrow new EstimationException(
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,214,throw new OptimizationException(
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,264, @exception EstimationException if the problem cannot be solved
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,265,* @exception OptimizationException if the problem cannot be solved
False,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,268,hrows EstimationException;
True,src/java/org/apache/commons/math/estimation/AbstractEstimator.java,src/java/org/apache/commons/math/optimization/general/AbstractEstimator.java,269,throws OptimizationException;
False,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,18,ackage org.apache.commons.math.estimation;
True,src/java/org/apache/commons/math/estimation/EstimatedParameter.java,src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java,18,package org.apache.commons.math.optimization.general;
False,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,18,ackage org.apache.commons.math.estimation;
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,18,package org.apache.commons.math.optimization.general;
False,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,51,ublic WeightedMeasurement[] getMeasurements();
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,51,WeightedMeasurement[] getMeasurements();
False,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,57,ublic EstimatedParameter[] getUnboundParameters();
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,57,EstimatedParameter[] getUnboundParameters();
False,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,63,ublic EstimatedParameter[] getAllParameters();
True,src/java/org/apache/commons/math/estimation/EstimationProblem.java,src/java/org/apache/commons/math/optimization/general/EstimationProblem.java,63,EstimatedParameter[] getAllParameters();
False,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,18,ackage org.apache.commons.math.estimation;
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,18,package org.apache.commons.math.optimization.general;
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,20,import org.apache.commons.math.optimization.OptimizationException;
False,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,51, @exception EstimationException if the problem cannot be solved
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,53,* @exception OptimizationException if the problem cannot be solved
False,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,54,ublic void estimate(EstimationProblem problem)
False,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,55,hrows EstimationException;
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,56,void estimate(EstimationProblem problem)
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,57,throws OptimizationException;
False,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,69,ublic double getRMS(EstimationProblem problem);
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,71,double getRMS(EstimationProblem problem);
False,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,75, @exception EstimationException if the covariance matrix
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,77,* @exception OptimizationException if the covariance matrix
False,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,78,ublic double[][] getCovariances(EstimationProblem problem)
False,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,79,hrows EstimationException;
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,80,double[][] getCovariances(EstimationProblem problem)
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,81,throws OptimizationException;
False,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,86, @exception EstimationException if the error cannot be guessed
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,88,* @exception OptimizationException if the error cannot be guessed
False,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,88,ublic double[] guessParametersErrors(EstimationProblem problem)
False,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,89,hrows EstimationException;
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,90,double[] guessParametersErrors(EstimationProblem problem)
True,src/java/org/apache/commons/math/estimation/Estimator.java,src/java/org/apache/commons/math/optimization/general/Estimator.java,91,throws OptimizationException;
False,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,18,ackage org.apache.commons.math.estimation;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,18,package org.apache.commons.math.optimization.general;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,28,import org.apache.commons.math.optimization.OptimizationException;
False,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,90, {@link EstimationException} is thrown.</p>
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,91,* {@link OptimizationException} is thrown.</p>
False,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,147," number of iterations, an {@link EstimationException} is"
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,148,"* number of iterations, an {@link OptimizationException} is"
False,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,151, @exception EstimationException if the problem cannot be solved
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,152,* @exception OptimizationException if the problem cannot be solved
False,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,157,hrows EstimationException {
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,158,throws OptimizationException {
False,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,213,"hrow new EstimationException(""unable to solve: singular problem"");"
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonEstimator.java,214,"throw new OptimizationException(""unable to solve: singular problem"");"
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,17,ackage org.apache.commons.math.estimation;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,17,package org.apache.commons.math.optimization.general;
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,22,import org.apache.commons.math.optimization.OptimizationException;
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,191, @exception EstimationException if convergence cannot be
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,193,* @exception OptimizationException if convergence cannot be
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,200,hrows EstimationException {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,202,throws OptimizationException {
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,400,"hrow new EstimationException(""cost relative tolerance is too small ({0}),"" +"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,402,"throw new OptimizationException(""cost relative tolerance is too small ({0}),"" +"
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,405,"hrow new EstimationException(""parameters relative tolerance is too small"" +"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,407,"throw new OptimizationException(""parameters relative tolerance is too small"" +"
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,410,"hrow new EstimationException(""orthogonality tolerance is too small ({0}),"" +"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,412,"throw new OptimizationException(""orthogonality tolerance is too small ({0}),"" +"
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,735, @exception EstimationException if the decomposition cannot be performed
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,737,* @exception OptimizationException if the decomposition cannot be performed
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,737,rivate void qrDecomposition() throws EstimationException {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,739,private void qrDecomposition() throws OptimizationException {
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,764,hrow new EstimationException(
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimator.java,766,throw new OptimizationException(
False,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,18,ackage org.apache.commons.math.estimation;
True,src/java/org/apache/commons/math/estimation/SimpleEstimationProblem.java,src/java/org/apache/commons/math/optimization/general/SimpleEstimationProblem.java,18,package org.apache.commons.math.optimization.general;
False,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,18,ackage org.apache.commons.math.estimation;
True,src/java/org/apache/commons/math/estimation/WeightedMeasurement.java,src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java,18,package org.apache.commons.math.optimization.general;
False,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,17,ackage org.apache.commons.math.analysis.minimization;
True,src/java/org/apache/commons/math/analysis/minimization/BrentMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentMinimizer.java,17,package org.apache.commons.math.optimization.univariate;
False,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,17,ackage org.apache.commons.math.analysis.minimization;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,17,package org.apache.commons.math.optimization.univariate;
False,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,50,"hrows ConvergenceException,"
False,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,51,unctionEvaluationException;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizer.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizer.java,50,"throws ConvergenceException, FunctionEvaluationException;"
False,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,18,ackage org.apache.commons.math.analysis.minimization;
True,src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java,src/java/org/apache/commons/math/optimization/univariate/UnivariateRealMinimizerImpl.java,18,package org.apache.commons.math.optimization.univariate;
False,src/site/resources/userguide/TrajectoryDeterminationProblem.java,src/site/resources/userguide/TrajectoryDeterminationProblem.java,18,mport org.apache.commons.math.estimation.EstimationException;
False,src/site/resources/userguide/TrajectoryDeterminationProblem.java,src/site/resources/userguide/TrajectoryDeterminationProblem.java,19,mport org.apache.commons.math.estimation.EstimatedParameter;
False,src/site/resources/userguide/TrajectoryDeterminationProblem.java,src/site/resources/userguide/TrajectoryDeterminationProblem.java,20,mport org.apache.commons.math.estimation.EstimationProblem;
False,src/site/resources/userguide/TrajectoryDeterminationProblem.java,src/site/resources/userguide/TrajectoryDeterminationProblem.java,21,mport org.apache.commons.math.estimation.LevenbergMarquardtEstimator;
False,src/site/resources/userguide/TrajectoryDeterminationProblem.java,src/site/resources/userguide/TrajectoryDeterminationProblem.java,22,mport org.apache.commons.math.estimation.SimpleEstimationProblem;
False,src/site/resources/userguide/TrajectoryDeterminationProblem.java,src/site/resources/userguide/TrajectoryDeterminationProblem.java,23,mport org.apache.commons.math.estimation.WeightedMeasurement;
True,src/site/resources/userguide/TrajectoryDeterminationProblem.java,src/site/resources/userguide/TrajectoryDeterminationProblem.java,18,import org.apache.commons.math.optimization.general.EstimationException;
True,src/site/resources/userguide/TrajectoryDeterminationProblem.java,src/site/resources/userguide/TrajectoryDeterminationProblem.java,19,import org.apache.commons.math.optimization.general.EstimatedParameter;
True,src/site/resources/userguide/TrajectoryDeterminationProblem.java,src/site/resources/userguide/TrajectoryDeterminationProblem.java,20,import org.apache.commons.math.optimization.general.EstimationProblem;
True,src/site/resources/userguide/TrajectoryDeterminationProblem.java,src/site/resources/userguide/TrajectoryDeterminationProblem.java,21,import org.apache.commons.math.optimization.general.LevenbergMarquardtEstimator;
True,src/site/resources/userguide/TrajectoryDeterminationProblem.java,src/site/resources/userguide/TrajectoryDeterminationProblem.java,22,import org.apache.commons.math.optimization.general.SimpleEstimationProblem;
True,src/site/resources/userguide/TrajectoryDeterminationProblem.java,src/site/resources/userguide/TrajectoryDeterminationProblem.java,23,import org.apache.commons.math.optimization.general.WeightedMeasurement;
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,18,ackage org.apache.commons.math.optimization;
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,20,mport org.apache.commons.math.optimization.ConvergenceChecker;
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,21,mport org.apache.commons.math.optimization.CostException;
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,22,mport org.apache.commons.math.optimization.CostFunction;
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,23,mport org.apache.commons.math.optimization.MultiDirectional;
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,24,mport org.apache.commons.math.ConvergenceException;
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,25,mport org.apache.commons.math.optimization.PointCostPair;
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,27,mport junit.framework.*;
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,29,ublic class MultiDirectionalTest
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,30,xtends TestCase {
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,32,ublic MultiDirectionalTest(String name) {
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,33,uper(name);
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,36,ublic void testCostExceptions() throws ConvergenceException {
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,37,ostFunction wrong =
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,38,ew CostFunction() {
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,39,ublic double cost(double[] x) throws CostException {
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,40,f (x[0] < 0) {
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,41,"hrow new CostException(""{0}"", ""oops"");"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,42, else if (x[0] > 1) {
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,43,"hrow new CostException(new RuntimeException(""oops""));"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,44, else {
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,45,eturn x[0] * (1 - x[0]);
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,49,ry {
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,50,"ew MultiDirectional(1.9, 0.4).minimize(wrong, 10, new ValueChecker(1.0e-3),"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,51,"ew double[] { -0.5 }, new double[] { 0.5 });"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,52,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,53, catch (CostException ce) {
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,54,/ expected behavior
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,55,ssertNull(ce.getCause());
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,56, catch (Exception e) {
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,57,"ail(""wrong exception caught: "" + e.getMessage());"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,59,ry {
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,60,"ew MultiDirectional(1.9, 0.4).minimize(wrong, 10, new ValueChecker(1.0e-3),"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,61,"ew double[] { 0.5 }, new double[] { 1.5 });"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,62,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,63, catch (CostException ce) {
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,64,/ expected behavior
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,65,ssertNotNull(ce.getCause());
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,66, catch (Exception e) {
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,67,"ail(""wrong exception caught: "" + e.getMessage());"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,71,ublic void testRosenbrock()
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,72,"hrows CostException, ConvergenceException {"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,74,ostFunction rosenbrock =
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,75,ew CostFunction() {
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,76,ublic double cost(double[] x) {
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,77,+count;
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,78,ouble a = x[1] - x[0] * x[0];
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,79,ouble b = 1.0 - x[0];
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,80,eturn 100 * a * a + b * b;
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,84,ount = 0;
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,85,ointCostPair optimum =
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,86,"ew MultiDirectional().minimize(rosenbrock, 100, new ValueChecker(1.0e-3),"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,87,ew double[][] {
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,88," -1.2,  1.0 }, { 0.9, 1.2 } , {  3.5, -2.3 }"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,91,ssertTrue(count > 60);
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,92,ssertTrue(optimum.getCost() > 0.01);
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,96,ublic void testPowell()
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,97,"hrows CostException, ConvergenceException {"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,99,ostFunction powell =
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,100,ew CostFunction() {
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,101,ublic double cost(double[] x) {
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,102,+count;
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,103,ouble a = x[0] + 10 * x[1];
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,104,ouble b = x[2] - x[3];
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,105,ouble c = x[1] - 2 * x[2];
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,106,ouble d = x[0] - x[3];
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,107,eturn a * a + 5 * b * b + c * c * c * c + 10 * d * d * d * d;
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,111,ount = 0;
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,112,ointCostPair optimum =
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,113,"ew MultiDirectional().minimize(powell, 1000, new ValueChecker(1.0e-3),"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,114,"ew double[] {  3.0, -1.0, 0.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,115,"ew double[] {  4.0,  0.0, 1.0, 2.0 });"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,116,ssertTrue(count > 850);
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,117,ssertTrue(optimum.getCost() > 0.015);
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,121,rivate static class ValueChecker implements ConvergenceChecker {
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,123,ublic ValueChecker(double threshold) {
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,124,his.threshold = threshold;
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,127,ublic boolean converged(PointCostPair[] simplex) {
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,128,ointCostPair smallest = simplex[0];
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,129,ointCostPair largest  = simplex[simplex.length - 1];
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,130,eturn (largest.getCost() - smallest.getCost()) < threshold;
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,133,rivate double threshold;
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,137,ublic static Test suite() {
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,138,eturn new TestSuite(MultiDirectionalTest.class);
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,141,rivate int count;
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,18,ackage org.apache.commons.math.optimization;
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,20,mport org.apache.commons.math.linear.decomposition.NotPositiveDefiniteMatrixException;
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,21,mport org.apache.commons.math.optimization.ConvergenceChecker;
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,22,mport org.apache.commons.math.optimization.CostException;
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,23,mport org.apache.commons.math.optimization.CostFunction;
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,24,mport org.apache.commons.math.optimization.NelderMead;
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,25,mport org.apache.commons.math.ConvergenceException;
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,26,mport org.apache.commons.math.optimization.PointCostPair;
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,27,mport org.apache.commons.math.random.JDKRandomGenerator;
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,28,mport org.apache.commons.math.random.RandomGenerator;
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,29,mport org.apache.commons.math.random.RandomVectorGenerator;
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,30,mport org.apache.commons.math.random.UncorrelatedRandomVectorGenerator;
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,31,mport org.apache.commons.math.random.UniformRandomGenerator;
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,33,mport junit.framework.*;
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,35,ublic class NelderMeadTest
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,36,xtends TestCase {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,38,ublic NelderMeadTest(String name) {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,39,uper(name);
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,42,ublic void testCostExceptions() throws ConvergenceException {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,43,ostFunction wrong =
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,44,ew CostFunction() {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,45,ublic double cost(double[] x) throws CostException {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,46,f (x[0] < 0) {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,47,"hrow new CostException(""{0}"", ""oops"");"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,48, else if (x[0] > 1) {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,49,"hrow new CostException(new RuntimeException(""oops""));"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,50, else {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,51,eturn x[0] * (1 - x[0]);
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,55,ry {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,56,"ew NelderMead(0.9, 1.9, 0.4, 0.6).minimize(wrong, 10, new ValueChecker(1.0e-3),"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,57,"ew double[] { -0.5 }, new double[] { 0.5 });"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,58,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,59, catch (CostException ce) {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,60,/ expected behavior
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,61,ssertNull(ce.getCause());
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,62, catch (Exception e) {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,63,"ail(""wrong exception caught: "" + e.getMessage());"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,65,ry {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,66,"ew NelderMead(0.9, 1.9, 0.4, 0.6).minimize(wrong, 10, new ValueChecker(1.0e-3),"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,67,"ew double[] { 0.5 }, new double[] { 1.5 });"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,68,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,69, catch (CostException ce) {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,70,/ expected behavior
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,71,ssertNotNull(ce.getCause());
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,72, catch (Exception e) {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,73,"ail(""wrong exception caught: "" + e.getMessage());"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,77,ublic void testRosenbrock()
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,78,"hrows CostException, ConvergenceException, NotPositiveDefiniteMatrixException {"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,80,ostFunction rosenbrock =
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,81,ew CostFunction() {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,82,ublic double cost(double[] x) {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,83,+count;
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,84,ouble a = x[1] - x[0] * x[0];
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,85,ouble b = 1.0 - x[0];
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,86,eturn 100 * a * a + b * b;
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,90,ount = 0;
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,91,elderMead nm = new NelderMead();
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,92,ry {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,93,"m.minimize(rosenbrock, 100, new ValueChecker(1.0e-3),"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,94,ew double[][] {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,95," -1.2, 1.0 }, { 3.5, -2.3 }, { 0.4, 1.5 }"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,96,", 1, 5384353l);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,97,"ail(""an exception should have been thrown"");"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,98, catch (ConvergenceException ce) {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,99,/ expected behavior
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,100, catch (Exception e) {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,101,.printStackTrace(System.err);
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,102,"ail(""wrong exception caught: "" + e.getMessage());"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,105,ount = 0;
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,106,ointCostPair optimum =
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,107,"m.minimize(rosenbrock, 100, new ValueChecker(1.0e-3),"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,108,ew double[][] {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,109," -1.2, 1.0 }, { 0.9, 1.2 }, { 3.5, -2.3 }"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,110,", 10, 1642738l);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,112,ssertTrue(count > 700);
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,113,ssertTrue(count < 800);
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,114,"ssertEquals(0.0, optimum.getCost(), 5.0e-5);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,115,"ssertEquals(1.0, optimum.getPoint()[0], 0.01);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,116,"ssertEquals(1.0, optimum.getPoint()[1], 0.01);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,118,ointCostPair[] minima = nm.getMinima();
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,119,"ssertEquals(10, minima.length);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,120,ssertNotNull(minima[0]);
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,121,ssertNull(minima[minima.length - 1]);
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,122,or (int i = 0; i < minima.length; ++i) {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,123,f (minima[i] == null) {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,124,f ((i + 1) < minima.length) {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,125,ssertTrue(minima[i+1] == null);
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,127, else {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,128,f (i > 0) {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,129,ssertTrue(minima[i-1].getCost() <= minima[i].getCost());
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,134,andomGenerator rg = new JDKRandomGenerator();
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,135,g.setSeed(64453353l);
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,136,andomVectorGenerator rvg =
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,137,"ew UncorrelatedRandomVectorGenerator(new double[] { 0.9, 1.1 },"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,138,"ew double[] { 0.2, 0.2 },"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,139,ew UniformRandomGenerator(rg));
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,140,ptimum =
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,141,"m.minimize(rosenbrock, 100, new ValueChecker(1.0e-3), rvg);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,142,"ssertEquals(0.0, optimum.getCost(), 2.0e-4);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,143,ptimum =
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,144,"m.minimize(rosenbrock, 100, new ValueChecker(1.0e-3), rvg, 3);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,145,"ssertEquals(0.0, optimum.getCost(), 3.0e-5);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,149,ublic void testPowell()
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,150,"hrows CostException, ConvergenceException {"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,152,ostFunction powell =
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,153,ew CostFunction() {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,154,ublic double cost(double[] x) {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,155,+count;
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,156,ouble a = x[0] + 10 * x[1];
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,157,ouble b = x[2] - x[3];
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,158,ouble c = x[1] - 2 * x[2];
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,159,ouble d = x[0] - x[3];
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,160,eturn a * a + 5 * b * b + c * c * c * c + 10 * d * d * d * d;
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,164,ount = 0;
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,165,elderMead nm = new NelderMead();
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,166,ointCostPair optimum =
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,167,"m.minimize(powell, 200, new ValueChecker(1.0e-3),"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,168,"ew double[] {  3.0, -1.0, 0.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,169,"ew double[] {  4.0,  0.0, 1.0, 2.0 },"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,170,", 1642738l);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,171,ssertTrue(count < 150);
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,172,"ssertEquals(0.0, optimum.getCost(), 6.0e-4);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,173,"ssertEquals(0.0, optimum.getPoint()[0], 0.07);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,174,"ssertEquals(0.0, optimum.getPoint()[1], 0.07);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,175,"ssertEquals(0.0, optimum.getPoint()[2], 0.07);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,176,"ssertEquals(0.0, optimum.getPoint()[3], 0.07);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,180,rivate static class ValueChecker implements ConvergenceChecker {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,182,ublic ValueChecker(double threshold) {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,183,his.threshold = threshold;
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,186,ublic boolean converged(PointCostPair[] simplex) {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,187,ointCostPair smallest = simplex[0];
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,188,ointCostPair largest  = simplex[simplex.length - 1];
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,189,eturn (largest.getCost() - smallest.getCost()) < threshold;
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,192,rivate double threshold;
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,196,ublic static Test suite() {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,197,eturn new TestSuite(NelderMeadTest.class);
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,200,rivate int count;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,18,package org.apache.commons.math.optimization.direct;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,20,import org.apache.commons.math.linear.decomposition.NotPositiveDefiniteMatrixException;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,21,import org.apache.commons.math.optimization.ConvergenceChecker;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,22,import org.apache.commons.math.optimization.ObjectiveException;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,23,import org.apache.commons.math.optimization.ObjectiveFunction;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,24,import org.apache.commons.math.optimization.PointValuePair;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,25,import org.apache.commons.math.ConvergenceException;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,27,import junit.framework.*;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,29,public class MultiDirectionalTest
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,30,extends TestCase {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,32,public MultiDirectionalTest(String name) {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,33,super(name);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,36,public void testObjectiveExceptions() throws ConvergenceException {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,37,ObjectiveFunction wrong =
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,38,new ObjectiveFunction() {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,39,private static final long serialVersionUID = 4751314470965489371L;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,40,public double objective(double[] x) throws ObjectiveException {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,41,if (x[0] < 0) {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,42,"throw new ObjectiveException(""{0}"", ""oops"");"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,43,} else if (x[0] > 1) {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,44,"throw new ObjectiveException(new RuntimeException(""oops""));"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,45,} else {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,46,return x[0] * (1 - x[0]);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,50,try {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,51,"new MultiDirectional(1.9, 0.4).optimize(wrong, 10, new ValueChecker(1.0e-3), true,"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,52,"new double[] { -0.5 }, new double[] { 0.5 });"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,53,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,54,} catch (ObjectiveException ce) {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,55,// expected behavior
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,56,assertNull(ce.getCause());
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,57,} catch (Exception e) {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,58,"fail(""wrong exception caught: "" + e.getMessage());"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,60,try {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,61,"new MultiDirectional(1.9, 0.4).optimize(wrong, 10, new ValueChecker(1.0e-3), true,"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,62,"new double[] { 0.5 }, new double[] { 1.5 });"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,63,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,64,} catch (ObjectiveException ce) {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,65,// expected behavior
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,66,assertNotNull(ce.getCause());
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,67,} catch (Exception e) {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,68,"fail(""wrong exception caught: "" + e.getMessage());"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,72,public void testMinimizeMaximize()
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,73,"throws ObjectiveException, ConvergenceException, NotPositiveDefiniteMatrixException {"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,75,// the following function has 4 local extrema:
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,76,final double xM        = -3.841947088256863675365;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,77,final double yM        = -1.391745200270734924416;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,78,final double xP        =  0.2286682237349059125691;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,79,final double yP        = -yM;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,80,final double valueXmYm =  0.2373295333134216789769; // local  maximum
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,81,final double valueXmYp = -valueXmYm;                // local  minimum
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,82,final double valueXpYm = -0.7290400707055187115322; // global minimum
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,83,final double valueXpYp = -valueXpYm;                // global maximum
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,84,ObjectiveFunction fourExtrema = new ObjectiveFunction() {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,85,private static final long serialVersionUID = -7039124064449091152L;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,86,public double objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,87,final double x = variables[0];
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,88,final double y = variables[1];
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,89,return Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,93,MultiDirectional md = new MultiDirectional();
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,95,// minimization
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,96,"md.optimize(fourExtrema, 200, new ValueChecker(1.0e-8), true,"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,97,"new double[] { -4, -2 }, new double[] { 1, 2 }, 10, 38821113105892l);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,98,PointValuePair[] optima = md.getOptima();
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,99,"assertEquals(10, optima.length);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,100,int localCount  = 0;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,101,int globalCount = 0;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,102,for (PointValuePair optimum : optima) {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,103,if (optimum != null) {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,104,if (optimum.getPoint()[0] < 0) {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,105,// this should be the local minimum
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,106,++localCount;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,107,"assertEquals(xM,        optimum.getPoint()[0], 1.0e-3);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,108,"assertEquals(yP,        optimum.getPoint()[1], 1.0e-3);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,109,"assertEquals(valueXmYp, optimum.getValue(),     3.0e-8);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,110,} else {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,111,// this should be the global minimum
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,112,++globalCount;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,113,"assertEquals(xP,        optimum.getPoint()[0], 1.0e-3);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,114,"assertEquals(yM,        optimum.getPoint()[1], 1.0e-3);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,115,"assertEquals(valueXpYm, optimum.getValue(),     3.0e-8);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,119,assertTrue(localCount  > 0);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,120,assertTrue(globalCount > 0);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,121,assertTrue(md.getTotalEvaluations() > 1400);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,122,assertTrue(md.getTotalEvaluations() < 1700);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,124,// minimization
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,125,"md.optimize(fourExtrema, 200, new ValueChecker(1.0e-8), false,"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,126,"new double[] { -3.5, -1 }, new double[] { 0.5, 1.5 }, 10, 38821113105892l);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,127,optima = md.getOptima();
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,128,"assertEquals(10, optima.length);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,129,localCount  = 0;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,130,globalCount = 0;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,131,for (PointValuePair optimum : optima) {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,132,if (optimum != null) {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,133,if (optimum.getPoint()[0] < 0) {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,134,// this should be the local maximum
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,135,++localCount;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,136,"assertEquals(xM,        optimum.getPoint()[0], 1.0e-3);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,137,"assertEquals(yM,        optimum.getPoint()[1], 1.0e-3);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,138,"assertEquals(valueXmYm, optimum.getValue(),     4.0e-8);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,139,} else {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,140,// this should be the global maximum
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,141,++globalCount;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,142,"assertEquals(xP,        optimum.getPoint()[0], 1.0e-3);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,143,"assertEquals(yP,        optimum.getPoint()[1], 1.0e-3);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,144,"assertEquals(valueXpYp, optimum.getValue(),     4.0e-8);"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,148,assertTrue(localCount  > 0);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,149,assertTrue(globalCount > 0);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,150,assertTrue(md.getTotalEvaluations() > 1400);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,151,assertTrue(md.getTotalEvaluations() < 1700);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,155,public void testRosenbrock()
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,156,"throws ObjectiveException, ConvergenceException {"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,158,ObjectiveFunction rosenbrock =
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,159,new ObjectiveFunction() {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,160,private static final long serialVersionUID = -9044950469615237490L;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,161,public double objective(double[] x) {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,162,++count;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,163,double a = x[1] - x[0] * x[0];
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,164,double b = 1.0 - x[0];
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,165,return 100 * a * a + b * b;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,169,count = 0;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,170,PointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,171,"new MultiDirectional().optimize(rosenbrock, 100, new ValueChecker(1.0e-3), true,"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,172,new double[][] {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,173,"{ -1.2,  1.0 }, { 0.9, 1.2 } , {  3.5, -2.3 }"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,176,assertTrue(count > 60);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,177,assertTrue(optimum.getValue() > 0.01);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,181,public void testPowell()
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,182,"throws ObjectiveException, ConvergenceException {"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,184,ObjectiveFunction powell =
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,185,new ObjectiveFunction() {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,186,private static final long serialVersionUID = -832162886102041840L;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,187,public double objective(double[] x) {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,188,++count;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,189,double a = x[0] + 10 * x[1];
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,190,double b = x[2] - x[3];
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,191,double c = x[1] - 2 * x[2];
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,192,double d = x[0] - x[3];
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,193,return a * a + 5 * b * b + c * c * c * c + 10 * d * d * d * d;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,197,count = 0;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,198,PointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,199,"new MultiDirectional().optimize(powell, 1000, new ValueChecker(1.0e-3), true,"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,200,"new double[] {  3.0, -1.0, 0.0, 1.0 },"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,201,"new double[] {  4.0,  0.0, 1.0, 2.0 });"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,202,assertTrue(count > 850);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,203,assertTrue(optimum.getValue() > 0.015);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,207,private static class ValueChecker implements ConvergenceChecker {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,209,public ValueChecker(double threshold) {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,210,this.threshold = threshold;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,213,public boolean converged(PointValuePair[] simplex) {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,214,PointValuePair smallest = simplex[0];
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,215,PointValuePair largest  = simplex[simplex.length - 1];
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,216,return (largest.getValue() - smallest.getValue()) < threshold;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,219,private double threshold;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,223,public static Test suite() {
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,224,return new TestSuite(MultiDirectionalTest.class);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,227,private int count;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,18,package org.apache.commons.math.optimization.direct;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,20,import org.apache.commons.math.linear.decomposition.NotPositiveDefiniteMatrixException;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,21,import org.apache.commons.math.optimization.ConvergenceChecker;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,22,import org.apache.commons.math.optimization.ObjectiveException;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,23,import org.apache.commons.math.optimization.ObjectiveFunction;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,24,import org.apache.commons.math.optimization.PointValuePair;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,25,import org.apache.commons.math.ConvergenceException;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,26,import org.apache.commons.math.random.JDKRandomGenerator;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,27,import org.apache.commons.math.random.RandomGenerator;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,28,import org.apache.commons.math.random.RandomVectorGenerator;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,29,import org.apache.commons.math.random.UncorrelatedRandomVectorGenerator;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,30,import org.apache.commons.math.random.UniformRandomGenerator;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,32,import junit.framework.*;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,34,public class NelderMeadTest
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,35,extends TestCase {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,37,public NelderMeadTest(String name) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,38,super(name);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,41,public void testObjectiveExceptions() throws ConvergenceException {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,42,ObjectiveFunction wrong =
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,43,new ObjectiveFunction() {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,44,private static final long serialVersionUID = 2624035220997628868L;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,45,public double objective(double[] x) throws ObjectiveException {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,46,if (x[0] < 0) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,47,"throw new ObjectiveException(""{0}"", ""oops"");"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,48,} else if (x[0] > 1) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,49,"throw new ObjectiveException(new RuntimeException(""oops""));"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,50,} else {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,51,return x[0] * (1 - x[0]);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,55,try {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,56,"new NelderMead(0.9, 1.9, 0.4, 0.6).optimize(wrong, 10, new ValueChecker(1.0e-3), true,"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,57,"new double[] { -0.5 }, new double[] { 0.5 });"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,58,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,59,} catch (ObjectiveException ce) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,60,// expected behavior
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,61,assertNull(ce.getCause());
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,62,} catch (Exception e) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,63,"fail(""wrong exception caught: "" + e.getMessage());"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,65,try {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,66,"new NelderMead(0.9, 1.9, 0.4, 0.6).optimize(wrong, 10, new ValueChecker(1.0e-3), true,"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,67,"new double[] { 0.5 }, new double[] { 1.5 });"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,68,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,69,} catch (ObjectiveException ce) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,70,// expected behavior
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,71,assertNotNull(ce.getCause());
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,72,} catch (Exception e) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,73,"fail(""wrong exception caught: "" + e.getMessage());"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,77,public void testMinimizeMaximize()
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,78,"throws ObjectiveException, ConvergenceException, NotPositiveDefiniteMatrixException {"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,80,// the following function has 4 local extrema:
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,81,final double xM        = -3.841947088256863675365;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,82,final double yM        = -1.391745200270734924416;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,83,final double xP        =  0.2286682237349059125691;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,84,final double yP        = -yM;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,85,final double valueXmYm =  0.2373295333134216789769; // local  maximum
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,86,final double valueXmYp = -valueXmYm;                // local  minimum
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,87,final double valueXpYm = -0.7290400707055187115322; // global minimum
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,88,final double valueXpYp = -valueXpYm;                // global maximum
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,89,ObjectiveFunction fourExtrema = new ObjectiveFunction() {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,90,private static final long serialVersionUID = -7039124064449091152L;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,91,public double objective(double[] variables) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,92,final double x = variables[0];
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,93,final double y = variables[1];
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,94,return Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,98,NelderMead nm = new NelderMead();
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,100,// minimization
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,101,"nm.optimize(fourExtrema, 100, new ValueChecker(1.0e-8), true,"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,102,"new double[] { -5, -5 }, new double[] { 5, 5 }, 10, 38821113105892l);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,103,PointValuePair[] optima = nm.getOptima();
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,104,"assertEquals(10, optima.length);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,105,int localCount  = 0;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,106,int globalCount = 0;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,107,for (PointValuePair optimum : optima) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,108,if (optimum != null) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,109,if (optimum.getPoint()[0] < 0) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,110,// this should be the local minimum
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,111,++localCount;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,112,"assertEquals(xM,        optimum.getPoint()[0], 1.0e-3);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,113,"assertEquals(yP,        optimum.getPoint()[1], 1.0e-3);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,114,"assertEquals(valueXmYp, optimum.getValue(),     2.0e-8);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,115,} else {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,116,// this should be the global minimum
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,117,++globalCount;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,118,"assertEquals(xP,        optimum.getPoint()[0], 1.0e-3);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,119,"assertEquals(yM,        optimum.getPoint()[1], 1.0e-3);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,120,"assertEquals(valueXpYm, optimum.getValue(),     2.0e-8);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,124,assertTrue(localCount  > 0);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,125,assertTrue(globalCount > 0);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,126,assertTrue(nm.getTotalEvaluations() > 600);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,127,assertTrue(nm.getTotalEvaluations() < 800);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,129,// minimization
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,130,"nm.optimize(fourExtrema, 100, new ValueChecker(1.0e-8), false,"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,131,"new double[] { -5, -5 }, new double[] { 5, 5 }, 10, 38821113105892l);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,132,optima = nm.getOptima();
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,133,"assertEquals(10, optima.length);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,134,localCount  = 0;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,135,globalCount = 0;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,136,for (PointValuePair optimum : optima) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,137,if (optimum != null) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,138,if (optimum.getPoint()[0] < 0) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,139,// this should be the local maximum
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,140,++localCount;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,141,"assertEquals(xM,        optimum.getPoint()[0], 1.0e-3);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,142,"assertEquals(yM,        optimum.getPoint()[1], 1.0e-3);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,143,"assertEquals(valueXmYm, optimum.getValue(),     2.0e-8);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,144,} else {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,145,// this should be the global maximum
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,146,++globalCount;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,147,"assertEquals(xP,        optimum.getPoint()[0], 1.0e-3);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,148,"assertEquals(yP,        optimum.getPoint()[1], 1.0e-3);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,149,"assertEquals(valueXpYp, optimum.getValue(),     2.0e-8);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,153,assertTrue(localCount  > 0);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,154,assertTrue(globalCount > 0);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,155,assertTrue(nm.getTotalEvaluations() > 600);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,156,assertTrue(nm.getTotalEvaluations() < 800);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,160,public void testRosenbrock()
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,161,"throws ObjectiveException, ConvergenceException, NotPositiveDefiniteMatrixException {"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,163,ObjectiveFunction rosenbrock =
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,164,new ObjectiveFunction() {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,165,private static final long serialVersionUID = -7039124064449091152L;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,166,public double objective(double[] x) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,167,++count;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,168,double a = x[1] - x[0] * x[0];
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,169,double b = 1.0 - x[0];
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,170,return 100 * a * a + b * b;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,174,count = 0;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,175,NelderMead nm = new NelderMead();
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,176,try {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,177,"nm.optimize(rosenbrock, 100, new ValueChecker(1.0e-3), true,"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,178,new double[][] {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,179,"{ -1.2, 1.0 }, { 3.5, -2.3 }, { 0.4, 1.5 }"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,180,"}, 1, 5384353l);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,181,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,182,} catch (ConvergenceException ce) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,183,// expected behavior
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,184,} catch (Exception e) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,185,e.printStackTrace(System.err);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,186,"fail(""wrong exception caught: "" + e.getMessage());"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,189,count = 0;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,190,PointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,191,"nm.optimize(rosenbrock, 100, new ValueChecker(1.0e-3), true,"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,192,new double[][] {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,193,"{ -1.2, 1.0 }, { 0.9, 1.2 }, { 3.5, -2.3 }"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,194,"}, 10, 1642738l);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,196,assertTrue(count > 700);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,197,assertTrue(count < 800);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,198,"assertEquals(0.0, optimum.getValue(), 5.0e-5);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,199,"assertEquals(1.0, optimum.getPoint()[0], 0.01);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,200,"assertEquals(1.0, optimum.getPoint()[1], 0.01);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,202,PointValuePair[] minima = nm.getOptima();
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,203,"assertEquals(10, minima.length);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,204,assertNotNull(minima[0]);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,205,assertNull(minima[minima.length - 1]);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,206,for (int i = 0; i < minima.length; ++i) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,207,if (minima[i] == null) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,208,if ((i + 1) < minima.length) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,209,assertTrue(minima[i+1] == null);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,211,} else {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,212,if (i > 0) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,213,assertTrue(minima[i-1].getValue() <= minima[i].getValue());
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,218,RandomGenerator rg = new JDKRandomGenerator();
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,219,rg.setSeed(64453353l);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,220,RandomVectorGenerator rvg =
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,221,"new UncorrelatedRandomVectorGenerator(new double[] { 0.9, 1.1 },"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,222,"new double[] { 0.2, 0.2 },"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,223,new UniformRandomGenerator(rg));
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,224,optimum =
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,225,"nm.optimize(rosenbrock, 100, new ValueChecker(1.0e-3), true, rvg);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,226,"assertEquals(0.0, optimum.getValue(), 2.0e-4);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,227,optimum =
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,228,"nm.optimize(rosenbrock, 100, new ValueChecker(1.0e-3), true, rvg, 3);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,229,"assertEquals(0.0, optimum.getValue(), 3.0e-5);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,233,public void testPowell()
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,234,"throws ObjectiveException, ConvergenceException {"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,236,ObjectiveFunction powell =
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,237,new ObjectiveFunction() {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,238,private static final long serialVersionUID = -7681075710859391520L;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,239,public double objective(double[] x) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,240,++count;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,241,double a = x[0] + 10 * x[1];
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,242,double b = x[2] - x[3];
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,243,double c = x[1] - 2 * x[2];
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,244,double d = x[0] - x[3];
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,245,return a * a + 5 * b * b + c * c * c * c + 10 * d * d * d * d;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,249,count = 0;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,250,NelderMead nm = new NelderMead();
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,251,PointValuePair optimum =
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,252,"nm.optimize(powell, 200, new ValueChecker(1.0e-3), true,"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,253,"new double[] {  3.0, -1.0, 0.0, 1.0 },"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,254,"new double[] {  4.0,  0.0, 1.0, 2.0 },"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,255,"1, 1642738l);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,256,assertTrue(count < 150);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,257,"assertEquals(0.0, optimum.getValue(), 6.0e-4);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,258,"assertEquals(0.0, optimum.getPoint()[0], 0.07);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,259,"assertEquals(0.0, optimum.getPoint()[1], 0.07);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,260,"assertEquals(0.0, optimum.getPoint()[2], 0.07);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,261,"assertEquals(0.0, optimum.getPoint()[3], 0.07);"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,265,private static class ValueChecker implements ConvergenceChecker {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,267,public ValueChecker(double threshold) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,268,this.threshold = threshold;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,271,public boolean converged(PointValuePair[] simplex) {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,272,PointValuePair smallest = simplex[0];
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,273,PointValuePair largest  = simplex[simplex.length - 1];
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,274,return (largest.getValue() - smallest.getValue()) < threshold;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,277,private double threshold;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,281,public static Test suite() {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,282,return new TestSuite(NelderMeadTest.class);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,285,private int count;
False,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,18,ackage org.apache.commons.math.estimation;
True,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,18,package org.apache.commons.math.optimization.general;
False,src/test/org/apache/commons/math/estimation/EstimatedParameterTest.java,src/test/org/apache/commons/math/optimization/general/EstimatedParameterTest.java,20,mport org.apache.commons.math.estimation.EstimatedParameter;
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,18,ackage org.apache.commons.math.estimation;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,18,package org.apache.commons.math.optimization.general;
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,23,import org.apache.commons.math.optimization.OptimizationException;
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,96,ublic void testTrivial() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,99,public void testTrivial() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,112,ublic void testQRColumnsPermutation() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,115,public void testQRColumnsPermutation() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,137,ublic void testNoDependency() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,140,public void testNoDependency() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,162,ublic void testOneSet() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,165,public void testOneSet() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,190,ublic void testTwoSets() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,193,public void testTwoSets() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,239,ublic void testNonInversible() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,242,public void testNonInversible() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,263, catch (EstimationException ee) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,266,} catch (OptimizationException ee) {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,270,ublic void testIllConditioned() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,273,public void testIllConditioned() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,324,ublic void testMoreEstimatedParametersSimple() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,327,public void testMoreEstimatedParametersSimple() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,348, catch (EstimationException ee) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,351,} catch (OptimizationException ee) {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,356,ublic void testMoreEstimatedParametersUnsorted() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,359,public void testMoreEstimatedParametersUnsorted() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,387, catch (EstimationException ee) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,390,} catch (OptimizationException ee) {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,395,ublic void testRedundantEquations() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,398,public void testRedundantEquations() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,423,ublic void testInconsistentEquations() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,426,public void testInconsistentEquations() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,446,ublic void testBoundParameters() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,449,public void testBoundParameters() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,495, catch (EstimationException ee) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,498,} catch (OptimizationException ee) {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,502,ublic void testCircleFitting() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,505,public void testCircleFitting() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,518,ublic void testCircleFittingBadInit() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,521,public void testCircleFittingBadInit() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,558, catch (EstimationException ee) {
True,src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonEstimatorTest.java,561,} catch (OptimizationException ee) {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,18,ackage org.apache.commons.math.estimation;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,18,package org.apache.commons.math.optimization.general;
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,23,import org.apache.commons.math.optimization.OptimizationException;
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,96,ublic void testTrivial() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,99,public void testTrivial() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,110, catch (EstimationException ee) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,113,} catch (OptimizationException ee) {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,120,ublic void testQRColumnsPermutation() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,123,public void testQRColumnsPermutation() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,145,ublic void testNoDependency() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,148,public void testNoDependency() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,170,ublic void testOneSet() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,173,public void testOneSet() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,198,ublic void testTwoSets() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,201,public void testTwoSets() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,247,ublic void testNonInversible() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,250,public void testNonInversible() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,275, catch (EstimationException ee) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,278,} catch (OptimizationException ee) {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,294,ublic void testIllConditioned() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,297,public void testIllConditioned() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,348,ublic void testMoreEstimatedParametersSimple() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,351,public void testMoreEstimatedParametersSimple() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,374,ublic void testMoreEstimatedParametersUnsorted() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,377,public void testMoreEstimatedParametersUnsorted() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,411,ublic void testRedundantEquations() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,414,public void testRedundantEquations() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,436,ublic void testInconsistentEquations() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,439,public void testInconsistentEquations() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,459,ublic void testControlParameters() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,462,public void testControlParameters() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,486, catch (EstimationException ee) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,489,} catch (OptimizationException ee) {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,493,ublic void testCircleFitting() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,496,public void testCircleFitting() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,538,ublic void testCircleFittingBadInit() throws EstimationException {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,541,public void testCircleFittingBadInit() throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,594, catch (EstimationException ee) {
True,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtEstimatorTest.java,597,} catch (OptimizationException ee) {
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,18,ackage org.apache.commons.math.estimation;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,18,package org.apache.commons.math.optimization.general;
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,22,mport org.apache.commons.math.estimation.EstimatedParameter;
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,23,mport org.apache.commons.math.estimation.EstimationException;
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,24,mport org.apache.commons.math.estimation.EstimationProblem;
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,25,mport org.apache.commons.math.estimation.LevenbergMarquardtEstimator;
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,26,mport org.apache.commons.math.estimation.WeightedMeasurement;
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,22,import org.apache.commons.math.optimization.OptimizationException;
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,100,hrows EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,97,throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,108,hrows EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,105,throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,116,hrows EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,113,throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,122,hrows EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,119,throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,132,hrows EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,129,throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,142,hrows EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,139,throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,152,hrows EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,149,throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,174,hrows EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,171,throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,196,hrows EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,193,throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,227,hrows EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,224,throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,245,hrows EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,242,throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,331,hrows EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,328,throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,337,hrows EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,334,throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,346,hrows EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,343,throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,371,hrows EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,368,throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,410,hrows EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,407,throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,479,hrows EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,476,throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,490,hrows EstimationException {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,487,throws OptimizationException {
False,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,517, catch (EstimationException lsse) {
True,src/test/org/apache/commons/math/estimation/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,514,} catch (OptimizationException lsse) {
False,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,18,ackage org.apache.commons.math.estimation;
True,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,18,package org.apache.commons.math.optimization.general;
False,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,20,mport org.apache.commons.math.estimation.EstimatedParameter;
False,src/test/org/apache/commons/math/estimation/WeightedMeasurementTest.java,src/test/org/apache/commons/math/optimization/general/WeightedMeasurementTest.java,21,mport org.apache.commons.math.estimation.WeightedMeasurement;
False,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,17,ackage org.apache.commons.math.analysis.minimization;
True,src/test/org/apache/commons/math/analysis/minimization/BrentMinimizerTest.java,src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,17,package org.apache.commons.math.optimization.univariate;

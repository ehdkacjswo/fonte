is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,25,import org.apache.commons.math.util.ArithmeticsUtils;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,26,mport org.apache.commons.math.util.MathUtils;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,329,"oeff[i][j] = (int) MathUtils.binomialCoefficient(i, j);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,329,"coeff[i][j] = (int) ArithmeticsUtils.binomialCoefficient(i, j);"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,26,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,26,import org.apache.commons.math.util.ArithmeticsUtils;
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,234,"eturn FastMath.exp(MathUtils.binomialCoefficientLog(m, x) +"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,235,"athUtils.binomialCoefficientLog(n - m, k - x) -"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,236,"athUtils.binomialCoefficientLog(n, k));"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,234,"return FastMath.exp(ArithmeticsUtils.binomialCoefficientLog(m, x) +"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,235,"ArithmeticsUtils.binomialCoefficientLog(n - m, k - x) -"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,236,"ArithmeticsUtils.binomialCoefficientLog(n, k));"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,25,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,25,import org.apache.commons.math.util.ArithmeticsUtils;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,131,et = MathUtils.binomialCoefficientDouble(x +
True,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,131,ret = ArithmeticsUtils.binomialCoefficientDouble(x +
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,27,mport org.apache.commons.math.util.MathUtils;
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,493,"nt uvp = MathUtils.mulAndCheck(numerator, fraction.denominator);"
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,494,"nt upv = MathUtils.mulAndCheck(fraction.numerator, denominator);"
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,492,"int uvp = ArithmeticsUtils.mulAndCheck(numerator, fraction.denominator);"
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,493,"int upv = ArithmeticsUtils.mulAndCheck(fraction.numerator, denominator);"
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,498,"athUtils.mulAndCheck(denominator, fraction.denominator));"
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,497,"ArithmeticsUtils.mulAndCheck(denominator, fraction.denominator));"
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,520,"athUtils.mulAndCheck(denominator/d1,"
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,519,"ArithmeticsUtils.mulAndCheck(denominator/d1,"
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,546,"MathUtils.mulAndCheck(numerator/d1, fraction.numerator/d2),"
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,547,"athUtils.mulAndCheck(denominator/d2, fraction.denominator/d1));"
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,545,"(ArithmeticsUtils.mulAndCheck(numerator/d1, fraction.numerator/d2),"
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,546,"ArithmeticsUtils.mulAndCheck(denominator/d2, fraction.denominator/d1));"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,21,import org.apache.commons.math.exception.NumberIsTooLargeException;
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,80," Add two long integers, checking for overflow."
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,81,* Returns an exact representation of the <a
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,82,"* href=""http://mathworld.wolfram.com/BinomialCoefficient.html""> Binomial"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,83,"* Coefficient</a>, ""{@code n choose k}"", the number of"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,84,* {@code k}-element subsets that can be selected from an
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,85,* {@code n}-element set.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,86,* <p>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,87,* <Strong>Preconditions</strong>:
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,88,* <ul>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,89,* <li> {@code 0 <= k <= n } (otherwise
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,90,* {@code IllegalArgumentException} is thrown)</li>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,91,* <li> The result is small enough to fit into a {@code long}. The
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,92,* largest value of {@code n} for which all coefficients are
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,93,* {@code  < Long.MAX_VALUE} is 66. If the computed value exceeds
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,94,* {@code Long.MAX_VALUE} an {@code ArithMeticException} is
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,95,* thrown.</li>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,96,* </ul></p>
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,82, @param a Addend.
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,83, @param b Addend.
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,84, @param pattern Pattern to use for any thrown exception.
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,85, @return the sum {@code a + b}.
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,86, @throws MathArithmeticException if the result cannot be represented
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,87, as a {@code long}.
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,88, @since 1.2
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,98,* @param n the size of the set
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,99,* @param k the size of the subsets to be counted
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,100,* @return {@code n choose k}
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,101,* @throws MathIllegalArgumentException if preconditions are not met.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,102,* @throws MathArithmeticException if the result is too large to be
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,103,* represented by a long integer.
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,90,"rivate static long addAndCheck(long a, long b, Localizable pattern) {"
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,91,ong ret;
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,92,f (a > b) {
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,93,/ use symmetry to reduce boundary cases
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,94,"et = addAndCheck(b, a, pattern);"
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,95, else {
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,96,/ assert a <= b
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,98,f (a < 0) {
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,99,f (b < 0) {
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,100,/ check for negative overflow
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,101,f (Long.MIN_VALUE - b <= a) {
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,102,et = a + b;
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,103, else {
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,104,"hrow new MathArithmeticException(pattern, a, b);"
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,106, else {
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,107,/ opposite sign addition is always safe
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,108,et = a + b;
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,110, else {
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,111,/ assert a >= 0
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,112,/ assert b >= 0
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,105,"public static long binomialCoefficient(final int n, final int k) {"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,106,"ArithmeticsUtils.checkBinomial(n, k);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,107,if ((n == k) || (k == 0)) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,108,return 1;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,110,if ((k == 1) || (k == n - 1)) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,111,return n;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,113,// Use symmetry for large k
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,114,if (k > n / 2) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,115,"return binomialCoefficient(n, n - k);"
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,114,/ check for positive overflow
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,115,f (a <= Long.MAX_VALUE - b) {
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,116,et = a + b;
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,117, else {
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,118,"hrow new MathArithmeticException(pattern, a, b);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,118,// We use the formula
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,119,// (n choose k) = n! / (n-k)! / k!
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,120,// (n choose k) == ((n-k+1)*...*n) / (1*...*k)
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,121,// which could be written
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,122,// (n choose k) == (n-1 choose k-1) * n / k
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,123,long result = 1;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,124,if (n <= 61) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,125,"// For n <= 61, the naive implementation cannot overflow."
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,126,int i = n - k + 1;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,127,for (int j = 1; j <= k; j++) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,128,result = result * i / j;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,129,i++;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,131,} else if (n <= 66) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,132,"// For n > 61 but n <= 66, the result cannot overflow,"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,133,// but we must take care not to overflow intermediate values.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,134,int i = n - k + 1;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,135,for (int j = 1; j <= k; j++) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,136,"// We know that (result * i) is divisible by j,"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,137,"// but (result * i) may overflow, so we split j:"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,138,"// Filter out the gcd, d, so j/d and i/d are integer."
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,139,// result is divisible by (j/d) because (j/d)
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,140,// is relative prime to (i/d) and is a divisor of
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,141,// result * (i/d).
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,142,"final long d = gcd(i, j);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,143,result = (result / (j / d)) * (i / d);
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,144,i++;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,146,} else {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,147,"// For n > 66, a result overflow might occur, so we check"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,148,"// the multiplication, taking care to not overflow"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,149,// unnecessary.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,150,int i = n - k + 1;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,151,for (int j = 1; j <= k; j++) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,152,"final long d = gcd(i, j);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,153,"result = mulAndCheck(result / (j / d), i / d);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,154,i++;
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,122,eturn ret;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,157,return result;
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,126," Subtract two integers, checking for overflow."
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,161,* Returns a {@code double} representation of the <a
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,162,"* href=""http://mathworld.wolfram.com/BinomialCoefficient.html""> Binomial"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,163,"* Coefficient</a>, ""{@code n choose k}"", the number of"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,164,* {@code k}-element subsets that can be selected from an
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,165,* {@code n}-element set.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,166,* <p>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,167,* <Strong>Preconditions</strong>:
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,168,* <ul>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,169,* <li> {@code 0 <= k <= n } (otherwise
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,170,* {@code IllegalArgumentException} is thrown)</li>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,171,* <li> The result is small enough to fit into a {@code double}. The
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,172,* largest value of {@code n} for which all coefficients are <
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,173,"* Double.MAX_VALUE is 1029. If the computed value exceeds Double.MAX_VALUE,"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,174,* Double.POSITIVE_INFINITY is returned</li>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,175,* </ul></p>
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,128, @param x Minuend.
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,129, @param y Subtrahend.
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,130, @return the difference {@code x - y}.
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,131, @throws MathArithmeticException if the result can not be represented
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,132, as an {@code int}.
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,133, @since 1.1
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,177,* @param n the size of the set
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,178,* @param k the size of the subsets to be counted
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,179,* @return {@code n choose k}
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,180,* @throws IllegalArgumentException if preconditions are not met.
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,135,"ublic static int subAndCheck(int x, int y) {"
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,136,ong s = (long)x - (long)y;
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,137,f (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,138,"hrow new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,182,"public static double binomialCoefficientDouble(final int n, final int k) {"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,183,"ArithmeticsUtils.checkBinomial(n, k);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,184,if ((n == k) || (k == 0)) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,185,return 1d;
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,140,eturn (int)s;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,187,if ((k == 1) || (k == n - 1)) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,188,return n;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,190,if (k > n/2) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,191,"return binomialCoefficientDouble(n, n - k);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,193,if (n < 67) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,194,"return binomialCoefficient(n,k);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,197,double result = 1d;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,198,for (int i = 1; i <= k; i++) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,199,result *= (double)(n - k + i) / (double)i;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,202,return FastMath.floor(result + 0.5);
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,144," Subtract two long integers, checking for overflow."
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,206,* Returns the natural {@code log} of the <a
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,207,"* href=""http://mathworld.wolfram.com/BinomialCoefficient.html""> Binomial"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,208,"* Coefficient</a>, ""{@code n choose k}"", the number of"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,209,* {@code k}-element subsets that can be selected from an
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,210,* {@code n}-element set.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,211,* <p>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,212,* <Strong>Preconditions</strong>:
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,213,* <ul>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,214,* <li> {@code 0 <= k <= n } (otherwise
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,215,* {@code IllegalArgumentException} is thrown)</li>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,216,* </ul></p>
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,146, @param a Value.
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,147, @param b Value.
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,148, @return the difference {@code a - b}.
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,149, @throws MathArithmeticException if the result can not be represented as a
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,150, {@code long}.
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,151, @since 1.2
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,218,* @param n the size of the set
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,219,* @param k the size of the subsets to be counted
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,220,* @return {@code n choose k}
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,221,* @throws IllegalArgumentException if preconditions are not met.
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,153,"ublic static long subAndCheck(long a, long b) {"
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,154,ong ret;
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,155,f (b == Long.MIN_VALUE) {
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,156,f (a < 0) {
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,157,et = a - b;
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,158, else {
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,159,"hrow new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);"
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,161, else {
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,162,/ use additive inverse
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,163,"et = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,223,"public static double binomialCoefficientLog(final int n, final int k) {"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,224,"ArithmeticsUtils.checkBinomial(n, k);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,225,if ((n == k) || (k == 0)) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,226,return 0;
False,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,165,eturn ret;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,228,if ((k == 1) || (k == n - 1)) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,229,return FastMath.log(n);
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,233,"* For values small enough to do exact integer computation,"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,234,* return the log of the exact value
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,236,if (n < 67) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,237,"return FastMath.log(binomialCoefficient(n,k));"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,241,* Return the log of binomialCoefficientDouble for values that will not
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,242,* overflow binomialCoefficientDouble
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,244,if (n < 1030) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,245,"return FastMath.log(binomialCoefficientDouble(n, k));"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,248,if (k > n / 2) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,249,"return binomialCoefficientLog(n, n - k);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,253,* Sum logs for values that could overflow
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,255,double logSum = 0;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,257,// n!/(n-k)!
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,258,for (int i = n - k + 1; i <= n; i++) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,259,logSum += FastMath.log(i);
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,262,// divide by k!
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,263,for (int i = 2; i <= k; i++) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,264,logSum -= FastMath.log(i);
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,267,return logSum;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,526,* <p>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,527,"* Returns the least common multiple of the absolute value of two numbers,"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,528,"* using the formula {@code lcm(a,b) = (a / gcd(a,b)) * b}."
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,529,* </p>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,530,* Special cases:
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,531,* <ul>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,532,"* <li>The invocations {@code lcm(Integer.MIN_VALUE, n)} and"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,533,"* {@code lcm(n, Integer.MIN_VALUE)}, where {@code abs(n)} is a"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,534,"* power of 2, throw an {@code ArithmeticException}, because the result"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,535,"* would be 2^31, which is too large for an int value.</li>"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,536,"* <li>The result of {@code lcm(0, x)} and {@code lcm(x, 0)} is"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,537,* {@code 0} for any {@code x}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,538,* </ul>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,540,* @param a Number.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,541,* @param b Number.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,542,"* @return the least common multiple, never negative."
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,543,* @throws MathArithmeticException if the result cannot be represented as
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,544,* a non-negative {@code int} value.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,545,* @since 1.1
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,547,"public static int lcm(int a, int b) {"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,548,if (a == 0 || b == 0){
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,549,return 0;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,551,"int lcm = FastMath.abs(ArithmeticsUtils.mulAndCheck(a / gcd(a, b), b));"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,552,if (lcm == Integer.MIN_VALUE) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,553,"throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,554,"a, b);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,556,return lcm;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,560,* <p>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,561,"* Returns the least common multiple of the absolute value of two numbers,"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,562,"* using the formula {@code lcm(a,b) = (a / gcd(a,b)) * b}."
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,563,* </p>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,564,* Special cases:
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,565,* <ul>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,566,"* <li>The invocations {@code lcm(Long.MIN_VALUE, n)} and"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,567,"* {@code lcm(n, Long.MIN_VALUE)}, where {@code abs(n)} is a"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,568,"* power of 2, throw an {@code ArithmeticException}, because the result"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,569,"* would be 2^63, which is too large for an int value.</li>"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,570,"* <li>The result of {@code lcm(0L, x)} and {@code lcm(x, 0L)} is"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,571,* {@code 0L} for any {@code x}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,572,* </ul>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,574,* @param a Number.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,575,* @param b Number.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,576,"* @return the least common multiple, never negative."
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,577,* @throws MathArithmeticException if the result cannot be represented
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,578,* as a non-negative {@code long} value.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,579,* @since 2.1
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,581,"public static long lcm(long a, long b) {"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,582,if (a == 0 || b == 0){
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,583,return 0;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,585,"long lcm = FastMath.abs(ArithmeticsUtils.mulAndCheck(a / gcd(a, b), b));"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,586,if (lcm == Long.MIN_VALUE){
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,587,"throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,588,"a, b);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,590,return lcm;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,594,"* Multiply two integers, checking for overflow."
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,596,* @param x Factor.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,597,* @param y Factor.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,598,* @return the product {@code x * y}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,599,* @throws MathArithmeticException if the result can not be
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,600,* represented as an {@code int}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,601,* @since 1.1
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,603,"public static int mulAndCheck(int x, int y) {"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,604,long m = ((long)x) * ((long)y);
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,605,if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,606,throw new MathArithmeticException();
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,608,return (int)m;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,612,"* Multiply two long integers, checking for overflow."
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,614,* @param a Factor.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,615,* @param b Factor.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,616,* @return the product {@code a * b}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,617,* @throws MathArithmeticException if the result can not be represented
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,618,* as a {@code long}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,619,* @since 1.2
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,621,"public static long mulAndCheck(long a, long b) {"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,622,long ret;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,623,if (a > b) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,624,// use symmetry to reduce boundary cases
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,625,"ret = mulAndCheck(b, a);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,626,} else {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,627,if (a < 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,628,if (b < 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,629,"// check for positive overflow with negative a, negative b"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,630,if (a >= Long.MAX_VALUE / b) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,631,ret = a * b;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,632,} else {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,633,throw new MathArithmeticException();
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,635,} else if (b > 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,636,"// check for negative overflow with negative a, positive b"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,637,if (Long.MIN_VALUE / b <= a) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,638,ret = a * b;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,639,} else {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,640,throw new MathArithmeticException();
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,643,} else {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,644,// assert b == 0
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,645,ret = 0;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,647,} else if (a > 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,648,// assert a > 0
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,649,// assert b > 0
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,651,"// check for positive overflow with positive a, positive b"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,652,if (a <= Long.MAX_VALUE / b) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,653,ret = a * b;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,654,} else {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,655,throw new MathArithmeticException();
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,657,} else {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,658,// assert a == 0
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,659,ret = 0;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,662,return ret;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,666,"* Subtract two integers, checking for overflow."
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,668,* @param x Minuend.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,669,* @param y Subtrahend.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,670,* @return the difference {@code x - y}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,671,* @throws MathArithmeticException if the result can not be represented
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,672,* as an {@code int}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,673,* @since 1.1
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,675,"public static int subAndCheck(int x, int y) {"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,676,long s = (long)x - (long)y;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,677,if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,678,"throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,680,return (int)s;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,684,"* Subtract two long integers, checking for overflow."
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,686,* @param a Value.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,687,* @param b Value.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,688,* @return the difference {@code a - b}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,689,* @throws MathArithmeticException if the result can not be represented as a
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,690,* {@code long}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,691,* @since 1.2
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,693,"public static long subAndCheck(long a, long b) {"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,694,long ret;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,695,if (b == Long.MIN_VALUE) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,696,if (a < 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,697,ret = a - b;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,698,} else {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,699,"throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,701,} else {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,702,// use additive inverse
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,703,"ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,705,return ret;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,709,"* Add two long integers, checking for overflow."
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,711,* @param a Addend.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,712,* @param b Addend.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,713,* @param pattern Pattern to use for any thrown exception.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,714,* @return the sum {@code a + b}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,715,* @throws MathArithmeticException if the result cannot be represented
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,716,* as a {@code long}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,717,* @since 1.2
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,719,"private static long addAndCheck(long a, long b, Localizable pattern) {"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,720,long ret;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,721,if (a > b) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,722,// use symmetry to reduce boundary cases
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,723,"ret = addAndCheck(b, a, pattern);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,724,} else {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,725,// assert a <= b
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,727,if (a < 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,728,if (b < 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,729,// check for negative overflow
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,730,if (Long.MIN_VALUE - b <= a) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,731,ret = a + b;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,732,} else {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,733,"throw new MathArithmeticException(pattern, a, b);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,735,} else {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,736,// opposite sign addition is always safe
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,737,ret = a + b;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,739,} else {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,740,// assert a >= 0
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,741,// assert b >= 0
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,743,// check for positive overflow
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,744,if (a <= Long.MAX_VALUE - b) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,745,ret = a + b;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,746,} else {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,747,"throw new MathArithmeticException(pattern, a, b);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,751,return ret;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,755,* Check binomial preconditions.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,757,* @param n Size of the set.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,758,* @param k Size of the subsets to be counted.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,759,* @throws NotPositiveException if {@code n < 0}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,760,* @throws NumberIsTooLargeException if {@code k > n}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,762,"private static void checkBinomial(final int n, final int k) {"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,763,if (n < k) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,764,"throw new NumberIsTooLargeException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,765,"k, n, true);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,767,if (n < 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,768,"throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,29,mport org.apache.commons.math.exception.NumberIsTooLargeException;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,80, Returns an exact representation of the <a
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,81," href=""http://mathworld.wolfram.com/BinomialCoefficient.html""> Binomial"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,82," Coefficient</a>, ""{@code n choose k}"", the number of"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,83, {@code k}-element subsets that can be selected from an
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,84, {@code n}-element set.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,85, <p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,86, <Strong>Preconditions</strong>:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,87, <ul>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,88, <li> {@code 0 <= k <= n } (otherwise
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,89, {@code IllegalArgumentException} is thrown)</li>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,90, <li> The result is small enough to fit into a {@code long}. The
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,91, largest value of {@code n} for which all coefficients are
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,92, {@code  < Long.MAX_VALUE} is 66. If the computed value exceeds
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,93, {@code Long.MAX_VALUE} an {@code ArithMeticException} is
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,94, thrown.</li>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,95, </ul></p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,97, @param n the size of the set
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,98, @param k the size of the subsets to be counted
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,99, @return {@code n choose k}
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,100, @throws MathIllegalArgumentException if preconditions are not met.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,101, @throws MathArithmeticException if the result is too large to be
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,102, represented by a long integer.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,104,"ublic static long binomialCoefficient(final int n, final int k) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,105,"heckBinomial(n, k);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,106,f ((n == k) || (k == 0)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,107,eturn 1;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,109,f ((k == 1) || (k == n - 1)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,110,eturn n;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,112,/ Use symmetry for large k
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,113,f (k > n / 2) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,114,"eturn binomialCoefficient(n, n - k);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,117,/ We use the formula
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,118,/ (n choose k) = n! / (n-k)! / k!
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,119,/ (n choose k) == ((n-k+1)*...*n) / (1*...*k)
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,120,/ which could be written
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,121,/ (n choose k) == (n-1 choose k-1) * n / k
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,122,ong result = 1;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,123,f (n <= 61) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,124,"/ For n <= 61, the naive implementation cannot overflow."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,125,nt i = n - k + 1;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,126,or (int j = 1; j <= k; j++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,127,esult = result * i / j;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,128,++;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,130, else if (n <= 66) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,131,"/ For n > 61 but n <= 66, the result cannot overflow,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,132,/ but we must take care not to overflow intermediate values.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,133,nt i = n - k + 1;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,134,or (int j = 1; j <= k; j++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,135,"/ We know that (result * i) is divisible by j,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,136,"/ but (result * i) may overflow, so we split j:"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,137,"/ Filter out the gcd, d, so j/d and i/d are integer."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,138,/ result is divisible by (j/d) because (j/d)
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,139,/ is relative prime to (i/d) and is a divisor of
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,140,/ result * (i/d).
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,141,"inal long d = ArithmeticsUtils.gcd(i, j);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,142,esult = (result / (j / d)) * (i / d);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,143,++;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,145, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,146,"/ For n > 66, a result overflow might occur, so we check"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,147,"/ the multiplication, taking care to not overflow"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,148,/ unnecessary.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,149,nt i = n - k + 1;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,150,or (int j = 1; j <= k; j++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,151,"inal long d = ArithmeticsUtils.gcd(i, j);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,152,"esult = mulAndCheck(result / (j / d), i / d);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,153,++;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,156,eturn result;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,160, Returns a {@code double} representation of the <a
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,161," href=""http://mathworld.wolfram.com/BinomialCoefficient.html""> Binomial"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,162," Coefficient</a>, ""{@code n choose k}"", the number of"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,163, {@code k}-element subsets that can be selected from an
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,164, {@code n}-element set.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,165, <p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,166, <Strong>Preconditions</strong>:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,167, <ul>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,168, <li> {@code 0 <= k <= n } (otherwise
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,169, {@code IllegalArgumentException} is thrown)</li>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,170, <li> The result is small enough to fit into a {@code double}. The
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,171, largest value of {@code n} for which all coefficients are <
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,172," Double.MAX_VALUE is 1029. If the computed value exceeds Double.MAX_VALUE,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,173, Double.POSITIVE_INFINITY is returned</li>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,174, </ul></p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,176, @param n the size of the set
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,177, @param k the size of the subsets to be counted
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,178, @return {@code n choose k}
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,179, @throws IllegalArgumentException if preconditions are not met.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,181,"ublic static double binomialCoefficientDouble(final int n, final int k) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,182,"heckBinomial(n, k);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,183,f ((n == k) || (k == 0)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,184,eturn 1d;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,186,f ((k == 1) || (k == n - 1)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,187,eturn n;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,189,f (k > n/2) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,190,"eturn binomialCoefficientDouble(n, n - k);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,192,f (n < 67) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,193,"eturn binomialCoefficient(n,k);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,196,ouble result = 1d;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,197,or (int i = 1; i <= k; i++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,198,esult *= (double)(n - k + i) / (double)i;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,201,eturn FastMath.floor(result + 0.5);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,205, Returns the natural {@code log} of the <a
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,206," href=""http://mathworld.wolfram.com/BinomialCoefficient.html""> Binomial"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,207," Coefficient</a>, ""{@code n choose k}"", the number of"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,208, {@code k}-element subsets that can be selected from an
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,209, {@code n}-element set.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,210, <p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,211, <Strong>Preconditions</strong>:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,212, <ul>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,213, <li> {@code 0 <= k <= n } (otherwise
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,214, {@code IllegalArgumentException} is thrown)</li>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,215, </ul></p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,217, @param n the size of the set
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,218, @param k the size of the subsets to be counted
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,219, @return {@code n choose k}
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,220, @throws IllegalArgumentException if preconditions are not met.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,222,"ublic static double binomialCoefficientLog(final int n, final int k) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,223,"heckBinomial(n, k);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,224,f ((n == k) || (k == 0)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,225,eturn 0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,227,f ((k == 1) || (k == n - 1)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,228,eturn FastMath.log(n);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,232," For values small enough to do exact integer computation,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,233, return the log of the exact value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,235,f (n < 67) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,236,"eturn FastMath.log(binomialCoefficient(n,k));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,240, Return the log of binomialCoefficientDouble for values that will not
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,241, overflow binomialCoefficientDouble
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,243,f (n < 1030) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,244,"eturn FastMath.log(binomialCoefficientDouble(n, k));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,247,f (k > n / 2) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,248,"eturn binomialCoefficientLog(n, n - k);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,252, Sum logs for values that could overflow
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,254,ouble logSum = 0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,256,/ n!/(n-k)!
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,257,or (int i = n - k + 1; i <= n; i++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,258,ogSum += FastMath.log(i);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,261,/ divide by k!
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,262,or (int i = 2; i <= k; i++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,263,ogSum -= FastMath.log(i);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,266,eturn logSum;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,270, Check binomial preconditions.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,272, @param n Size of the set.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,273, @param k Size of the subsets to be counted.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,274, @throws NotPositiveException if {@code n < 0}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,275, @throws NumberIsTooLargeException if {@code k > n}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,277,"rivate static void checkBinomial(final int n, final int k) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,278,f (n < k) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,279,"hrow new NumberIsTooLargeException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,280,", n, true);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,282,f (n < 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,283,"hrow new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,391, <p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,392," Returns the least common multiple of the absolute value of two numbers,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,393," using the formula {@code lcm(a,b) = (a / gcd(a,b)) * b}."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,394, </p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,395, Special cases:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,396, <ul>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,397," <li>The invocations {@code lcm(Integer.MIN_VALUE, n)} and"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,398," {@code lcm(n, Integer.MIN_VALUE)}, where {@code abs(n)} is a"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,399," power of 2, throw an {@code ArithmeticException}, because the result"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,400," would be 2^31, which is too large for an int value.</li>"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,401," <li>The result of {@code lcm(0, x)} and {@code lcm(x, 0)} is"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,402, {@code 0} for any {@code x}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,403, </ul>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,405, @param a Number.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,406, @param b Number.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,407," @return the least common multiple, never negative."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,408, @throws MathArithmeticException if the result cannot be represented as
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,409, a non-negative {@code int} value.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,410, @since 1.1
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,412,"ublic static int lcm(int a, int b) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,413,f (a == 0 || b == 0){
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,414,eturn 0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,416,"nt lcm = FastMath.abs(mulAndCheck(a / ArithmeticsUtils.gcd(a, b), b));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,417,f (lcm == Integer.MIN_VALUE) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,418,"hrow new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,419,", b);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,421,eturn lcm;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,425, <p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,426," Returns the least common multiple of the absolute value of two numbers,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,427," using the formula {@code lcm(a,b) = (a / gcd(a,b)) * b}."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,428, </p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,429, Special cases:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,430, <ul>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,431," <li>The invocations {@code lcm(Long.MIN_VALUE, n)} and"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,432," {@code lcm(n, Long.MIN_VALUE)}, where {@code abs(n)} is a"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,433," power of 2, throw an {@code ArithmeticException}, because the result"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,434," would be 2^63, which is too large for an int value.</li>"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,435," <li>The result of {@code lcm(0L, x)} and {@code lcm(x, 0L)} is"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,436, {@code 0L} for any {@code x}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,437, </ul>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,439, @param a Number.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,440, @param b Number.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,441," @return the least common multiple, never negative."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,442, @throws MathArithmeticException if the result cannot be represented
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,443, as a non-negative {@code long} value.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,444, @since 2.1
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,446,"ublic static long lcm(long a, long b) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,447,f (a == 0 || b == 0){
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,448,eturn 0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,450,"ong lcm = FastMath.abs(mulAndCheck(a / ArithmeticsUtils.gcd(a, b), b));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,451,f (lcm == Long.MIN_VALUE){
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,452,"hrow new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,453,", b);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,455,eturn lcm;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,479," Multiply two integers, checking for overflow."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,481, @param x Factor.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,482, @param y Factor.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,483, @return the product {@code x * y}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,484, @throws MathArithmeticException if the result can not be
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,485, represented as an {@code int}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,486, @since 1.1
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,488,"ublic static int mulAndCheck(int x, int y) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,489,ong m = ((long)x) * ((long)y);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,490,f (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,491,hrow new MathArithmeticException();
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,493,eturn (int)m;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,497," Multiply two long integers, checking for overflow."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,499, @param a Factor.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,500, @param b Factor.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,501, @return the product {@code a * b}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,502, @throws MathArithmeticException if the result can not be represented
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,503, as a {@code long}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,504, @since 1.2
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,506,"ublic static long mulAndCheck(long a, long b) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,507,ong ret;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,508,f (a > b) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,509,/ use symmetry to reduce boundary cases
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,510,"et = mulAndCheck(b, a);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,511, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,512,f (a < 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,513,f (b < 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,514,"/ check for positive overflow with negative a, negative b"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,515,f (a >= Long.MAX_VALUE / b) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,516,et = a * b;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,517, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,518,hrow new MathArithmeticException();
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,520, else if (b > 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,521,"/ check for negative overflow with negative a, positive b"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,522,f (Long.MIN_VALUE / b <= a) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,523,et = a * b;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,524, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,525,hrow new MathArithmeticException();
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,528, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,529,/ assert b == 0
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,530,et = 0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,532, else if (a > 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,533,/ assert a > 0
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,534,/ assert b > 0
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,536,"/ check for positive overflow with positive a, positive b"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,537,f (a <= Long.MAX_VALUE / b) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,538,et = a * b;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,539, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,540,hrow new MathArithmeticException();
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,542, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,543,/ assert a == 0
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,544,et = 0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,547,eturn ret;
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,21,import org.apache.commons.math.util.ArithmeticsUtils;
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,22,mport org.apache.commons.math.util.MathUtils;
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,292,"ouble binomial = MathUtils.binomialCoefficient(v + i, i);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,292,"double binomial = ArithmeticsUtils.binomialCoefficient(v + i, i);"
False,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,20,mport org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,20,import org.apache.commons.math.util.ArithmeticsUtils;
False,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,57,"ong aux = MathUtils.binomialCoefficient(n + i, n - j - 1);"
False,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,58,"al = MathUtils.mulAndCheck(val, aux);"
False,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,59,"ux = MathUtils.binomialCoefficient(n + j, n - i - 1);"
False,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,60,"al = MathUtils.mulAndCheck(val, aux);"
False,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,61,"ux = MathUtils.binomialCoefficient(i + j, i);"
False,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,62,"al = MathUtils.mulAndCheck(val, aux);"
False,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,63,"al = MathUtils.mulAndCheck(val, aux);"
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,57,"long aux = ArithmeticsUtils.binomialCoefficient(n + i, n - j - 1);"
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,58,"val = ArithmeticsUtils.mulAndCheck(val, aux);"
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,59,"aux = ArithmeticsUtils.binomialCoefficient(n + j, n - i - 1);"
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,60,"val = ArithmeticsUtils.mulAndCheck(val, aux);"
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,61,"aux = ArithmeticsUtils.binomialCoefficient(i + j, i);"
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,62,"val = ArithmeticsUtils.mulAndCheck(val, aux);"
True,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,src/test/java/org/apache/commons/math/linear/InverseHilbertMatrix.java,63,"val = ArithmeticsUtils.mulAndCheck(val, aux);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,20,import java.util.HashMap;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,21,import java.util.List;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,22,import java.util.Map;
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,34, Exact direct multiplication implementation to test against
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,36,rivate long factorial(int n) {
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,37,ong result = 1;
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,38,or (int i = 2; i <= n; i++) {
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,39,esult *= i;
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,41,eturn result;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,37,/** cached binomial coefficients */
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,38,"private static final List<Map<Integer, Long>> binomialCache = new ArrayList<Map<Integer, Long>>();"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,40,"/** Verify that b(0,0) = 1 */"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,41,@Test
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,42,public void test0Choose0() {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,43,"Assert.assertEquals(ArithmeticsUtils.binomialCoefficientDouble(0, 0), 1d, 0);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,44,"Assert.assertEquals(ArithmeticsUtils.binomialCoefficientLog(0, 0), 0d, 0);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,45,"Assert.assertEquals(ArithmeticsUtils.binomialCoefficient(0, 0), 1);"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,80,"rivate void testAddAndCheckLongFailure(long a, long b) {"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,81,ry {
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,82,"rithmeticsUtils.addAndCheck(a, b);"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,83,"ssert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,84, catch (MathArithmeticException ex) {
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,85,/ success
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,84,@Test
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,85,public void testBinomialCoefficient() {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,86,long[] bcoef5 = {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,87,"1,"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,88,"5,"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,89,"10,"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,90,"10,"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,91,"5,"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,92,1 };
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,93,long[] bcoef6 = {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,94,"1,"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,95,"6,"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,96,"15,"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,97,"20,"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,98,"15,"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,99,"6,"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,100,1 };
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,101,for (int i = 0; i < 6; i++) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,102,"Assert.assertEquals(""5 choose "" + i, bcoef5[i], ArithmeticsUtils.binomialCoefficient(5, i));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,104,for (int i = 0; i < 7; i++) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,105,"Assert.assertEquals(""6 choose "" + i, bcoef6[i], ArithmeticsUtils.binomialCoefficient(6, i));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,108,for (int n = 1; n < 10; n++) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,109,for (int k = 0; k <= n; k++) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,110,"Assert.assertEquals(n + "" choose "" + k, binomialCoefficient(n, k), ArithmeticsUtils.binomialCoefficient(n, k));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,111,"Assert.assertEquals(n + "" choose "" + k, binomialCoefficient(n, k), ArithmeticsUtils.binomialCoefficientDouble(n, k), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,112,"Assert.assertEquals(n + "" choose "" + k, FastMath.log(binomialCoefficient(n, k)), ArithmeticsUtils.binomialCoefficientLog(n, k), 10E-12);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,116,"int[] n = { 34, 66, 100, 1500, 1500 };"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,117,"int[] k = { 17, 33, 10, 1500 - 4, 4 };"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,118,for (int i = 0; i < n.length; i++) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,119,"long expected = binomialCoefficient(n[i], k[i]);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,120,"Assert.assertEquals(n[i] + "" choose "" + k[i], expected,"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,121,"ArithmeticsUtils.binomialCoefficient(n[i], k[i]));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,122,"Assert.assertEquals(n[i] + "" choose "" + k[i], expected,"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,123,"ArithmeticsUtils.binomialCoefficientDouble(n[i], k[i]), 0.0);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,124,"Assert.assertEquals(""log("" + n[i] + "" choose "" + k[i] + "")"", FastMath.log(expected),"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,125,"ArithmeticsUtils.binomialCoefficientLog(n[i], k[i]), 0.0);"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,90,ublic void testSubAndCheck() {
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,91,nt big = Integer.MAX_VALUE;
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,92,nt bigNeg = Integer.MIN_VALUE;
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,93,"ssert.assertEquals(big, ArithmeticsUtils.subAndCheck(big, 0));"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,94,"ssert.assertEquals(bigNeg + 1, ArithmeticsUtils.subAndCheck(bigNeg, -1));"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,95,"ssert.assertEquals(-1, ArithmeticsUtils.subAndCheck(bigNeg, -big));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,130,public void testBinomialCoefficientFail() {
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,97,"rithmeticsUtils.subAndCheck(big, -1);"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,98,"ssert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,99, catch (MathArithmeticException ex) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,132,"ArithmeticsUtils.binomialCoefficient(4, 5);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,133,"Assert.fail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,134,} catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,135,// ignored
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,138,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,139,"ArithmeticsUtils.binomialCoefficientDouble(4, 5);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,140,"Assert.fail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,141,} catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,142,// ignored
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,102,"rithmeticsUtils.subAndCheck(bigNeg, 1);"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,103,"ssert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,104, catch (MathArithmeticException ex) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,146,"ArithmeticsUtils.binomialCoefficientLog(4, 5);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,147,"Assert.fail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,148,} catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,149,// ignored
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,108,Test
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,109,ublic void testSubAndCheckErrorMessage() {
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,110,nt big = Integer.MAX_VALUE;
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,112,"rithmeticsUtils.subAndCheck(big, -1);"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,113,"ssert.fail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,153,"ArithmeticsUtils.binomialCoefficient(-1, -2);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,154,"Assert.fail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,155,} catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,156,// ignored
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,158,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,159,"ArithmeticsUtils.binomialCoefficientDouble(-1, -2);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,160,"Assert.fail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,161,} catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,162,// ignored
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,164,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,165,"ArithmeticsUtils.binomialCoefficientLog(-1, -2);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,166,"Assert.fail(""expecting MathIllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,167,} catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,168,// ignored
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,171,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,172,"ArithmeticsUtils.binomialCoefficient(67, 30);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,173,"Assert.fail(""expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,115,ssert.assertTrue(ex.getMessage().length() > 1);
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,175,// ignored
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,177,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,178,"ArithmeticsUtils.binomialCoefficient(67, 34);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,179,"Assert.fail(""expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,180,} catch (MathArithmeticException ex) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,181,// ignored
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,183,"double x = ArithmeticsUtils.binomialCoefficientDouble(1030, 515);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,184,"Assert.assertTrue(""expecting infinite binomial coefficient"", Double"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,185,.isInfinite(x));
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,189,* Tests correctness for large n and sharpness of upper bound in API doc
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,190,* JIRA: MATH-241
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,120,ublic void testSubAndCheckLong() {
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,121,ong max = Long.MAX_VALUE;
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,122,ong min = Long.MIN_VALUE;
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,123,"ssert.assertEquals(max, ArithmeticsUtils.subAndCheck(max, 0));"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,124,"ssert.assertEquals(min, ArithmeticsUtils.subAndCheck(min, 0));"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,125,"ssert.assertEquals(-max, ArithmeticsUtils.subAndCheck(0, max));"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,126,"ssert.assertEquals(min + 1, ArithmeticsUtils.subAndCheck(min, -1));"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,127,/ min == -1-max
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,128,"ssert.assertEquals(-1, ArithmeticsUtils.subAndCheck(-max - 1, -max));"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,129,"ssert.assertEquals(max, ArithmeticsUtils.subAndCheck(-1, -1 - max));"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,130,"estSubAndCheckLongFailure(0L, min);"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,131,"estSubAndCheckLongFailure(max, -1L);"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,132,"estSubAndCheckLongFailure(min, 1L);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,193,public void testBinomialCoefficientLarge() throws Exception {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,194,// This tests all legal and illegal values for n <= 200.
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,195,for (int n = 0; n <= 200; n++) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,196,for (int k = 0; k <= n; k++) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,197,long ourResult = -1;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,198,long exactResult = -1;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,199,boolean shouldThrow = false;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,200,boolean didThrow = false;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,201,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,202,"ourResult = ArithmeticsUtils.binomialCoefficient(n, k);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,203,} catch (MathArithmeticException ex) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,204,didThrow = true;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,206,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,207,"exactResult = binomialCoefficient(n, k);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,208,} catch (MathArithmeticException ex) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,209,shouldThrow = true;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,211,"Assert.assertEquals(n + "" choose "" + k, exactResult, ourResult);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,212,"Assert.assertEquals(n + "" choose "" + k, shouldThrow, didThrow);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,213,"Assert.assertTrue(n + "" choose "" + k, (n > 66 || !didThrow));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,215,if (!shouldThrow && exactResult > 1) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,216,"Assert.assertEquals(n + "" choose "" + k, 1.,"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,217,"ArithmeticsUtils.binomialCoefficientDouble(n, k) / exactResult, 1e-10);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,218,"Assert.assertEquals(n + "" choose "" + k, 1,"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,219,"ArithmeticsUtils.binomialCoefficientLog(n, k) / FastMath.log(exactResult), 1e-10);"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,135,"rivate void testSubAndCheckLongFailure(long a, long b) {"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,224,"long ourResult = ArithmeticsUtils.binomialCoefficient(300, 3);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,225,"long exactResult = binomialCoefficient(300, 3);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,226,"Assert.assertEquals(exactResult, ourResult);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,228,"ourResult = ArithmeticsUtils.binomialCoefficient(700, 697);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,229,"exactResult = binomialCoefficient(700, 697);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,230,"Assert.assertEquals(exactResult, ourResult);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,232,// This one should throw
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,137,"rithmeticsUtils.subAndCheck(a, b);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,234,"ArithmeticsUtils.binomialCoefficient(700, 300);"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,140,/ success
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,237,// Expected
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,240,int n = 10000;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,241,"ourResult = ArithmeticsUtils.binomialCoefficient(n, 3);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,242,"exactResult = binomialCoefficient(n, 3);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,243,"Assert.assertEquals(exactResult, ourResult);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,244,"Assert.assertEquals(1, ArithmeticsUtils.binomialCoefficientDouble(n, 3) / exactResult, 1e-10);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,245,"Assert.assertEquals(1, ArithmeticsUtils.binomialCoefficientLog(n, 3) / FastMath.log(exactResult), 1e-10);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,342,@Test
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,343,public void testGcdConsistency() {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,344,"int[] primeList = {19, 23, 53, 67, 73, 79, 101, 103, 111, 131};"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,345,ArrayList<Integer> primes = new ArrayList<Integer>();
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,346,for (int i = 0; i < primeList.length; i++) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,347,primes.add(Integer.valueOf(primeList[i]));
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,349,RandomDataImpl randomData = new RandomDataImpl();
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,350,for (int i = 0; i < 20; i++) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,351,"Object[] sample = randomData.nextSample(primes, 4);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,352,int p1 = ((Integer) sample[0]).intValue();
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,353,int p2 = ((Integer) sample[1]).intValue();
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,354,int p3 = ((Integer) sample[2]).intValue();
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,355,int p4 = ((Integer) sample[3]).intValue();
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,356,int i1 = p1 * p2 * p3;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,357,int i2 = p1 * p2 * p4;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,358,int gcd = p1 * p2;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,359,"Assert.assertEquals(gcd, ArithmeticsUtils.gcd(i1, i2));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,360,long l1 = i1;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,361,long l2 = i2;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,362,"Assert.assertEquals(gcd, ArithmeticsUtils.gcd(l1, l2));"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,293,ublic void testGcdConsistency() {
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,294,"nt[] primeList = {19, 23, 53, 67, 73, 79, 101, 103, 111, 131};"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,295,rrayList<Integer> primes = new ArrayList<Integer>();
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,296,or (int i = 0; i < primeList.length; i++) {
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,297,rimes.add(Integer.valueOf(primeList[i]));
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,421,public void testLcm() {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,422,int a = 30;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,423,int b = 50;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,424,int c = 77;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,426,"Assert.assertEquals(0, ArithmeticsUtils.lcm(0, b));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,427,"Assert.assertEquals(0, ArithmeticsUtils.lcm(a, 0));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,428,"Assert.assertEquals(b, ArithmeticsUtils.lcm(1, b));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,429,"Assert.assertEquals(a, ArithmeticsUtils.lcm(a, 1));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,430,"Assert.assertEquals(150, ArithmeticsUtils.lcm(a, b));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,431,"Assert.assertEquals(150, ArithmeticsUtils.lcm(-a, b));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,432,"Assert.assertEquals(150, ArithmeticsUtils.lcm(a, -b));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,433,"Assert.assertEquals(150, ArithmeticsUtils.lcm(-a, -b));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,434,"Assert.assertEquals(2310, ArithmeticsUtils.lcm(a, c));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,436,// Assert that no intermediate value overflows:
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,437,"// The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,438,"Assert.assertEquals((1<<20)*15, ArithmeticsUtils.lcm((1<<20)*3, (1<<20)*5));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,440,// Special case
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,441,"Assert.assertEquals(0, ArithmeticsUtils.lcm(0, 0));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,443,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,444,// lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,445,"ArithmeticsUtils.lcm(Integer.MIN_VALUE, 1);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,446,"Assert.fail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,447,} catch (MathArithmeticException expected) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,448,// expected
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,299,andomDataImpl randomData = new RandomDataImpl();
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,300,or (int i = 0; i < 20; i++) {
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,301,"bject[] sample = randomData.nextSample(primes, 4);"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,302,nt p1 = ((Integer) sample[0]).intValue();
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,303,nt p2 = ((Integer) sample[1]).intValue();
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,304,nt p3 = ((Integer) sample[2]).intValue();
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,305,nt p4 = ((Integer) sample[3]).intValue();
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,306,nt i1 = p1 * p2 * p3;
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,307,nt i2 = p1 * p2 * p4;
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,308,nt gcd = p1 * p2;
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,309,"ssert.assertEquals(gcd, ArithmeticsUtils.gcd(i1, i2));"
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,310,ong l1 = i1;
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,311,ong l2 = i2;
False,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,312,"ssert.assertEquals(gcd, ArithmeticsUtils.gcd(l1, l2));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,451,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,452,// lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,453,"ArithmeticsUtils.lcm(Integer.MIN_VALUE, 1<<20);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,454,"Assert.fail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,455,} catch (MathArithmeticException expected) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,456,// expected
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,459,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,460,"ArithmeticsUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,461,"Assert.fail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,462,} catch (MathArithmeticException expected) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,463,// expected
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,467,@Test
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,468,public void testLcmLong() {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,469,long a = 30;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,470,long b = 50;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,471,long c = 77;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,473,"Assert.assertEquals(0, ArithmeticsUtils.lcm(0, b));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,474,"Assert.assertEquals(0, ArithmeticsUtils.lcm(a, 0));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,475,"Assert.assertEquals(b, ArithmeticsUtils.lcm(1, b));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,476,"Assert.assertEquals(a, ArithmeticsUtils.lcm(a, 1));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,477,"Assert.assertEquals(150, ArithmeticsUtils.lcm(a, b));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,478,"Assert.assertEquals(150, ArithmeticsUtils.lcm(-a, b));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,479,"Assert.assertEquals(150, ArithmeticsUtils.lcm(a, -b));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,480,"Assert.assertEquals(150, ArithmeticsUtils.lcm(-a, -b));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,481,"Assert.assertEquals(2310, ArithmeticsUtils.lcm(a, c));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,483,"Assert.assertEquals(Long.MAX_VALUE, ArithmeticsUtils.lcm(60247241209L, 153092023L));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,485,// Assert that no intermediate value overflows:
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,486,"// The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,487,"Assert.assertEquals((1L<<50)*15, ArithmeticsUtils.lcm((1L<<45)*3, (1L<<50)*5));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,489,// Special case
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,490,"Assert.assertEquals(0L, ArithmeticsUtils.lcm(0L, 0L));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,492,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,493,// lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,494,"ArithmeticsUtils.lcm(Long.MIN_VALUE, 1);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,495,"Assert.fail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,496,} catch (MathArithmeticException expected) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,497,// expected
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,500,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,501,// lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,502,"ArithmeticsUtils.lcm(Long.MIN_VALUE, 1<<20);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,503,"Assert.fail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,504,} catch (MathArithmeticException expected) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,505,// expected
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,508,"Assert.assertEquals((long) Integer.MAX_VALUE * (Integer.MAX_VALUE - 1),"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,509,"ArithmeticsUtils.lcm((long)Integer.MAX_VALUE, Integer.MAX_VALUE - 1));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,510,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,511,"ArithmeticsUtils.lcm(Long.MAX_VALUE, Long.MAX_VALUE - 1);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,512,"Assert.fail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,513,} catch (MathArithmeticException expected) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,514,// expected
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,518,@Test
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,519,public void testMulAndCheck() {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,520,int big = Integer.MAX_VALUE;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,521,int bigNeg = Integer.MIN_VALUE;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,522,"Assert.assertEquals(big, ArithmeticsUtils.mulAndCheck(big, 1));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,523,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,524,"ArithmeticsUtils.mulAndCheck(big, 2);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,525,"Assert.fail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,526,} catch (MathArithmeticException ex) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,528,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,529,"ArithmeticsUtils.mulAndCheck(bigNeg, 2);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,530,"Assert.fail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,531,} catch (MathArithmeticException ex) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,535,@Test
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,536,public void testMulAndCheckLong() {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,537,long max = Long.MAX_VALUE;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,538,long min = Long.MIN_VALUE;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,539,"Assert.assertEquals(max, ArithmeticsUtils.mulAndCheck(max, 1L));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,540,"Assert.assertEquals(min, ArithmeticsUtils.mulAndCheck(min, 1L));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,541,"Assert.assertEquals(0L, ArithmeticsUtils.mulAndCheck(max, 0L));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,542,"Assert.assertEquals(0L, ArithmeticsUtils.mulAndCheck(min, 0L));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,543,"Assert.assertEquals(max, ArithmeticsUtils.mulAndCheck(1L, max));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,544,"Assert.assertEquals(min, ArithmeticsUtils.mulAndCheck(1L, min));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,545,"Assert.assertEquals(0L, ArithmeticsUtils.mulAndCheck(0L, max));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,546,"Assert.assertEquals(0L, ArithmeticsUtils.mulAndCheck(0L, min));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,547,"Assert.assertEquals(1L, ArithmeticsUtils.mulAndCheck(-1L, -1L));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,548,"Assert.assertEquals(min, ArithmeticsUtils.mulAndCheck(min / 2, 2));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,549,"testMulAndCheckLongFailure(max, 2L);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,550,"testMulAndCheckLongFailure(2L, max);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,551,"testMulAndCheckLongFailure(min, 2L);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,552,"testMulAndCheckLongFailure(2L, min);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,553,"testMulAndCheckLongFailure(min, -1L);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,554,"testMulAndCheckLongFailure(-1L, min);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,557,@Test
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,558,public void testSubAndCheck() {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,559,int big = Integer.MAX_VALUE;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,560,int bigNeg = Integer.MIN_VALUE;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,561,"Assert.assertEquals(big, ArithmeticsUtils.subAndCheck(big, 0));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,562,"Assert.assertEquals(bigNeg + 1, ArithmeticsUtils.subAndCheck(bigNeg, -1));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,563,"Assert.assertEquals(-1, ArithmeticsUtils.subAndCheck(bigNeg, -big));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,564,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,565,"ArithmeticsUtils.subAndCheck(big, -1);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,566,"Assert.fail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,567,} catch (MathArithmeticException ex) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,569,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,570,"ArithmeticsUtils.subAndCheck(bigNeg, 1);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,571,"Assert.fail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,572,} catch (MathArithmeticException ex) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,576,@Test
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,577,public void testSubAndCheckErrorMessage() {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,578,int big = Integer.MAX_VALUE;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,579,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,580,"ArithmeticsUtils.subAndCheck(big, -1);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,581,"Assert.fail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,582,} catch (MathArithmeticException ex) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,583,Assert.assertTrue(ex.getMessage().length() > 1);
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,587,@Test
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,588,public void testSubAndCheckLong() {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,589,long max = Long.MAX_VALUE;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,590,long min = Long.MIN_VALUE;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,591,"Assert.assertEquals(max, ArithmeticsUtils.subAndCheck(max, 0));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,592,"Assert.assertEquals(min, ArithmeticsUtils.subAndCheck(min, 0));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,593,"Assert.assertEquals(-max, ArithmeticsUtils.subAndCheck(0, max));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,594,"Assert.assertEquals(min + 1, ArithmeticsUtils.subAndCheck(min, -1));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,595,// min == -1-max
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,596,"Assert.assertEquals(-1, ArithmeticsUtils.subAndCheck(-max - 1, -max));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,597,"Assert.assertEquals(max, ArithmeticsUtils.subAndCheck(-1, -1 - max));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,598,"testSubAndCheckLongFailure(0L, min);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,599,"testSubAndCheckLongFailure(max, -1L);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,600,"testSubAndCheckLongFailure(min, 1L);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,604,* Exact (caching) recursive implementation to test against
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,606,"private long binomialCoefficient(int n, int k) throws MathArithmeticException {"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,607,if (binomialCache.size() > n) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,608,Long cachedResult = binomialCache.get(n).get(Integer.valueOf(k));
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,609,if (cachedResult != null) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,610,return cachedResult.longValue();
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,613,long result = -1;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,614,if ((n == k) || (k == 0)) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,615,result = 1;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,616,} else if ((k == 1) || (k == n - 1)) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,617,result = n;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,618,} else {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,619,// Reduce stack depth for larger values of n
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,620,if (k < n - 100) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,621,"binomialCoefficient(n - 100, k);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,623,if (k > 100) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,624,"binomialCoefficient(n - 100, k - 100);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,626,"result = ArithmeticsUtils.addAndCheck(binomialCoefficient(n - 1, k - 1),"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,627,"binomialCoefficient(n - 1, k));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,629,if (result == -1) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,630,throw new MathArithmeticException();
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,632,for (int i = binomialCache.size(); i < n + 1; i++) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,633,"binomialCache.add(new HashMap<Integer, Long>());"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,635,"binomialCache.get(n).put(Integer.valueOf(k), Long.valueOf(result));"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,636,return result;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,640,* Exact direct multiplication implementation to test against
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,642,private long factorial(int n) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,643,long result = 1;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,644,for (int i = 2; i <= n; i++) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,645,result *= i;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,647,return result;
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,650,"private void testAddAndCheckLongFailure(long a, long b) {"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,651,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,652,"ArithmeticsUtils.addAndCheck(a, b);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,653,"Assert.fail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,654,} catch (MathArithmeticException ex) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,655,// success
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,659,"private void testMulAndCheckLongFailure(long a, long b) {"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,660,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,661,"ArithmeticsUtils.mulAndCheck(a, b);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,662,"Assert.fail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,663,} catch (MathArithmeticException ex) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,664,// success
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,668,"private void testSubAndCheckLongFailure(long a, long b) {"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,669,try {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,670,"ArithmeticsUtils.subAndCheck(a, b);"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,671,"Assert.fail(""Expecting MathArithmeticException"");"
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,672,} catch (MathArithmeticException ex) {
True,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,src/test/java/org/apache/commons/math/util/ArithmeticsUtilsTest.java,673,// success
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,18,mport java.util.ArrayList;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,19,mport java.util.Arrays;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,20,mport java.util.HashMap;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,21,mport java.util.List;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,22,mport java.util.Map;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,42,** cached binomial coefficients */
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,43,"rivate static final List<Map<Integer, Long>> binomialCache = new ArrayList<Map<Integer, Long>>();"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,46, Exact (caching) recursive implementation to test against
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,48,"rivate long binomialCoefficient(int n, int k) throws MathArithmeticException {"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,49,f (binomialCache.size() > n) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,50,ong cachedResult = binomialCache.get(n).get(Integer.valueOf(k));
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,51,f (cachedResult != null) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,52,eturn cachedResult.longValue();
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,55,ong result = -1;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,56,f ((n == k) || (k == 0)) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,57,esult = 1;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,58, else if ((k == 1) || (k == n - 1)) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,59,esult = n;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,60, else {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,61,/ Reduce stack depth for larger values of n
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,62,f (k < n - 100) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,63,"inomialCoefficient(n - 100, k);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,65,f (k > 100) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,66,"inomialCoefficient(n - 100, k - 100);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,68,"esult = ArithmeticsUtils.addAndCheck(binomialCoefficient(n - 1, k - 1),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,69,"inomialCoefficient(n - 1, k));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,71,f (result == -1) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,72,hrow new MathArithmeticException();
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,74,or (int i = binomialCache.size(); i < n + 1; i++) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,75,"inomialCache.add(new HashMap<Integer, Long>());"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,77,"inomialCache.get(n).put(Integer.valueOf(k), Long.valueOf(result));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,78,eturn result;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,81,"** Verify that b(0,0) = 1 */"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,82,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,83,ublic void test0Choose0() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,84,"ssert.assertEquals(MathUtils.binomialCoefficientDouble(0, 0), 1d, 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,85,"ssert.assertEquals(MathUtils.binomialCoefficientLog(0, 0), 0d, 0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,86,"ssert.assertEquals(MathUtils.binomialCoefficient(0, 0), 1);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,89,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,90,ublic void testBinomialCoefficient() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,91,ong[] bcoef5 = {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,92,","
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,93,","
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,94,"0,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,95,"0,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,96,","
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,97, };
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,98,ong[] bcoef6 = {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,99,","
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,100,","
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,101,"5,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,102,"0,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,103,"5,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,104,","
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,105, };
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,106,or (int i = 0; i < 6; i++) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,107,"ssert.assertEquals(""5 choose "" + i, bcoef5[i], MathUtils.binomialCoefficient(5, i));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,109,or (int i = 0; i < 7; i++) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,110,"ssert.assertEquals(""6 choose "" + i, bcoef6[i], MathUtils.binomialCoefficient(6, i));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,113,or (int n = 1; n < 10; n++) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,114,or (int k = 0; k <= n; k++) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,115,"ssert.assertEquals(n + "" choose "" + k, binomialCoefficient(n, k), MathUtils.binomialCoefficient(n, k));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,116,"ssert.assertEquals(n + "" choose "" + k, binomialCoefficient(n, k), MathUtils.binomialCoefficientDouble(n, k), Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,117,"ssert.assertEquals(n + "" choose "" + k, FastMath.log(binomialCoefficient(n, k)), MathUtils.binomialCoefficientLog(n, k), 10E-12);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,121,"nt[] n = { 34, 66, 100, 1500, 1500 };"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,122,"nt[] k = { 17, 33, 10, 1500 - 4, 4 };"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,123,or (int i = 0; i < n.length; i++) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,124,"ong expected = binomialCoefficient(n[i], k[i]);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,125,"ssert.assertEquals(n[i] + "" choose "" + k[i], expected,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,126,"athUtils.binomialCoefficient(n[i], k[i]));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,127,"ssert.assertEquals(n[i] + "" choose "" + k[i], expected,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,128,"athUtils.binomialCoefficientDouble(n[i], k[i]), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,129,"ssert.assertEquals(""log("" + n[i] + "" choose "" + k[i] + "")"", FastMath.log(expected),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,130,"athUtils.binomialCoefficientLog(n[i], k[i]), 0.0);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,135, Tests correctness for large n and sharpness of upper bound in API doc
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,136, JIRA: MATH-241
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,138,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,139,ublic void testBinomialCoefficientLarge() throws Exception {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,140,/ This tests all legal and illegal values for n <= 200.
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,141,or (int n = 0; n <= 200; n++) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,142,or (int k = 0; k <= n; k++) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,143,ong ourResult = -1;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,144,ong exactResult = -1;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,145,oolean shouldThrow = false;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,146,oolean didThrow = false;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,147,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,148,"urResult = MathUtils.binomialCoefficient(n, k);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,149, catch (MathArithmeticException ex) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,150,idThrow = true;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,152,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,153,"xactResult = binomialCoefficient(n, k);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,154, catch (MathArithmeticException ex) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,155,houldThrow = true;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,157,"ssert.assertEquals(n + "" choose "" + k, exactResult, ourResult);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,158,"ssert.assertEquals(n + "" choose "" + k, shouldThrow, didThrow);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,159,"ssert.assertTrue(n + "" choose "" + k, (n > 66 || !didThrow));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,161,f (!shouldThrow && exactResult > 1) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,162,"ssert.assertEquals(n + "" choose "" + k, 1.,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,163,"athUtils.binomialCoefficientDouble(n, k) / exactResult, 1e-10);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,164,"ssert.assertEquals(n + "" choose "" + k, 1,"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,165,"athUtils.binomialCoefficientLog(n, k) / FastMath.log(exactResult), 1e-10);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,170,"ong ourResult = MathUtils.binomialCoefficient(300, 3);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,171,"ong exactResult = binomialCoefficient(300, 3);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,172,"ssert.assertEquals(exactResult, ourResult);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,174,"urResult = MathUtils.binomialCoefficient(700, 697);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,175,"xactResult = binomialCoefficient(700, 697);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,176,"ssert.assertEquals(exactResult, ourResult);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,178,/ This one should throw
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,179,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,180,"athUtils.binomialCoefficient(700, 300);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,181,"ssert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,182, catch (MathArithmeticException ex) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,183,/ Expected
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,186,nt n = 10000;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,187,"urResult = MathUtils.binomialCoefficient(n, 3);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,188,"xactResult = binomialCoefficient(n, 3);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,189,"ssert.assertEquals(exactResult, ourResult);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,190,"ssert.assertEquals(1, MathUtils.binomialCoefficientDouble(n, 3) / exactResult, 1e-10);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,191,"ssert.assertEquals(1, MathUtils.binomialCoefficientLog(n, 3) / FastMath.log(exactResult), 1e-10);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,195,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,196,ublic void testBinomialCoefficientFail() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,197,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,198,"athUtils.binomialCoefficient(4, 5);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,199,"ssert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,200, catch (MathIllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,201,/ ignored
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,204,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,205,"athUtils.binomialCoefficientDouble(4, 5);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,206,"ssert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,207, catch (MathIllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,208,/ ignored
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,211,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,212,"athUtils.binomialCoefficientLog(4, 5);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,213,"ssert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,214, catch (MathIllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,215,/ ignored
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,218,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,219,"athUtils.binomialCoefficient(-1, -2);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,220,"ssert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,221, catch (MathIllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,222,/ ignored
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,224,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,225,"athUtils.binomialCoefficientDouble(-1, -2);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,226,"ssert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,227, catch (MathIllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,228,/ ignored
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,230,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,231,"athUtils.binomialCoefficientLog(-1, -2);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,232,"ssert.fail(""expecting MathIllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,233, catch (MathIllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,234,/ ignored
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,237,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,238,"athUtils.binomialCoefficient(67, 30);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,239,"ssert.fail(""expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,240, catch (MathArithmeticException ex) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,241,/ ignored
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,243,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,244,"athUtils.binomialCoefficient(67, 34);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,245,"ssert.fail(""expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,246, catch (MathArithmeticException ex) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,247,/ ignored
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,249,"ouble x = MathUtils.binomialCoefficientDouble(1030, 515);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,250,"ssert.assertTrue(""expecting infinite binomial coefficient"", Double"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,251,isInfinite(x));
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,383,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,384,ublic void testLcm() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,385,nt a = 30;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,386,nt b = 50;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,387,nt c = 77;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,389,"ssert.assertEquals(0, MathUtils.lcm(0, b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,390,"ssert.assertEquals(0, MathUtils.lcm(a, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,391,"ssert.assertEquals(b, MathUtils.lcm(1, b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,392,"ssert.assertEquals(a, MathUtils.lcm(a, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,393,"ssert.assertEquals(150, MathUtils.lcm(a, b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,394,"ssert.assertEquals(150, MathUtils.lcm(-a, b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,395,"ssert.assertEquals(150, MathUtils.lcm(a, -b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,396,"ssert.assertEquals(150, MathUtils.lcm(-a, -b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,397,"ssert.assertEquals(2310, MathUtils.lcm(a, c));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,399,/ Assert that no intermediate value overflows:
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,400,"/ The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,401,"ssert.assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,403,/ Special case
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,404,"ssert.assertEquals(0, MathUtils.lcm(0, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,406,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,407,/ lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,408,"athUtils.lcm(Integer.MIN_VALUE, 1);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,409,"ssert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,410, catch (MathArithmeticException expected) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,411,/ expected
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,414,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,415,/ lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,416,"athUtils.lcm(Integer.MIN_VALUE, 1<<20);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,417,"ssert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,418, catch (MathArithmeticException expected) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,419,/ expected
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,422,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,423,"athUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,424,"ssert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,425, catch (MathArithmeticException expected) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,426,/ expected
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,430,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,431,ublic void testLcmLong() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,432,ong a = 30;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,433,ong b = 50;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,434,ong c = 77;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,436,"ssert.assertEquals(0, MathUtils.lcm(0, b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,437,"ssert.assertEquals(0, MathUtils.lcm(a, 0));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,438,"ssert.assertEquals(b, MathUtils.lcm(1, b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,439,"ssert.assertEquals(a, MathUtils.lcm(a, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,440,"ssert.assertEquals(150, MathUtils.lcm(a, b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,441,"ssert.assertEquals(150, MathUtils.lcm(-a, b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,442,"ssert.assertEquals(150, MathUtils.lcm(a, -b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,443,"ssert.assertEquals(150, MathUtils.lcm(-a, -b));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,444,"ssert.assertEquals(2310, MathUtils.lcm(a, c));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,446,"ssert.assertEquals(Long.MAX_VALUE, MathUtils.lcm(60247241209L, 153092023L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,448,/ Assert that no intermediate value overflows:
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,449,"/ The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,450,"ssert.assertEquals((1L<<50)*15, MathUtils.lcm((1L<<45)*3, (1L<<50)*5));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,452,/ Special case
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,453,"ssert.assertEquals(0L, MathUtils.lcm(0L, 0L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,455,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,456,/ lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,457,"athUtils.lcm(Long.MIN_VALUE, 1);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,458,"ssert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,459, catch (MathArithmeticException expected) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,460,/ expected
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,463,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,464,/ lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,465,"athUtils.lcm(Long.MIN_VALUE, 1<<20);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,466,"ssert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,467, catch (MathArithmeticException expected) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,468,/ expected
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,471,"ssert.assertEquals((long) Integer.MAX_VALUE * (Integer.MAX_VALUE - 1),"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,472,"athUtils.lcm((long)Integer.MAX_VALUE, Integer.MAX_VALUE - 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,473,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,474,"athUtils.lcm(Long.MAX_VALUE, Long.MAX_VALUE - 1);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,475,"ssert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,476, catch (MathArithmeticException expected) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,477,/ expected
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,492,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,493,ublic void testMulAndCheck() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,494,nt big = Integer.MAX_VALUE;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,495,nt bigNeg = Integer.MIN_VALUE;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,496,"ssert.assertEquals(big, MathUtils.mulAndCheck(big, 1));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,497,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,498,"athUtils.mulAndCheck(big, 2);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,499,"ssert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,500, catch (MathArithmeticException ex) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,502,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,503,"athUtils.mulAndCheck(bigNeg, 2);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,504,"ssert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,505, catch (MathArithmeticException ex) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,509,Test
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,510,ublic void testMulAndCheckLong() {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,511,ong max = Long.MAX_VALUE;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,512,ong min = Long.MIN_VALUE;
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,513,"ssert.assertEquals(max, MathUtils.mulAndCheck(max, 1L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,514,"ssert.assertEquals(min, MathUtils.mulAndCheck(min, 1L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,515,"ssert.assertEquals(0L, MathUtils.mulAndCheck(max, 0L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,516,"ssert.assertEquals(0L, MathUtils.mulAndCheck(min, 0L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,517,"ssert.assertEquals(max, MathUtils.mulAndCheck(1L, max));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,518,"ssert.assertEquals(min, MathUtils.mulAndCheck(1L, min));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,519,"ssert.assertEquals(0L, MathUtils.mulAndCheck(0L, max));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,520,"ssert.assertEquals(0L, MathUtils.mulAndCheck(0L, min));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,521,"ssert.assertEquals(1L, MathUtils.mulAndCheck(-1L, -1L));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,522,"ssert.assertEquals(min, MathUtils.mulAndCheck(min / 2, 2));"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,523,"estMulAndCheckLongFailure(max, 2L);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,524,"estMulAndCheckLongFailure(2L, max);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,525,"estMulAndCheckLongFailure(min, 2L);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,526,"estMulAndCheckLongFailure(2L, min);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,527,"estMulAndCheckLongFailure(min, -1L);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,528,"estMulAndCheckLongFailure(-1L, min);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,531,"rivate void testMulAndCheckLongFailure(long a, long b) {"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,532,ry {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,533,"athUtils.mulAndCheck(a, b);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,534,"ssert.fail(""Expecting MathArithmeticException"");"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,535, catch (MathArithmeticException ex) {
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,536,/ success

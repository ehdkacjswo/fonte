is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,18,package org.apache.commons.math.distribution;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,20,import org.apache.commons.math.MathException;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,22,import org.junit.Test;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,25,* Test cases for AbstractIntegerDistribution default implementations
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,27,* @version $Id$
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,29,public class AbtractIntegerDistributionTest {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,31,protected final DiceDistribution diceDistribution = new DiceDistribution();
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,32,protected final double p = diceDistribution.probability(1);
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,34,@Test
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,35,public void testCumulativeProbabilitiesSingleIntegerArguments() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,36,int lower = 1;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,37,for (int i = 1; i < 7; i++) {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,38,"Assert.assertEquals(p * i,"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,39,"diceDistribution.cumulativeProbability(lower), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,40,lower++;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,42,"Assert.assertEquals(0,"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,43,"diceDistribution.cumulativeProbability(-1), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,44,"Assert.assertEquals(1,"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,45,"diceDistribution.cumulativeProbability(7), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,48,@Test
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,49,public void testCumulativeProbabilitiesSingleDoubleArguments() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,50,int lower = 1;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,51,double arg = 0;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,52,for (int i = 1; i < 7; i++) {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,53,// Exact integer
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,54,arg = lower;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,55,"Assert.assertEquals(p * i,"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,56,"diceDistribution.cumulativeProbability(arg), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,58,// Add a fraction
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,59,arg = lower + Math.random();
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,60,"Assert.assertEquals(p * i,"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,61,"diceDistribution.cumulativeProbability(arg), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,62,lower++;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,66,@Test
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,67,public void testCumulativeProbabilitiesRangeIntegerArguments() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,68,int lower = 1;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,69,int upper = 6;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,70,for (int i = 0; i < 2; i++) {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,71,"// cum(1,6) = p(1 <= X <= 6) = 1, cum(2,5) = 4/6, cum(3,4) = 2/6"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,72,"Assert.assertEquals(1 - p * 2 * i,"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,73,"diceDistribution.cumulativeProbability(lower, upper), 1E-12);"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,74,lower++;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,75,upper--;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,77,for (int i = 1; i < 7; i++) {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,78,"Assert.assertEquals(p, diceDistribution.cumulativeProbability(i, i), 1E-12);"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,82,@Test
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,83,public void testCumulativeProbabilitiesRangeDoubleArguments() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,84,int lower = 1;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,85,int upper = 6;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,86,double dlower = lower;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,87,double dupper = upper;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,88,for (int i = 0; i < 2; i++) {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,89,"// cum(1,6) = p(1 <= X <= 6) = 1, cum(2,5) = 4/6, cum(3,4) = 2/6"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,90,// Exact integers
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,91,"Assert.assertEquals(1 - p * 2 * i,"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,92,"diceDistribution.cumulativeProbability(dlower, dupper), 1E-12);"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,93,"// Subtract a fraction from lower, add to upper.  Should be no change."
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,94,dlower -= Math.random();
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,95,dupper += Math.random();
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,96,"Assert.assertEquals(1 - p * 2 * i,"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,97,"diceDistribution.cumulativeProbability(dlower, dupper), 1E-12);"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,98,lower++;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,99,upper--;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,100,dlower = lower;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,101,dupper = upper;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,103,for (int i = 1; i < 7; i++) {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,104,lower = i;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,105,"Assert.assertEquals(p, diceDistribution.cumulativeProbability("
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,106,"lower, lower), 1E-12);"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,107,"Assert.assertEquals(p, diceDistribution.cumulativeProbability("
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,108,"lower, lower + Math.random()), 1E-12);"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,109,"Assert.assertEquals(p, diceDistribution.cumulativeProbability("
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,110,"lower - Math.random(), lower), 1E-12);"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,111,"Assert.assertEquals(p, diceDistribution.cumulativeProbability("
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,112,"lower - Math.random(), lower + Math.random()), 1E-12);"
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,117,* Simple distribution modeling a 6-sided die
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,119,class DiceDistribution extends AbstractIntegerDistribution {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,120,public static final long serialVersionUID = 23734213;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,121,private final double p = 1d/6d;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,122,public double probability(int x) {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,123,if (x < 1 || x > 6) {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,124,return 0;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,125,} else {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,126,return p;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,130,@Override
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,131,public double cumulativeProbability(int x) throws MathException {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,132,if (x < 1) {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,133,return 0;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,134,} else if (x >= 6) {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,135,return 1;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,136,} else {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,137,return p * x;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,141,@Override
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,142,protected int getDomainLowerBound(double p) {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,143,return 1;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,146,@Override
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,147,protected int getDomainUpperBound(double p) {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,148,return 6;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,151,@Override
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,152,public int getSupportLowerBound() {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,153,return 1;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,156,@Override
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,157,public int getSupportUpperBound() {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,158,return 6;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,161,@Override
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,162,protected double calculateNumericalMean() {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,163,return 3.5;
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,166,@Override
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,167,protected double calculateNumericalVariance() {
True,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbtractIntegerDistributionTest.java,168,return 12.5 - 3.5 * 3.5;  // E(X^2) - E(X)^2

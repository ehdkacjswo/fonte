is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/Field.java,src/main/java/org/apache/commons/math/Field.java,52, Returns the runtime class of the FieldElement.
True,src/main/java/org/apache/commons/math/Field.java,src/main/java/org/apache/commons/math/Field.java,52,* Returns the runtime class of the FieldElement.
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,217, @param min the min bound for the interval
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,218, @param max the upper bound for the interval
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,217,* @param lower the min bound for the interval
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,218,* @param upper the upper bound for the interval
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,224,"inal double min, final double max)"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,224,"final double lower, final double upper)"
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,229,"nivariateRealSolverUtils.verifyInterval(min, max);"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,229,"UnivariateRealSolverUtils.verifyInterval(lower, upper);"
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,232,his.min = min;
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,233,his.max = max;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,232,this.min = lower;
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,233,this.max = upper;
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,243,"inal double min, final double max)"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,243,"final double lower, final double upper)"
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,248,"etup(maxEval, f, min, max);"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,248,"setup(maxEval, f, lower, upper);"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,271,rivate static interface RecurrenceCoefficientsGenerator {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,271,private interface RecurrenceCoefficientsGenerator {
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,275,hrows MathArithmeticException {
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistributionImpl.java,275,"throws NumberIsTooLargeException, FractionConversionException {"
False,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,170,ublic BigFraction(final double value) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,170,public BigFraction(final double value) throws MathIllegalArgumentException {
False,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,432,ublic static interface LeafMerger<S extends Space> {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,432,public interface LeafMerger<S extends Space> {
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,79,** Differential equations to integrate. */
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,80,rivate transient ExpandableStatefulODE equations;
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,79,/** Differential expandable to integrate. */
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,80,private transient ExpandableStatefulODE expandable;
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,192,his.equations = equations;
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,192,this.expandable = equations;
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,207,/ prepare expandable stateful equations
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,208,inal ExpandableStatefulODE expandable = new ExpandableStatefulODE(equations);
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,209,xpandable.setTime(t0);
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,210,xpandable.setPrimaryState(y0);
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,207,// prepare expandable stateful expandable
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,208,final ExpandableStatefulODE expandableODE = new ExpandableStatefulODE(equations);
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,209,expandableODE.setTime(t0);
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,210,expandableODE.setPrimaryState(y0);
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,213,"ntegrate(expandable, t);"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,213,"integrate(expandableODE, t);"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,215,/ extract results back from the stateful equations
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,216,"ystem.arraycopy(expandable.getPrimaryState(), 0, y, 0, y.length);"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,217,eturn expandable.getTime();
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,215,// extract results back from the stateful expandable
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,216,"System.arraycopy(expandableODE.getPrimaryState(), 0, y, 0, y.length);"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,217,return expandableODE.getTime();
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,221,** Integrate a set of differential equations up to the given time.
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,221,/** Integrate a set of differential expandable up to the given time.
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,223," <p>The set of differential equations is composed of a main set, which"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,224, can be extended by some sets of secondary equations. The set of
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,225, equations must be already set up with initial time and partial states.
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,223,"* <p>The set of differential expandable is composed of a main set, which"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,224,* can be extended by some sets of secondary expandable. The set of
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,225,* expandable must be already set up with initial time and partial states.
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,231, @param equations complete set of differential equations to integrate
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,231,* @param equations complete set of differential expandable to integrate
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,250,"quations.computeDerivatives(t, y, yDot);"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,250,"expandable.computeDerivatives(t, y, yDot);"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,377,* @param equations set of differential equations
False,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,40,inal int firstIndex;
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,40,private final int firstIndex;
False,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,43,inal int dimension;
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,43,private final int dimension;
False,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,315, @param first index index to use for the first element in the complete arrays
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,314,* @param firstIndex index to use for the first element in the complete arrays
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,157,* @param expandable expandable set into which variational equations should be registered
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,186, @param pode the parameterized ODE to compute the parameter Jacobian matrix using finite differences
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,187,* @param parameterizedOde the parameterized ODE to compute the parameter Jacobian matrix using finite differences
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,188,ublic void setParameterizedODE(final ParameterizedODE pode) {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,189,his.pode = pode;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,189,public void setParameterizedODE(final ParameterizedODE parameterizedOde) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,190,this.pode = parameterizedOde;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,230, @exception IllegalArgumentException if matrix dimensions are incorrect
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,231,* @exception DimensionMismatchException if matrix dimensions are incorrect
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,233,hrows MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,234,throws DimensionMismatchException {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,292,nt index = 0;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,293,int j = 0;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,294,"ystem.arraycopy(p, index, dYdY0[i], 0, stateDim);"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,295,ndex += stateDim;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,295,"System.arraycopy(p, j, dYdY0[i], 0, stateDim);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,296,j += stateDim;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,301, @param pName name of the parameter for the computed Jacobian matrix
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,302,* @param pName name of the parameter for the computed Jacobian matrix
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,309,nt index = stateDim * stateDim;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,310,int i = stateDim * stateDim;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,312,"ystem.arraycopy(p, index, dYdP, 0, stateDim);"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,313,reak;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,313,"System.arraycopy(p, i, dYdP, 0, stateDim);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,314,return;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,315,ndex += stateDim;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,316,i += stateDim;
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,297,ublic static interface NordsieckTransformer {
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,297,public interface NordsieckTransformer {
False,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,22,  the associated jacobian matrix by finite difference.
True,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,src/main/java/org/apache/commons/math/ode/ParameterConfiguration.java,22,*  the associated Jacobian matrix by finite difference.
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,27,mport org.apache.commons.math.ode.FirstOrderDifferentialEquations;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,47," extended ODE} rather than a {@link FirstOrderDifferentialEquations basic ODE}, then"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,46,* extended ODE} rather than a {@link
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,47,"* org.apache.commons.math.ode.FirstOrderDifferentialEquations basic ODE}, then"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,319,hrows MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,319,throws NumberIsTooSmallException {
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,436,ry {
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,437,/ save the local attributes
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,438,inalizeStep();
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,439, catch (Exception e) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,440,OException ioe = new IOException(e.getLocalizedMessage());
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,441,oe.initCause(e);
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,442,hrow ioe;
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,436,// save the local attributes
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,437,finalizeStep();
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,124,"llocateInterpolatedArrays(-1, null, null);"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,124,allocateInterpolatedArrays(-1);
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,150,"llocateInterpolatedArrays(y.length, primaryMapper, secondaryMappers);"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,150,allocateInterpolatedArrays(y.length);
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,181,urrentState = null;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,182,"llocateInterpolatedArrays(-1, null, null);"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,181,currentState     = null;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,182,primaryMapper    = null;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,183,secondaryMappers = null;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,184,allocateInterpolatedArrays(-1);
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,208, @param primaryMapper equations mapper for the primary equations set
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,209, @param secondaryMappers equations mappers for the secondary equations sets
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,211,"rivate void allocateInterpolatedArrays(final int dimension,"
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,212,"inal EquationsMapper primaryMapper,"
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,213,inal EquationsMapper[] secondaryMappers) {
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,211,private void allocateInterpolatedArrays(final int dimension) {
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,243, @param primaryMapper equations mapper for the primary equations set
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,244, @param secondaryMappers equations mappers for the secondary equations sets
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,241,* @param primary equations mapper for the primary equations set
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,242,* @param secondary equations mappers for the secondary equations sets
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,247,"inal EquationsMapper primaryMapper,"
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,248,inal EquationsMapper[] secondaryMappers) {
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,245,"final EquationsMapper primary,"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,246,final EquationsMapper[] secondary) {
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,260,his.primaryMapper    = primaryMapper;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,261,his.secondaryMappers = secondaryMappers.clone();
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,262,"llocateInterpolatedArrays(y.length, primaryMapper, secondaryMappers);"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,258,this.primaryMapper    = primary;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,259,this.secondaryMappers = secondary.clone();
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,260,allocateInterpolatedArrays(y.length);
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,543,ry {
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,544,inalizeStep();
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,545, catch (Exception e) {
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,546,OException ioe = new IOException(e.getLocalizedMessage());
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,547,oe.initCause(e);
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,548,hrow ioe;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,541,finalizeStep();
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,553,* @exception ClassNotFoundException if an equation mapper class
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,554,* cannot be found
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,590,"llocateInterpolatedArrays(dimension, primaryMapper, secondaryMappers);"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,584,allocateInterpolatedArrays(dimension);
False,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,45,ublic StorelessBivariateCovariance(){
True,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,45,public StorelessBivariateCovariance() {
False,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,48,ublic StorelessBivariateCovariance(boolean biasCorrected){
True,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,48,public StorelessBivariateCovariance(boolean biasCorrected) {
False,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,52,"ublic void increment(double x, double y){"
True,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,52,"public void increment(double x, double y) {"
False,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,58,ovarianceNumerator += ((n-1.0) / n) * deltaX * deltaY;
True,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,58,covarianceNumerator += ((n - 1.0) / n) * deltaX * deltaY;
False,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,61,ublic double getN(){
True,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,61,public double getN() {
False,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,65,ublic double getResult()throws IllegalArgumentException{
False,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,66,f (n < 2) throw new MathIllegalArgumentException(
False,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,67,"ocalizedFormats.INSUFFICIENT_DIMENSION, n, 2);"
False,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,68,f(biasCorrected){
True,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,65,public double getResult() throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,66,if (n < 2) {
True,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,67,"throw new MathIllegalArgumentException(LocalizedFormats.INSUFFICIENT_DIMENSION,"
True,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,68,"n, 2);"
True,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,70,if (biasCorrected) {
False,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,70,else{
True,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math/stat/correlation/StorelessBivariateCovariance.java,72,} else {
True,src/main/java/org/apache/commons/math/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math/stat/correlation/StorelessCovariance.java,112,* @return nothing as this implementation always throws a {@link MathUnsupportedOperationException}
True,src/main/java/org/apache/commons/math/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math/stat/correlation/StorelessCovariance.java,113,* @throws MathUnsupportedOperationException in all cases
False,src/main/java/org/apache/commons/math/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math/stat/correlation/StorelessCovariance.java,114,ublic int getN() {
True,src/main/java/org/apache/commons/math/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math/stat/correlation/StorelessCovariance.java,116,public int getN()
True,src/main/java/org/apache/commons/math/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math/stat/correlation/StorelessCovariance.java,117,throws MathUnsupportedOperationException {
False,src/main/java/org/apache/commons/math/stat/descriptive/package-info.java,src/main/java/org/apache/commons/math/stat/descriptive/package-info.java,27,"          System.out.println(""mean = "" + <span style=""font-weight: bold;"">stat.evaluate(values)</span>);<br/>"
True,src/main/java/org/apache/commons/math/stat/descriptive/package-info.java,src/main/java/org/apache/commons/math/stat/descriptive/package-info.java,27,"*          out.println(""mean = "" + <span style=""font-weight: bold;"">stat.evaluate(values)</span>);<br/>"
False,src/main/java/org/apache/commons/math/stat/descriptive/package-info.java,src/main/java/org/apache/commons/math/stat/descriptive/package-info.java,34,"          System.out.println(""mean before adding a value is NaN = "" + <span style=""font-weight: bold;"">stat.getResult()</span>);<br/>"
True,src/main/java/org/apache/commons/math/stat/descriptive/package-info.java,src/main/java/org/apache/commons/math/stat/descriptive/package-info.java,34,"*          out.println(""mean before adding a value is NaN = "" + <span style=""font-weight: bold;"">stat.getResult()</span>);<br/>"
False,src/main/java/org/apache/commons/math/stat/descriptive/package-info.java,src/main/java/org/apache/commons/math/stat/descriptive/package-info.java,37,"            &nbsp;&nbsp;&nbsp; System.out.println(""current mean = "" + <span style=""font-weight: bold;"">stat2.getResult()</span>);<br/>"
True,src/main/java/org/apache/commons/math/stat/descriptive/package-info.java,src/main/java/org/apache/commons/math/stat/descriptive/package-info.java,37,"*            &nbsp;&nbsp;&nbsp; out.println(""current mean = "" + <span style=""font-weight: bold;"">stat2.getResult()</span>);<br/>"
False,src/main/java/org/apache/commons/math/stat/descriptive/package-info.java,src/main/java/org/apache/commons/math/stat/descriptive/package-info.java,40,"          System.out.println(""mean after clear is NaN = "" + <span style=""font-weight: bold;"">stat.getResult()</span>);"
True,src/main/java/org/apache/commons/math/stat/descriptive/package-info.java,src/main/java/org/apache/commons/math/stat/descriptive/package-info.java,40,"*          out.println(""mean after clear is NaN = "" + <span style=""font-weight: bold;"">stat.getResult()</span>);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,19,import java.io.PrintStream;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,33, time does not penalise methods that don't need them.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,35,* time does not penalise methods that don't need them.
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,88,/** Constant 2<sup>10</sup>. */
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,348,"/ for numbers with magnitude 20 or so,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,351,"// for numbers with magnitude 20 or so,"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,408,"/ for values of z larger than about 20,"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,411,"// for values of z larger than about 20,"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,522,/ tanh[z] = sinh[z] / cosh[z]
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,525,// tanh[z] = sinh[z] / cosh[z]
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3633,"/ print out contents of arrays, and check the length"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3634,/ used to generate the preset arrays originally
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3635,ublic static void main(String[] a){
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3636,"astMathCalc.printarray(""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3637,"astMathCalc.printarray(""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3638,"astMathCalc.printarray(""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3639,"astMathCalc.printarray(""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3640,"astMathCalc.printarray(""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3641,"astMathCalc.printarray(""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3642,"astMathCalc.printarray(""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3643,"astMathCalc.printarray(""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3644,"astMathCalc.printarray(""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3645,"astMathCalc.printarray(""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3646,"astMathCalc.printarray(""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3637,"* Print out contents of arrays, and check the length."
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3638,* <p>used to generate the preset arrays originally.</p>
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3639,* @param a unused
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3641,public static void main(String[] a) {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3642,PrintStream out = System.out;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3643,"FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3644,"FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3645,"FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3646,"FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3647,"FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3648,"FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3649,"FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3650,"FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3651,"FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3652,"FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);"
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3653,"FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);"
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3659,/ Enclose large data table in nested static class so it's only loaded on first access
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,3666,/** Enclose large data table in nested static class so it's only loaded on first access. */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6712,/** Exponential fractions table length. */
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6707,/ Enclose large data table in nested static class so it's only loaded on first access
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,6715,/** Enclose large data table in nested static class so it's only loaded on first access. */
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8804,/** Logarithm table length. */
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8798,/ Enclose large data table in nested static class so it's only loaded on first access
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8807,/** Enclose large data table in nested static class so it's only loaded on first access. */
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8815,N_MANT = new double[][] {
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,8824,LN_MANT = new double[][] {
False,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,9,   http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,19,import java.io.PrintStream;
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,23,/** Class used to compute the classical functions tables.
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,24,* @version $Id$
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,25,* @since 3.0
False,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,32,rivate static final double FACT[] = new double[]
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,36,private static final double FACT[] = new double[]
False,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,34,"1.0d,                        // 0"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,38,"+1.0d,                        // 0"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,80,/** Table start declaration. */
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,81,"private static final String TABLE_START_DECL = ""    {"";"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,83,/** Table end declaration. */
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,84,"private static final String TABLE_END_DECL   = ""    };"";"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,87,* Private Constructor.
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,89,private FastMathCalc() {
False,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,77, @param SINE_TABLE_A
False,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,78, @param SINE_TABLE_B
False,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,79, @param COSINE_TABLE_A
False,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,80, @param COSINE_TABLE_B
False,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,81, @param SINE_TABLE_LEN
False,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,82, @param TANGENT_TABLE_A
False,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,83, @param TANGENT_TABLE_B
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,93,* @param SINE_TABLE_A table of the most significant part of the sines
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,94,* @param SINE_TABLE_B table of the least significant part of the sines
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,95,* @param COSINE_TABLE_A table of the most significant part of the cosines
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,96,* @param COSINE_TABLE_B table of the most significant part of the cosines
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,97,* @param SINE_TABLE_LEN length of the tables
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,98,* @param TANGENT_TABLE_A table of the most significant part of the tangents
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,99,* @param TANGENT_TABLE_B table of the most significant part of the tangents
False,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,86,"rivate static void buildSinCosTables(double[] SINE_TABLE_A, double[] SINE_TABLE_B, double[] COSINE_TABLE_A, double[] COSINE_TABLE_B, int SINE_TABLE_LEN, double[] TANGENT_TABLE_A, double[] TANGENT_TABLE_B) {"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,102,"private static void buildSinCosTables(double[] SINE_TABLE_A, double[] SINE_TABLE_B,"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,103,"double[] COSINE_TABLE_A, double[] COSINE_TABLE_B,"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,104,"int SINE_TABLE_LEN, double[] TANGENT_TABLE_A, double[] TANGENT_TABLE_B) {"
False,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,577,"tatic void printarray(String string, int expectedLen, double[][] array2d) {"
False,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,578,ystem.out.println(string);
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,596,* Print an array.
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,597,* @param out text output stream where output should be printed
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,598,* @param name array name
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,599,* @param expectedLen expected length of the array
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,600,* @param array2d array data
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,602,"static void printarray(PrintStream out, String name, int expectedLen, double[][] array2d) {"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,603,out.println(name);
False,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,580,"ystem.out.println(""    { "");"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,605,"out.println(TABLE_START_DECL + "" "");"
False,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,583,"ystem.out.print(""        {"");"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,608,"out.print(""        {"");"
False,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,585,"tring ds = d >= 0 ? ""+""+Double.toString(d)+""d,"" : Double.toString(d)+""d,"";"
False,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,586,"ystem.out.printf(""%-25.25s"",ds); // multiple entries per line"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,610,"out.printf(""%-25.25s"", format(d)); // multiple entries per line"
False,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,588,"ystem.out.println(""}, // ""+i++);"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,612,"out.println(""}, // "" + i++);"
False,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,590,"ystem.out.println(""    };"");"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,614,out.println(TABLE_END_DECL);
False,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,593,"tatic void printarray(String string, int expectedLen, double[] array) {"
False,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,594,"ystem.out.println(string+""="");"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,618,* Print an array.
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,619,* @param out text output stream where output should be printed
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,620,* @param name array name
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,621,* @param expectedLen expected length of the array
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,622,* @param array array data
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,624,"static void printarray(PrintStream out, String name, int expectedLen, double[] array) {"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,625,"out.println(name + ""="");"
False,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,596,"ystem.out.println(""    {"");"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,627,out.println(TABLE_START_DECL);
False,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,598,"tring ds = d!=d ? ""Double.NaN,"" : d >= 0 ? ""+""+Double.toString(d)+""d,"" : Double.toString(d)+""d,"";"
False,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,599,"ystem.out.printf(""        %s%n"",ds); // one entry per line"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,629,"out.printf(""        %s%n"", format(d)); // one entry per line"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,631,out.println(TABLE_END_DECL);
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,634,/** Format a double.
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,635,* @param d double number to format
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,636,* @return formatted number
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,638,static String format(double d) {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,639,if (d != d) {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,640,"return ""Double.NaN,"";"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,641,} else {
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,642,"return ((d >= 0) ? ""+"" : """") + Double.toString(d) + ""d,"";"
False,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,601,"ystem.out.println(""    };"");"
False,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,604,"rivate static void checkLen(int expectedLen, int actual) {"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,647,* Check two lengths are equal.
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,648,* @param expectedLen expected length
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,649,* @param actual actual length
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,650,* @exception DimensionMismatchException if the two lengths are not equal
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,652,"private static void checkLen(int expectedLen, int actual)"
True,src/main/java/org/apache/commons/math/util/FastMathCalc.java,src/main/java/org/apache/commons/math/util/FastMathCalc.java,653,throws DimensionMismatchException {
False,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,118, catch (IOException ioe) {
True,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,118,} catch (MathIllegalStateException mise) {
False,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,120,"ssert.assertEquals(0, ioe.getMessage().length());"
True,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,120,"Assert.assertEquals(0, mise.getMessage().length());"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,25,mport org.apache.commons.math.exception.NonMonotonicSequenceException;
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,26,mport org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,118,tatic final long serialVersionUID = 20120501L;
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,116,static final long serialVersionUID = 20120211L;
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,172,ublic double[] transform(double[] f) throws MathIllegalArgumentException {
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,174,f (orthogonal) {
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,175,inal double s = FastMath.sqrt(2.0 / (f.length - 1));
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,176,"eturn TransformUtils.scaleArray(fct(f), s);"
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,170,"public double[] transform(final double[] f, final TransformType type) {"
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,171,if (type == TransformType.FORWARD) {
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,172,if (orthogonal) {
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,173,final double s = FastMath.sqrt(2.0 / (f.length - 1));
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,174,"return TransformUtils.scaleArray(fct(f), s);"
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,176,return fct(f);
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,178,eturn fct(f);
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,182, {@inheritDoc}
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,184, @throws NonMonotonicSequenceException if the lower bound is greater
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,185," than, or equal to the upper bound"
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,186, @throws NotStrictlyPositiveException if the number of sample points is
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,187, negative
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,188, @throws MathIllegalArgumentException if the number of sample points is
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,189, not a power of two plus one
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,191,"ublic double[] transform(UnivariateFunction f,"
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,192,"ouble min, double max, int n) throws"
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,193,"onMonotonicSequenceException,"
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,194,"otStrictlyPositiveException,"
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,195,athIllegalArgumentException {
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,197,"inal double[] data = FunctionUtils.sample(f, min, max, n);"
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,198,eturn transform(data);
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,202, {@inheritDoc}
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,204, @throws MathIllegalArgumentException if the length of the data array is
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,205, not a power of two plus one
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,207,ublic double[] inverseTransform(double[] f) throws
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,208,athIllegalArgumentException {
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,218, @throws NonMonotonicSequenceException if the lower bound is greater
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,219," than, or equal to the upper bound"
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,220, @throws NotStrictlyPositiveException if the number of sample points is
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,221, negative
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,186,* @throws org.apache.commons.math.exception.NonMonotonicSequenceException
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,187,"* if the lower bound is greater than, or equal to the upper bound"
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,188,* @throws org.apache.commons.math.exception.NotStrictlyPositiveException
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,189,* if the number of sample points is negative
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,225,"ublic double[] inverseTransform(UnivariateFunction f,"
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,226,"ouble min, double max, int n) throws"
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,227,"onMonotonicSequenceException,"
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,228,"otStrictlyPositiveException,"
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,229,athIllegalArgumentException {
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,193,"public double[] transform(final UnivariateFunction f,"
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,194,"final double min, final double max, final int n,"
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,195,final TransformType type) {
False,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,232,eturn inverseTransform(data);
True,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java,198,"return transform(data, type);"
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,24,mport org.apache.commons.math.exception.NonMonotonicSequenceException;
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,25,mport org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,43,tatic final long serialVersionUID = 20120501L;
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,41,static final long serialVersionUID = 20120211L;
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,51,ublic double[] transform(double[] f) throws MathIllegalArgumentException {
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,52,eturn fht(f);
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,56, {@inheritDoc}
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,58, @throws NonMonotonicSequenceException if the lower bound is greater
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,59," than, or equal to the upper bound"
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,60, @throws NotStrictlyPositiveException if the number of sample points is
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,61, negative
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,62, @throws MathIllegalArgumentException if the number of sample points is
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,63, not a power of two
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,65,"ublic double[] transform(UnivariateFunction f,"
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,66,"ouble min, double max, int n) throws"
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,67,"onMonotonicSequenceException,"
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,68,"otStrictlyPositiveException,"
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,69,athIllegalArgumentException {
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,71,"eturn fht(FunctionUtils.sample(f, min, max, n));"
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,75, {@inheritDoc}
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,77, @throws MathIllegalArgumentException if the length of the data array is
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,78, not a power of two
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,80,ublic double[] inverseTransform(double[] f)
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,81,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,49,"public double[] transform(final double[] f, final TransformType type) {"
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,50,if (type == TransformType.FORWARD) {
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,51,return fht(f);
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,89, @throws NonMonotonicSequenceException if the lower bound is greater
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,90," than, or equal to the upper bound"
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,91, @throws NotStrictlyPositiveException if the number of sample points is
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,92, negative
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,59,* @throws org.apache.commons.math.exception.NonMonotonicSequenceException
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,60,"* if the lower bound is greater than, or equal to the upper bound"
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,61,* @throws org.apache.commons.math.exception.NotStrictlyPositiveException
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,62,* if the number of sample points is negative
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,96,"ublic double[] inverseTransform(UnivariateFunction f,"
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,97,"ouble min, double max, int n) throws"
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,98,"onMonotonicSequenceException,"
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,99,"otStrictlyPositiveException,"
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,100,athIllegalArgumentException {
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,66,"public double[] transform(final UnivariateFunction f,"
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,67,"final double min, final double max, final int n,"
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,68,final TransformType type) {
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,102,inal double[] unscaled =
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,103,"ht(FunctionUtils.sample(f, min, max, n));"
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,104,"eturn TransformUtils.scaleArray(unscaled, 1.0 / n);"
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,70,"return transform(FunctionUtils.sample(f, min, max, n), type);"
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,117,ublic int[] transform(int[] f) throws MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,83,public int[] transform(final int[] f) {
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,25,mport org.apache.commons.math.exception.NonMonotonicSequenceException;
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,26,mport org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,108, <p>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,109, As of version 2.0 this no longer implements Serializable.
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,110, </p>
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,118,tatic final long serialVersionUID = 20120501L;
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,113,static final long serialVersionUID = 20120211L;
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,174,ublic double[] transform(double[] f) throws MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,169,"public double[] transform(final double[] f, final TransformType type) {"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,179,eturn fst(f);
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,183, {@inheritDoc}
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,185, This implementation enforces {@code f(x) = 0.0} at {@code x = 0.0}.
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,187, @throws NonMonotonicSequenceException if the lower bound is greater
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,188," than, or equal to the upper bound"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,189, @throws NotStrictlyPositiveException if the number of sample points is
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,190, negative
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,191, @throws MathIllegalArgumentException if the number of sample points is
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,192, not a power of two
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,194,"ublic double[] transform(UnivariateFunction f,"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,195,"ouble min, double max, int n) throws"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,196,"onMonotonicSequenceException,"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,197,"otStrictlyPositiveException,"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,198,athIllegalArgumentException {
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,200,"inal double[] data = FunctionUtils.sample(f, min, max, n);"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,201,ata[0] = 0.0;
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,202,f (orthogonal) {
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,203,inal double s = FastMath.sqrt(2.0 / n);
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,204,"eturn TransformUtils.scaleArray(fst(data), s);"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,206,eturn fst(data);
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,210, {@inheritDoc}
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,212, The first element of the specified data set is required to be {@code 0}.
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,214, @throws MathIllegalArgumentException if the length of the data array is
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,215," not a power of two, or the first element of the data array is not zero"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,217,ublic double[] inverseTransform(double[] f)
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,218,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,220,f (orthogonal) {
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,221,eturn transform(f);
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,174,if (type == TransformType.FORWARD) {
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,175,return fst(f);
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,232, @throws NonMonotonicSequenceException if the lower bound is greater
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,233," than, or equal to the upper bound"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,234, @throws NotStrictlyPositiveException if the number of sample points is
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,235, negative
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,186,* @throws org.apache.commons.math.exception.NonMonotonicSequenceException
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,187,"* if the lower bound is greater than, or equal to the upper bound"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,188,* @throws org.apache.commons.math.exception.NotStrictlyPositiveException
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,189,* if the number of sample points is negative
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,239,"ublic double[] inverseTransform(UnivariateFunction f,"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,240,"ouble min, double max, int n) throws"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,241,"onMonotonicSequenceException,"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,242,"otStrictlyPositiveException,"
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,243,athIllegalArgumentException {
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,245,f (orthogonal) {
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,246,"eturn transform(f, min, max, n);"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,193,"public double[] transform(final UnivariateFunction f,"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,194,"final double min, final double max, final int n,"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,195,final TransformType type) {
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,251,inal double s = 2.0 / n;
False,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,253,"eturn TransformUtils.scaleArray(fst(data), s);"
True,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,src/main/java/org/apache/commons/math/transform/FastSineTransformer.java,199,"return transform(data, type);"
False,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,37, Returns the forward transform of the specified real data set.
True,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,37,"* Returns the (forward, inverse) transform of the specified real data set."
True,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,40,"* @param type the type of transform (forward, inverse) to be performed"
False,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,42,ouble[] transform(double[] f);
True,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,43,"double[] transform(double[] f, TransformType type);"
False,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,45," Returns the forward transform of the specified real function, sampled on"
False,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,46, the specified interval.
True,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,46,"* Returns the (forward, inverse) transform of the specified real function,"
True,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,47,* sampled on the specified interval.
True,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,53,"* @param type the type of transform (forward, inverse) to be performed"
True,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,55,* @throws org.apache.commons.math.exception.NonMonotonicSequenceException
True,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,56,"* if the lower bound is greater than, or equal to the upper bound"
True,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,57,* @throws org.apache.commons.math.exception.NotStrictlyPositiveException
True,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,58,* if the number of sample points is negative
False,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,54,"ouble[] transform(UnivariateFunction f, double min, double max, int n);"
False,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,57, Returns the inverse transform of the specified real data set.
False,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,59, @param f the real data array to be inversely transformed
False,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,60, @return the real inversely transformed array
False,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,62,ouble[] inverseTransform(double[] f);
False,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,65," Returns the inverse transform of the specified real function, sampled"
False,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,66, on the given interval.
False,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,68, @param f the function to be sampled and inversely transformed
False,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,69, @param min the (inclusive) lower bound for the interval
False,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,70, @param max the (exclusive) upper bound for the interval
False,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,71, @param n the number of sample points
False,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,72, @return the real inversely transformed array
False,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,74,"ouble[] inverseTransform(UnivariateFunction f, double min, double max, int n);"
True,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,60,"double[] transform(UnivariateFunction f,"
True,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,61,"double min, double max, int n,"
True,src/main/java/org/apache/commons/math/transform/RealTransformer.java,src/main/java/org/apache/commons/math/transform/RealTransformer.java,62,TransformType type);
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,25,import org.apache.commons.math.exception.MathIllegalStateException;
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,133,"ouble[] transform(final double[] x, final boolean forward) {"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,134,"double[] transform(final double[] x, final TransformType type) {"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,150,f (forward) {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,151,if (type == TransformType.FORWARD) {
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,152, else {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,153,} else if (type == TransformType.INVERSE) {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,155,} else {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,157,* Should never occur. This clause is a safeguard in case other
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,158,* types are used to TransformType (which should not be done).
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,160,throw new MathIllegalStateException();
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,179,esult = transformer.transform(x);
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,186,"result = transformer.transform(x, TransformType.FORWARD);"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,184,esult = transformer.inverseTransform(y);
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,191,"result = transformer.transform(y, TransformType.INVERSE);"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,192,esult = transformer.transform(y);
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,199,"result = transformer.transform(y, TransformType.FORWARD);"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,197,esult = transformer.inverseTransform(x);
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,204,"result = transformer.transform(x, TransformType.INVERSE);"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,212,"ransformer.transform(f, 1, -1, 65);"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,219,"transformer.transform(f, 1, -1, 65, TransformType.FORWARD);"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,219,"ransformer.transform(f, -1, 1, 1);"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,226,"transformer.transform(f, -1, 1, 1, TransformType.FORWARD);"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,227,"ransformer.transform(f, -1, 1, 64);"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,234,"transformer.transform(f, -1, 1, 64, TransformType.FORWARD);"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,250,"esult = transformer.transform(f, min, max, N);"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,257,"result = transformer.transform(f, min, max, N, TransformType.FORWARD);"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,257,"esult = transformer.transform(f, min, max, N);"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,264,"result = transformer.transform(f, min, max, N, TransformType.FORWARD);"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,520,"ystem.out.println(i + "", "" + j + "", "" + input[i][j] + "", "" +"
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,521,"oodOutput[i][j] + "", "" + output[i][j] + "", "");"
False,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,54,"ouble[] x = transformer.inverseTransform(new double[] { 0, 1, 0, 1});"
True,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,54,"double[] x = transformer.transform(new double[] { 0, 1, 0, 1}, TransformType.INVERSE);"
False,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,67,ew FastHadamardTransformer().transform(new double[3]);
True,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,67,"new FastHadamardTransformer().transform(new double[3], TransformType.FORWARD);"
False,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,89,ouble dResult[] = transformer.transform(dX);
True,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,89,"double dResult[] = transformer.transform(dX, TransformType.FORWARD);"
False,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,118,ouble dResult[] = transformer.inverseTransform(dY);
True,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java,118,"double dResult[] = transformer.transform(dY, TransformType.INVERSE);"
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,26,import org.apache.commons.math.exception.MathIllegalStateException;
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,146,"ouble[] transform(final double[] x, final boolean forward) {"
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,147,"double[] transform(final double[] x, final TransformType type) {"
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,161,f (forward) {
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,162,if (type == TransformType.FORWARD) {
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,163, else {
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,164,} else if (type == TransformType.INVERSE){
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,166,} else {
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,168,* Should never occur. This clause is a safeguard in case other
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,169,* types are used to TransformType (which should not be done).
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,171,throw new MathIllegalStateException();
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,173,Test(expected = MathIllegalArgumentException.class)
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,180,@Test
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,182,final TransformType[] type = TransformType.values();
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,179,ransformer.transform(data);
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,182,Test(expected = MathIllegalArgumentException.class)
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,183,ublic void testInverseTransformRealFirstElementNotZero() {
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,184,inal double[] data = new double[] {
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,185,".0, 1.0, 1.0, 1.0"
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,187,inal RealTransformer transformer = createRealTransformer();
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,188,ransformer.inverseTransform(data);
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,187,for (int j = 0; j < type.length; j++) {
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,188,try {
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,189,"transformer.transform(data, type[j]);"
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,190,Assert.fail(type[j].toString());
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,191,} catch (MathIllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,192,// Expected: do nothing
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,208,esult = transformer.transform(x);
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,214,"result = transformer.transform(x, TransformType.FORWARD);"
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,213,esult = transformer.inverseTransform(y);
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,219,"result = transformer.transform(y, TransformType.INVERSE);"
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,221,esult = transformer.transform(y);
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,227,"result = transformer.transform(y, TransformType.FORWARD);"
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,226,esult = transformer.inverseTransform(x);
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,232,"result = transformer.transform(x, TransformType.INVERSE);"
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,242,"esult = transformer.transform(f, min, max, N);"
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,248,"result = transformer.transform(f, min, max, N, TransformType.FORWARD);"
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,249,"esult = transformer.transform(f, min, max, N);"
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,255,"result = transformer.transform(f, min, max, N, TransformType.FORWARD);"
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,266,"ransformer.transform(f, 1, -1, 64);"
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,272,"transformer.transform(f, 1, -1, 64, TransformType.FORWARD);"
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,273,"ransformer.transform(f, -1, 1, 0);"
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,279,"transformer.transform(f, -1, 1, 0, TransformType.FORWARD);"
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,280,"ransformer.transform(f, -1, 1, 100);"
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,286,"transformer.transform(f, -1, 1, 100, TransformType.FORWARD);"
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,140, @param forward {@code true} (resp. {@code false}) if the forward (resp.
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,141, inverse) transform is to be performed
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,140,"* @param type the type of transform (forward, inverse) to be performed"
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,144,"bstract double[] transform(double[] x, boolean forward);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,143,"abstract double[] transform(double[] x, TransformType type);"
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,151, {@link RealTransformer#transform(double[])} should throw a
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,150,"* {@link RealTransformer#transform(double[], TransformType))} should throw a"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,155,final TransformType[] type = TransformType.values();
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,159,ry {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,160,ransformer.transform(createRealData(n));
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,161,ssert.fail(Integer.toString(n));
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,162, catch (MathIllegalArgumentException e) {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,163,/ Expected: do nothing
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,159,for (int j = 0; j < type.length; j++) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,160,try {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,161,"transformer.transform(createRealData(n), type[j]);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,162,"Assert.fail(type[j] + "", "" + n);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,163,} catch (MathIllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,164,// Expected: do nothing
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,169," {@link RealTransformer#transform(UnivariateFunction, double, double, int)}"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,171,"* {@link RealTransformer#transform(UnivariateFunction, double, double, int, TransformType)}"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,177,final TransformType[] type = TransformType.values();
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,181,ry {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,182,"ransformer.transform(f, a, b, n);"
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,183,ssert.fail(Integer.toString(n));
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,184, catch (MathIllegalArgumentException e) {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,185,/ Expected: do nothing
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,184,for (int j = 0; j < type.length; j++) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,185,try {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,186,"transformer.transform(f, a, b, n, type[j]);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,187,"Assert.fail(type[j] + "", "" + n);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,188,} catch (MathIllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,189,// Expected: do nothing
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,191," {@link RealTransformer#transform(UnivariateFunction, double, double, int)}"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,196,"* {@link RealTransformer#transform(UnivariateFunction, double, double, int, TransformType)}"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,202,final TransformType[] type = TransformType.values();
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,203,ry {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,204,"ransformer.transform(f, a, b, -n);"
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,205,ssert.fail(Integer.toString(-n));
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,206, catch (NotStrictlyPositiveException e) {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,207,/ Expected: do nothing
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,209,for (int j = 0; j < type.length; j++) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,210,try {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,211,"transformer.transform(f, a, b, -n, type[j]);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,212,"Assert.fail(type[j] + "", "" + (-n));"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,213,} catch (NotStrictlyPositiveException e) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,214,// Expected: do nothing
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,213," {@link RealTransformer#transform(UnivariateFunction, double, double, int)}"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,221,"* {@link RealTransformer#transform(UnivariateFunction, double, double, int, TransformType)}"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,227,final TransformType[] type = TransformType.values();
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,225,ry {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,226,"ransformer.transform(f, b, a, n);"
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,227,"ssert.fail(Double.toString(b) + "", "" + Double.toString(a));"
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,228, catch (NumberIsTooLargeException e) {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,229,/ Expected: do nothing
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,235, {@link RealTransformer#inverseTransform(double[])} should throw a
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,236, {@link MathIllegalArgumentException} if data size is invalid.
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,238,Test
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,239,ublic void testInverseTransformRealInvalidDataSize() {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,240,inal RealTransformer transformer = createRealTransformer();
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,241,or (int i = 0; i < getNumberOfInvalidDataSizes(); i++) {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,242,inal int n = getInvalidDataSize(i);
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,243,ry {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,244,ransformer.inverseTransform(createRealData(n));
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,245,ssert.fail(Integer.toString(n));
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,246, catch (MathIllegalArgumentException e) {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,247,/ Expected: do nothing
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,253," {@link RealTransformer#inverseTransform(UnivariateFunction, double, double, int)}"
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,254, should throw a {@link MathIllegalArgumentException} if number of samples
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,255, is invalid.
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,257,Test
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,258,ublic void testInverseTransformFunctionInvalidDataSize() {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,259,inal RealTransformer transformer = createRealTransformer();
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,260,inal UnivariateFunction f = getValidFunction();
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,261,inal double a = getValidLowerBound();
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,262,inal double b = getValidUpperBound();
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,263,or (int i = 0; i < getNumberOfInvalidDataSizes(); i++) {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,264,inal int n = getInvalidDataSize(i);
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,265,ry {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,266,"ransformer.inverseTransform(f, a, b, n);"
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,267,ssert.fail(Integer.toString(n));
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,268, catch (MathIllegalArgumentException e) {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,269,/ Expected: do nothing
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,275," {@link RealTransformer#inverseTransform(UnivariateFunction, double, double, int)}"
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,276, should throw a {@link NotStrictlyPositiveException} if number of samples
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,277, is not strictly positive.
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,279,Test
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,280,ublic void
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,281,estInverseTransformFunctionNotStrictlyPositiveNumberOfSamples() {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,282,inal RealTransformer transformer = createRealTransformer();
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,283,inal UnivariateFunction f = getValidFunction();
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,284,inal double a = getValidLowerBound();
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,285,inal double b = getValidUpperBound();
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,286,or (int i = 0; i < getNumberOfValidDataSizes(); i++) {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,287,inal int n = getValidDataSize(i);
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,288,ry {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,289,"ransformer.inverseTransform(f, a, b, -n);"
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,290,ssert.fail(Integer.toString(-n));
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,291, catch (NotStrictlyPositiveException e) {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,292,/ Expected: do nothing
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,298," {@link RealTransformer#inverseTransform(UnivariateFunction, double, double, int)}"
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,299, should throw a {@link NumberIsTooLargeException} if sampling bounds are
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,300, not correctly ordered.
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,302,Test
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,303,ublic void testInverseTransformFunctionInvalidBounds() {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,304,inal RealTransformer transformer = createRealTransformer();
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,305,inal UnivariateFunction f = getValidFunction();
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,306,inal double a = getValidLowerBound();
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,307,inal double b = getValidUpperBound();
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,308,or (int i = 0; i < getNumberOfValidDataSizes(); i++) {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,309,inal int n = getValidDataSize(i);
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,310,ry {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,311,"ransformer.inverseTransform(f, b, a, n);"
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,312,"ssert.fail(Double.toString(b) + "", "" + Double.toString(a));"
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,313, catch (NumberIsTooLargeException e) {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,314,/ Expected: do nothing
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,234,for (int j = 0; j < type.length; j++) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,235,try {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,236,"transformer.transform(f, b, a, n, type[j]);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,237,"Assert.fail(type[j] + "", "" + b + "", "" + a);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,238,} catch (NumberIsTooLargeException e) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,239,// Expected: do nothing
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,262,final TransformType[] type = TransformType.values();
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,339,"oTestTransformReal(n, tol, true);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,266,for (int j = 0; j < type.length; j++) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,267,"doTestTransformReal(n, tol, type[j]);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,285,final TransformType[] type = TransformType.values();
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,359,"oTestTransformFunction(n, tol, true);"
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,364, Accuracy check of {@link RealTransformer#inverseTransform(double[])}. For
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,365, each valid data size returned by
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,366," {@link #getValidDataSize(int) getValidDataSize(i)},"
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,367, a random data array is generated with
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,368, {@link RealTransformerAbstractTest#createRealData(int)}. The actual
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,369," transform is computed and compared to the expected transform, return by"
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,370," {@link #transform(double[], boolean)}. Actual and expected values should"
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,371, be equal to within the relative error returned by
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,372, {@link #getRelativeTolerance(int) getRelativeTolerance(i)}.
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,374,Test
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,375,ublic void testInverseTransformReal() {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,376,or (int i = 0; i < getNumberOfValidDataSizes(); i++) {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,377,inal int n = getValidDataSize(i);
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,378,inal double tol = getRelativeTolerance(i);
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,379,"oTestTransformReal(n, tol, false);"
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,384, Accuracy check of
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,385," {@link RealTransformer#inverseTransform(UnivariateFunction, double, double, int)}."
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,386, For each valid data size returned by
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,387," {@link #getValidDataSize(int) getValidDataSize(i)},"
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,388, the {@link UnivariateFunction} returned by {@link #getValidFunction()} is
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,389, sampled. The actual transform is computed and compared to the expected
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,390," transform, return by {@link #transform(double[], boolean)}. Actual and"
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,391, expected values should be equal to within the relative error returned by
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,392, {@link #getRelativeTolerance(int) getRelativeTolerance(i)}.
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,394,Test
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,395,ublic void testInverseTransformFunction() {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,396,or (int i = 0; i < getNumberOfValidDataSizes(); i++) {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,397,inal int n = getValidDataSize(i);
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,398,inal double tol = getRelativeTolerance(i);
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,399,"oTestTransformFunction(n, tol, false);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,289,for (int j = 0; j < type.length; j++) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,290,"doTestTransformFunction(n, tol, type[j]);"
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,428,inal boolean forward) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,320,final TransformType type) {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,431,"inal double[] expected = transform(x, forward);"
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,432,inal double[] actual;
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,433,f (forward) {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,434,ctual = transformer.transform(x);
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,435, else {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,436,ctual = transformer.inverseTransform(x);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,323,"final double[] expected = transform(x, type);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,324,"final double[] actual = transformer.transform(x, type);"
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,446,inal boolean forward) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,333,final TransformType type) {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,456,"inal double[] expected = transform(x, forward);"
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,457,inal double[] actual;
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,458,f (forward) {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,459,"ctual = transformer.transform(f, a, b, n);"
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,460, else {
False,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,461,"ctual = transformer.inverseTransform(f, a, b, n);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,343,"final double[] expected = transform(x, type);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,344,"final double[] actual = transformer.transform(f, a, b, n, type);"

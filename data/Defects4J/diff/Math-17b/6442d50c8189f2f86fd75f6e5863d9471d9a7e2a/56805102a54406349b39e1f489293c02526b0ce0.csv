is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,29, A helper class for the computation and caching of the {@code n}<sup>th</sup>
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,30, roots of unity.
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,29,* A helper class for the computation and caching of the {@code n}-th roots of
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,30,* unity.
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,46,** Imaginary part of the roots for forward transform. */
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,47,rivate double[] omegaImaginaryForward;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,47,"* Imaginary part of the {@code n}-th roots of unity, for positive values"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,48,"* of {@code n}. In this array, the roots are stored in counter-clockwise"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,49,* order.
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,51,private double[] omegaImaginaryCounterClockwise;
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,49,** Imaginary part of the roots for reverse transform. */
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,50,rivate double[] omegaImaginaryInverse;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,54,"* Imaginary part of the {@code n}-th roots of unity, for negative values"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,55,"* of {@code n}. In this array, the roots are stored in clockwise order."
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,57,private double[] omegaImaginaryClockwise;
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,52,** Forward/reverse indicator. */
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,53,rivate boolean isForward;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,60,* {@code true} if {@link #computeOmega(int)} was called with a positive
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,61,"* value of its argument {@code n}. In this case, counter-clockwise ordering"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,62,* of the roots of unity should be used.
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,64,private boolean isCounterClockWise;
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,56, Build an engine for computing the {@code n}<sup>th</sup> roots of
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,57, unity.
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,67,* Build an engine for computing the {@code n}-th roots of unity.
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,63,megaImaginaryForward = null;
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,64,megaImaginaryInverse = null;
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,65,sForward = true;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,73,omegaImaginaryCounterClockwise = null;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,74,omegaImaginaryClockwise = null;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,75,isCounterClockWise = true;
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,69, Check if computation has been done for forward or reverse transform.
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,79,* Returns {@code true} if {@link #computeOmega(int)} was called with a
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,80,"* positive value of its argument {@code n}. If {@code true}, then"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,81,* counter-clockwise ordering of the roots of unity should be used.
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,71, @return {@code true} if computation has been done for forward transform
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,83,* @return {@code true} if the roots of unity are stored in
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,84,* counter-clockwise order
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,75,ublic synchronized boolean isForward()
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,88,public synchronized boolean isCounterClockWise()
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,82,eturn isForward;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,95,return isCounterClockWise;
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,87, Computes the {@code n}<sup>th</sup> roots of unity. The roots are
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,88," stored in {@code omega[]}, such that {@code omega[k] = w ^ k}, where"
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,89," {@code k = 0, ..., n - 1}, {@code w = exp(-2 &pi; i / n)} and"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,100,* Computes the {@code n}-th roots of unity. The roots are stored in
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,101,"* {@code omega[]}, such that {@code omega[k] = w ^ k}, where"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,102,"* {@code k = 0, ..., n - 1}, {@code w = exp(2 * pi * i / n)} and"
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,93, Note that {@code n} is positive for forward transform and negative
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,94, for inverse transform.
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,106,* Note that {@code n} can be positive of negative
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,108,* <ul>
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,109,* <li>{@code abs(n)} is always the number of roots of unity.</li>
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,110,"* <li>If {@code n > 0}, then the roots are stored in counter-clockwise order.</li>"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,111,"* <li>If {@code n < 0}, then the roots are stored in clockwise order.</p>"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,112,* </ul>
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,97," @param n number of roots of unity to compute, positive for forward"
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,98," transform, negative for inverse transform"
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,114,* @param n the (signed) number of roots of unity to be computed
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,108,sForward = n > 0;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,124,isCounterClockWise = n > 0;
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,117,"/ calculate everything from scratch, for both forward and inverse"
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,118,/ versions
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,133,// calculate everything from scratch
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,123,megaImaginaryForward = new double[absN];
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,124,megaImaginaryInverse = new double[absN];
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,138,omegaImaginaryCounterClockwise = new double[absN];
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,139,omegaImaginaryClockwise = new double[absN];
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,126,megaImaginaryForward[0] = 0.0;
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,127,megaImaginaryInverse[0] = 0.0;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,141,omegaImaginaryCounterClockwise[0] = 0.0;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,142,omegaImaginaryClockwise[0] = 0.0;
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,129,megaReal[i] = omegaReal[i - 1] * cosT +
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,130,megaImaginaryForward[i - 1] * sinT;
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,131,megaImaginaryForward[i] = omegaImaginaryForward[i - 1] * cosT -
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,132,megaReal[i - 1] * sinT;
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,133,megaImaginaryInverse[i] = -omegaImaginaryForward[i];
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,144,omegaReal[i] = omegaReal[i - 1] * cosT -
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,145,omegaImaginaryCounterClockwise[i - 1] * sinT;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,146,omegaImaginaryCounterClockwise[i] = omegaReal[i - 1] * sinT +
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,147,omegaImaginaryCounterClockwise[i - 1] * cosT;
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,148,omegaImaginaryClockwise[i] = -omegaImaginaryCounterClockwise[i];
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,139, Get the real part of the {@code k}<sup>th</sup>
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,140, {@code n}<sup>th</sup> root of unity.
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,154,* Get the real part of the {@code k}-th {@code n}-th root of unity.
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,142, @param k index of the {@code n}<sup>th</sup> root of unity
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,143, @return real part of the {@code k}<sup>th</sup>
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,144, {@code n}<sup>th</sup> root of unity
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,156,* @param k index of the {@code n}-th root of unity
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,157,* @return real part of the {@code k}-th {@code n}-th root of unity
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,168, Get the imaginary part of the {@code k}<sup>th</sup>
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,169, {@code n}<sup>th</sup> root of unity.
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,181,* Get the imaginary part of the {@code k}-th {@code n}-th root of unity.
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,171, @param k index of the {@code n}<sup>th</sup> root of unity
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,172, @return imaginary part of the {@code k}<sup>th</sup>
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,173, {@code n}<sup>th</sup> root of unity
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,183,* @param k index of the {@code n}-th root of unity
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,184,* @return imaginary part of the {@code k}-th {@code n}-th root of unity
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,193,eturn isForward ? omegaImaginaryForward[k] :
False,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,194,megaImaginaryInverse[k];
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,204,return isCounterClockWise ? omegaImaginaryCounterClockwise[k] :
True,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,src/main/java/org/apache/commons/math/complex/RootsOfUnity.java,205,omegaImaginaryClockwise[k];

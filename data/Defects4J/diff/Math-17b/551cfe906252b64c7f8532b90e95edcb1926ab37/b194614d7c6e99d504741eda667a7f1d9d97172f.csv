is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,18,package org.apache.commons.math.ode.sampling;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,20,import java.io.IOException;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,21,import java.io.ObjectInput;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,22,import java.io.ObjectOutput;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,23,import java.util.Arrays;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,25,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,26,import org.apache.commons.math.linear.RealMatrix;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,27,import org.apache.commons.math.linear.RealMatrixImpl;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,28,import org.apache.commons.math.linear.RealMatrixPreservingVisitor;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,29,import org.apache.commons.math.ode.DerivativeException;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,30,import org.apache.commons.math.ode.nonstiff.AdamsIntegrator;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,33,* This class implements an interpolator for integrators using Nordsieck representation.
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,35,* <p>This interpolator computes dense output around the current point.
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,36,* The interpolation equation is based on Taylor series formulas.
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,38,* @see AdamsIntegrator
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,39,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,40,* @since 2.0
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,43,public class NordsieckStepInterpolator extends AbstractStepInterpolator {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,45,/** Serializable version identifier */
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,46,private static final long serialVersionUID = -7179861704951334960L;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,48,/** Step size used in the first scaled derivative and Nordsieck vector. */
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,49,private double scalingH;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,51,/** First scaled derivative. */
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,52,private double[] scaled;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,54,/** Nordsieck vector. */
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,55,private RealMatrix nordsieck;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,57,/** Simple constructor.
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,58,"* This constructor builds an instance that is not usable yet, the"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,59,* {@link AbstractStepInterpolator#reinitialize} method should be called
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,60,* before using the instance in order to initialize the internal arrays. This
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,61,* constructor is used only in order to delay the initialization in
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,62,* some cases.
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,64,public NordsieckStepInterpolator() {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,67,/** Copy constructor.
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,68,* @param interpolator interpolator to copy from. The copy is a deep
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,69,* copy: its arrays are separated from the original arrays of the
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,70,* instance
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,72,public NordsieckStepInterpolator(final NordsieckStepInterpolator interpolator) {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,73,super(interpolator);
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,74,scalingH = interpolator.scalingH;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,75,if (interpolator.scaled != null) {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,76,scaled = interpolator.scaled.clone();
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,78,if (interpolator.nordsieck != null) {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,79,nordsieck = interpolator.nordsieck.copy();
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,83,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,84,@Override
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,85,protected StepInterpolator doCopy() {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,86,return new NordsieckStepInterpolator(this);
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,89,/** Reinitialize the instance
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,90,* <p>Beware that all arrays <em>must</em> be references to integrator
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,91,"* arrays, in order to ensure proper update without copy.</p>"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,92,* @param y reference to the integrator array holding the state at
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,93,* the end of the step
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,94,* @param forward integration direction indicator
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,96,@Override
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,97,"public void reinitialize(final double[] y, final boolean forward) {"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,98,"super.reinitialize(y, forward);"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,101,/** Reinitialize the instance
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,102,* <p>Beware that all arrays <em>must</em> be references to integrator
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,103,"* arrays, in order to ensure proper update without copy.</p>"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,104,* @param scalingH step size used in the scaled and nordsieck arrays
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,105,* @param scaled reference to the integrator array holding the first
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,106,* scaled derivative
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,107,* @param nordsieck reference to the integrator matrix holding the
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,108,* nordsieck vector
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,110,"public void reinitialize(final double scalingH, final double[] scaled,"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,111,final RealMatrix nordsieck) {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,112,this.scalingH  = scalingH;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,113,this.scaled    = scaled;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,114,this.nordsieck = nordsieck;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,117,/** Store the current step time.
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,118,* @param t current time
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,120,@Override
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,121,public void storeTime(final double t) {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,122,currentTime      = t;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,123,h                = currentTime - previousTime;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,124,interpolatedTime = t;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,125,"computeInterpolatedState(1.0, 0.0);"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,128,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,129,@Override
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,130,"protected void computeInterpolatedState(final double theta, final double oneMinusThetaH) {"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,131,final double x = theta * h;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,132,"nordsieck.walkInOptimizedOrder(new StateEstimator(x, x / scalingH));"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,135,/** State estimator. */
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,136,private class StateEstimator implements RealMatrixPreservingVisitor {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,138,/** Scaling factor for derivative. */
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,139,private final double scale;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,141,/** First order power. */
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,142,private final double lowPower;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,144,/** High order powers. */
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,145,private final double[] highPowers;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,147,/** Simple constructor.
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,148,* @param scale scaling factor for derivative
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,149,* @param theta normalized interpolation abscissa within the step
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,151,"public StateEstimator(final double scale, final double theta) {"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,152,this.scale  = scale;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,153,lowPower   = theta;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,154,highPowers = new double[nordsieck.getRowDimension()];
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,155,double thetaN = theta;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,156,for (int i = 0; i < highPowers.length; ++i) {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,157,thetaN *= theta;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,158,highPowers[i] = thetaN;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,162,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,163,"public void start(int rows, int columns,"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,164,"int startRow, int endRow, int startColumn, int endColumn) {"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,165,"Arrays.fill(interpolatedState, 0.0);"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,166,"Arrays.fill(interpolatedDerivatives, 0.0);"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,169,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,170,"public void visit(int row, int column, double value) {"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,171,final double d = value * highPowers[row];
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,172,interpolatedState[column]       += d;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,173,interpolatedDerivatives[column] += (row + 2) * d;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,176,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,177,public double end() {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,178,for (int j = 0; j < currentState.length; ++j) {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,179,interpolatedState[j] += currentState[j] + scaled[j] * lowPower;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,180,interpolatedDerivatives[j] =
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,181,(interpolatedDerivatives[j] + scaled[j] * lowPower) / scale;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,183,return 0;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,188,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,189,@Override
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,190,public void writeExternal(final ObjectOutput out)
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,191,throws IOException {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,193,// save the state of the base class
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,194,writeBaseExternal(out);
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,196,// save the local attributes
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,197,final int n = (currentState == null) ? -1 : currentState.length;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,198,if (scaled == null) {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,199,out.writeBoolean(false);
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,200,} else {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,201,out.writeBoolean(true);
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,202,for (int j = 0; j < n; ++j) {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,203,out.writeDouble(scaled[j]);
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,207,if (nordsieck == null) {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,208,out.writeBoolean(false);
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,209,} else {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,210,out.writeBoolean(true);
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,211,final int rows = nordsieck.getRowDimension();
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,212,out.writeInt(rows);
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,213,for (int i = 0; i < rows; ++i) {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,214,for (int j = 0; j < n; ++j) {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,215,"out.writeDouble(nordsieck.getEntry(i, j));"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,222,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,223,@Override
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,224,public void readExternal(final ObjectInput in)
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,225,throws IOException {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,227,// read the base class
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,228,final double t = readBaseExternal(in);
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,230,// read the local attributes
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,231,final int n = (currentState == null) ? -1 : currentState.length;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,232,final boolean hasScaled = in.readBoolean();
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,233,if (hasScaled) {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,234,scaled = new double[n];
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,235,for (int j = 0; j < n; ++j) {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,236,scaled[j] = in.readDouble();
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,238,} else {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,239,scaled = null;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,242,final boolean hasNordsieck = in.readBoolean();
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,243,if (hasNordsieck) {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,244,final int rows = in.readInt();
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,245,final double[][] nData = new double[rows][n];
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,246,for (int i = 0; i < rows; ++i) {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,247,final double[] nI = nData[i];
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,248,for (int j = 0; j < n; ++j) {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,249,nI[j] = in.readDouble();
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,252,"nordsieck = new RealMatrixImpl(nData, false);"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,253,} else {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,254,nordsieck = null;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,257,try {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,258,if (hasScaled && hasNordsieck) {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,259,// we can now set the interpolated time and state
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,260,setInterpolatedTime(t);
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,262,} catch (DerivativeException e) {
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,263,throw MathRuntimeException.createIOException(e);
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,18,package org.apache.commons.math.ode.sampling;
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,20,import static org.junit.Assert.assertTrue;
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,22,import java.io.ByteArrayInputStream;
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,23,import java.io.ByteArrayOutputStream;
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,24,import java.io.IOException;
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,25,import java.io.ObjectInputStream;
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,26,import java.io.ObjectOutputStream;
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,27,import java.util.Random;
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,29,import org.apache.commons.math.ode.ContinuousOutputModel;
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,30,import org.apache.commons.math.ode.DerivativeException;
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,31,import org.apache.commons.math.ode.IntegratorException;
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,32,import org.apache.commons.math.ode.nonstiff.AdamsIntegrator;
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,33,import org.apache.commons.math.ode.nonstiff.TestProblem1;
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,34,import org.apache.commons.math.ode.nonstiff.TestProblem3;
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,35,import org.junit.Test;
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,37,public class NordsieckStepInterpolatorTest {
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,39,@Test
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,40,public void derivativesConsistency()
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,41,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,42,TestProblem3 pb = new TestProblem3();
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,43,double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,44,"AdamsIntegrator integ = new AdamsIntegrator(5, false, step);"
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,45,"StepInterpolatorTestUtils.checkDerivativesConsistency(integ, pb, 1.0e-10);"
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,48,@Test
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,49,public void serialization()
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,50,"throws DerivativeException, IntegratorException,"
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,51,"IOException, ClassNotFoundException {"
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,53,TestProblem1 pb = new TestProblem1();
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,54,double step = (pb.getFinalTime() - pb.getInitialTime()) * 0.001;
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,55,"AdamsIntegrator integ = new AdamsIntegrator(5, false, step);"
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,56,integ.addStepHandler(new ContinuousOutputModel());
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,57,"integ.integrate(pb,"
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,58,"pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,59,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,61,ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,62,ObjectOutputStream    oos = new ObjectOutputStream(bos);
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,63,for (StepHandler handler : integ.getStepHandlers()) {
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,64,oos.writeObject(handler);
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,67,assertTrue(bos.size () > 148000);
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,68,assertTrue(bos.size () < 149000);
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,70,ByteArrayInputStream  bis = new ByteArrayInputStream(bos.toByteArray());
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,71,ObjectInputStream     ois = new ObjectInputStream(bis);
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,72,ContinuousOutputModel cm  = (ContinuousOutputModel) ois.readObject();
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,74,Random random = new Random(347588535632l);
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,75,double maxError = 0.0;
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,76,for (int i = 0; i < 1000; ++i) {
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,77,double r = random.nextDouble();
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,78,double time = r * pb.getInitialTime() + (1.0 - r) * pb.getFinalTime();
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,79,cm.setInterpolatedTime(time);
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,80,double[] interpolatedY = cm.getInterpolatedState ();
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,81,double[] theoreticalY  = pb.computeTheoreticalState(time);
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,82,double dx = interpolatedY[0] - theoreticalY[0];
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,83,double dy = interpolatedY[1] - theoreticalY[1];
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,84,double error = dx * dx + dy * dy;
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,85,if (error > maxError) {
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,86,maxError = error;
True,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java,90,assertTrue(maxError < 1.0e-6);

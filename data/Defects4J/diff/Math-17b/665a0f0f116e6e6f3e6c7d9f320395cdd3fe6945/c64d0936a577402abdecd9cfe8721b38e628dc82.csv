is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,29,import org.apache.commons.math3.optimization.AbstractConvergenceChecker;
True,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,34,import org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker;
False,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,93,/ Line search tolerances can be much lower than the tolerances
False,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,94,/ required for the optimizer itself.
False,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,95,inal double minTol = 1e-4;
False,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,96,"inal double lsRel = Math.min(FastMath.sqrt(relativeThreshold), minTol);"
False,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,97,"inal double lsAbs = Math.min(FastMath.sqrt(absoluteThreshold), minTol);"
False,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,98,"ine = new LineSearch(lsRel, lsAbs);"
True,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,95,// Line search tolerances can be much less stringent than the tolerances
True,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,96,// required for the optimizer itself. XXX Is it still true with the new checker?
True,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,97,"line = new LineSearch(rel, abs);"
True,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,242,* Value that will pass the precondition check for {@link BrentOptimizer}
True,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,243,"* but will not pass the convergence check, so that the custom checker"
True,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,244,* will always decide when to stop the line search.
True,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,246,private static final double REL_TOL_UNUSED = 1e-15;
True,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,248,* Value that will pass the precondition check for {@link BrentOptimizer}
True,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,249,"* but will not pass the convergence check, so that the custom checker"
True,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,250,* will always decide when to stop the line search.
True,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,252,private static final double ABS_TOL_UNUSED = Double.MIN_VALUE;
True,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,259,"* The ""BrentOptimizer"" default stopping criterion uses the tolerances"
True,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,260,"* to check the domain (point) values, not the function values."
True,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,261,* We thus create a custom checker to use function values.
False,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,253,"uper(rel, abs);"
True,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,268,"super(REL_TOL_UNUSED,"
True,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,269,"ABS_TOL_UNUSED,"
True,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java,270,"new SimpleUnivariateValueChecker(rel, abs));"
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,24,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,121,* Ensure that we do not increase the number of function evaluations when
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,122,* the function values are scaled up.
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,123,* Note that the tolerances parameters passed to the constructor must
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,124,* still hold sensible values because they are used to set the line search
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,125,* tolerances.
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,127,@Test
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,128,public void testRelativeToleranceOnScaledValues() {
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,129,final MultivariateFunction func = new MultivariateFunction() {
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,130,public double value(double[] x) {
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,131,final double a = x[0] - 1;
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,132,final double b = x[1] - 1;
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,133,return a * a * FastMath.sqrt(FastMath.abs(a)) + b * b + 1;
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,137,int dim = 2;
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,138,final double[] minPoint = new double[dim];
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,139,for (int i = 0; i < dim; i++) {
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,140,minPoint[i] = 1;
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,143,double[] init = new double[dim];
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,144,// Initial is far from minimum.
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,145,for (int i = 0; i < dim; i++) {
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,146,init[i] = minPoint[i] - 20;
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,149,final double relTol = 1e-10;
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,151,final int maxEval = 1000;
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,152,// Very small absolute tolerance to rely solely on the relative
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,153,// tolerance as a stopping criterion
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,154,"final MultivariateOptimizer optim = new PowellOptimizer(relTol, 1e-100);"
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,156,"final PointValuePair funcResult = optim.optimize(maxEval, func, GoalType.MINIMIZE, init);"
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,157,final double funcValue = func.value(funcResult.getPoint());
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,158,final int funcEvaluations = optim.getEvaluations();
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,160,final double scale = 1e10;
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,161,final MultivariateFunction funcScaled = new MultivariateFunction() {
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,162,public double value(double[] x) {
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,163,return scale * func.value(x);
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,167,"final PointValuePair funcScaledResult = optim.optimize(maxEval, funcScaled, GoalType.MINIMIZE, init);"
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,168,final double funcScaledValue = funcScaled.value(funcScaledResult.getPoint());
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,169,final int funcScaledEvaluations = optim.getEvaluations();
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,171,"// Check that both minima provide the same objective funciton values,"
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,172,// within the relative function tolerance.
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,173,"Assert.assertEquals(1, funcScaledValue / (scale * funcValue), relTol);"
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,175,// Check that the numbers of evaluations are the same.
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,176,"Assert.assertEquals(funcEvaluations, funcScaledEvaluations);"
False,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,137,inal double[] found = result.getPoint();
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,197,final double[] point = result.getPoint();
False,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,140,"ssert.assertEquals(optimum[i], found[i], pointTol);"
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,200,"Assert.assertEquals(""found["" + i + ""]="" + point[i] + "" value="" + result.getValue(),"
True,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java,201,"optimum[i], point[i], pointTol);"

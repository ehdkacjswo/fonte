is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,21,import org.apache.commons.math3.optimization.general.GaussNewtonOptimizer;
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,22,import org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer;
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,23,import org.apache.commons.math3.optimization.SimpleVectorValueChecker;
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,25,import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,27,import org.apache.commons.math3.util.Precision;
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,141,@Test
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,142,public void testMath798() {
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,143,final double tol = 1e-14;
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,144,"final SimpleVectorValueChecker checker = new SimpleVectorValueChecker(tol, tol);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,145,"final double[] init = new double[] { 0, 0 };"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,146,final int maxEval = 3;
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,148,"final double[] lm = doMath798(new LevenbergMarquardtOptimizer(checker), maxEval, init);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,149,"final double[] gn = doMath798(new GaussNewtonOptimizer(checker), maxEval, init);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,151,for (int i = 0; i <= 1; i++) {
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,152,"Assert.assertEquals(lm[i], gn[i], tol);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,157,* @param optimizer Optimizer.
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,158,* @param maxEval Maximum number of function evaluations.
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,159,* @param init First guess.
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,160,* @return the solution found by the given optimizer.
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,162,"private double[] doMath798(DifferentiableMultivariateVectorOptimizer optimizer,"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,163,"int maxEval,"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,164,double[] init) {
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,165,final CurveFitter fitter = new CurveFitter(optimizer);
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,167,"fitter.addObservedPoint(-0.2, -7.12442E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,168,"fitter.addObservedPoint(-0.199, -4.33397E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,169,"fitter.addObservedPoint(-0.198, -2.823E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,170,"fitter.addObservedPoint(-0.197, -1.40405E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,171,"fitter.addObservedPoint(-0.196, -7.80821E-15);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,172,"fitter.addObservedPoint(-0.195, 6.20484E-14);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,173,"fitter.addObservedPoint(-0.194, 7.24673E-14);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,174,"fitter.addObservedPoint(-0.193, 1.47152E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,175,"fitter.addObservedPoint(-0.192, 1.9629E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,176,"fitter.addObservedPoint(-0.191, 2.12038E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,177,"fitter.addObservedPoint(-0.19, 2.46906E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,178,"fitter.addObservedPoint(-0.189, 2.77495E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,179,"fitter.addObservedPoint(-0.188, 2.51281E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,180,"fitter.addObservedPoint(-0.187, 2.64001E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,181,"fitter.addObservedPoint(-0.186, 2.8882E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,182,"fitter.addObservedPoint(-0.185, 3.13604E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,183,"fitter.addObservedPoint(-0.184, 3.14248E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,184,"fitter.addObservedPoint(-0.183, 3.1172E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,185,"fitter.addObservedPoint(-0.182, 3.12912E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,186,"fitter.addObservedPoint(-0.181, 3.06761E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,187,"fitter.addObservedPoint(-0.18, 2.8559E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,188,"fitter.addObservedPoint(-0.179, 2.86806E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,189,"fitter.addObservedPoint(-0.178, 2.985E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,190,"fitter.addObservedPoint(-0.177, 2.67148E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,191,"fitter.addObservedPoint(-0.176, 2.94173E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,192,"fitter.addObservedPoint(-0.175, 3.27528E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,193,"fitter.addObservedPoint(-0.174, 3.33858E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,194,"fitter.addObservedPoint(-0.173, 2.97511E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,195,"fitter.addObservedPoint(-0.172, 2.8615E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,196,"fitter.addObservedPoint(-0.171, 2.84624E-13);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,198,"final double[] coeff = fitter.fit(maxEval,"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,199,"new PolynomialFunction.Parametric(),"
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,200,init);
True,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java,201,return coeff;

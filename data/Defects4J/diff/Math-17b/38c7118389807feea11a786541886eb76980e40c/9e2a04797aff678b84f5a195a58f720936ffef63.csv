is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,151,f (! (another instanceof RandomKey))
True,src/java/org/apache/commons/math/genetics/RandomKey.java,src/java/org/apache/commons/math/genetics/RandomKey.java,151,if (! (another instanceof RandomKey<?>))
False,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,40,f (!(original instanceof RandomKey)) {
True,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/java/org/apache/commons/math/genetics/RandomKeyMutation.java,40,if (!(original instanceof RandomKey<?>)) {
False,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,184,f (v instanceof SparseFieldVector) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,184,if (v instanceof SparseFieldVector<?>) {
False,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,441,f(v instanceof SparseFieldVector)
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,441,if(v instanceof SparseFieldVector<?>)
False,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,516,f(v instanceof SparseFieldVector)
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,516,if(v instanceof SparseFieldVector<?>)
False,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,576,f (v instanceof SparseFieldVector) {
True,src/java/org/apache/commons/math/linear/SparseFieldVector.java,src/java/org/apache/commons/math/linear/SparseFieldVector.java,576,if (v instanceof SparseFieldVector<?>) {
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,616,rivate class MultiDimensionalComplexMatrix
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,617,"mplements Serializable, Cloneable {"
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,619,** Serializable version identifier. */
False,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,620,rivate static final long serialVersionUID =  0x564FCD47EBA8169BL;
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,616,private static class MultiDimensionalComplexMatrix
True,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/java/org/apache/commons/math/transform/FastFourierTransformer.java,617,implements Cloneable {
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,341, @param contractionCritera criteria to be checked
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,341,* @param contractionCriteria criteria to be checked
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,346,"loat contractionCritera,"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,346,"float contractionCriteria,"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,349,f (contractionCritera < expansionFactor) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,349,if (contractionCriteria < expansionFactor) {
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,354,"ontractionCritera, expansionFactor);"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,354,"contractionCriteria, expansionFactor);"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,368,ontractionCriteria);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,368,expansionFactor);
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,651,his.contractionCriteria = contractionCriteria;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,651,synchronized(this) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,652,this.contractionCriteria = contractionCriteria;
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,696,his.expansionFactor = expansionFactor;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,698,synchronized(this) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,699,this.expansionFactor = expansionFactor;
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,714,his.expansionMode = expansionMode;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,718,synchronized(this) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,719,this.expansionMode = expansionMode;
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,879,ublic int hashCode() {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,885,public synchronized int hashCode() {
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,884,ynchronized(this) {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,796,ublic double getA() {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,797,eturn a.getEstimate();
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,800,ublic double getB() {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,801,eturn b.getEstimate();
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,804,ublic double getC() {
False,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,805,eturn c.getEstimate();
False,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,31,"SuppressWarnings(""unused"")"
False,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,32,"ummyRandomKey drk = new DummyRandomKey(new Double[] {0.2, 0.3, 1.2});"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,31,"new DummyRandomKey(new Double[] {0.2, 0.3, 1.2});"
False,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,37,"SuppressWarnings(""unused"")"
False,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,38,"ummyRandomKey drk = new DummyRandomKey(new Double[] {0.2, 0.3, -0.2});"
True,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,src/test/org/apache/commons/math/genetics/RandomKeyTest.java,36,"new DummyRandomKey(new Double[] {0.2, 0.3, -0.2});"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,552,"heckGetSubMatrix(m, subRows23Cols00,  2 , 3 , 0, 0, false);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,553,"heckGetSubMatrix(m, subRows00Cols33,  0 , 0 , 3, 3, false);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,554,"heckGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3, false);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,555,"heckGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,556,"heckGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,557,"heckGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,558,"heckGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,559,"heckGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,560,"heckGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,561,"heckGetSubMatrix(m, null,  1, 0, 2, 4, true);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,562,"heckGetSubMatrix(m, null, -1, 1, 2, 2, true);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,563,"heckGetSubMatrix(m, null,  1, 0, 2, 2, true);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,564,"heckGetSubMatrix(m, null,  1, 0, 2, 4, true);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,565,"heckGetSubMatrix(m, null, new int[] {},    new int[] { 0 }, true);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,566,"heckGetSubMatrix(m, null, new int[] { 0 }, new int[] { 4 }, true);"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,552,"checkGetSubMatrix(m, subRows23Cols00,  2 , 3 , 0, 0);"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,553,"checkGetSubMatrix(m, subRows00Cols33,  0 , 0 , 3, 3);"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,554,"checkGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3);"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,555,"checkGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 });"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,556,"checkGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 });"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,557,"checkGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 });"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,558,"checkGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 });"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,559,"checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,560,"checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,561,"checkGetSubMatrix(m, null,  1, 0, 2, 4);"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,562,"checkGetSubMatrix(m, null, -1, 1, 2, 2);"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,563,"checkGetSubMatrix(m, null,  1, 0, 2, 2);"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,564,"checkGetSubMatrix(m, null,  1, 0, 2, 4);"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,565,"checkGetSubMatrix(m, null, new int[] {},    new int[] { 0 });"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,566,"checkGetSubMatrix(m, null, new int[] { 0 }, new int[] { 4 });"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,570,"nt startRow, int endRow, int startColumn, int endColumn,"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,571,oolean mustFail) {
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,570,"int startRow, int endRow, int startColumn, int endColumn) {"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,574,"ssertEquals(new BlockFieldMatrix<Fraction>(reference), sub);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,575,f (mustFail) {
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,573,if (reference != null) {
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,574,"assertEquals(new BlockFieldMatrix<Fraction>(reference), sub);"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,575,} else {
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,579,f (!mustFail) {
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,579,if (reference != null) {
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,586,"nt[] selectedRows, int[] selectedColumns,"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,587,oolean mustFail) {
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,586,"int[] selectedRows, int[] selectedColumns) {"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,590,"ssertEquals(new BlockFieldMatrix<Fraction>(reference), sub);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,591,f (mustFail) {
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,592,"ail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,589,if (reference != null) {
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,590,"assertEquals(new BlockFieldMatrix<Fraction>(reference), sub);"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,591,} else {
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,592,"fail(""Expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,595,f (!mustFail) {
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,595,if (reference != null) {
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,624,"heckCopy(m, subRows23Cols00,  2 , 3 , 0, 0, false);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,625,"heckCopy(m, subRows00Cols33,  0 , 0 , 3, 3, false);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,626,"heckCopy(m, subRows01Cols23,  0 , 1 , 2, 3, false);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,627,"heckCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,628,"heckCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,629,"heckCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,630,"heckCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,631,"heckCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,632,"heckCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,624,"checkCopy(m, subRows23Cols00,  2 , 3 , 0, 0);"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,625,"checkCopy(m, subRows00Cols33,  0 , 0 , 3, 3);"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,626,"checkCopy(m, subRows01Cols23,  0 , 1 , 2, 3);"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,627,"checkCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 });"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,628,"checkCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 });"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,629,"checkCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 });"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,630,"checkCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 });"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,631,"checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,632,"checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,634,"heckCopy(m, null,  1, 0, 2, 4, true);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,635,"heckCopy(m, null, -1, 1, 2, 2, true);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,636,"heckCopy(m, null,  1, 0, 2, 2, true);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,637,"heckCopy(m, null,  1, 0, 2, 4, true);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,638,"heckCopy(m, null, new int[] {},    new int[] { 0 }, true);"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,639,"heckCopy(m, null, new int[] { 0 }, new int[] { 4 }, true);"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,634,"checkCopy(m, null,  1, 0, 2, 4);"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,635,"checkCopy(m, null, -1, 1, 2, 2);"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,636,"checkCopy(m, null,  1, 0, 2, 2);"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,637,"checkCopy(m, null,  1, 0, 2, 4);"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,638,"checkCopy(m, null, new int[] {},    new int[] { 0 });"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,639,"checkCopy(m, null, new int[] { 0 }, new int[] { 4 });"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,643,"nt startRow, int endRow, int startColumn, int endColumn,"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,644,oolean mustFail) {
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,643,"int startRow, int endRow, int startColumn, int endColumn) {"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,650,"ssertEquals(new BlockFieldMatrix<Fraction>(reference), new BlockFieldMatrix<Fraction>(sub));"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,651,f (mustFail) {
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,652,"ail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,649,if (reference != null) {
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,650,"assertEquals(new BlockFieldMatrix<Fraction>(reference), new BlockFieldMatrix<Fraction>(sub));"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,651,} else {
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,652,"fail(""Expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,655,f (!mustFail) {
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,655,if (reference != null) {
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,662,"nt[] selectedRows, int[] selectedColumns,"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,663,oolean mustFail) {
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,662,"int[] selectedRows, int[] selectedColumns) {"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,669,"ssertEquals(new BlockFieldMatrix<Fraction>(reference), new BlockFieldMatrix<Fraction>(sub));"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,670,f (mustFail) {
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,671,"ail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,668,if (reference != null) {
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,669,"assertEquals(new BlockFieldMatrix<Fraction>(reference), new BlockFieldMatrix<Fraction>(sub));"
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,670,} else {
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,671,"fail(""Expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,674,f (!mustFail) {
True,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,674,if (reference != null) {
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,479,"heckGetSubMatrix(m, subRows23Cols00,  2 , 3 , 0, 0, false);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,480,"heckGetSubMatrix(m, subRows00Cols33,  0 , 0 , 3, 3, false);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,481,"heckGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3, false);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,482,"heckGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,483,"heckGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,484,"heckGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,485,"heckGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,486,"heckGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,487,"heckGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,488,"heckGetSubMatrix(m, null,  1, 0, 2, 4, true);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,489,"heckGetSubMatrix(m, null, -1, 1, 2, 2, true);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,490,"heckGetSubMatrix(m, null,  1, 0, 2, 2, true);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,491,"heckGetSubMatrix(m, null,  1, 0, 2, 4, true);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,492,"heckGetSubMatrix(m, null, new int[] {},    new int[] { 0 }, true);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,493,"heckGetSubMatrix(m, null, new int[] { 0 }, new int[] { 4 }, true);"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,479,"checkGetSubMatrix(m, subRows23Cols00,  2 , 3 , 0, 0);"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,480,"checkGetSubMatrix(m, subRows00Cols33,  0 , 0 , 3, 3);"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,481,"checkGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3);"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,482,"checkGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 });"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,483,"checkGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 });"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,484,"checkGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 });"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,485,"checkGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 });"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,486,"checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,487,"checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,488,"checkGetSubMatrix(m, null,  1, 0, 2, 4);"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,489,"checkGetSubMatrix(m, null, -1, 1, 2, 2);"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,490,"checkGetSubMatrix(m, null,  1, 0, 2, 2);"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,491,"checkGetSubMatrix(m, null,  1, 0, 2, 4);"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,492,"checkGetSubMatrix(m, null, new int[] {},    new int[] { 0 });"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,493,"checkGetSubMatrix(m, null, new int[] { 0 }, new int[] { 4 });"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,497,"nt startRow, int endRow, int startColumn, int endColumn,"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,498,oolean mustFail) {
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,497,"int startRow, int endRow, int startColumn, int endColumn) {"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,501,"ssertEquals(new BlockRealMatrix(reference), sub);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,502,f (mustFail) {
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,503,"ail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,500,if (reference != null) {
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,501,"assertEquals(new BlockRealMatrix(reference), sub);"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,502,} else {
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,503,"fail(""Expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,506,f (!mustFail) {
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,506,if (reference != null) {
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,513,"nt[] selectedRows, int[] selectedColumns,"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,514,oolean mustFail) {
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,513,"int[] selectedRows, int[] selectedColumns) {"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,517,"ssertEquals(new BlockRealMatrix(reference), sub);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,518,f (mustFail) {
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,519,"ail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,516,if (reference != null) {
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,517,"assertEquals(new BlockRealMatrix(reference), sub);"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,518,} else {
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,519,"fail(""Expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,522,f (!mustFail) {
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,522,if (reference != null) {
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,549,"heckCopy(m, subRows23Cols00,  2 , 3 , 0, 0, false);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,550,"heckCopy(m, subRows00Cols33,  0 , 0 , 3, 3, false);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,551,"heckCopy(m, subRows01Cols23,  0 , 1 , 2, 3, false);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,552,"heckCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,553,"heckCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,554,"heckCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,555,"heckCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,556,"heckCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,557,"heckCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,549,"checkCopy(m, subRows23Cols00,  2 , 3 , 0, 0);"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,550,"checkCopy(m, subRows00Cols33,  0 , 0 , 3, 3);"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,551,"checkCopy(m, subRows01Cols23,  0 , 1 , 2, 3);"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,552,"checkCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 });"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,553,"checkCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 });"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,554,"checkCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 });"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,555,"checkCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 });"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,556,"checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,557,"checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,559,"heckCopy(m, null,  1, 0, 2, 4, true);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,560,"heckCopy(m, null, -1, 1, 2, 2, true);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,561,"heckCopy(m, null,  1, 0, 2, 2, true);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,562,"heckCopy(m, null,  1, 0, 2, 4, true);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,563,"heckCopy(m, null, new int[] {},    new int[] { 0 }, true);"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,564,"heckCopy(m, null, new int[] { 0 }, new int[] { 4 }, true);"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,559,"checkCopy(m, null,  1, 0, 2, 4);"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,560,"checkCopy(m, null, -1, 1, 2, 2);"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,561,"checkCopy(m, null,  1, 0, 2, 2);"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,562,"checkCopy(m, null,  1, 0, 2, 4);"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,563,"checkCopy(m, null, new int[] {},    new int[] { 0 });"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,564,"checkCopy(m, null, new int[] { 0 }, new int[] { 4 });"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,568,"nt startRow, int endRow, int startColumn, int endColumn,"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,569,oolean mustFail) {
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,568,"int startRow, int endRow, int startColumn, int endColumn) {"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,575,"ssertEquals(new BlockRealMatrix(reference), new BlockRealMatrix(sub));"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,576,f (mustFail) {
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,577,"ail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,574,if (reference != null) {
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,575,"assertEquals(new BlockRealMatrix(reference), new BlockRealMatrix(sub));"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,576,} else {
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,577,"fail(""Expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,580,f (!mustFail) {
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,580,if (reference != null) {
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,587,"nt[] selectedRows, int[] selectedColumns,"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,588,oolean mustFail) {
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,587,"int[] selectedRows, int[] selectedColumns) {"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,594,"ssertEquals(new BlockRealMatrix(reference), new BlockRealMatrix(sub));"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,595,f (mustFail) {
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,596,"ail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,593,if (reference != null) {
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,594,"assertEquals(new BlockRealMatrix(reference), new BlockRealMatrix(sub));"
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,595,} else {
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,596,"fail(""Expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,599,f (!mustFail) {
True,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,599,if (reference != null) {
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,296,ouble multiplier = 1d;
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,296,double multiplier = 1.0;
False,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,302,f (multiplier == 1d && Math.abs(colEntry) > 1E-14
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,302,if (Math.abs(multiplier - 1.0) <= Math.ulp(1.0) && Math.abs(colEntry) > 1E-14
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,366,"heckGetSubMatrix(m, subRows23Cols00,  2 , 3 , 0, 0, false);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,367,"heckGetSubMatrix(m, subRows00Cols33,  0 , 0 , 3, 3, false);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,368,"heckGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3, false);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,369,"heckGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,370,"heckGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,371,"heckGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,372,"heckGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,373,"heckGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,374,"heckGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,375,"heckGetSubMatrix(m, null,  1, 0, 2, 4, true);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,376,"heckGetSubMatrix(m, null, -1, 1, 2, 2, true);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,377,"heckGetSubMatrix(m, null,  1, 0, 2, 2, true);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,378,"heckGetSubMatrix(m, null,  1, 0, 2, 4, true);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,379,"heckGetSubMatrix(m, null, new int[] {},    new int[] { 0 }, true);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,380,"heckGetSubMatrix(m, null, new int[] { 0 }, new int[] { 4 }, true);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,366,"checkGetSubMatrix(m, subRows23Cols00,  2 , 3 , 0, 0);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,367,"checkGetSubMatrix(m, subRows00Cols33,  0 , 0 , 3, 3);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,368,"checkGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,369,"checkGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 });"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,370,"checkGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 });"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,371,"checkGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 });"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,372,"checkGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 });"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,373,"checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,374,"checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,375,"checkGetSubMatrix(m, null,  1, 0, 2, 4);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,376,"checkGetSubMatrix(m, null, -1, 1, 2, 2);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,377,"checkGetSubMatrix(m, null,  1, 0, 2, 2);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,378,"checkGetSubMatrix(m, null,  1, 0, 2, 4);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,379,"checkGetSubMatrix(m, null, new int[] {},    new int[] { 0 });"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,380,"checkGetSubMatrix(m, null, new int[] { 0 }, new int[] { 4 });"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,384,"nt startRow, int endRow, int startColumn, int endColumn,"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,385,oolean mustFail) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,384,"int startRow, int endRow, int startColumn, int endColumn) {"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,388,"ssertEquals(new Array2DRowFieldMatrix<Fraction>(reference), sub);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,389,f (mustFail) {
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,390,"ail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,387,if (reference != null) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,388,"assertEquals(new Array2DRowFieldMatrix<Fraction>(reference), sub);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,389,} else {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,390,"fail(""Expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,393,f (!mustFail) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,393,if (reference != null) {
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,400,"nt[] selectedRows, int[] selectedColumns,"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,401,oolean mustFail) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,400,"int[] selectedRows, int[] selectedColumns) {"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,404,"ssertEquals(new Array2DRowFieldMatrix<Fraction>(reference), sub);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,405,f (mustFail) {
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,406,"ail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,403,if (reference != null) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,404,"assertEquals(new Array2DRowFieldMatrix<Fraction>(reference), sub);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,405,} else {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,406,"fail(""Expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,409,f (!mustFail) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,409,if (reference != null) {
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,417,"heckCopy(m, subRows23Cols00,  2 , 3 , 0, 0, false);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,418,"heckCopy(m, subRows00Cols33,  0 , 0 , 3, 3, false);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,419,"heckCopy(m, subRows01Cols23,  0 , 1 , 2, 3, false);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,420,"heckCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,421,"heckCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,422,"heckCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,423,"heckCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,424,"heckCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,425,"heckCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,417,"checkCopy(m, subRows23Cols00,  2 , 3 , 0, 0);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,418,"checkCopy(m, subRows00Cols33,  0 , 0 , 3, 3);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,419,"checkCopy(m, subRows01Cols23,  0 , 1 , 2, 3);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,420,"checkCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 });"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,421,"checkCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 });"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,422,"checkCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 });"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,423,"checkCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 });"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,424,"checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,425,"checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,427,"heckCopy(m, null,  1, 0, 2, 4, true);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,428,"heckCopy(m, null, -1, 1, 2, 2, true);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,429,"heckCopy(m, null,  1, 0, 2, 2, true);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,430,"heckCopy(m, null,  1, 0, 2, 4, true);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,431,"heckCopy(m, null, new int[] {},    new int[] { 0 }, true);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,432,"heckCopy(m, null, new int[] { 0 }, new int[] { 4 }, true);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,427,"checkCopy(m, null,  1, 0, 2, 4);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,428,"checkCopy(m, null, -1, 1, 2, 2);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,429,"checkCopy(m, null,  1, 0, 2, 2);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,430,"checkCopy(m, null,  1, 0, 2, 4);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,431,"checkCopy(m, null, new int[] {},    new int[] { 0 });"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,432,"checkCopy(m, null, new int[] { 0 }, new int[] { 4 });"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,436,"nt startRow, int endRow, int startColumn, int endColumn,"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,437,oolean mustFail) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,436,"int startRow, int endRow, int startColumn, int endColumn) {"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,443,"ssertEquals(new Array2DRowFieldMatrix<Fraction>(reference), new Array2DRowFieldMatrix<Fraction>(sub));"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,444,f (mustFail) {
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,445,"ail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,442,if (reference != null) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,443,"assertEquals(new Array2DRowFieldMatrix<Fraction>(reference), new Array2DRowFieldMatrix<Fraction>(sub));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,444,} else {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,445,"fail(""Expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,448,f (!mustFail) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,448,if (reference != null) {
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,455,"nt[] selectedRows, int[] selectedColumns,"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,456,oolean mustFail) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,455,"int[] selectedRows, int[] selectedColumns) {"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,462,"ssertEquals(new Array2DRowFieldMatrix<Fraction>(reference), new Array2DRowFieldMatrix<Fraction>(sub));"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,463,f (mustFail) {
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,464,"ail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,461,if (reference != null) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,462,"assertEquals(new Array2DRowFieldMatrix<Fraction>(reference), new Array2DRowFieldMatrix<Fraction>(sub));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,463,} else {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,464,"fail(""Expecting MatrixIndexException"");"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,467,f (!mustFail) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,467,if (reference != null) {
False,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,152,ssertTrue(m2 instanceof SparseFieldMatrix);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,152,"assertEquals(m1.getClass(), m2.getClass());"
False,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,156,ssertTrue(m4 instanceof SparseFieldMatrix);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,156,"assertEquals(m3.getClass(), m4.getClass());"
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,133,ssertTrue(m2 instanceof OpenMapRealMatrix);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,133,"assertEquals(m1.getClass(), m2.getClass());"
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,137,ssertTrue(m4 instanceof OpenMapRealMatrix);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,137,"assertEquals(m3.getClass(), m4.getClass());"
False,src/test/org/apache/commons/math/ode/TestProblem1.java,src/test/org/apache/commons/math/ode/TestProblem1.java,66, Clone operation.
False,src/test/org/apache/commons/math/ode/TestProblem1.java,src/test/org/apache/commons/math/ode/TestProblem1.java,67, @return a copy of the instance
False,src/test/org/apache/commons/math/ode/TestProblem1.java,src/test/org/apache/commons/math/ode/TestProblem1.java,69,Override
False,src/test/org/apache/commons/math/ode/TestProblem1.java,src/test/org/apache/commons/math/ode/TestProblem1.java,70,ublic Object clone() {
True,src/test/org/apache/commons/math/ode/TestProblem1.java,src/test/org/apache/commons/math/ode/TestProblem1.java,65,/** {@inheritDoc} */
True,src/test/org/apache/commons/math/ode/TestProblem1.java,src/test/org/apache/commons/math/ode/TestProblem1.java,66,public TestProblem1 copy() {
False,src/test/org/apache/commons/math/ode/TestProblem2.java,src/test/org/apache/commons/math/ode/TestProblem2.java,67, Clone operation.
False,src/test/org/apache/commons/math/ode/TestProblem2.java,src/test/org/apache/commons/math/ode/TestProblem2.java,68, @return a copy of the instance
False,src/test/org/apache/commons/math/ode/TestProblem2.java,src/test/org/apache/commons/math/ode/TestProblem2.java,70,Override
False,src/test/org/apache/commons/math/ode/TestProblem2.java,src/test/org/apache/commons/math/ode/TestProblem2.java,71,ublic Object clone() {
True,src/test/org/apache/commons/math/ode/TestProblem2.java,src/test/org/apache/commons/math/ode/TestProblem2.java,66,/** {@inheritDoc} */
True,src/test/org/apache/commons/math/ode/TestProblem2.java,src/test/org/apache/commons/math/ode/TestProblem2.java,67,public TestProblem2 copy() {
False,src/test/org/apache/commons/math/ode/TestProblem3.java,src/test/org/apache/commons/math/ode/TestProblem3.java,82, Clone operation.
False,src/test/org/apache/commons/math/ode/TestProblem3.java,src/test/org/apache/commons/math/ode/TestProblem3.java,83, @return a copy of the instance
False,src/test/org/apache/commons/math/ode/TestProblem3.java,src/test/org/apache/commons/math/ode/TestProblem3.java,85,Override
False,src/test/org/apache/commons/math/ode/TestProblem3.java,src/test/org/apache/commons/math/ode/TestProblem3.java,86,ublic Object clone() {
True,src/test/org/apache/commons/math/ode/TestProblem3.java,src/test/org/apache/commons/math/ode/TestProblem3.java,81,/** {@inheritDoc} */
True,src/test/org/apache/commons/math/ode/TestProblem3.java,src/test/org/apache/commons/math/ode/TestProblem3.java,82,public TestProblem3 copy() {
False,src/test/org/apache/commons/math/ode/TestProblem4.java,src/test/org/apache/commons/math/ode/TestProblem4.java,72, Clone operation.
False,src/test/org/apache/commons/math/ode/TestProblem4.java,src/test/org/apache/commons/math/ode/TestProblem4.java,73, @return a copy of the instance
False,src/test/org/apache/commons/math/ode/TestProblem4.java,src/test/org/apache/commons/math/ode/TestProblem4.java,75,Override
False,src/test/org/apache/commons/math/ode/TestProblem4.java,src/test/org/apache/commons/math/ode/TestProblem4.java,76,ublic Object clone() {
True,src/test/org/apache/commons/math/ode/TestProblem4.java,src/test/org/apache/commons/math/ode/TestProblem4.java,71,/** {@inheritDoc} */
True,src/test/org/apache/commons/math/ode/TestProblem4.java,src/test/org/apache/commons/math/ode/TestProblem4.java,72,public TestProblem4 copy() {
True,src/test/org/apache/commons/math/ode/TestProblem5.java,src/test/org/apache/commons/math/ode/TestProblem5.java,39,/** {@inheritDoc} */
True,src/test/org/apache/commons/math/ode/TestProblem5.java,src/test/org/apache/commons/math/ode/TestProblem5.java,40,public TestProblem5 copy() {
True,src/test/org/apache/commons/math/ode/TestProblem5.java,src/test/org/apache/commons/math/ode/TestProblem5.java,41,return new TestProblem5();
False,src/test/org/apache/commons/math/ode/TestProblem6.java,src/test/org/apache/commons/math/ode/TestProblem6.java,67, Clone operation.
False,src/test/org/apache/commons/math/ode/TestProblem6.java,src/test/org/apache/commons/math/ode/TestProblem6.java,68, @return a copy of the instance
False,src/test/org/apache/commons/math/ode/TestProblem6.java,src/test/org/apache/commons/math/ode/TestProblem6.java,70,Override
False,src/test/org/apache/commons/math/ode/TestProblem6.java,src/test/org/apache/commons/math/ode/TestProblem6.java,71,ublic Object clone() {
False,src/test/org/apache/commons/math/ode/TestProblem6.java,src/test/org/apache/commons/math/ode/TestProblem6.java,72,eturn new TestProblem6(this);
True,src/test/org/apache/commons/math/ode/TestProblem6.java,src/test/org/apache/commons/math/ode/TestProblem6.java,66,/** {@inheritDoc} */
True,src/test/org/apache/commons/math/ode/TestProblem6.java,src/test/org/apache/commons/math/ode/TestProblem6.java,67,public TestProblem6 copy() {
True,src/test/org/apache/commons/math/ode/TestProblem6.java,src/test/org/apache/commons/math/ode/TestProblem6.java,68,return new TestProblem6(this);
False,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,28,"mplements FirstOrderDifferentialEquations, Cloneable {"
True,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,28,implements FirstOrderDifferentialEquations {
False,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,85, Clone operation.
True,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,85,* Copy operation.
False,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,88,Override
False,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,89,ublic abstract Object clone();
True,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/org/apache/commons/math/ode/TestProblemAbstract.java,88,public abstract TestProblemAbstract copy();
False,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,86,estProblemAbstract pb = (TestProblemAbstract) problems[k].clone();
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,86,TestProblemAbstract pb = problems[k].copy();
False,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,233,estProblem1 pb2 = (TestProblem1) pb1.clone();
True,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,233,TestProblem1 pb2 = pb1.copy();
False,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,65,estProblemAbstract pb  = (TestProblemAbstract) problems[k].clone();
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,65,TestProblemAbstract pb  = problems[k].copy();
False,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,66,estProblemAbstract pb = (TestProblemAbstract) problems[k].clone();
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,66,TestProblemAbstract pb = problems[k].copy();
False,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,65,estProblemAbstract pb = (TestProblemAbstract) problems[k].clone();
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,65,TestProblemAbstract pb = problems[k].copy();
False,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,66,estProblemAbstract pb = (TestProblemAbstract) problems[k].clone();
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,66,TestProblemAbstract pb = problems[k].copy();
False,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,131,ublic BadStepInterpolator() {
False,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,132,uper();
False,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,134,"ublic BadStepInterpolator(double[] y, boolean forward) {"
False,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,135,"uper(y, forward);"
False,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,137,Override
False,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,138,rotected void doFinalize()
False,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,139,hrows DerivativeException {
True,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,131,"@SuppressWarnings(""unused"")"
True,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,132,public BadStepInterpolator() {
True,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,134,"public BadStepInterpolator(double[] y, boolean forward) {"
True,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,135,"super(y, forward);"
True,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,137,@Override
True,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,138,protected void doFinalize()
True,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java,139,throws DerivativeException {
False,src/test/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,62,rivate class Rosenbrock implements MultivariateRealFunction {
True,src/test/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,src/test/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java,62,private static class Rosenbrock implements MultivariateRealFunction {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,207,rivate class Rosenbrock implements MultivariateRealFunction {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,207,private static class Rosenbrock implements MultivariateRealFunction {
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,228,rivate class Powell implements MultivariateRealFunction {
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,228,private static class Powell implements MultivariateRealFunction {
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,437,ptimum =
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,438,"ptimizer.optimize(circle, target, weights, new double[] { 98.680, 47.345 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,437,"optimizer.optimize(circle, target, weights, new double[] { 98.680, 47.345 });"
False,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,432,ublic int getN() {
False,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,433,eturn points.size();
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,202,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,55,ong cachedResult = binomialCache.get(n).get(new Integer(k));
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,55,Long cachedResult = binomialCache.get(n).get(Integer.valueOf(k));
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,83,"inomialCache.get(n).put(new Integer(k), new Long(result));"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,83,"binomialCache.get(n).put(Integer.valueOf(k), Long.valueOf(result));"

is_addition,old_file_path,new_file_path,line_num,content
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,3,* Copyright (c) 2004 The Apache Software Foundation. All rights reserved.
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,5,"* Licensed under the Apache License, Version 2.0 (the ""License""); you may not"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,6,* use this file except in compliance with the License. You may obtain a copy
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,7,* of the License at
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,9,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,13,"* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,14,* License for the specific language governing permissions and limitations
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,15,* under the License.
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,18,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,20,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,21,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,23,import junit.framework.Test;
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,24,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,25,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,28,* Test the SplineInterpolator.
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,30,* @version $Revision: 1.1 $ $Date: 2004/04/02 20:58:59 $
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,32,public class SplineInterpolatorTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,34,/** error tolerance for spline interpolator value at knot points */
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,35,protected double knotTolerance = 1E-12;
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,37,/** error tolerance for interpolating polynomial coefficients */
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,38,protected double coefficientTolerance = 1E-6;
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,40,/** error tolerance for interpolated values -- high value is from sin test */
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,41,protected double interpolationTolerance = 1E-2;
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,43,public SplineInterpolatorTest(String name) {
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,44,super(name);
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,47,public static Test suite() {
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,48,TestSuite suite = new TestSuite(SplineInterpolatorTest.class);
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,49,"suite.setName(""UnivariateRealInterpolator Tests"");"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,50,return suite;
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,53,public void testInterpolateLinearDegenerateTwoSegment()
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,54,throws Exception {
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,55,"double x[] = { 0.0, 0.5, 1.0 };"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,56,"double y[] = { 0.0, 0.5, 1.0 };"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,57,UnivariateRealInterpolator i = new SplineInterpolator();
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,58,"UnivariateRealFunction f = i.interpolate(x, y);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,59,"verifyInterpolation(f, x, y);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,60,"verifyConsistency((PolynomialSplineFunction) f, x);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,62,// Verify coefficients using analytical values
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,63,PolynomialFunction polynomials[] = ((PolynomialSplineFunction) f).getPolynomials();
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,64,"double target[] = {y[0], 1d, 0d, 0d};"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,65,"TestUtils.assertEquals(polynomials[0].getCoefficients(), target, coefficientTolerance);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,66,"target = new double[]{y[1], 1d, 0d, 0d};"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,67,"TestUtils.assertEquals(polynomials[1].getCoefficients(), target, coefficientTolerance);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,69,// Check interpolation
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,70,"assertEquals(0.4,f.value(0.4), interpolationTolerance);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,73,public void testInterpolateLinearDegenerateThreeSegment()
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,74,throws Exception {
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,75,"double x[] = { 0.0, 0.5, 1.0, 1.5 };"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,76,"double y[] = { 0.0, 0.5, 1.0, 1.5 };"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,77,UnivariateRealInterpolator i = new SplineInterpolator();
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,78,"UnivariateRealFunction f = i.interpolate(x, y);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,79,"verifyInterpolation(f, x, y);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,81,// Verify coefficients using analytical values
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,82,PolynomialFunction polynomials[] = ((PolynomialSplineFunction) f).getPolynomials();
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,83,"double target[] = {y[0], 1d, 0d, 0d};"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,84,"TestUtils.assertEquals(polynomials[0].getCoefficients(), target, coefficientTolerance);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,85,"target = new double[]{y[1], 1d, 0d, 0d};"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,86,"TestUtils.assertEquals(polynomials[1].getCoefficients(), target, coefficientTolerance);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,87,"target = new double[]{y[2], 1d, 0d, 0d};"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,88,"TestUtils.assertEquals(polynomials[2].getCoefficients(), target, coefficientTolerance);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,90,// Check interpolation
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,91,"assertEquals(1.4,f.value(1.4), interpolationTolerance);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,94,public void testInterpolateLinear() throws Exception {
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,95,"double x[] = { 0.0, 0.5, 1.0 };"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,96,"double y[] = { 0.0, 0.5, 0.0 };"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,97,UnivariateRealInterpolator i = new SplineInterpolator();
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,98,"UnivariateRealFunction f = i.interpolate(x, y);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,99,"verifyInterpolation(f, x, y);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,100,"verifyConsistency((PolynomialSplineFunction) f, x);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,102,// Verify coefficients using analytical values
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,103,PolynomialFunction polynomials[] = ((PolynomialSplineFunction) f).getPolynomials();
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,104,"double target[] = {y[0], 1.5d, 0d, -2d};"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,105,"TestUtils.assertEquals(polynomials[0].getCoefficients(), target, coefficientTolerance);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,106,"target = new double[]{y[1], 0d, -3d, 2d};"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,107,"TestUtils.assertEquals(polynomials[1].getCoefficients(), target, coefficientTolerance);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,110,public void testInterpolateSin() throws Exception {
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,111,double x[] =
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,113,"0.0,"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,114,"Math.PI / 6d,"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,115,"Math.PI / 2d,"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,116,"5d * Math.PI / 6d,"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,117,"Math.PI,"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,118,"7d * Math.PI / 6d,"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,119,"3d * Math.PI / 2d,"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,120,"11d * Math.PI / 6d,"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,121,2.d * Math.PI };
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,122,"double y[] = { 0d, 0.5d, 1d, 0.5d, 0d, -0.5d, -1d, -0.5d, 0d };"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,123,UnivariateRealInterpolator i = new SplineInterpolator();
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,124,"UnivariateRealFunction f = i.interpolate(x, y);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,125,"verifyInterpolation(f, x, y);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,126,"verifyConsistency((PolynomialSplineFunction) f, x);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,128,"/* Check coefficients against values computed using R (version 1.8.1, Red Hat Linux 9)"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,130,* To replicate in R:
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,131,*     x[1] <- 0
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,132,"*     x[2] <- pi / 6, etc, same for y[] (could use y <- scan() for y values)"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,133,"*     g <- splinefun(x, y, ""natural"")"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,134,"*     splinecoef <- eval(expression(z), envir = environment(g))"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,135,*     print(splinecoef)
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,137,PolynomialFunction polynomials[] = ((PolynomialSplineFunction) f).getPolynomials();
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,138,"double target[] = {y[0], 1.002676d, 0d, -0.17415829d};"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,139,"TestUtils.assertEquals(polynomials[0].getCoefficients(), target, coefficientTolerance);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,140,"target = new double[]{y[1], 8.594367e-01, -2.735672e-01, -0.08707914};"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,141,"TestUtils.assertEquals(polynomials[1].getCoefficients(), target, coefficientTolerance);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,142,"target = new double[]{y[2], 1.471804e-17,-5.471344e-01, 0.08707914};"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,143,"TestUtils.assertEquals(polynomials[2].getCoefficients(), target, coefficientTolerance);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,144,"target = new double[]{y[3], -8.594367e-01, -2.735672e-01, 0.17415829};"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,145,"TestUtils.assertEquals(polynomials[3].getCoefficients(), target, coefficientTolerance);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,146,"target = new double[]{y[4], -1.002676, 6.548562e-17, 0.17415829};"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,147,"TestUtils.assertEquals(polynomials[4].getCoefficients(), target, coefficientTolerance);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,148,"target = new double[]{y[5], -8.594367e-01, 2.735672e-01, 0.08707914};"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,149,"TestUtils.assertEquals(polynomials[5].getCoefficients(), target, coefficientTolerance);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,150,"target = new double[]{y[6], 3.466465e-16, 5.471344e-01, -0.08707914};"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,151,"TestUtils.assertEquals(polynomials[6].getCoefficients(), target, coefficientTolerance);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,152,"target = new double[]{y[7], 8.594367e-01, 2.735672e-01, -0.17415829};"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,153,"TestUtils.assertEquals(polynomials[7].getCoefficients(), target, coefficientTolerance);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,155,//Check interpolation
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,156,"assertEquals(Math.sqrt(2d) / 2d,f.value(Math.PI/4d),interpolationTolerance);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,157,"assertEquals(Math.sqrt(2d) / 2d,f.value(3d*Math.PI/4d),interpolationTolerance);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,161,public void testIllegalArguments() throws MathException {
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,162,// Data set arrays of different size.
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,163,UnivariateRealInterpolator i = new SplineInterpolator();
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,164,try {
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,165,"double xval[] = { 0.0, 1.0 };"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,166,"double yval[] = { 0.0, 1.0, 2.0 };"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,167,"i.interpolate(xval, yval);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,168,"fail(""Failed to detect data set array with different sizes."");"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,169,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,171,// X values not sorted.
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,172,try {
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,173,"double xval[] = { 0.0, 1.0, 0.5 };"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,174,"double yval[] = { 0.0, 1.0, 2.0 };"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,175,"i.interpolate(xval, yval);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,176,"fail(""Failed to detect unsorted arguments."");"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,177,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,182,* verifies that f(x[i]) = y[i] for i = 0..n -1 where n is common length -- skips last point.
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,184,"protected void verifyInterpolation(UnivariateRealFunction f, double x[], double y[])"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,185,throws Exception{
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,186,for (int i = 0; i < x.length - 1; i++) {
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,187,"assertEquals(f.value(x[i]), y[i], knotTolerance);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,192,* Verifies that interpolating polynomials satisfy consistency requirement:
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,193,*    adjacent polynomials must agree through two derivatives at knot points
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,195,"protected void verifyConsistency(PolynomialSplineFunction f, double x[])"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,196,throws Exception {
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,197,PolynomialFunction polynomials[] = f.getPolynomials();
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,198,for (int i = 1; i < x.length - 2; i++) {
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,199,// evaluate polynomials and derivatives at x[i + 1]
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,200,"assertEquals(polynomials[i].value(x[i +1] - x[i]), polynomials[i + 1].value(0), 0.1);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,201,"assertEquals(polynomials[i].derivative().value(x[i +1] - x[i]),"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,202,"polynomials[i + 1].derivative().value(0), 0.5);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,203,"assertEquals(polynomials[i].polynomialDerivative().derivative().value(x[i +1] - x[i]),"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,204,"polynomials[i + 1].polynomialDerivative().derivative().value(0), 0.5);"

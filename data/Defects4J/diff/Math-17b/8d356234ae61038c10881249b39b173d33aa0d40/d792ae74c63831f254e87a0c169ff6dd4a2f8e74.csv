is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,27,import org.apache.commons.math.util.MathUtils;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,29, instance to generate non-secure data and a
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,30, {@link java.security.SecureRandom} instance to provide data for the
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,31, <code>nextSecureXxx</code> methods.  If no <code>RandomGenerator</code>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,32," is provided in the constructor, the default is to use a generator based on"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,33," {@link java.util.Random}.   To plug in a different implementation,"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,34, either implement <code>RandomGenerator</code> directly or extend
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,35, {@link AbstractRandomGenerator}.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,31,* instance to generate non-secure data and a {@link java.security.SecureRandom}
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,32,* instance to provide data for the <code>nextSecureXxx</code> methods. If no
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,33,"* <code>RandomGenerator</code> is provided in the constructor, the default is"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,34,* to use a generator based on {@link java.util.Random}. To plug in a different
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,35,"* implementation, either implement <code>RandomGenerator</code> directly or"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,36,* extend {@link AbstractRandomGenerator}.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,37, Supports reseeding the underlying pseudo-random number generator (PRNG).
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,38, The <code>SecurityProvider</code> and <code>Algorithm</code>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,39, used by the <code>SecureRandom</code> instance can also be reset.</p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,38,* Supports reseeding the underlying pseudo-random number generator (PRNG). The
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,39,* <code>SecurityProvider</code> and <code>Algorithm</code> used by the
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,40,* <code>SecureRandom</code> instance can also be reset.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,41,* </p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,42, {@link java.security.SecureRandom}.</p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,44,* {@link java.security.SecureRandom}.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,45,* </p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,44, <strong>Usage Notes</strong>: <ul>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,47,* <strong>Usage Notes</strong>:
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,48,* <ul>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,47," <code>SecureRandom</code> instances used in data generation. Therefore,"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,48," to generate a random sequence of values or strings, you should use just"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,51,"* <code>SecureRandom</code> instances used in data generation. Therefore, to"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,52,"* generate a random sequence of values or strings, you should use just"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,51," The ""secure"" methods are *much* slower.  These should be used only when a"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,52, cryptographically secure random sequence is required.  A secure random
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,55,"* The ""secure"" methods are *much* slower. These should be used only when a"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,56,* cryptographically secure random sequence is required. A secure random
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,60, number generators are <strong>not</strong> intialized.  If you do not
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,61," explicitly seed the default non-secure generator, it is seeded with the current time"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,62, in milliseconds on first use.  The same holds for the secure generator.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,63," If you provide a <code>RandomGenerator</code> to the constructor, however,"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,64, this generator is not reseeded by the constructor nor is it reseeded on
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,65, first use. </li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,64,* number generators are <strong>not</strong> intialized. If you do not
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,65,"* explicitly seed the default non-secure generator, it is seeded with the"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,66,* current time in milliseconds on first use. The same holds for the secure
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,67,"* generator. If you provide a <code>RandomGenerator</code> to the constructor,"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,68,"* however, this generator is not reseeded by the constructor nor is it reseeded"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,69,* on first use.</li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,67, The <code>reSeed</code> and <code>reSeedSecure</code> methods delegate
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,68, to the corresponding methods on the underlying <code>RandomGenerator</code>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,69," and<code>SecureRandom</code> instances.  Therefore,"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,70, <code>reSeed(long)</code> fully resets the initial state of the non-secure
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,71, random number generator (so that reseeding with a specific value always
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,72, results in the same subsequent random sequence); whereas reSeedSecure(long)
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,73, does <strong>not</strong> reinitialize the secure random number generator
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,74, (so secure sequences started with calls to reseedSecure(long) won't be
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,75, identical).</li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,71,* The <code>reSeed</code> and <code>reSeedSecure</code> methods delegate to the
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,72,* corresponding methods on the underlying <code>RandomGenerator</code> and
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,73,"* <code>SecureRandom</code> instances. Therefore, <code>reSeed(long)</code>"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,74,* fully resets the initial state of the non-secure random number generator (so
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,75,* that reseeding with a specific value always results in the same subsequent
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,76,* random sequence); whereas reSeedSecure(long) does <strong>not</strong>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,77,* reinitialize the secure random number generator (so secure sequences started
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,78,* with calls to reseedSecure(long) won't be identical).</li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,78, </ul></p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,80, @version $Revision$ $Date$
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,81,* </ul>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,82,* </p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,84,"* @version $Revision$ $Date: 2008-11-23 08:27:09 -0600 (Sun, 23 Nov"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,85,*          2008) $
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,84,** Serializable version identifier */
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,85,rivate static final long serialVersionUID = -626730818244969716L;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,87,** underlying random number generator */
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,88,rivate RandomGenerator rand = null;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,90,** underlying secure random number generator */
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,91,rivate SecureRandom secRand = null;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,94, Construct a RandomDataImpl.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,96,ublic RandomDataImpl() {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,100, Construct a RandomDataImpl using the supplied {@link RandomGenerator}
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,101, as the source of (non-secure) random data.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,103, @param rand  the source of (non-secure) random data
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,104, @since 1.1
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,106,ublic RandomDataImpl(RandomGenerator rand) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,107,uper();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,108,his.rand = rand;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,112, {@inheritDoc}<p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,113, <strong>Algorithm Description:</strong> hex strings are generated
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,114, using a 2-step process. <ol>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,115, <li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,116, len/2+1 binary bytes are generated using the underlying Random</li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,117, <li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,118, Each binary byte is translated into 2 hex digits</li></ol></p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,120, @param len the desired string length.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,121, @return the random string.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,123,ublic String nextHexString(int len) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,124,f (len <= 0) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,125,"hrow new IllegalArgumentException(""length must be positive"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,128,/Get a random number generator
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,129,andomGenerator ran = getRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,131,/Initialize output buffer
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,132,tringBuffer outBuffer = new StringBuffer();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,134,/Get int(len/2)+1 random bytes
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,135,yte[] randomBytes = new byte[(len / 2) + 1];
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,136,an.nextBytes(randomBytes);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,138,/Convert each byte to 2 hex digits
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,139,or (int i = 0; i < randomBytes.length; i++) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,140,nteger c = Integer.valueOf(randomBytes[i]);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,142,* Add 128 to byte value to make interval 0-255 before
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,143, doing hex conversion.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,144, This guarantees <= 2 hex digits from toHexString()
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,145, toHexString would otherwise add 2^32 to negative arguments.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,147,tring hex = Integer.toHexString(c.intValue() + 128);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,149,/ Make sure we add 2 hex digits for each byte
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,150,f (hex.length() == 1)  {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,151,"ex = ""0"" + hex;"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,153,utBuffer.append(hex);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,155,"eturn outBuffer.toString().substring(0, len);"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,159, Generate a random int value uniformly distributed between
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,160," <code>lower</code> and <code>upper</code>, inclusive."
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,162, @param lower the lower bound.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,163, @param upper the upper bound.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,164, @return the random integer.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,166,"ublic int nextInt(int lower, int upper) {"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,167,f (lower >= upper) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,168,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,169,"""upper bound must be > lower bound"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,171,andomGenerator rand = getRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,172,ouble r = rand.nextDouble();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,173,eturn (int)((r * upper) + ((1.0 - r) * lower) + r);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,177, Generate a random long value uniformly distributed between
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,178," <code>lower</code> and <code>upper</code>, inclusive."
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,180, @param lower the lower bound.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,181, @param upper the upper bound.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,182, @return the random integer.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,184,"ublic long nextLong(long lower, long upper) {"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,185,f (lower >= upper) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,186,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,187,"""upper bound must be > lower bound"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,189,andomGenerator rand = getRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,190,ouble r = rand.nextDouble();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,191,eturn (long)((r * upper) + ((1.0 - r) * lower) + r);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,195, {@inheritDoc}<p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,196, <strong>Algorithm Description:</strong> hex strings are generated in
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,197, 40-byte segments using a 3-step process. <ol>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,198, <li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,199, 20 random bytes are generated using the underlying
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,200, <code>SecureRandom</code>.</li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,201, <li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,202, SHA-1 hash is applied to yield a 20-byte binary digest.</li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,203, <li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,204, Each byte of the binary digest is converted to 2 hex digits.</li></ol>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,205, </p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,207, @param len the length of the generated string
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,208, @return the random string
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,210,ublic String nextSecureHexString(int len) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,211,f (len <= 0) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,212,"hrow new IllegalArgumentException(""length must be positive"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,215,/ Get SecureRandom and setup Digest provider
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,216,ecureRandom secRan = getSecRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,217,essageDigest alg = null;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,218,ry {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,219,"lg = MessageDigest.getInstance(""SHA-1"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,220, catch (NoSuchAlgorithmException ex) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,221,eturn null; // gulp FIXME? -- this *should* never fail.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,223,lg.reset();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,225,/Compute number of iterations required (40 bytes each)
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,226,nt numIter = (len / 40) + 1;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,228,tringBuffer outBuffer = new StringBuffer();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,229,or (int iter = 1; iter < numIter + 1; iter++) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,230,yte[] randomBytes = new byte[40];
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,231,ecRan.nextBytes(randomBytes);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,232,lg.update(randomBytes);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,234,/Compute hash -- will create 20-byte binary hash
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,235,yte hash[] = alg.digest();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,237,"/Loop over the hash, converting each byte to 2 hex digits"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,238,or (int i = 0; i < hash.length; i++) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,239,nteger c = Integer.valueOf(hash[i]);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,241,* Add 128 to byte value to make interval 0-255
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,242, This guarantees <= 2 hex digits from toHexString()
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,243, toHexString would otherwise add 2^32 to negative
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,244, arguments
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,246,tring hex = Integer.toHexString(c.intValue() + 128);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,248,/Keep strings uniform length -- guarantees 40 bytes
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,249,f (hex.length() == 1) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,250,"ex = ""0"" + hex;"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,252,utBuffer.append(hex);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,255,"eturn outBuffer.toString().substring(0, len);"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,259, Generate a random int value uniformly distributed between
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,260," <code>lower</code> and <code>upper</code>, inclusive.  This algorithm"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,261, uses a secure random number generator.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,263, @param lower the lower bound.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,264, @param upper the upper bound.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,265, @return the random integer.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,267,"ublic int nextSecureInt(int lower, int upper) {"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,268,f (lower >= upper) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,269,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,270,"""lower bound must be < upper bound"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,272,ecureRandom sec = getSecRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,273,eturn lower + (int) (sec.nextDouble() * (upper - lower + 1));
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,277, Generate a random long value uniformly distributed between
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,278," <code>lower</code> and <code>upper</code>, inclusive.  This algorithm"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,279, uses a secure random number generator.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,281, @param lower the lower bound.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,282, @param upper the upper bound.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,283, @return the random integer.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,285,"ublic long nextSecureLong(long lower, long upper) {"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,286,f (lower >= upper) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,287,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,288,"""lower bound must be < upper bound"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,290,ecureRandom sec = getSecRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,291,eturn lower + (long) (sec.nextDouble() * (upper - lower + 1));
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,295, {@inheritDoc}
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,296, <p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,297, <strong>Algorithm Description</strong>:
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,298," Uses simulation of a Poisson process using Uniform deviates, as"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,299, described
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,300," <a href=""http://irmi.epfl.ch/cmos/Pmmi/interactive/rng7.htm"">"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,301, here.</a></p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,302, <p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,303, The Poisson process (and hence value returned) is bounded by
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,304, 1000 * mean.</p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,306, @param mean mean of the Poisson distribution.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,307, @return the random Poisson value.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,309,ublic long nextPoisson(double mean) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,310,f (mean <= 0) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,311,"hrow new IllegalArgumentException(""Poisson mean must be > 0"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,313,ouble p = Math.exp(-mean);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,314,ong n = 0;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,315,ouble r = 1.0d;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,316,ouble rnd = 1.0d;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,317,andomGenerator rand = getRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,318,hile (n < 1000 * mean) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,319,nd = rand.nextDouble();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,320, = r * rnd;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,321,f (r >= p) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,322,++;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,323, else {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,324,eturn n;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,327,eturn n;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,331, Generate a random value from a Normal (a.k.a. Gaussian) distribution
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,332," with the given mean, <code>mu</code> and the given standard deviation,"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,333, <code>sigma</code>.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,335, @param mu the mean of the distribution
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,336, @param sigma the standard deviation of the distribution
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,337, @return the random Normal value
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,339,"ublic double nextGaussian(double mu, double sigma) {"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,340,f (sigma <= 0) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,341,"hrow new IllegalArgumentException(""Gaussian std dev must be > 0"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,343,andomGenerator rand = getRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,344,eturn sigma * rand.nextGaussian() + mu;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,348, Returns a random value from an Exponential distribution with the given
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,349, mean.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,350, <p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,351, <strong>Algorithm Description</strong>:  Uses the
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,352," <a href=""http://www.jesus.ox.ac.uk/~clifford/a5/chap1/node5.html"">"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,353, Inversion Method</a> to generate exponentially distributed random values
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,354, from uniform deviates.</p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,356, @param mean the mean of the distribution
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,357, @return the random Exponential value
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,359,ublic double nextExponential(double mean)  {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,360,f (mean < 0.0)  {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,361,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,362,"""Exponential mean must be >= 0"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,364,andomGenerator rand = getRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,365,ouble unif = rand.nextDouble();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,366,hile (unif == 0.0d) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,367,nif = rand.nextDouble();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,369,eturn -mean * Math.log(unif);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,373, {@inheritDoc}<p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,374, <strong>Algorithm Description</strong>: scales the output of
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,375," Random.nextDouble(), but rejects 0 values (i.e., will generate another"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,376, random double if Random.nextDouble() returns 0).
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,377, This is necessary to provide a symmetric output interval
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,378, (both endpoints excluded).</p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,380, @param lower the lower bound.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,381, @param upper the upper bound.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,382," @return a uniformly distributed random value from the interval (lower, upper)"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,384,"ublic double nextUniform(double lower, double upper) {"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,385,f (lower >= upper) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,386,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,387,"""lower bound must be < upper bound"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,389,andomGenerator rand = getRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,391,/ ensure nextDouble() isn't 0.0
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,392,ouble u = rand.nextDouble();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,393,hile(u <= 0.0){
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,394, = rand.nextDouble();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,397,eturn lower + u * (upper - lower);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,401, Returns the RandomGenerator used to generate non-secure
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,402, random data.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,403, <p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,404, Creates and initializes a default generator if null.</p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,406, @return the Random used to generate random data
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,407, @since 1.1
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,409,rivate RandomGenerator getRan() {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,410,f (rand == null) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,411,and = new JDKRandomGenerator();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,412,and.setSeed(System.currentTimeMillis());
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,414,eturn rand;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,418, Returns the SecureRandom used to generate secure random data.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,419, <p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,420, Creates and initializes if null.</p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,422, @return the SecureRandom used to generate secure random data
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,424,rivate SecureRandom getSecRan() {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,425,f (secRand == null) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,426,ecRand = new SecureRandom();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,427,ecRand.setSeed(System.currentTimeMillis());
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,429,eturn secRand;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,433, Reseeds the random number generator with the supplied seed.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,434, <p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,435, Will create and initialize if null.</p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,437, @param seed the seed value to use
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,439,ublic void reSeed(long seed) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,440,f (rand == null) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,441,and = new JDKRandomGenerator();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,443,and.setSeed(seed);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,447, Reseeds the secure random number generator with the current time
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,448, in milliseconds.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,449, <p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,450, Will create and initialize if null.</p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,452,ublic void reSeedSecure() {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,453,f (secRand == null) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,454,ecRand = new SecureRandom();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,456,ecRand.setSeed(System.currentTimeMillis());
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,460, Reseeds the secure random number generator with the supplied seed.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,461, <p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,462, Will create and initialize if null.</p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,464, @param seed the seed value to use
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,466,ublic void reSeedSecure(long seed) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,467,f (secRand == null) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,468,ecRand = new SecureRandom();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,470,ecRand.setSeed(seed);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,474, Reseeds the random number generator with the current time
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,475, in milliseconds.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,477,ublic void reSeed() {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,478,f (rand == null) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,479,and = new JDKRandomGenerator();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,481,and.setSeed(System.currentTimeMillis());
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,485, Sets the PRNG algorithm for the underlying SecureRandom instance
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,486, using the Security Provider API.  The Security Provider API is defined in
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,487," <a href=""http://java.sun.com/j2se/1.3/docs/guide/security/CryptoSpec.html#AppA"">"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,488, Java Cryptography Architecture API Specification & Reference.</a>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,489, <p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,490, <strong>USAGE NOTE:</strong> This method carries <i>significant</i>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,491, overhead and may take several seconds to execute.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,492, </p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,494, @param algorithm the name of the PRNG algorithm
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,495, @param provider the name of the provider
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,496, @throws NoSuchAlgorithmException if the specified algorithm
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,497, is not available
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,498, @throws NoSuchProviderException if the specified provider
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,499, is not installed
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,501,"ublic void setSecureAlgorithm(String algorithm, String provider)"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,502,"hrows NoSuchAlgorithmException, NoSuchProviderException {"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,503,"ecRand = SecureRandom.getInstance(algorithm, provider);"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,507, Generates an integer array of length <code>k</code> whose entries
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,508," are selected randomly, without repetition, from the integers"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,509, <code>0 through n-1</code> (inclusive).
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,510, <p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,511, Generated arrays represent permutations
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,512, of <code>n</code> taken <code>k</code> at a time.</p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,513, <p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,514, <strong>Preconditions:</strong><ul>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,515, <li> <code>k <= n</code></li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,516, <li> <code>n > 0</code> </li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,517, </ul>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,518," If the preconditions are not met, an IllegalArgumentException is"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,519, thrown.</p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,520, <p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,521, Uses a 2-cycle permutation shuffle. The shuffling process is described
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,522," <a href=""http://www.maths.abdn.ac.uk/~igc/tch/mx4002/notes/node83.html"">"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,523, here</a>.</p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,525, @param n domain of the permutation (must be positive)
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,526, @param k size of the permutation (must satisfy 0 < k <= n).
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,527, @return the random permutation as an int array
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,529,"ublic int[] nextPermutation(int n, int k) {"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,530,f (k > n) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,531,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,532,"""permutation k exceeds n"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,534,f (k == 0) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,535,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,536,"""permutation k must be > 0"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,539,nt[] index = getNatural(n);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,540,"huffle(index, n - k);"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,541,nt[] result = new int[k];
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,542,or (int i = 0; i < k; i++) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,543,esult[i] = index[n - i - 1];
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,546,eturn result;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,550, Uses a 2-cycle permutation shuffle to generate a random permutation.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,551, <strong>Algorithm Description</strong>: Uses a 2-cycle permutation
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,552, shuffle to generate a random permutation of <code>c.size()</code> and
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,553, then returns the elements whose indexes correspond to the elements of
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,554, the generated permutation.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,555," This technique is described, and proven to generate random samples,"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,556," <a href=""http://www.maths.abdn.ac.uk/~igc/tch/mx4002/notes/node83.html"">"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,557, here</a>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,558, @param c Collection to sample from.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,559, @param k sample size.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,560, @return the random sample.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,562,"ublic Object[] nextSample(Collection<?> c, int k) {"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,563,nt len = c.size();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,564,f (k > len) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,565,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,566,"""sample size exceeds collection size"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,568,f (k == 0) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,569,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,570,"""sample size must be > 0"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,573,bject[] objects = c.toArray();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,574,"nt[] index = nextPermutation(len, k);"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,575,bject[] result = new Object[k];
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,576,or (int i = 0; i < k; i++) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,577,esult[i] = objects[index[i]];
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,579,eturn result;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,582,/------------------------Private methods----------------------------------
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,585, Uses a 2-cycle permutation shuffle to randomly re-order the last elements
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,586, of list.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,588, @param list list to be shuffled
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,589, @param end element past which shuffling begins
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,591,"rivate void shuffle(int[] list, int end) {"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,592,nt target = 0;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,593,or (int i = list.length - 1 ; i >= end; i--) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,594,f (i == 0) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,595,arget = 0;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,596, else {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,597,"arget = nextInt(0, i);"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,599,nt temp = list[target];
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,600,ist[target] = list[i];
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,601,ist[i] = temp;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,606, Returns an array representing n.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,608, @param n the natural number to represent
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,609, @return array with entries = elements of n
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,611,rivate int[] getNatural(int n) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,612,nt[] natural = new int[n];
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,613,or (int i = 0; i < n; i++) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,614,atural[i] = i;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,616,eturn natural;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,89,/** Serializable version identifier */
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,90,private static final long serialVersionUID = -626730818244969716L;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,92,/** underlying random number generator */
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,93,private RandomGenerator rand = null;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,95,/** underlying secure random number generator */
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,96,private SecureRandom secRand = null;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,99,* Construct a RandomDataImpl.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,101,public RandomDataImpl() {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,105,* Construct a RandomDataImpl using the supplied {@link RandomGenerator} as
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,106,* the source of (non-secure) random data.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,108,* @param rand
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,109,*            the source of (non-secure) random data
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,110,* @since 1.1
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,112,public RandomDataImpl(RandomGenerator rand) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,113,super();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,114,this.rand = rand;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,118,* {@inheritDoc}
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,119,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,120,* <strong>Algorithm Description:</strong> hex strings are generated using a
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,121,* 2-step process.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,122,* <ol>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,123,* <li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,124,* len/2+1 binary bytes are generated using the underlying Random</li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,125,* <li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,126,* Each binary byte is translated into 2 hex digits</li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,127,* </ol>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,128,* </p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,130,* @param len
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,131,*            the desired string length.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,132,* @return the random string.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,134,public String nextHexString(int len) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,135,if (len <= 0) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,136,"throw new IllegalArgumentException(""length must be positive"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,139,// Get a random number generator
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,140,RandomGenerator ran = getRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,142,// Initialize output buffer
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,143,StringBuffer outBuffer = new StringBuffer();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,145,// Get int(len/2)+1 random bytes
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,146,byte[] randomBytes = new byte[(len / 2) + 1];
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,147,ran.nextBytes(randomBytes);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,149,// Convert each byte to 2 hex digits
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,150,for (int i = 0; i < randomBytes.length; i++) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,151,Integer c = Integer.valueOf(randomBytes[i]);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,154,* Add 128 to byte value to make interval 0-255 before doing hex
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,155,* conversion. This guarantees <= 2 hex digits from toHexString()
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,156,* toHexString would otherwise add 2^32 to negative arguments.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,158,String hex = Integer.toHexString(c.intValue() + 128);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,160,// Make sure we add 2 hex digits for each byte
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,161,if (hex.length() == 1) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,162,"hex = ""0"" + hex;"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,164,outBuffer.append(hex);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,166,"return outBuffer.toString().substring(0, len);"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,170,* Generate a random int value uniformly distributed between
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,171,"* <code>lower</code> and <code>upper</code>, inclusive."
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,173,* @param lower
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,174,*            the lower bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,175,* @param upper
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,176,*            the upper bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,177,* @return the random integer.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,179,"public int nextInt(int lower, int upper) {"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,180,if (lower >= upper) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,181,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,182,"""upper bound must be > lower bound"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,184,RandomGenerator rand = getRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,185,double r = rand.nextDouble();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,186,return (int) ((r * upper) + ((1.0 - r) * lower) + r);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,190,* Generate a random long value uniformly distributed between
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,191,"* <code>lower</code> and <code>upper</code>, inclusive."
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,193,* @param lower
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,194,*            the lower bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,195,* @param upper
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,196,*            the upper bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,197,* @return the random integer.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,199,"public long nextLong(long lower, long upper) {"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,200,if (lower >= upper) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,201,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,202,"""upper bound must be > lower bound"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,204,RandomGenerator rand = getRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,205,double r = rand.nextDouble();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,206,return (long) ((r * upper) + ((1.0 - r) * lower) + r);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,210,* {@inheritDoc}
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,211,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,212,* <strong>Algorithm Description:</strong> hex strings are generated in
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,213,* 40-byte segments using a 3-step process.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,214,* <ol>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,215,* <li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,216,* 20 random bytes are generated using the underlying
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,217,* <code>SecureRandom</code>.</li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,218,* <li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,219,* SHA-1 hash is applied to yield a 20-byte binary digest.</li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,220,* <li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,221,* Each byte of the binary digest is converted to 2 hex digits.</li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,222,* </ol>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,223,* </p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,225,* @param len
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,226,*            the length of the generated string
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,227,* @return the random string
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,229,public String nextSecureHexString(int len) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,230,if (len <= 0) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,231,"throw new IllegalArgumentException(""length must be positive"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,234,// Get SecureRandom and setup Digest provider
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,235,SecureRandom secRan = getSecRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,236,MessageDigest alg = null;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,237,try {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,238,"alg = MessageDigest.getInstance(""SHA-1"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,239,} catch (NoSuchAlgorithmException ex) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,240,return null; // gulp FIXME? -- this *should* never fail.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,242,alg.reset();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,244,// Compute number of iterations required (40 bytes each)
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,245,int numIter = (len / 40) + 1;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,247,StringBuffer outBuffer = new StringBuffer();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,248,for (int iter = 1; iter < numIter + 1; iter++) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,249,byte[] randomBytes = new byte[40];
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,250,secRan.nextBytes(randomBytes);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,251,alg.update(randomBytes);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,253,// Compute hash -- will create 20-byte binary hash
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,254,byte hash[] = alg.digest();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,256,"// Loop over the hash, converting each byte to 2 hex digits"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,257,for (int i = 0; i < hash.length; i++) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,258,Integer c = Integer.valueOf(hash[i]);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,261,* Add 128 to byte value to make interval 0-255 This guarantees
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,262,* <= 2 hex digits from toHexString() toHexString would
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,263,* otherwise add 2^32 to negative arguments
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,265,String hex = Integer.toHexString(c.intValue() + 128);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,267,// Keep strings uniform length -- guarantees 40 bytes
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,268,if (hex.length() == 1) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,269,"hex = ""0"" + hex;"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,271,outBuffer.append(hex);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,274,"return outBuffer.toString().substring(0, len);"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,278,* Generate a random int value uniformly distributed between
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,279,"* <code>lower</code> and <code>upper</code>, inclusive. This algorithm uses"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,280,* a secure random number generator.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,282,* @param lower
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,283,*            the lower bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,284,* @param upper
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,285,*            the upper bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,286,* @return the random integer.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,288,"public int nextSecureInt(int lower, int upper) {"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,289,if (lower >= upper) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,290,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,291,"""lower bound must be < upper bound"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,293,SecureRandom sec = getSecRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,294,return lower + (int) (sec.nextDouble() * (upper - lower + 1));
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,298,* Generate a random long value uniformly distributed between
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,299,"* <code>lower</code> and <code>upper</code>, inclusive. This algorithm uses"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,300,* a secure random number generator.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,302,* @param lower
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,303,*            the lower bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,304,* @param upper
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,305,*            the upper bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,306,* @return the random integer.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,308,"public long nextSecureLong(long lower, long upper) {"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,309,if (lower >= upper) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,310,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,311,"""lower bound must be < upper bound"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,313,SecureRandom sec = getSecRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,314,return lower + (long) (sec.nextDouble() * (upper - lower + 1));
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,318,* {@inheritDoc}
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,319,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,320,"* <strong>Algorithm Description</strong>: For small means, uses simulation"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,321,"* of a Poisson process using Uniform deviates, as described <a"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,322,"* href=""http://irmi.epfl.ch/cmos/Pmmi/interactive/rng7.htm""> here.</a>"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,323,* </p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,324,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,325,* The Poisson process (and hence value returned) is bounded by 1000 * mean.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,326,* </p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,328,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,329,"* For large means, uses a reject method as described in <a"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,330,"* href=""http://cg.scs.carleton.ca/~luc/rnbookindex.html"">Non-Uniform Random"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,331,* Variate Generation</a>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,332,* </p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,334,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,335,* References:
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,336,* <ul>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,337,"* <li>Devroye, Luc. (1986). <i>Non-Uniform Random Variate Generation</i>."
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,338,"* New York, NY. Springer-Verlag</li>"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,339,* </ul>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,340,* </p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,342,* @param mean
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,343,*            mean of the Poisson distribution.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,344,* @return the random Poisson value.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,346,public long nextPoisson(double mean) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,347,if (mean <= 0) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,348,"throw new IllegalArgumentException(""Poisson mean must be > 0"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,351,RandomGenerator rand = getRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,353,double pivot = 6.0;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,354,if (mean < pivot) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,355,double p = Math.exp(-mean);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,356,long n = 0;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,357,double r = 1.0d;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,358,double rnd = 1.0d;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,360,while (n < 1000 * mean) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,361,rnd = rand.nextDouble();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,362,r = r * rnd;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,363,if (r >= p) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,364,n++;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,365,} else {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,366,return n;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,369,return n;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,370,} else {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,371,double mu = Math.floor(mean);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,372,double delta = Math.floor(pivot + (mu - pivot) / 2.0); // integer
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,373,// between 6
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,374,// and mean
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,375,double mu2delta = 2.0 * mu + delta;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,376,double muDeltaHalf = mu + delta / 2.0;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,377,double logMeanMu = Math.log(mean / mu);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,379,double muFactorialLog = MathUtils.factorialLog((int) mu);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,381,double c1 = Math.sqrt(Math.PI * mu / 2.0);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,382,double c2 = c1
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,383,+ Math.sqrt(Math.PI * muDeltaHalf
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,384,/ (2.0 * Math.exp(1.0 / mu2delta)));
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,385,double c3 = c2 + 2.0;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,386,double c4 = c3 + Math.exp(1.0 / 78.0);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,387,double c = c4 + 2.0 / delta * mu2delta
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,388,* Math.exp(-delta / mu2delta * (1.0 + delta / 2.0));
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,390,double y = 0.0;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,391,double x = 0.0;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,392,double w = Double.POSITIVE_INFINITY;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,394,boolean accept = false;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,395,while (!accept) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,396,"double u = nextUniform(0.0, c);"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,397,double e = nextExponential(mean);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,399,if (u <= c1) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,400,"double z = nextGaussian(0.0, 1.0);"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,401,y = -Math.abs(z) * Math.sqrt(mu) - 1.0;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,402,x = Math.floor(y);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,403,w = -z * z / 2.0 - e - x * logMeanMu;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,404,if (x < -mu) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,405,w = Double.POSITIVE_INFINITY;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,407,} else if (c1 < u && u <= c2) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,408,"double z = nextGaussian(0.0, 1.0);"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,409,y = 1.0 + Math.abs(z) * Math.sqrt(muDeltaHalf);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,410,x = Math.ceil(y);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,411,w = (-y * y + 2.0 * y) / mu2delta - e - x * logMeanMu;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,412,if (x > delta) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,413,w = Double.POSITIVE_INFINITY;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,415,} else if (c2 < u && u <= c3) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,416,x = 0.0;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,417,w = -e;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,418,} else if (c3 < u && u <= c4) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,419,x = 1.0;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,420,w = -e - logMeanMu;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,421,} else if (c4 < u) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,422,double v = nextExponential(mean);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,423,y = delta + v * 2.0 / delta * mu2delta;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,424,x = Math.ceil(y);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,425,w = -delta / mu2delta * (1.0 + y / 2.0) - e - x * logMeanMu;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,427,accept = (w <= x * Math.log(mu)
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,428,- MathUtils.factorialLog((int) (mu + x))
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,429,/ muFactorialLog);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,431,// cast to long is acceptable because both x and mu are whole
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,432,// numbers.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,433,return (long) (x + mu);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,438,* Generate a random value from a Normal (a.k.a. Gaussian) distribution with
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,439,"* the given mean, <code>mu</code> and the given standard deviation,"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,440,* <code>sigma</code>.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,442,* @param mu
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,443,*            the mean of the distribution
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,444,* @param sigma
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,445,*            the standard deviation of the distribution
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,446,* @return the random Normal value
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,448,"public double nextGaussian(double mu, double sigma) {"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,449,if (sigma <= 0) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,450,"throw new IllegalArgumentException(""Gaussian std dev must be > 0"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,452,RandomGenerator rand = getRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,453,return sigma * rand.nextGaussian() + mu;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,457,* Returns a random value from an Exponential distribution with the given
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,458,* mean.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,459,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,460,* <strong>Algorithm Description</strong>: Uses the <a
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,461,"* href=""http://www.jesus.ox.ac.uk/~clifford/a5/chap1/node5.html""> Inversion"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,462,* Method</a> to generate exponentially distributed random values from
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,463,* uniform deviates.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,464,* </p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,466,* @param mean
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,467,*            the mean of the distribution
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,468,* @return the random Exponential value
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,470,public double nextExponential(double mean) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,471,if (mean < 0.0) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,472,"throw new IllegalArgumentException(""Exponential mean must be >= 0"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,474,RandomGenerator rand = getRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,475,double unif = rand.nextDouble();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,476,while (unif == 0.0d) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,477,unif = rand.nextDouble();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,479,return -mean * Math.log(unif);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,483,* {@inheritDoc}
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,484,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,485,* <strong>Algorithm Description</strong>: scales the output of
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,486,"* Random.nextDouble(), but rejects 0 values (i.e., will generate another"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,487,* random double if Random.nextDouble() returns 0). This is necessary to
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,488,* provide a symmetric output interval (both endpoints excluded).
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,489,* </p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,491,* @param lower
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,492,*            the lower bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,493,* @param upper
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,494,*            the upper bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,495,"* @return a uniformly distributed random value from the interval (lower,"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,496,*         upper)
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,498,"public double nextUniform(double lower, double upper) {"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,499,if (lower >= upper) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,500,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,501,"""lower bound must be < upper bound"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,503,RandomGenerator rand = getRan();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,505,// ensure nextDouble() isn't 0.0
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,506,double u = rand.nextDouble();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,507,while (u <= 0.0) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,508,u = rand.nextDouble();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,511,return lower + u * (upper - lower);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,515,* Returns the RandomGenerator used to generate non-secure random data.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,516,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,517,* Creates and initializes a default generator if null.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,518,* </p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,520,* @return the Random used to generate random data
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,521,* @since 1.1
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,523,private RandomGenerator getRan() {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,524,if (rand == null) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,525,rand = new JDKRandomGenerator();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,526,rand.setSeed(System.currentTimeMillis());
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,528,return rand;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,532,* Returns the SecureRandom used to generate secure random data.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,533,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,534,* Creates and initializes if null.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,535,* </p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,537,* @return the SecureRandom used to generate secure random data
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,539,private SecureRandom getSecRan() {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,540,if (secRand == null) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,541,secRand = new SecureRandom();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,542,secRand.setSeed(System.currentTimeMillis());
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,544,return secRand;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,548,* Reseeds the random number generator with the supplied seed.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,549,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,550,* Will create and initialize if null.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,551,* </p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,553,* @param seed
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,554,*            the seed value to use
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,556,public void reSeed(long seed) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,557,if (rand == null) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,558,rand = new JDKRandomGenerator();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,560,rand.setSeed(seed);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,564,* Reseeds the secure random number generator with the current time in
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,565,* milliseconds.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,566,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,567,* Will create and initialize if null.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,568,* </p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,570,public void reSeedSecure() {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,571,if (secRand == null) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,572,secRand = new SecureRandom();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,574,secRand.setSeed(System.currentTimeMillis());
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,578,* Reseeds the secure random number generator with the supplied seed.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,579,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,580,* Will create and initialize if null.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,581,* </p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,583,* @param seed
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,584,*            the seed value to use
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,586,public void reSeedSecure(long seed) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,587,if (secRand == null) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,588,secRand = new SecureRandom();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,590,secRand.setSeed(seed);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,594,* Reseeds the random number generator with the current time in
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,595,* milliseconds.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,597,public void reSeed() {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,598,if (rand == null) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,599,rand = new JDKRandomGenerator();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,601,rand.setSeed(System.currentTimeMillis());
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,605,* Sets the PRNG algorithm for the underlying SecureRandom instance using
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,606,* the Security Provider API. The Security Provider API is defined in <a
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,607,* href =
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,608,"* ""http://java.sun.com/j2se/1.3/docs/guide/security/CryptoSpec.html#AppA"">"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,609,* Java Cryptography Architecture API Specification & Reference.</a>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,610,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,611,* <strong>USAGE NOTE:</strong> This method carries <i>significant</i>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,612,* overhead and may take several seconds to execute.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,613,* </p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,615,* @param algorithm
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,616,*            the name of the PRNG algorithm
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,617,* @param provider
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,618,*            the name of the provider
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,619,* @throws NoSuchAlgorithmException
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,620,*             if the specified algorithm is not available
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,621,* @throws NoSuchProviderException
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,622,*             if the specified provider is not installed
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,624,"public void setSecureAlgorithm(String algorithm, String provider)"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,625,"throws NoSuchAlgorithmException, NoSuchProviderException {"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,626,"secRand = SecureRandom.getInstance(algorithm, provider);"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,630,* Generates an integer array of length <code>k</code> whose entries are
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,631,"* selected randomly, without repetition, from the integers"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,632,* <code>0 through n-1</code> (inclusive).
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,633,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,634,* Generated arrays represent permutations of <code>n</code> taken
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,635,* <code>k</code> at a time.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,636,* </p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,637,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,638,* <strong>Preconditions:</strong>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,639,* <ul>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,640,* <li> <code>k <= n</code></li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,641,* <li> <code>n > 0</code></li>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,642,* </ul>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,643,"* If the preconditions are not met, an IllegalArgumentException is thrown."
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,644,* </p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,645,* <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,646,* Uses a 2-cycle permutation shuffle. The shuffling process is described <a
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,647,"* href=""http://www.maths.abdn.ac.uk/~igc/tch/mx4002/notes/node83.html"">"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,648,* here</a>.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,649,* </p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,651,* @param n
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,652,*            domain of the permutation (must be positive)
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,653,* @param k
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,654,*            size of the permutation (must satisfy 0 < k <= n).
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,655,* @return the random permutation as an int array
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,657,"public int[] nextPermutation(int n, int k) {"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,658,if (k > n) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,659,"throw new IllegalArgumentException(""permutation k exceeds n"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,661,if (k == 0) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,662,"throw new IllegalArgumentException(""permutation k must be > 0"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,665,int[] index = getNatural(n);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,666,"shuffle(index, n - k);"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,667,int[] result = new int[k];
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,668,for (int i = 0; i < k; i++) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,669,result[i] = index[n - i - 1];
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,672,return result;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,676,* Uses a 2-cycle permutation shuffle to generate a random permutation.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,677,* <strong>Algorithm Description</strong>: Uses a 2-cycle permutation
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,678,* shuffle to generate a random permutation of <code>c.size()</code> and
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,679,* then returns the elements whose indexes correspond to the elements of the
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,680,"* generated permutation. This technique is described, and proven to"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,681,"* generate random samples, <a"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,682,"* href=""http://www.maths.abdn.ac.uk/~igc/tch/mx4002/notes/node83.html"">"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,683,* here</a>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,685,* @param c
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,686,*            Collection to sample from.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,687,* @param k
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,688,*            sample size.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,689,* @return the random sample.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,691,"public Object[] nextSample(Collection<?> c, int k) {"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,692,int len = c.size();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,693,if (k > len) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,694,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,695,"""sample size exceeds collection size"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,697,if (k == 0) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,698,"throw new IllegalArgumentException(""sample size must be > 0"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,701,Object[] objects = c.toArray();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,702,"int[] index = nextPermutation(len, k);"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,703,Object[] result = new Object[k];
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,704,for (int i = 0; i < k; i++) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,705,result[i] = objects[index[i]];
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,707,return result;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,710,// ------------------------Private methods----------------------------------
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,713,* Uses a 2-cycle permutation shuffle to randomly re-order the last elements
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,714,* of list.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,716,* @param list
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,717,*            list to be shuffled
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,718,* @param end
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,719,*            element past which shuffling begins
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,721,"private void shuffle(int[] list, int end) {"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,722,int target = 0;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,723,for (int i = list.length - 1; i >= end; i--) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,724,if (i == 0) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,725,target = 0;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,726,} else {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,727,"target = nextInt(0, i);"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,729,int temp = list[target];
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,730,list[target] = list[i];
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,731,list[i] = temp;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,736,* Returns an array representing n.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,738,* @param n
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,739,*            the natural number to represent
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,740,* @return array with entries = elements of n
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,742,private int[] getNatural(int n) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,743,int[] natural = new int[n];
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,744,for (int i = 0; i < n; i++) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,745,natural[i] = i;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,747,return natural;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,22,import java.util.Iterator;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,31, @version $Revision$ $Date$
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,32,"* @version $Revision$ $Date: 2009-04-05 11:55:59 -0500 (Sun, 05 Apr"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,33,*          2009) $
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,36,ublic RandomDataTest(String name) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,37,uper(name);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,38,andomData = new RandomDataImpl();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,41,rotected long smallSampleSize = 1000;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,42,"rotected double[] expected = {250,250,250,250};"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,43,rotected int largeSampleSize = 10000;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,44,rivate String[] hex =
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,45,"""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"",""a"",""b"",""c"",""d"",""e"",""f""};"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,46,rotected RandomDataImpl randomData = null;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,47,rotected ChiSquareTestImpl testStatistic = new ChiSquareTestImpl();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,49,ublic static Test suite() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,50,estSuite suite = new TestSuite(RandomDataTest.class);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,51,"uite.setName(""RandomData Tests"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,52,eturn suite;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,55,ublic void testNextIntExtremeValues() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,56,"nt x = randomData.nextInt(Integer.MIN_VALUE, Integer.MAX_VALUE);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,57,"nt y = randomData.nextInt(Integer.MIN_VALUE, Integer.MAX_VALUE);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,58,ssertFalse(x == y);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,61,ublic void testNextLongExtremeValues() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,62,"ong x = randomData.nextLong(Long.MIN_VALUE, Long.MAX_VALUE);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,63,"ong y = randomData.nextLong(Long.MIN_VALUE, Long.MAX_VALUE);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,64,ssertFalse(x == y);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,67,** test dispersion and failure modes for nextInt() */
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,68,ublic void testNextInt() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,69,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,70,"andomData.nextInt(4,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,71,"ail(""IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,72, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,73,/ ignored
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,75,requency freq = new Frequency();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,76,nt value = 0;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,77,or (int i=0;i<smallSampleSize;i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,78,"alue = randomData.nextInt(0,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,79,"ssertTrue(""nextInt range"",(value >= 0) && (value <= 3));"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,80,req.addValue(value);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,82,ong[] observed = new long[4];
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,83,or (int i=0; i<4; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,84,bserved[i] = freq.getCount(i);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,87,"* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,88, Change to 11.34 for alpha = .01
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,90,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,91,"estStatistic.chiSquare(expected,observed) < 16.27);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,94,** test dispersion and failure modes for nextLong() */
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,95,ublic void testNextLong() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,96,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,97,"andomData.nextLong(4,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,98,"ail(""IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,99, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,100,/ ignored
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,102,requency freq = new Frequency();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,103,ong value = 0;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,104,or (int i=0;i<smallSampleSize;i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,105,"alue = randomData.nextLong(0,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,106,"ssertTrue(""nextInt range"",(value >= 0) && (value <= 3));"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,107,req.addValue(value);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,109,ong[] observed = new long[4];
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,110,or (int i=0; i<4; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,111,bserved[i] = freq.getCount(i);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,114,"* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,115, Change to 11.34 for alpha = .01
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,117,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,118,"estStatistic.chiSquare(expected,observed) < 16.27);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,121,** test dispersion and failure modes for nextSecureLong() */
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,122,ublic void testNextSecureLong() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,123,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,124,"andomData.nextSecureLong(4,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,125,"ail(""IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,126, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,127,/ ignored
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,129,requency freq = new Frequency();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,130,ong value = 0;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,131,or (int i=0;i<smallSampleSize;i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,132,"alue = randomData.nextSecureLong(0,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,133,"ssertTrue(""nextInt range"",(value >= 0) && (value <= 3));"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,134,req.addValue(value);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,136,ong[] observed = new long[4];
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,137,or (int i=0; i<4; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,138,bserved[i] = freq.getCount(i);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,141,"* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,142, Change to 11.34 for alpha = .01
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,144,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,145,"estStatistic.chiSquare(expected,observed) < 16.27);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,148,** test dispersion and failure modes for nextSecureInt() */
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,149,ublic void testNextSecureInt() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,150,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,151,"andomData.nextSecureInt(4,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,152,"ail(""IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,153, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,154,/ ignored
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,156,requency freq = new Frequency();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,157,nt value = 0;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,158,or (int i=0;i<smallSampleSize;i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,159,"alue = randomData.nextSecureInt(0,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,160,"ssertTrue(""nextInt range"",(value >= 0) && (value <= 3));"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,161,req.addValue(value);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,163,ong[] observed = new long[4];
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,164,or (int i=0; i<4; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,165,bserved[i] = freq.getCount(i);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,168,"* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,169, Change to 11.34 for alpha = .01
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,171,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,172,"estStatistic.chiSquare(expected,observed) < 16.27);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,176, Make sure that empirical distribution of random Poisson(4)'s
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,177, has P(X <= 5) close to actual cumulative Poisson probablity
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,178, and that nextPoisson fails when mean is non-positive
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,179," TODO: replace with statistical test, adding test stat to TestStatistic"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,181,ublic void testNextPoisson() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,182,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,183,andomData.nextPoisson(0);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,184,"ail(""zero mean -- expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,185, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,186,/ ignored
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,188,requency f = new Frequency();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,189,or (int i = 0; i<largeSampleSize; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,190,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,191,.addValue(randomData.nextPoisson(4.0d));
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,192, catch (Exception ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,193,ail(ex.getMessage());
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,196,ong cumFreq = f.getCount(0) + f.getCount(1) + f.getCount(2) +
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,197,.getCount(3) + f.getCount(4) + f.getCount(5);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,198,ong sumFreq = f.getSumFreq();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,199,ouble cumPct =
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,200,ouble.valueOf(cumFreq).doubleValue()/Double.valueOf(sumFreq).doubleValue();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,201,"ssertEquals(""cum Poisson(4)"",cumPct,0.7851,0.2);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,202,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,203,andomData.nextPoisson(-1);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,204,"ail(""negative mean supplied -- IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,205, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,206,/ ignored
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,208,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,209,andomData.nextPoisson(0);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,210,"ail(""0 mean supplied -- IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,211, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,212,/ ignored
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,217,** test dispersion and failute modes for nextHex() */
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,218,ublic void testNextHex() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,219,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,220,andomData.nextHexString(-1);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,221,"ail(""negative length supplied -- IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,222, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,223,/ ignored
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,225,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,226,andomData.nextHexString(0);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,227,"ail(""zero length supplied -- IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,228, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,229,/ ignored
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,231,tring hexString = randomData.nextHexString(3);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,232,f (hexString.length() != 3) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,233,"ail(""incorrect length for generated string"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,235,exString = randomData.nextHexString(1);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,236,f (hexString.length() != 1) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,237,"ail(""incorrect length for generated string"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,239,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,240,exString = randomData.nextHexString(0);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,241,"ail(""zero length requested -- expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,242, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,243,/ ignored
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,245,f (hexString.length() != 1) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,246,"ail(""incorrect length for generated string"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,248,requency f = new Frequency();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,249,or (int i = 0; i < smallSampleSize; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,250,exString = randomData.nextHexString(100);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,251,f (hexString.length() != 100) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,252,"ail(""incorrect length for generated string"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,254,or (int j = 0; j < hexString.length(); j++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,255,".addValue(hexString.substring(j,j+1));"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,258,ouble[] expected = new double[16];
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,259,ong[] observed = new long[16];
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,260,or (int i = 0; i < 16; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,261,xpected[i] = (double)smallSampleSize*100/16;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,262,bserved[i] = f.getCount(hex[i]);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,264,"* Use ChiSquare dist with df = 16-1 = 15, alpha = .001"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,265, Change to 30.58 for alpha = .01
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,267,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,268,"estStatistic.chiSquare(expected,observed) < 37.70);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,271,** test dispersion and failute modes for nextHex() */
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,272,ublic void testNextSecureHex() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,273,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,274,andomData.nextSecureHexString(-1);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,275,"ail(""negative length -- IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,276, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,277,/ ignored
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,279,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,280,andomData.nextSecureHexString(0);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,281,"ail(""zero length -- IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,282, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,283,/ ignored
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,285,tring hexString = randomData.nextSecureHexString(3);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,286,f (hexString.length() != 3) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,287,"ail(""incorrect length for generated string"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,289,exString = randomData.nextSecureHexString(1);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,290,f (hexString.length() != 1) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,291,"ail(""incorrect length for generated string"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,293,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,294,exString = randomData.nextSecureHexString(0);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,295,"ail(""zero length requested -- expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,296, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,297,/ ignored
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,299,f (hexString.length() != 1) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,300,"ail(""incorrect length for generated string"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,302,requency f = new Frequency();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,303,or (int i = 0; i < smallSampleSize; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,304,exString = randomData.nextSecureHexString(100);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,305,f (hexString.length() != 100) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,306,"ail(""incorrect length for generated string"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,308,or (int j = 0; j < hexString.length(); j++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,309,".addValue(hexString.substring(j,j+1));"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,312,ouble[] expected = new double[16];
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,313,ong[] observed = new long[16];
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,314,or (int i = 0; i < 16; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,315,xpected[i] = (double)smallSampleSize*100/16;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,316,bserved[i] = f.getCount(hex[i]);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,318,"* Use ChiSquare dist with df = 16-1 = 15, alpha = .001"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,319, Change to 30.58 for alpha = .01
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,321,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,322,"estStatistic.chiSquare(expected,observed) < 37.70);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,325,** test failure modes and dispersion of nextUniform() */
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,326,ublic void testNextUniform() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,327,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,328,"andomData.nextUniform(4,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,329,"ail(""IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,330, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,331,/ ignored
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,333,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,334,"andomData.nextUniform(3,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,335,"ail(""IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,336, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,337,/ ignored
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,339,"ouble[] expected = {500,500};"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,340,"ong[] observed = {0,0};"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,341,ouble lower = -1d;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,342,ouble upper = 20d;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,343,ouble midpoint = (lower + upper)/2d;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,344,ouble result = 0;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,345,or (int i = 0; i < 1000; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,346,"esult = randomData.nextUniform(lower,upper);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,347,f ((result == lower) || (result == upper)) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,348,"ail(""generated value equal to an endpoint: "" + result);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,350,f (result < midpoint) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,351,bserved[0]++;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,352, else {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,353,bserved[1]++;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,356,"* Use ChiSquare dist with df = 2-1 = 1, alpha = .001"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,357, Change to 6.64 for alpha = .01
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,359,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,360,"estStatistic.chiSquare(expected,observed) < 10.83);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,363,** test exclusive endpoints of nextUniform **/
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,364,ublic void testNextUniformExclusiveEndpoints() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,365,or (int i = 0; i < 1000; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,366,"ouble u = randomData.nextUniform(0.99, 1);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,367,ssertTrue(u > 0.99 && u < 1);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,371,** test failure modes and distribution of nextGaussian() */
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,372,ublic void testNextGaussian() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,373,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,374,"andomData.nextGaussian(0,0);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,375,"ail(""zero sigma -- IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,376, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,377,/ ignored
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,379,ummaryStatistics u = new SummaryStatistics();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,380,or (int i = 0; i<largeSampleSize; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,381,".addValue(randomData.nextGaussian(0,1));"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,383,ouble xbar = u.getMean();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,384,ouble s = u.getStandardDeviation();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,385,ouble n = u.getN();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,386,"* t-test at .001-level TODO: replace with externalized t-test, with"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,387, test statistic defined in TestStatistic
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,389,ssertTrue(Math.abs(xbar)/(s/Math.sqrt(n))< 3.29);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,392,** test failure modes and distribution of nextExponential() */
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,393,ublic void testNextExponential() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,394,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,395,andomData.nextExponential(-1);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,396,"ail(""negative mean -- expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,397, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,398,/ ignored
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,400,"ssertEquals(""0 mean"", 0,randomData.nextExponential(0),10E-8);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,401,ong cumFreq = 0;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,402,ouble v = 0;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,403,or (int i = 0; i < largeSampleSize; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,404, = randomData.nextExponential(1);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,405,"ssertTrue(""exponential deviate postive"", v > 0);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,406,f (v < 2) cumFreq++;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,408,"* TODO: Replace with a statistical test, with statistic added to"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,409, TestStatistic.  Check below compares observed cumulative distribution
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,410, evaluated at 2 with exponential CDF
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,412,"ssertEquals(""exponential cumulative distribution"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,413,"double)cumFreq/(double)largeSampleSize,0.8646647167633873,.2);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,416,"** test reseeding, algorithm/provider games */"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,417,ublic void testConfig() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,418,andomData.reSeed(1000);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,419,"ouble v = randomData.nextUniform(0,1);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,420,andomData.reSeed();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,421,"ssertTrue(""different seeds"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,422,"ath.abs(v - randomData.nextUniform(0,1)) > 10E-12);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,423,andomData.reSeed(1000);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,424,"ssertEquals(""same seeds"",v,randomData.nextUniform(0,1),10E-12);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,425,andomData.reSeedSecure(1000);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,426,tring hex = randomData.nextSecureHexString(40);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,427,andomData.reSeedSecure();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,428,"ssertTrue(""different seeds"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,429,hex.equals(randomData.nextSecureHexString(40)));
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,430,andomData.reSeedSecure(1000);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,431,"ssertTrue(""same seeds"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,432,hex.equals(randomData.nextSecureHexString(40)));
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,434,"* remove this test back soon,"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,435, since it takes about 4 seconds
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,437,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,438,"andomData.setSecureAlgorithm(""SHA1PRNG"",""SUN"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,439, catch (NoSuchProviderException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,442,"ssertTrue(""different seeds"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,443,hex.equals(randomData.nextSecureHexString(40)));
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,444,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,445,"andomData.setSecureAlgorithm(""NOSUCHTHING"",""SUN"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,446,"ail(""expecting NoSuchAlgorithmException"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,447, catch (NoSuchProviderException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,449, catch (NoSuchAlgorithmException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,453,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,454,"andomData.setSecureAlgorithm(""SHA1PRNG"",""NOSUCHPROVIDER"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,455,"ail(""expecting NoSuchProviderException"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,456, catch (NoSuchProviderException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,461,/ test reseeding without first using the generators
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,462,andomDataImpl rd = new RandomDataImpl();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,463,d.reSeed(100);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,464,"d.nextLong(1,2);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,465,andomDataImpl rd2 = new RandomDataImpl();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,466,d2.reSeedSecure(2000);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,467,"d2.nextSecureLong(1,2);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,468,d = new RandomDataImpl();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,469,d.reSeed();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,470,"d.nextLong(1,2);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,471,d2 = new RandomDataImpl();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,472,d2.reSeedSecure();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,473,"d2.nextSecureLong(1,2);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,476,** tests for nextSample() sampling from Collection */
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,477,ublic void testNextSample() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,478,"bject[][] c = {{""0"",""1""},{""0"",""2""},{""0"",""3""},{""0"",""4""},{""1"",""2""},"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,479,"""1"",""3""},{""1"",""4""},{""2"",""3""},{""2"",""4""},{""3"",""4""}};"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,480,"ong[] observed = {0,0,0,0,0,0,0,0,0,0};"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,481,"ouble[] expected = {100,100,100,100,100,100,100,100,100,100};"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,483,"ashSet<Object> cPop = new HashSet<Object>();  //{0,1,2,3,4}"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,484,or (int i = 0; i < 5; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,485,Pop.add(Integer.toString(i));
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,488,bject[] sets = new Object[10]; // 2-sets from 5
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,489,or (int i = 0; i < 10; i ++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,490,ashSet<Object> hs = new HashSet<Object>();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,491,s.add(c[i][0]);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,492,s.add(c[i][1]);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,493,ets[i] = hs;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,496,or (int i = 0; i < 1000; i ++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,497,"bject[] cSamp = randomData.nextSample(cPop,2);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,498,"bserved[findSample(sets,cSamp)]++;"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,501,"* Use ChiSquare dist with df = 10-1 = 9, alpha = .001"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,502, Change to 21.67 for alpha = .01
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,504,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,505,"estStatistic.chiSquare(expected,observed) < 27.88);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,507,/ Make sure sample of size = size of collection returns same collection
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,508,ashSet<Object> hs = new HashSet<Object>();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,509,"s.add(""one"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,510,"bject[] one = randomData.nextSample(hs,1);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,511,tring oneString = (String) one[0];
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,512,"f ((one.length != 1) || !oneString.equals(""one"")){"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,513,"ail(""bad sample for set size = 1, sample size = 1"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,516,/ Make sure we fail for sample size > collection size
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,517,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,518,"ne = randomData.nextSample(hs,2);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,519,"ail(""sample size > set size, expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,520, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,521,/ ignored
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,524,/ Make sure we fail for empty collection
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,525,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,526,s = new HashSet<Object>();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,527,"ne = randomData.nextSample(hs,0);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,528,"ail(""n = k = 0, expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,529, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,530,/ ignored
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,534,"SuppressWarnings(""unchecked"")"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,535,"rivate int findSample(Object[] u, Object[] samp) {"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,536,or (int i = 0; i < u.length; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,537,ashSet<Object> set = (HashSet<Object>) u[i];
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,538,ashSet<Object> sampSet = new HashSet<Object>();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,539,or (int j = 0; j < samp.length; j++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,540,ampSet.add(samp[j]);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,542,f (set.equals(sampSet)) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,543,eturn i;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,546,"ail(""sample not found:{"" + samp[0] + "","" + samp[1] + ""}"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,547,eturn -1;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,550,** tests for nextPermutation */
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,551,ublic void testNextPermutation() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,552,"nt[][] p = {{0,1,2},{0,2,1},{1,0,2},{1,2,0},{2,0,1},{2,1,0}};"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,553,"ong[] observed = {0,0,0,0,0,0};"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,554,"ouble[] expected = {100,100,100,100,100,100};"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,556,or (int i = 0; i < 600; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,557,"nt[] perm = randomData.nextPermutation(3,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,558,"bserved[findPerm(p,perm)]++;"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,561,"* Use ChiSquare dist with df = 6-1 = 5, alpha = .001"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,562, Change to 15.09 for alpha = .01
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,564,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,565,"estStatistic.chiSquare(expected,observed) < 20.52);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,567,/ Check size = 1 boundary case
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,568,"nt[] perm = randomData.nextPermutation(1,1);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,569,f ((perm.length != 1) || (perm[0] != 0)){
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,570,"ail(""bad permutation for n = 1, sample k = 1"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,572,/ Make sure we fail for k size > n
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,573,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,574,"erm = randomData.nextPermutation(2,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,575,"ail(""permutation k > n, expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,576, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,577,/ ignored
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,580,/ Make sure we fail for n = 0
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,581,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,582,"erm = randomData.nextPermutation(0,0);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,583,"ail(""permutation k = n = 0, expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,584, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,585,/ ignored
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,588,/ Make sure we fail for k < n < 0
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,589,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,590,"erm = randomData.nextPermutation(-1,-3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,591,"ail(""permutation k < n < 0, expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,592, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,593,/ ignored
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,599,"rivate int findPerm(int[][] p, int[] samp) {"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,600,or (int i = 0; i < p.length; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,601,oolean good = true;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,602,or (int j = 0; j < samp.length; j++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,603,f (samp[j] != p[i][j]) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,604,ood = false;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,607,f (good)  {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,608,eturn i;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,611,"ail(""permutation not found"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,612,eturn -1;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,38,public RandomDataTest(String name) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,39,super(name);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,40,randomData = new RandomDataImpl();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,43,protected long smallSampleSize = 1000;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,44,"protected double[] expected = { 250, 250, 250, 250 };"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,45,protected int largeSampleSize = 10000;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,46,"private String[] hex = { ""0"", ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"","
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,47,"""a"", ""b"", ""c"", ""d"", ""e"", ""f"" };"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,48,protected RandomDataImpl randomData = null;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,49,protected ChiSquareTestImpl testStatistic = new ChiSquareTestImpl();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,51,public static Test suite() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,52,TestSuite suite = new TestSuite(RandomDataTest.class);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,53,"suite.setName(""RandomData Tests"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,54,return suite;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,57,public void testNextIntExtremeValues() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,58,"int x = randomData.nextInt(Integer.MIN_VALUE, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,59,"int y = randomData.nextInt(Integer.MIN_VALUE, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,60,assertFalse(x == y);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,63,public void testNextLongExtremeValues() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,64,"long x = randomData.nextLong(Long.MIN_VALUE, Long.MAX_VALUE);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,65,"long y = randomData.nextLong(Long.MIN_VALUE, Long.MAX_VALUE);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,66,assertFalse(x == y);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,69,/** test dispersion and failure modes for nextInt() */
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,70,public void testNextInt() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,71,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,72,"randomData.nextInt(4, 3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,73,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,74,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,75,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,77,Frequency freq = new Frequency();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,78,int value = 0;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,79,for (int i = 0; i < smallSampleSize; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,80,"value = randomData.nextInt(0, 3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,81,"assertTrue(""nextInt range"", (value >= 0) && (value <= 3));"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,82,freq.addValue(value);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,84,long[] observed = new long[4];
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,85,for (int i = 0; i < 4; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,86,observed[i] = freq.getCount(i);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,90,"* Use ChiSquare dist with df = 4-1 = 3, alpha = .001 Change to 11.34"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,91,* for alpha = .01
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,93,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,94,"testStatistic.chiSquare(expected, observed) < 16.27);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,97,/** test dispersion and failure modes for nextLong() */
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,98,public void testNextLong() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,99,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,100,"randomData.nextLong(4, 3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,101,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,102,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,103,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,105,Frequency freq = new Frequency();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,106,long value = 0;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,107,for (int i = 0; i < smallSampleSize; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,108,"value = randomData.nextLong(0, 3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,109,"assertTrue(""nextInt range"", (value >= 0) && (value <= 3));"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,110,freq.addValue(value);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,112,long[] observed = new long[4];
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,113,for (int i = 0; i < 4; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,114,observed[i] = freq.getCount(i);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,118,"* Use ChiSquare dist with df = 4-1 = 3, alpha = .001 Change to 11.34"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,119,* for alpha = .01
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,121,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,122,"testStatistic.chiSquare(expected, observed) < 16.27);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,125,/** test dispersion and failure modes for nextSecureLong() */
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,126,public void testNextSecureLong() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,127,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,128,"randomData.nextSecureLong(4, 3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,129,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,130,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,131,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,133,Frequency freq = new Frequency();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,134,long value = 0;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,135,for (int i = 0; i < smallSampleSize; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,136,"value = randomData.nextSecureLong(0, 3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,137,"assertTrue(""nextInt range"", (value >= 0) && (value <= 3));"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,138,freq.addValue(value);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,140,long[] observed = new long[4];
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,141,for (int i = 0; i < 4; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,142,observed[i] = freq.getCount(i);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,146,"* Use ChiSquare dist with df = 4-1 = 3, alpha = .001 Change to 11.34"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,147,* for alpha = .01
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,149,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,150,"testStatistic.chiSquare(expected, observed) < 16.27);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,153,/** test dispersion and failure modes for nextSecureInt() */
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,154,public void testNextSecureInt() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,155,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,156,"randomData.nextSecureInt(4, 3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,157,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,158,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,159,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,161,Frequency freq = new Frequency();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,162,int value = 0;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,163,for (int i = 0; i < smallSampleSize; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,164,"value = randomData.nextSecureInt(0, 3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,165,"assertTrue(""nextInt range"", (value >= 0) && (value <= 3));"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,166,freq.addValue(value);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,168,long[] observed = new long[4];
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,169,for (int i = 0; i < 4; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,170,observed[i] = freq.getCount(i);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,174,"* Use ChiSquare dist with df = 4-1 = 3, alpha = .001 Change to 11.34"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,175,* for alpha = .01
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,177,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,178,"testStatistic.chiSquare(expected, observed) < 16.27);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,182,* Make sure that empirical distribution of random Poisson(4)'s has P(X <=
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,183,* 5) close to actual cumulative Poisson probablity and that nextPoisson
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,184,"* fails when mean is non-positive TODO: replace with statistical test,"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,185,* adding test stat to TestStatistic
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,187,public void testNextPoisson() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,188,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,189,randomData.nextPoisson(0);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,190,"fail(""zero mean -- expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,191,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,192,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,194,Frequency f = new Frequency();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,195,for (int i = 0; i < largeSampleSize; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,196,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,197,f.addValue(randomData.nextPoisson(4.0d));
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,198,} catch (Exception ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,199,fail(ex.getMessage());
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,202,long cumFreq = f.getCount(0) + f.getCount(1) + f.getCount(2)
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,203,+ f.getCount(3) + f.getCount(4) + f.getCount(5);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,204,long sumFreq = f.getSumFreq();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,205,double cumPct = Double.valueOf(cumFreq).doubleValue()
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,206,/ Double.valueOf(sumFreq).doubleValue();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,207,"assertEquals(""cum Poisson(4)"", cumPct, 0.7851, 0.2);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,208,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,209,randomData.nextPoisson(-1);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,210,"fail(""negative mean supplied -- IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,211,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,212,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,214,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,215,randomData.nextPoisson(0);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,216,"fail(""0 mean supplied -- IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,217,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,218,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,223,public void testNextPoissonLargeMean() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,224,for (int i = 0; i < 1000; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,225,long n = randomData.nextPoisson(1500.0);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,226,assertTrue(0 <= n);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,230,/** test dispersion and failute modes for nextHex() */
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,231,public void testNextHex() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,232,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,233,randomData.nextHexString(-1);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,234,"fail(""negative length supplied -- IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,235,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,236,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,238,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,239,randomData.nextHexString(0);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,240,"fail(""zero length supplied -- IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,241,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,242,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,244,String hexString = randomData.nextHexString(3);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,245,if (hexString.length() != 3) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,246,"fail(""incorrect length for generated string"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,248,hexString = randomData.nextHexString(1);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,249,if (hexString.length() != 1) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,250,"fail(""incorrect length for generated string"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,252,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,253,hexString = randomData.nextHexString(0);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,254,"fail(""zero length requested -- expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,255,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,256,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,258,if (hexString.length() != 1) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,259,"fail(""incorrect length for generated string"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,261,Frequency f = new Frequency();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,262,for (int i = 0; i < smallSampleSize; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,263,hexString = randomData.nextHexString(100);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,264,if (hexString.length() != 100) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,265,"fail(""incorrect length for generated string"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,267,for (int j = 0; j < hexString.length(); j++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,268,"f.addValue(hexString.substring(j, j + 1));"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,271,double[] expected = new double[16];
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,272,long[] observed = new long[16];
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,273,for (int i = 0; i < 16; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,274,expected[i] = (double) smallSampleSize * 100 / 16;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,275,observed[i] = f.getCount(hex[i]);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,278,"* Use ChiSquare dist with df = 16-1 = 15, alpha = .001 Change to 30.58"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,279,* for alpha = .01
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,281,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,282,"testStatistic.chiSquare(expected, observed) < 37.70);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,285,/** test dispersion and failute modes for nextHex() */
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,286,public void testNextSecureHex() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,287,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,288,randomData.nextSecureHexString(-1);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,289,"fail(""negative length -- IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,290,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,291,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,293,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,294,randomData.nextSecureHexString(0);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,295,"fail(""zero length -- IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,296,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,297,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,299,String hexString = randomData.nextSecureHexString(3);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,300,if (hexString.length() != 3) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,301,"fail(""incorrect length for generated string"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,303,hexString = randomData.nextSecureHexString(1);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,304,if (hexString.length() != 1) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,305,"fail(""incorrect length for generated string"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,307,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,308,hexString = randomData.nextSecureHexString(0);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,309,"fail(""zero length requested -- expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,310,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,311,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,313,if (hexString.length() != 1) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,314,"fail(""incorrect length for generated string"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,316,Frequency f = new Frequency();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,317,for (int i = 0; i < smallSampleSize; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,318,hexString = randomData.nextSecureHexString(100);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,319,if (hexString.length() != 100) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,320,"fail(""incorrect length for generated string"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,322,for (int j = 0; j < hexString.length(); j++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,323,"f.addValue(hexString.substring(j, j + 1));"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,326,double[] expected = new double[16];
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,327,long[] observed = new long[16];
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,328,for (int i = 0; i < 16; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,329,expected[i] = (double) smallSampleSize * 100 / 16;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,330,observed[i] = f.getCount(hex[i]);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,333,"* Use ChiSquare dist with df = 16-1 = 15, alpha = .001 Change to 30.58"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,334,* for alpha = .01
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,336,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,337,"testStatistic.chiSquare(expected, observed) < 37.70);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,340,/** test failure modes and dispersion of nextUniform() */
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,341,public void testNextUniform() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,342,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,343,"randomData.nextUniform(4, 3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,344,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,345,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,346,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,348,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,349,"randomData.nextUniform(3, 3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,350,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,351,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,352,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,354,"double[] expected = { 500, 500 };"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,355,"long[] observed = { 0, 0 };"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,356,double lower = -1d;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,357,double upper = 20d;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,358,double midpoint = (lower + upper) / 2d;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,359,double result = 0;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,360,for (int i = 0; i < 1000; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,361,"result = randomData.nextUniform(lower, upper);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,362,if ((result == lower) || (result == upper)) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,363,"fail(""generated value equal to an endpoint: "" + result);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,365,if (result < midpoint) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,366,observed[0]++;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,367,} else {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,368,observed[1]++;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,372,"* Use ChiSquare dist with df = 2-1 = 1, alpha = .001 Change to 6.64 for"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,373,* alpha = .01
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,375,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,376,"testStatistic.chiSquare(expected, observed) < 10.83);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,379,/** test exclusive endpoints of nextUniform **/
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,380,public void testNextUniformExclusiveEndpoints() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,381,for (int i = 0; i < 1000; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,382,"double u = randomData.nextUniform(0.99, 1);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,383,assertTrue(u > 0.99 && u < 1);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,387,/** test failure modes and distribution of nextGaussian() */
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,388,public void testNextGaussian() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,389,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,390,"randomData.nextGaussian(0, 0);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,391,"fail(""zero sigma -- IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,392,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,393,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,395,SummaryStatistics u = new SummaryStatistics();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,396,for (int i = 0; i < largeSampleSize; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,397,"u.addValue(randomData.nextGaussian(0, 1));"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,399,double xbar = u.getMean();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,400,double s = u.getStandardDeviation();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,401,double n = u.getN();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,403,"* t-test at .001-level TODO: replace with externalized t-test, with"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,404,* test statistic defined in TestStatistic
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,406,assertTrue(Math.abs(xbar) / (s / Math.sqrt(n)) < 3.29);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,409,/** test failure modes and distribution of nextExponential() */
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,410,public void testNextExponential() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,411,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,412,randomData.nextExponential(-1);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,413,"fail(""negative mean -- expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,414,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,415,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,417,"assertEquals(""0 mean"", 0, randomData.nextExponential(0), 10E-8);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,418,long cumFreq = 0;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,419,double v = 0;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,420,for (int i = 0; i < largeSampleSize; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,421,v = randomData.nextExponential(1);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,422,"assertTrue(""exponential deviate postive"", v > 0);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,423,if (v < 2)
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,424,cumFreq++;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,427,"* TODO: Replace with a statistical test, with statistic added to"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,428,* TestStatistic. Check below compares observed cumulative distribution
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,429,* evaluated at 2 with exponential CDF
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,431,"assertEquals(""exponential cumulative distribution"", (double) cumFreq"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,432,"/ (double) largeSampleSize, 0.8646647167633873, .2);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,435,"/** test reseeding, algorithm/provider games */"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,436,public void testConfig() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,437,randomData.reSeed(1000);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,438,"double v = randomData.nextUniform(0, 1);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,439,randomData.reSeed();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,440,"assertTrue(""different seeds"", Math"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,441,".abs(v - randomData.nextUniform(0, 1)) > 10E-12);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,442,randomData.reSeed(1000);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,443,"assertEquals(""same seeds"", v, randomData.nextUniform(0, 1), 10E-12);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,444,randomData.reSeedSecure(1000);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,445,String hex = randomData.nextSecureHexString(40);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,446,randomData.reSeedSecure();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,447,"assertTrue(""different seeds"", !hex.equals(randomData"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,448,.nextSecureHexString(40)));
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,449,randomData.reSeedSecure(1000);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,450,"assertTrue(""same seeds"", !hex"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,451,.equals(randomData.nextSecureHexString(40)));
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,454,"* remove this test back soon, since it takes about 4 seconds"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,456,"* try { randomData.setSecureAlgorithm(""SHA1PRNG"",""SUN""); } catch"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,457,"* (NoSuchProviderException ex) { ; } assertTrue(""different seeds"","
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,458,* !hex.equals(randomData.nextSecureHexString(40))); try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,459,"* randomData.setSecureAlgorithm(""NOSUCHTHING"",""SUN"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,460,"* fail(""expecting NoSuchAlgorithmException""); } catch"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,461,* (NoSuchProviderException ex) { ; } catch (NoSuchAlgorithmException
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,462,* ex) { ; }
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,464,"* try { randomData.setSecureAlgorithm(""SHA1PRNG"",""NOSUCHPROVIDER"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,465,"* fail(""expecting NoSuchProviderException""); } catch"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,466,* (NoSuchProviderException ex) { ; }
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,469,// test reseeding without first using the generators
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,470,RandomDataImpl rd = new RandomDataImpl();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,471,rd.reSeed(100);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,472,"rd.nextLong(1, 2);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,473,RandomDataImpl rd2 = new RandomDataImpl();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,474,rd2.reSeedSecure(2000);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,475,"rd2.nextSecureLong(1, 2);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,476,rd = new RandomDataImpl();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,477,rd.reSeed();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,478,"rd.nextLong(1, 2);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,479,rd2 = new RandomDataImpl();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,480,rd2.reSeedSecure();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,481,"rd2.nextSecureLong(1, 2);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,484,/** tests for nextSample() sampling from Collection */
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,485,public void testNextSample() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,486,"Object[][] c = { { ""0"", ""1"" }, { ""0"", ""2"" }, { ""0"", ""3"" },"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,487,"{ ""0"", ""4"" }, { ""1"", ""2"" }, { ""1"", ""3"" }, { ""1"", ""4"" },"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,488,"{ ""2"", ""3"" }, { ""2"", ""4"" }, { ""3"", ""4"" } };"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,489,"long[] observed = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,490,"double[] expected = { 100, 100, 100, 100, 100, 100, 100, 100, 100, 100 };"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,492,"HashSet<Object> cPop = new HashSet<Object>(); // {0,1,2,3,4}"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,493,for (int i = 0; i < 5; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,494,cPop.add(Integer.toString(i));
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,497,Object[] sets = new Object[10]; // 2-sets from 5
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,498,for (int i = 0; i < 10; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,499,HashSet<Object> hs = new HashSet<Object>();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,500,hs.add(c[i][0]);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,501,hs.add(c[i][1]);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,502,sets[i] = hs;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,505,for (int i = 0; i < 1000; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,506,"Object[] cSamp = randomData.nextSample(cPop, 2);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,507,"observed[findSample(sets, cSamp)]++;"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,511,"* Use ChiSquare dist with df = 10-1 = 9, alpha = .001 Change to 21.67"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,512,* for alpha = .01
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,514,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,515,"testStatistic.chiSquare(expected, observed) < 27.88);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,517,// Make sure sample of size = size of collection returns same collection
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,518,HashSet<Object> hs = new HashSet<Object>();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,519,"hs.add(""one"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,520,"Object[] one = randomData.nextSample(hs, 1);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,521,String oneString = (String) one[0];
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,522,"if ((one.length != 1) || !oneString.equals(""one"")) {"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,523,"fail(""bad sample for set size = 1, sample size = 1"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,526,// Make sure we fail for sample size > collection size
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,527,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,528,"one = randomData.nextSample(hs, 2);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,529,"fail(""sample size > set size, expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,530,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,531,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,534,// Make sure we fail for empty collection
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,535,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,536,hs = new HashSet<Object>();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,537,"one = randomData.nextSample(hs, 0);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,538,"fail(""n = k = 0, expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,539,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,540,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,544,"@SuppressWarnings(""unchecked"")"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,545,"private int findSample(Object[] u, Object[] samp) {"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,546,for (int i = 0; i < u.length; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,547,HashSet<Object> set = (HashSet<Object>) u[i];
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,548,HashSet<Object> sampSet = new HashSet<Object>();
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,549,for (int j = 0; j < samp.length; j++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,550,sampSet.add(samp[j]);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,552,if (set.equals(sampSet)) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,553,return i;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,556,"fail(""sample not found:{"" + samp[0] + "","" + samp[1] + ""}"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,557,return -1;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,560,/** tests for nextPermutation */
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,561,public void testNextPermutation() {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,562,"int[][] p = { { 0, 1, 2 }, { 0, 2, 1 }, { 1, 0, 2 }, { 1, 2, 0 },"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,563,"{ 2, 0, 1 }, { 2, 1, 0 } };"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,564,"long[] observed = { 0, 0, 0, 0, 0, 0 };"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,565,"double[] expected = { 100, 100, 100, 100, 100, 100 };"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,567,for (int i = 0; i < 600; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,568,"int[] perm = randomData.nextPermutation(3, 3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,569,"observed[findPerm(p, perm)]++;"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,573,"* Use ChiSquare dist with df = 6-1 = 5, alpha = .001 Change to 15.09"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,574,* for alpha = .01
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,576,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,577,"testStatistic.chiSquare(expected, observed) < 20.52);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,579,// Check size = 1 boundary case
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,580,"int[] perm = randomData.nextPermutation(1, 1);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,581,if ((perm.length != 1) || (perm[0] != 0)) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,582,"fail(""bad permutation for n = 1, sample k = 1"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,584,// Make sure we fail for k size > n
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,585,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,586,"perm = randomData.nextPermutation(2, 3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,587,"fail(""permutation k > n, expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,588,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,589,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,592,// Make sure we fail for n = 0
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,593,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,594,"perm = randomData.nextPermutation(0, 0);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,595,"fail(""permutation k = n = 0, expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,596,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,597,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,600,// Make sure we fail for k < n < 0
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,601,try {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,602,"perm = randomData.nextPermutation(-1, -3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,603,"fail(""permutation k < n < 0, expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,604,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,605,// ignored
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,611,"private int findPerm(int[][] p, int[] samp) {"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,612,for (int i = 0; i < p.length; i++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,613,boolean good = true;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,614,for (int j = 0; j < samp.length; j++) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,615,if (samp[j] != p[i][j]) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,616,good = false;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,619,if (good) {
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,620,return i;
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,623,"fail(""permutation not found"");"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,624,return -1;

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,23,mport org.apache.commons.math.exception.MathInternalError;
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,77,"/ by default, do simple root finding using bracketing and default solver."
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,78,/ subclasses can override if there is a better method.
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,79,nivariateFunction rootFindingFunction =
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,80,ew UnivariateFunction() {
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,81,ublic double value(double x) {
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,75,double lowerBound = getSupportLowerBound();
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,76,if (p == 0.0) {
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,77,return lowerBound;
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,80,double upperBound = getSupportUpperBound();
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,81,if (p == 1.0) {
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,82,return upperBound;
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,85,final double mu = getNumericalMean();
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,86,final double sig = FastMath.sqrt(getNumericalVariance());
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,87,final boolean chebyshevApplies;
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,88,chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,89,Double.isInfinite(sig) || Double.isNaN(sig));
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,91,if (lowerBound == Double.NEGATIVE_INFINITY) {
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,92,if (chebyshevApplies) {
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,93,lowerBound = mu - sig * FastMath.sqrt((1. - p) / p);
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,94,} else {
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,95,lowerBound = -1.0;
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,96,while (cumulativeProbability(lowerBound) >= p) {
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,97,lowerBound *= 2.0;
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,102,if (upperBound == Double.POSITIVE_INFINITY) {
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,103,if (chebyshevApplies) {
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,104,upperBound = mu + sig * FastMath.sqrt(p / (1. - p));
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,105,} else {
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,106,upperBound = 1.0;
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,107,while (cumulativeProbability(upperBound) < p) {
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,108,upperBound *= 2.0;
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,113,final UnivariateFunction toSolve = new UnivariateFunction() {
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,115,public double value(final double x) {
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,86,"/ Try to bracket root, test domain endpoints if this fails"
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,87,ouble lowerBound = getDomainLowerBound(p);
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,88,ouble upperBound = getDomainUpperBound(p);
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,89,ouble[] bracket = null;
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,90,ry {
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,91,racket = UnivariateRealSolverUtils.bracket(
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,92,"ootFindingFunction, getInitialDomain(p),"
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,93,"owerBound, upperBound);"
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,94, catch (NumberIsTooLargeException ex) {
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,96, Check domain endpoints to see if one gives value that is within
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,97, the default solver's defaultAbsoluteAccuracy of 0 (will be the
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,98, case if density has bounded support and p is 0 or 1).
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,100,f (FastMath.abs(rootFindingFunction.value(lowerBound)) < getSolverAbsoluteAccuracy()) {
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,101,eturn lowerBound;
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,103,f (FastMath.abs(rootFindingFunction.value(upperBound)) < getSolverAbsoluteAccuracy()) {
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,104,eturn upperBound;
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,120,"double x = UnivariateRealSolverUtils.solve(toSolve,"
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,121,"lowerBound,"
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,122,"upperBound,"
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,123,getSolverAbsoluteAccuracy());
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,125,if (!isSupportConnected()) {
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,126,/* Test for plateau. */
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,127,final double dx = getSolverAbsoluteAccuracy();
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,128,if (x - dx >= getSupportLowerBound()) {
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,129,double px = cumulativeProbability(x);
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,130,if (cumulativeProbability(x - dx) == px) {
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,131,upperBound = x;
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,132,while (upperBound - lowerBound > dx) {
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,133,final double midPoint = 0.5 * (lowerBound + upperBound);
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,134,if (cumulativeProbability(midPoint) < px) {
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,135,lowerBound = midPoint;
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,136,} else {
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,137,upperBound = midPoint;
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,140,return upperBound;
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,106,/ Failed bracket convergence was not because of corner solution
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,107,hrow new MathInternalError(ex);
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,110,/ find root
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,111,"ouble root = UnivariateRealSolverUtils.solve(rootFindingFunction,"
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,112,/ override getSolverAbsoluteAccuracy() to use a Brent solver with
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,113,/ absolute accuracy different from the default.
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,114,"racket[0],bracket[1], getSolverAbsoluteAccuracy());"
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,115,eturn root;
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,144,return x;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,17,package org.apache.commons.math.distribution;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,19,import org.apache.commons.math.analysis.UnivariateFunction;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,20,import org.apache.commons.math.analysis.integration.RombergIntegrator;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,21,import org.apache.commons.math.analysis.integration.UnivariateRealIntegrator;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,22,import org.apache.commons.math.exception.OutOfRangeException;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,23,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,24,import org.junit.Test;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,26,/** Various tests related to MATH-699. */
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,27,public class AbstractRealDistributionTest {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,29,@Test
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,30,public void testContinuous() {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,31,final double x0 = 0.0;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,32,final double x1 = 1.0;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,33,final double x2 = 2.0;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,34,final double x3 = 3.0;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,35,final double p12 = 0.5;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,36,final AbstractRealDistribution distribution;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,37,distribution = new AbstractRealDistribution() {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,39,public double cumulativeProbability(final double x) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,40,if ((x < x0) || (x > x3)) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,41,"throw new OutOfRangeException(x, x0, x3);"
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,43,if (x <= x1) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,44,return p12 * (x - x0) / (x1 - x0);
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,45,} else if (x <= x2) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,46,return p12;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,47,} else if (x <= x3) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,48,return p12 + (1.0 - p12) * (x - x2) / (x3 - x2);
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,50,return 0.0;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,53,public double density(final double x) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,54,if ((x < x0) || (x > x3)) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,55,"throw new OutOfRangeException(x, x0, x3);"
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,57,if (x <= x1) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,58,return p12 / (x1 - x0);
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,59,} else if (x <= x2) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,60,return 0.0;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,61,} else if (x <= x3) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,62,return (1.0 - p12) / (x3 - x2);
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,64,return 0.0;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,67,@Override
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,68,protected double getDomainLowerBound(final double p) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,69,throw new UnsupportedOperationException();
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,72,@Override
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,73,protected double getDomainUpperBound(final double p) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,74,throw new UnsupportedOperationException();
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,77,@Override
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,78,protected double getInitialDomain(final double p) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,79,throw new UnsupportedOperationException();
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,82,public double getNumericalMean() {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,83,return ((x0 + x1) * p12 + (x2 + x3) * (1.0 - p12)) / 2.0;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,86,public double getNumericalVariance() {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,87,final double meanX = getNumericalMean();
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,88,final double meanX2;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,89,meanX2 = ((x0 * x0 + x0 * x1 + x1 * x1) * p12 + (x2 * x2 + x2
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,90,* x3 + x3 * x3)
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,91,* (1.0 - p12)) / 3.0;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,92,return meanX2 - meanX * meanX;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,95,public double getSupportLowerBound() {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,96,return x0;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,99,public double getSupportUpperBound() {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,100,return x3;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,103,public boolean isSupportConnected() {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,104,return false;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,107,public boolean isSupportLowerBoundInclusive() {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,108,return true;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,111,public boolean isSupportUpperBoundInclusive() {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,112,return true;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,115,public double probability(final double x) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,116,throw new UnsupportedOperationException();
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,119,final double expected = x1;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,120,final double actual = distribution.inverseCumulativeProbability(p12);
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,121,"Assert.assertEquals("""", expected, actual,"
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,122,distribution.getSolverAbsoluteAccuracy());
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,125,@Test
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,126,public void testDiscontinuous() {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,127,final double x0 = 0.0;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,128,final double x1 = 0.25;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,129,final double x2 = 0.5;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,130,final double x3 = 0.75;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,131,final double x4 = 1.0;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,132,final double p12 = 1.0 / 3.0;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,133,final double p23 = 2.0 / 3.0;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,134,final AbstractRealDistribution distribution;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,135,distribution = new AbstractRealDistribution() {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,137,public double cumulativeProbability(final double x) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,138,if ((x < x0) || (x > x4)) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,139,"throw new OutOfRangeException(x, x0, x4);"
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,141,if (x <= x1) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,142,return p12 * (x - x0) / (x1 - x0);
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,143,} else if (x <= x2) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,144,return p12;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,145,} else if (x <= x3) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,146,return p23;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,147,} else {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,148,return (1.0 - p23) * (x - x3) / (x4 - x3) + p23;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,152,public double density(final double x) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,153,if ((x < x0) || (x > x4)) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,154,"throw new OutOfRangeException(x, x0, x4);"
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,156,if (x <= x1) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,157,return p12 / (x1 - x0);
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,158,} else if (x <= x2) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,159,return 0.0;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,160,} else if (x <= x3) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,161,return 0.0;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,162,} else {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,163,return (1.0 - p23) / (x4 - x3);
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,167,@Override
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,168,protected double getDomainLowerBound(final double p) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,169,throw new UnsupportedOperationException();
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,172,@Override
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,173,protected double getDomainUpperBound(final double p) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,174,throw new UnsupportedOperationException();
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,177,@Override
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,178,protected double getInitialDomain(final double p) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,179,throw new UnsupportedOperationException();
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,182,public double getNumericalMean() {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,183,final UnivariateFunction f = new UnivariateFunction() {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,185,public double value(final double x) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,186,return x * density(x);
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,189,final UnivariateRealIntegrator integrator = new RombergIntegrator();
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,190,"return integrator.integrate(Integer.MAX_VALUE, f, x0, x4);"
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,193,public double getNumericalVariance() {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,194,final double meanX = getNumericalMean();
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,195,final UnivariateFunction f = new UnivariateFunction() {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,197,public double value(final double x) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,198,return x * x * density(x);
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,201,final UnivariateRealIntegrator integrator = new RombergIntegrator();
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,202,"final double meanX2 = integrator.integrate(Integer.MAX_VALUE,"
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,203,"f, x0, x4);"
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,204,return meanX2 - meanX * meanX;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,207,public double getSupportLowerBound() {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,208,return x0;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,211,public double getSupportUpperBound() {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,212,return x4;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,215,public boolean isSupportConnected() {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,216,return false;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,219,public boolean isSupportLowerBoundInclusive() {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,220,return true;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,223,public boolean isSupportUpperBoundInclusive() {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,224,return true;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,227,public double probability(final double x) {
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,228,throw new UnsupportedOperationException();
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,231,final double expected = x2;
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,232,final double actual = distribution.inverseCumulativeProbability(p23);
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,233,"Assert.assertEquals("""", expected, actual,"
True,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,234,distribution.getSolverAbsoluteAccuracy());

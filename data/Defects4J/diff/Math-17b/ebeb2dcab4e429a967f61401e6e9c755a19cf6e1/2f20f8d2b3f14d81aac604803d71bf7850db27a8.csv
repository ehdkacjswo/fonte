is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,59, Provides an interface to implemntations which function as an array
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,60, of double primitives.
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,59,* Provides a single interface for dealing with various flavors
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,60,* of double arrays.  This arrays framework follows the model of the
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,61,* Collections API by allowing a user to select from a number of
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,62,* array implementations with support for various storage mechanisms
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,63,"* such as automatic expansion, contraction, and array ""rolling""."
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,73,/TODO: Throwing a NoSuchElementException might not be the right
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,74,"/thing to do, it may be more helpful to just throw ArrayOutOfBounds..."
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,77, Returns the element at the specified index
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,77,* Returns the element at the specified index.  Note that if an
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,78,* out of bounds index is supplied a ArrayIndexOutOfBoundsException
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,79,* will be thrown.
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,81, @throws NoSuchElementException exception thrown if the array index
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,82,         exceeds the known boundaries of this array.
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,85,ouble getElement(int index) throws NoSuchElementException;
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,85,double getElement(int index);
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,57,mport java.util.NoSuchElementException;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,140,/ will lead to ArrayOutOfBound exceptions.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,140,// will lead to ArrayIndexOutOfBound exceptions.
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,217,ublic double getElement(int index) throws NoSuchElementException {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,217,public double getElement(int index) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,222,hrow new NoSuchElementException(msg);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,222,throw new ArrayIndexOutOfBoundsException(msg);
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,228,hrow new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,228,throw new ArrayIndexOutOfBoundsException(msg);
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,245,hrow new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,245,throw new ArrayIndexOutOfBoundsException(msg);
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,56,mport java.util.NoSuchElementException;
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,59, Provides a fixed size implementation of the DoubleArray with
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,60," support to true ""rolling"" functionality.  If a program attempts to add"
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,61, a value to a fixed array which has reach a maximum number of
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,62, elements a ArrayIndexOutOfBoundsException will be thrown.
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,58,* <p>
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,59,* Provides an implementation of the DoubleArray with a maximum number of
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,60,* elements.  Creating an array implementation with an upper limit on the
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,61,"* number of elements allows us to support a more efficient ""rolling"""
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,62,* mechanism to support addElementRoling(double). Please note that this
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,63,* implementation will not preserve the order of the values supplied to
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,64,"* this array, calling getValues() will return an array of indeterminate"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,65,* order.
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,66,* </p>
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,68,* <p>
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,69,* Values are added to this array by calling addElement(double) or
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,70,* addElementRolling(double).  If addElement(double) is called on
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,71,"* an array that already contains the maximum number of elements, an"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,72,* ArrayIndexOutOfBoundsException will be thrown to reflect an attempt to
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,73,* add a value beyond the boundaries of the fixed length array - in this
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,74,"* respect a FixedDoubleArray can be considered ""full"".  Calling"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,75,* addElementRolling(double) on an array which contains the maximum
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,76,"* number of elements will cause the array to overwrite the ""oldest"""
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,77,* value in the array.
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,78,* </p>
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,80,* <p>
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,81,* This class is called FixedDoubleArray not because it is of a fixed size.
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,82,* The name is appropriate because the internal storage array remains
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,83,"* ""fixed"" in memory, this implementation will never allocate, or copy"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,84,* the internal storage array to a new array instance.
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,85,* </p>
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,91,// This is the internal storage array.  This array is assigned
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,92,// a known fixed size in the constructor.
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,95,// Size determined the number of elements in the array at
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,96,// any given time. When an array is created is maxElements
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,97,"// of 100, it is of size 0, and size increases as values are"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,98,// added.
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,101,// This index points to the location of the next update.  Next
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,102,"// add, cycles from 0 to (maxElement-1)"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,105,// The maximum number of elements in the FixedDoubleArray
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,109,* Create a fixed array for double primitives which can hold up to
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,110,* <code>maxElements</codec> doubles.  This implementation of
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,111,"* DoubleArray was created to provide a more ""performance-oriented"""
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,112,* in-place rolling mechanism for calculations which need to
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,113,* operate on a rolling window of values.
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,115,* @param maxElements the maximum number of elements this
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,116,*        FixeddoubleArray may contain.
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,79,* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,124,* Retrieves the current size of the array.
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,86,* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,132,* Returns the element value at the specified index.  Please note that
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,133,* the size of the element array is not directly related to the
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,134,* maximum number of elements which this array can contain.  One can
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,135,* create an instance of FixedDoubleArray with a maximum of
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,136,"* ten elements, add three items, and get any items from index 0 to index"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,137,* 2 - trying to retrieve an element outside of the current element
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,138,* array will throw an ArrayIndexOutOfBoundsException.
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,89,ublic double getElement(int index) throws NoSuchElementException {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,142,public double getElement(int index) {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,148,"// Return the element requested, if the index supplied"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,149,// is negative this statement may also throw an
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,150,// ArrayIndexOutOfBoundException.
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,99,* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,156,* <p>
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,157,* Sets the element at the specified index to the value supplied.
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,158,* </p>
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,160,* <p>Implementation Notes:
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,161,* <ul>
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,162,*  This implementation will not expand the array to the specified
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,163,*  size.  Unlike the expandable double array implementation calling
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,164,"*  setElement(10, 3.0) on an array with 5 elements will throw an"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,165,*  ArrayIndexOutOfBoundsException.
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,166,* </ul>
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,167,* <ul>
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,168,*  The number of elements in an array corresponds to the number
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,169,*  of elements that have been added to this FixedDoubleArray.  This
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,170,*  is not the same as the maximum number of elements which can be
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,171,*  contained in this array.  A FixedDoubleArray instance can be
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,172,"*  created with a maximum upper limit of 10 elements, until 10"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,173,"*  elements have been added to this array, the size of the array"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,174,*  reflects the number of elements added.
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,175,* </ul>
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,176,* </p>
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,112,* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,191,"* Add an element to the current array, testing to see if"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,192,* this array has already met or exceeded the maximum number
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,193,* of elements
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,203,// Incremenet nextAdd and then modulo it against maxElements
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,204,"// this has the effect of repeatedly ""cycling"" nextAdd"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,205,// between 0 and (maxElements-1) endlessly.
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,210,"// If the array has ALREADY reached the maximum size allowable,"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,211,// we throw an ArrayIndexOutOfBoundsException - the end-user
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,212,// is trying to add an element beyond the boundaries of the
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,213,// fixed array.
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,131,* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,221,* <p>
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,222,"* Adds an element by ""rolling"" the new value into the current array"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,223,* while discarding the element which was added <code>maxElement</code>
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,224,* add operations ago.  The value replaced is returned from this
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,225,"* method.  Until an array contains the maximum number of element, this"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,226,* method has the same result as the addElement(double) operation.  Once
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,227,* the maximum number of elements has been reached this implementation
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,228,* inserts the new values starting at index 0 of the internal storage
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,229,"* array.  This allows for efficient rolling, but prevents us from"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,230,* preserving the order of the added values.
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,231,* </p>
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,233,* <p>
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,234,* <b>Note:</b> This function will return <code>Double.NaN</code> if
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,235,* no value has been discarded in this roll.  This can happen when
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,236,* the array has not met the size limitation introduced in the
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,237,* constructor.
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,238,* </p>
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,240,"* @return Returns the value which a has been ""removed"" from the"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,241,*         database.  <b>Important:</b> If the element array has
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,242,"*         not reached the maximum size, then it is possible that"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,243,*         no element will be discarded from a given roll.  In this
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,244,*         case this method will return a <code>Double.NaN</code> value.
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,250,// Create the discarded primitive.  If no element is
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,251,"// discarded by this roll, this method will return a"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,252,// Double.NaN value.
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,253,double discarded = Double.NaN;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,257,} else {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,258,// If we've reached the length of the internal
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,259,"// storage array, we have to start ""discarding"""
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,260,// values from the original array.
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,139,ouble discarded = internalArray[nextAdd];
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,262,// Obtain the value discarded by this overwrite
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,263,discarded = internalArray[nextAdd];
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,268,// nextAdd cycles between 0 and (maxElements-1).
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,150,* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,277,* Provides an array of double[] which contain the
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,278,* number of elements added to this array.  This
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,279,* method will return an array from zero to maxElements in length.
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,281,* @return The array of elements added to this DoubleArray
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,282,*         implementation.
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,154,ouble[] copy = new double[internalArray.length];
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,155,"ystem.arraycopy(internalArray, 0, copy, 0, internalArray.length);"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,286,double[] copy = new double[size];
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,287,"System.arraycopy(internalArray, 0, copy, 0, size);"
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,159,* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,292,* Clear the array - drop all the data and start with a blank
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,293,* internal array.  This implementation takes care of
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,294,"* setting the size of the array back to zero, and reinitializing"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,295,* the internal storage array.
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,168,* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,306,* This method is not implemented in this implemetnation of
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,307,* DoubleArray.  Until the size of the element array meets the
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,308,* maxElements condition introduced in the constructor this is
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,309,* a regular array.  When the size of the array is at a maximum
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,310,* this array starts to function more as a circular list of
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,311,"* double primitives.  In a circular ""rolling"" data structure it"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,312,"* make little sense to allow people to ""drop"" objects from the"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,313,"* ""front""."
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,315,* @param number of elements to discard.
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,179,* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,328,* Retrieves the minimum double value contained in this array.
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,330,* @return The number less than all other numbers in this
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,331,*         array.
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,192,* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,345,* Retrieves the maximum double value contained in this array.
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,347,* @return The number greater than all other numbers in this
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,348,*         array.

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/random/RandomData.java,src/main/java/org/apache/commons/math3/random/RandomData.java,23,* @deprecated to be removed in 4.0.  Use {@link RandomDataGenerator} directly
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,18,package org.apache.commons.math3.random;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,20,import java.io.Serializable;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,21,import java.security.MessageDigest;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,22,import java.security.NoSuchAlgorithmException;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,23,import java.security.NoSuchProviderException;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,24,import java.security.SecureRandom;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,25,import java.util.Collection;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,27,import org.apache.commons.math3.distribution.BetaDistribution;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,28,import org.apache.commons.math3.distribution.BinomialDistribution;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,29,import org.apache.commons.math3.distribution.CauchyDistribution;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,30,import org.apache.commons.math3.distribution.ChiSquaredDistribution;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,31,import org.apache.commons.math3.distribution.ExponentialDistribution;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,32,import org.apache.commons.math3.distribution.FDistribution;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,33,import org.apache.commons.math3.distribution.GammaDistribution;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,34,import org.apache.commons.math3.distribution.HypergeometricDistribution;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,35,import org.apache.commons.math3.distribution.PascalDistribution;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,36,import org.apache.commons.math3.distribution.PoissonDistribution;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,37,import org.apache.commons.math3.distribution.TDistribution;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,38,import org.apache.commons.math3.distribution.WeibullDistribution;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,39,import org.apache.commons.math3.distribution.ZipfDistribution;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,40,import org.apache.commons.math3.exception.MathInternalError;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,41,import org.apache.commons.math3.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,42,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,43,import org.apache.commons.math3.exception.NumberIsTooLargeException;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,44,import org.apache.commons.math3.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,45,import org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,48,* Implements the {@link RandomData} interface using a {@link RandomGenerator}
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,49,* instance to generate non-secure data and a {@link java.security.SecureRandom}
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,50,* instance to provide data for the <code>nextSecureXxx</code> methods. If no
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,51,"* <code>RandomGenerator</code> is provided in the constructor, the default is"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,52,* to use a {@link Well19937c} generator. To plug in a different
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,53,"* implementation, either implement <code>RandomGenerator</code> directly or"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,54,* extend {@link AbstractRandomGenerator}.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,55,* <p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,56,* Supports reseeding the underlying pseudo-random number generator (PRNG). The
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,57,* <code>SecurityProvider</code> and <code>Algorithm</code> used by the
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,58,* <code>SecureRandom</code> instance can also be reset.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,59,* </p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,60,* <p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,61,"* For details on the default PRNGs, see {@link java.util.Random} and"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,62,* {@link java.security.SecureRandom}.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,63,* </p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,64,* <p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,65,* <strong>Usage Notes</strong>:
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,66,* <ul>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,67,* <li>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,68,* Instance variables are used to maintain <code>RandomGenerator</code> and
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,69,"* <code>SecureRandom</code> instances used in data generation. Therefore, to"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,70,"* generate a random sequence of values or strings, you should use just"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,71,* <strong>one</strong> <code>RandomDataImpl</code> instance repeatedly.</li>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,72,* <li>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,73,"* The ""secure"" methods are *much* slower. These should be used only when a"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,74,* cryptographically secure random sequence is required. A secure random
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,75,"* sequence is a sequence of pseudo-random values which, in addition to being"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,76,* well-dispersed (so no subsequence of values is an any more likely than other
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,77,"* subsequence of the the same length), also has the additional property that"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,78,* knowledge of values generated up to any point in the sequence does not make
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,79,* it any easier to predict subsequent values.</li>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,80,* <li>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,81,"* When a new <code>RandomDataImpl</code> is created, the underlying random"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,82,* number generators are <strong>not</strong> initialized. If you do not
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,83,"* explicitly seed the default non-secure generator, it is seeded with the"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,84,* current time in milliseconds plus the system identity hash code on first use.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,85,* The same holds for the secure generator. If you provide a <code>RandomGenerator</code>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,86,"* to the constructor, however, this generator is not reseeded by the constructor"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,87,* nor is it reseeded on first use.</li>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,88,* <li>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,89,* The <code>reSeed</code> and <code>reSeedSecure</code> methods delegate to the
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,90,* corresponding methods on the underlying <code>RandomGenerator</code> and
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,91,"* <code>SecureRandom</code> instances. Therefore, <code>reSeed(long)</code>"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,92,* fully resets the initial state of the non-secure random number generator (so
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,93,* that reseeding with a specific value always results in the same subsequent
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,94,* random sequence); whereas reSeedSecure(long) does <strong>not</strong>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,95,* reinitialize the secure random number generator (so secure sequences started
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,96,* with calls to reseedSecure(long) won't be identical).</li>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,97,* <li>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,98,* This implementation is not synchronized. The underlying <code>RandomGenerator</code>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,99,* or <code>SecureRandom</code> instances are not protected by synchronization and
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,100,"* are not guaranteed to be thread-safe.  Therefore, if an instance of this class"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,101,"* is concurrently utilized by multiple threads, it is the responsibility of"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,102,* client code to synchronize access to seeding and data generation methods.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,103,* </li>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,104,* </ul>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,105,* </p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,107,* @version $Id$
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,109,"public class RandomDataGenerator implements RandomData, Serializable {"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,111,/** Serializable version identifier */
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,112,private static final long serialVersionUID = -626730818244969716L;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,114,/** underlying random number generator */
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,115,private RandomGenerator rand = null;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,117,/** underlying secure random number generator */
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,118,private SecureRandom secRand = null;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,121,"* Construct a RandomDataGenerator, using a default random generator as the source"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,122,* of randomness.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,124,* <p>The default generator is a {@link Well19937c} seeded
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,125,* with {@code System.currentTimeMillis() + System.identityHashCode(this))}.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,126,* The generator is initialized and seeded on first use.</p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,128,public RandomDataGenerator() {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,132,* Construct a RandomDataGenerator using the supplied {@link RandomGenerator} as
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,133,* the source of (non-secure) random data.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,135,* @param rand the source of (non-secure) random data
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,136,"* (may be null, resulting in the default generator)"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,138,public RandomDataGenerator(RandomGenerator rand) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,139,this.rand = rand;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,143,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,144,* <p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,145,* <strong>Algorithm Description:</strong> hex strings are generated using a
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,146,* 2-step process.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,147,* <ol>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,148,* <li>{@code len / 2 + 1} binary bytes are generated using the underlying
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,149,* Random</li>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,150,* <li>Each binary byte is translated into 2 hex digits</li>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,151,* </ol>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,152,* </p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,154,* @param len the desired string length.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,155,* @return the random string.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,156,* @throws NotStrictlyPositiveException if {@code len <= 0}.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,158,public String nextHexString(int len) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,159,if (len <= 0) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,160,"throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,163,// Get a random number generator
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,164,RandomGenerator ran = getRan();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,166,// Initialize output buffer
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,167,StringBuilder outBuffer = new StringBuilder();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,169,// Get int(len/2)+1 random bytes
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,170,byte[] randomBytes = new byte[(len / 2) + 1];
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,171,ran.nextBytes(randomBytes);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,173,// Convert each byte to 2 hex digits
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,174,for (int i = 0; i < randomBytes.length; i++) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,175,Integer c = Integer.valueOf(randomBytes[i]);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,178,* Add 128 to byte value to make interval 0-255 before doing hex
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,179,* conversion. This guarantees <= 2 hex digits from toHexString()
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,180,* toHexString would otherwise add 2^32 to negative arguments.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,182,String hex = Integer.toHexString(c.intValue() + 128);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,184,// Make sure we add 2 hex digits for each byte
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,185,if (hex.length() == 1) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,186,"hex = ""0"" + hex;"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,188,outBuffer.append(hex);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,190,"return outBuffer.toString().substring(0, len);"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,193,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,194,"public int nextInt(int lower, int upper) {"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,195,if (lower >= upper) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,196,"throw new MathIllegalArgumentException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,197,"lower, upper, false);"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,199,double r = getRan().nextDouble();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,200,double scaled = r * upper + (1.0 - r) * lower + r;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,201,return (int) FastMath.floor(scaled);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,204,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,205,"public long nextLong(long lower, long upper) {"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,206,if (lower >= upper) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,207,"throw new MathIllegalArgumentException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,208,"lower, upper, false);"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,210,double r = getRan().nextDouble();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,211,double scaled = r * upper + (1.0 - r) * lower + r;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,212,return (long)FastMath.floor(scaled);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,216,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,217,* <p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,218,* <strong>Algorithm Description:</strong> hex strings are generated in
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,219,* 40-byte segments using a 3-step process.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,220,* <ol>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,221,* <li>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,222,* 20 random bytes are generated using the underlying
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,223,* <code>SecureRandom</code>.</li>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,224,* <li>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,225,* SHA-1 hash is applied to yield a 20-byte binary digest.</li>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,226,* <li>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,227,* Each byte of the binary digest is converted to 2 hex digits.</li>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,228,* </ol>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,229,* </p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,231,public String nextSecureHexString(int len) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,232,if (len <= 0) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,233,"throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,236,// Get SecureRandom and setup Digest provider
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,237,SecureRandom secRan = getSecRan();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,238,MessageDigest alg = null;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,239,try {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,240,"alg = MessageDigest.getInstance(""SHA-1"");"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,241,} catch (NoSuchAlgorithmException ex) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,242,// this should never happen
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,243,throw new MathInternalError(ex);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,245,alg.reset();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,247,// Compute number of iterations required (40 bytes each)
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,248,int numIter = (len / 40) + 1;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,250,StringBuilder outBuffer = new StringBuilder();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,251,for (int iter = 1; iter < numIter + 1; iter++) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,252,byte[] randomBytes = new byte[40];
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,253,secRan.nextBytes(randomBytes);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,254,alg.update(randomBytes);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,256,// Compute hash -- will create 20-byte binary hash
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,257,byte[] hash = alg.digest();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,259,"// Loop over the hash, converting each byte to 2 hex digits"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,260,for (int i = 0; i < hash.length; i++) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,261,Integer c = Integer.valueOf(hash[i]);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,264,* Add 128 to byte value to make interval 0-255 This guarantees
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,265,* <= 2 hex digits from toHexString() toHexString would
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,266,* otherwise add 2^32 to negative arguments
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,268,String hex = Integer.toHexString(c.intValue() + 128);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,270,// Keep strings uniform length -- guarantees 40 bytes
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,271,if (hex.length() == 1) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,272,"hex = ""0"" + hex;"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,274,outBuffer.append(hex);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,277,"return outBuffer.toString().substring(0, len);"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,280,/**  {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,281,"public int nextSecureInt(int lower, int upper) {"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,282,if (lower >= upper) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,283,"throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,284,"lower, upper, false);"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,286,SecureRandom sec = getSecRan();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,287,final double r = sec.nextDouble();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,288,final double scaled = r * upper + (1.0 - r) * lower + r;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,289,return (int)FastMath.floor(scaled);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,292,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,293,"public long nextSecureLong(long lower, long upper) {"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,294,if (lower >= upper) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,295,"throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,296,"lower, upper, false);"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,298,SecureRandom sec = getSecRan();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,299,final double r = sec.nextDouble();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,300,final double scaled = r * upper + (1.0 - r) * lower + r;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,301,return (long)FastMath.floor(scaled);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,305,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,306,* <p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,307,* <strong>Algorithm Description</strong>:
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,308,"* <ul><li> For small means, uses simulation of a Poisson process"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,309,"* using Uniform deviates, as described"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,310,"* <a href=""http://irmi.epfl.ch/cmos/Pmmi/interactive/rng7.htm""> here.</a>"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,311,* The Poisson process (and hence value returned) is bounded by 1000 * mean.</li>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,313,"* <li> For large means, uses the rejection algorithm described in <br/>"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,314,"* Devroye, Luc. (1981).<i>The Computer Generation of Poisson Random Variables</i>"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,315,* <strong>Computing</strong> vol. 26 pp. 197-207.</li></ul></p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,317,public long nextPoisson(double mean) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,318,"return new PoissonDistribution(getRan(), mean,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,319,"PoissonDistribution.DEFAULT_EPSILON,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,320,PoissonDistribution.DEFAULT_MAX_ITERATIONS).sample();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,323,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,324,"public double nextGaussian(double mu, double sigma) {"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,325,if (sigma <= 0) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,326,"throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sigma);"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,328,return sigma * getRan().nextGaussian() + mu;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,332,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,334,* <p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,335,* <strong>Algorithm Description</strong>: Uses the Algorithm SA (Ahrens)
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,336,* from p. 876 in:
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,337,"* [1]: Ahrens, J. H. and Dieter, U. (1972). Computer methods for"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,338,* sampling from the exponential and normal distributions.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,339,"* Communications of the ACM, 15, 873-882."
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,340,* </p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,342,public double nextExponential(double mean) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,343,"return new ExponentialDistribution(getRan(), mean,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,344,ExponentialDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY).sample();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,348,* <p>Generates a random value from the
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,349,* {@link org.apache.commons.math3.distribution.GammaDistribution Gamma Distribution}.</p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,351,* <p>This implementation uses the following algorithms: </p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,353,* <p>For 0 < shape < 1: <br/>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,354,"* Ahrens, J. H. and Dieter, U., <i>Computer methods for"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,355,"* sampling from gamma, beta, Poisson and binomial distributions.</i>"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,356,"* Computing, 12, 223-246, 1974.</p>"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,358,* <p>For shape >= 1: <br/>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,359,"* Marsaglia and Tsang, <i>A Simple Method for Generating"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,360,"* Gamma Variables.</i> ACM Transactions on Mathematical Software,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,361,"* Volume 26 Issue 3, September, 2000.</p>"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,363,* @param shape the median of the Gamma distribution
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,364,* @param scale the scale parameter of the Gamma distribution
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,365,"* @return random value sampled from the Gamma(shape, scale) distribution"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,367,"public double nextGamma(double shape, double scale) {"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,368,"return new GammaDistribution(getRan(),shape, scale,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,369,GammaDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY).sample();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,373,* Generates a random value from the {@link HypergeometricDistribution Hypergeometric Distribution}.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,374,* This implementation uses {@link #nextInversionDeviate(IntegerDistribution) inversion}
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,375,* to generate random values.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,377,* @param populationSize the population size of the Hypergeometric distribution
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,378,* @param numberOfSuccesses number of successes in the population of the Hypergeometric distribution
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,379,* @param sampleSize the sample size of the Hypergeometric distribution
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,380,"* @return random value sampled from the Hypergeometric(numberOfSuccesses, sampleSize) distribution"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,382,"public int nextHypergeometric(int populationSize, int numberOfSuccesses, int sampleSize) {"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,383,"return new HypergeometricDistribution(getRan(),populationSize,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,384,"numberOfSuccesses, sampleSize).sample();"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,388,* Generates a random value from the {@link PascalDistribution Pascal Distribution}.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,389,* This implementation uses {@link #nextInversionDeviate(IntegerDistribution) inversion}
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,390,* to generate random values.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,392,* @param r the number of successes of the Pascal distribution
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,393,* @param p the probability of success of the Pascal distribution
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,394,"* @return random value sampled from the Pascal(r, p) distribution"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,396,"public int nextPascal(int r, double p) {"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,397,"return new PascalDistribution(getRan(), r, p).sample();"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,401,* Generates a random value from the {@link TDistribution T Distribution}.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,402,* This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,403,* to generate random values.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,405,* @param df the degrees of freedom of the T distribution
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,406,* @return random value from the T(df) distribution
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,408,public double nextT(double df) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,409,"return new TDistribution(getRan(), df,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,410,TDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY).sample();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,414,* Generates a random value from the {@link WeibullDistribution Weibull Distribution}.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,415,* This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,416,* to generate random values.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,418,* @param shape the shape parameter of the Weibull distribution
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,419,* @param scale the scale parameter of the Weibull distribution
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,420,"* @return random value sampled from the Weibull(shape, size) distribution"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,422,"public double nextWeibull(double shape, double scale) {"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,423,"return new WeibullDistribution(getRan(), shape, scale,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,424,WeibullDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY).sample();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,428,* Generates a random value from the {@link ZipfDistribution Zipf Distribution}.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,429,* This implementation uses {@link #nextInversionDeviate(IntegerDistribution) inversion}
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,430,* to generate random values.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,432,* @param numberOfElements the number of elements of the ZipfDistribution
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,433,* @param exponent the exponent of the ZipfDistribution
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,434,"* @return random value sampled from the Zipf(numberOfElements, exponent) distribution"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,436,"public int nextZipf(int numberOfElements, double exponent) {"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,437,"return new ZipfDistribution(getRan(), numberOfElements, exponent).sample();"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,441,* Generates a random value from the {@link BetaDistribution Beta Distribution}.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,442,* This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,443,* to generate random values.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,445,* @param alpha first distribution shape parameter
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,446,* @param beta second distribution shape parameter
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,447,"* @return random value sampled from the beta(alpha, beta) distribution"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,449,"public double nextBeta(double alpha, double beta) {"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,450,"return new BetaDistribution(getRan(), alpha, beta,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,451,BetaDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY).sample();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,455,* Generates a random value from the {@link BinomialDistribution Binomial Distribution}.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,456,* This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,457,* to generate random values.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,459,* @param numberOfTrials number of trials of the Binomial distribution
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,460,* @param probabilityOfSuccess probability of success of the Binomial distribution
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,461,"* @return random value sampled from the Binomial(numberOfTrials, probabilityOfSuccess) distribution"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,463,"public int nextBinomial(int numberOfTrials, double probabilityOfSuccess) {"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,464,"return new BinomialDistribution(getRan(), numberOfTrials, probabilityOfSuccess).sample();"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,468,* Generates a random value from the {@link CauchyDistribution Cauchy Distribution}.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,469,* This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,470,* to generate random values.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,472,* @param median the median of the Cauchy distribution
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,473,* @param scale the scale parameter of the Cauchy distribution
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,474,"* @return random value sampled from the Cauchy(median, scale) distribution"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,476,"public double nextCauchy(double median, double scale) {"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,477,"return new CauchyDistribution(getRan(), median, scale,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,478,CauchyDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY).sample();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,482,* Generates a random value from the {@link ChiSquaredDistribution ChiSquare Distribution}.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,483,* This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,484,* to generate random values.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,486,* @param df the degrees of freedom of the ChiSquare distribution
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,487,* @return random value sampled from the ChiSquare(df) distribution
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,489,public double nextChiSquare(double df) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,490,"return new ChiSquaredDistribution(getRan(), df,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,491,ChiSquaredDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY).sample();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,495,* Generates a random value from the {@link FDistribution F Distribution}.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,496,* This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,497,* to generate random values.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,499,* @param numeratorDf the numerator degrees of freedom of the F distribution
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,500,* @param denominatorDf the denominator degrees of freedom of the F distribution
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,501,"* @return random value sampled from the F(numeratorDf, denominatorDf) distribution"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,503,"public double nextF(double numeratorDf, double denominatorDf) {"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,504,"return new FDistribution(getRan(), numeratorDf, denominatorDf,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,505,FDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY).sample();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,509,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,511,* <p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,512,* <strong>Algorithm Description</strong>: scales the output of
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,513,"* Random.nextDouble(), but rejects 0 values (i.e., will generate another"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,514,* random double if Random.nextDouble() returns 0). This is necessary to
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,515,* provide a symmetric output interval (both endpoints excluded).
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,516,* </p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,518,* @throws MathIllegalArgumentException if one of the bounds is infinite or
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,519,* {@code NaN} or either bound is infinite or NaN
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,521,"public double nextUniform(double lower, double upper) {"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,522,"return nextUniform(lower, upper, false);"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,526,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,528,* <p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,529,"* <strong>Algorithm Description</strong>: if the lower bound is excluded,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,530,"* scales the output of Random.nextDouble(), but rejects 0 values (i.e.,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,531,* will generate another random double if Random.nextDouble() returns 0).
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,532,* This is necessary to provide a symmetric output interval (both
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,533,* endpoints excluded).
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,534,* </p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,536,* @throws MathIllegalArgumentException if one of the bounds is infinite or
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,537,* {@code NaN}
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,539,"public double nextUniform(double lower, double upper,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,540,boolean lowerInclusive) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,542,if (lower >= upper) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,543,"throw new MathIllegalArgumentException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,544,"lower, upper, false);"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,547,if (Double.isInfinite(lower) || Double.isInfinite(upper)) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,548,throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_BOUND);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,551,if (Double.isNaN(lower) || Double.isNaN(upper)) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,552,throw new MathIllegalArgumentException(LocalizedFormats.NAN_NOT_ALLOWED);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,555,final RandomGenerator generator = getRan();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,557,// ensure nextDouble() isn't 0.0
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,558,double u = generator.nextDouble();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,559,while (!lowerInclusive && u <= 0.0) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,560,u = generator.nextDouble();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,563,return u * upper + (1.0 - u) * lower;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,567,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,569,* <p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,570,* Uses a 2-cycle permutation shuffle. The shuffling process is described <a
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,571,"* href=""http://www.maths.abdn.ac.uk/~igc/tch/mx4002/notes/node83.html"">"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,572,* here</a>.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,573,* </p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,575,"public int[] nextPermutation(int n, int k) {"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,576,if (k > n) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,577,"throw new MathIllegalArgumentException(LocalizedFormats.PERMUTATION_EXCEEDS_N,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,578,"k, n, true);"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,580,if (k <= 0) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,581,"throw new NotStrictlyPositiveException(LocalizedFormats.PERMUTATION_SIZE,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,582,k);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,585,int[] index = getNatural(n);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,586,"shuffle(index, n - k);"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,587,int[] result = new int[k];
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,588,for (int i = 0; i < k; i++) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,589,result[i] = index[n - i - 1];
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,592,return result;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,596,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,598,* <p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,599,* <strong>Algorithm Description</strong>: Uses a 2-cycle permutation
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,600,* shuffle to generate a random permutation of <code>c.size()</code> and
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,601,* then returns the elements whose indexes correspond to the elements of the
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,602,"* generated permutation. This technique is described, and proven to"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,603,* generate random samples <a
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,604,"* href=""http://www.maths.abdn.ac.uk/~igc/tch/mx4002/notes/node83.html"">"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,605,* here</a>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,606,* </p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,608,"public Object[] nextSample(Collection<?> c, int k) {"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,610,int len = c.size();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,611,if (k > len) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,612,"throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE,"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,613,"k, len, true);"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,615,if (k <= 0) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,616,"throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, k);"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,619,Object[] objects = c.toArray();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,620,"int[] index = nextPermutation(len, k);"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,621,Object[] result = new Object[k];
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,622,for (int i = 0; i < k; i++) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,623,result[i] = objects[index[i]];
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,625,return result;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,631,* Reseeds the random number generator with the supplied seed.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,632,* <p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,633,* Will create and initialize if null.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,634,* </p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,636,* @param seed the seed value to use
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,638,public void reSeed(long seed) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,639,getRan().setSeed(seed);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,643,* Reseeds the secure random number generator with the current time in
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,644,* milliseconds.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,645,* <p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,646,* Will create and initialize if null.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,647,* </p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,649,public void reSeedSecure() {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,650,getSecRan().setSeed(System.currentTimeMillis());
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,654,* Reseeds the secure random number generator with the supplied seed.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,655,* <p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,656,* Will create and initialize if null.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,657,* </p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,659,* @param seed the seed value to use
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,661,public void reSeedSecure(long seed) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,662,getSecRan().setSeed(seed);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,666,* Reseeds the random number generator with
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,667,* {@code System.currentTimeMillis() + System.identityHashCode(this))}.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,669,public void reSeed() {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,670,getRan().setSeed(System.currentTimeMillis() + System.identityHashCode(this));
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,674,* Sets the PRNG algorithm for the underlying SecureRandom instance using
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,675,* the Security Provider API. The Security Provider API is defined in <a
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,676,* href =
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,677,"* ""http://java.sun.com/j2se/1.3/docs/guide/security/CryptoSpec.html#AppA"">"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,678,* Java Cryptography Architecture API Specification & Reference.</a>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,679,* <p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,680,* <strong>USAGE NOTE:</strong> This method carries <i>significant</i>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,681,* overhead and may take several seconds to execute.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,682,* </p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,684,* @param algorithm the name of the PRNG algorithm
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,685,* @param provider the name of the provider
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,686,* @throws NoSuchAlgorithmException if the specified algorithm is not available
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,687,* @throws NoSuchProviderException if the specified provider is not installed
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,689,"public void setSecureAlgorithm(String algorithm, String provider)"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,690,"throws NoSuchAlgorithmException, NoSuchProviderException {"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,691,"secRand = SecureRandom.getInstance(algorithm, provider);"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,695,* Returns the RandomGenerator used to generate non-secure random data.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,696,* <p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,697,* Creates and initializes a default generator if null. Uses a {@link Well19937c}
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,698,* generator with {@code System.currentTimeMillis() + System.identityHashCode(this))}
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,699,* as the default seed.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,700,* </p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,702,* @return the Random used to generate random data
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,704,private RandomGenerator getRan() {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,705,if (rand == null) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,706,initRan();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,708,return rand;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,712,* Sets the default generator to a {@link Well19937c} generator seeded with
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,713,* {@code System.currentTimeMillis() + System.identityHashCode(this))}.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,715,private void initRan() {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,716,rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,720,* Returns the SecureRandom used to generate secure random data.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,721,* <p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,722,* Creates and initializes if null.  Uses
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,723,* {@code System.currentTimeMillis() + System.identityHashCode(this)} as the default seed.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,724,* </p>
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,726,* @return the SecureRandom used to generate secure random data
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,728,private SecureRandom getSecRan() {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,729,if (secRand == null) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,730,secRand = new SecureRandom();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,731,secRand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,733,return secRand;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,737,* Uses a 2-cycle permutation shuffle to randomly re-order the last elements
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,738,* of list.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,740,* @param list list to be shuffled
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,741,* @param end element past which shuffling begins
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,743,"private void shuffle(int[] list, int end) {"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,744,int target = 0;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,745,for (int i = list.length - 1; i >= end; i--) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,746,if (i == 0) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,747,target = 0;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,748,} else {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,749,"target = nextInt(0, i);"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,751,int temp = list[target];
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,752,list[target] = list[i];
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,753,list[i] = temp;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,758,* Returns an array representing n.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,760,* @param n the natural number to represent
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,761,* @return array with entries = elements of n
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,763,private int[] getNatural(int n) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,764,int[] natural = new int[n];
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,765,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,766,natural[i] = i;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,768,return natural;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,21,mport java.security.MessageDigest;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,24,mport java.security.SecureRandom;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,27,mport org.apache.commons.math3.distribution.BetaDistribution;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,28,mport org.apache.commons.math3.distribution.BinomialDistribution;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,29,mport org.apache.commons.math3.distribution.CauchyDistribution;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,30,mport org.apache.commons.math3.distribution.ChiSquaredDistribution;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,31,mport org.apache.commons.math3.distribution.RealDistribution;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,32,mport org.apache.commons.math3.distribution.FDistribution;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,33,mport org.apache.commons.math3.distribution.HypergeometricDistribution;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,35,mport org.apache.commons.math3.distribution.PascalDistribution;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,36,mport org.apache.commons.math3.distribution.TDistribution;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,37,mport org.apache.commons.math3.distribution.WeibullDistribution;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,38,mport org.apache.commons.math3.distribution.ZipfDistribution;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,39,mport org.apache.commons.math3.exception.MathIllegalArgumentException;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,40,mport org.apache.commons.math3.exception.MathInternalError;
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,26,import org.apache.commons.math3.distribution.RealDistribution;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,42,mport org.apache.commons.math3.exception.NumberIsTooLargeException;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,43,mport org.apache.commons.math3.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,44,mport org.apache.commons.math3.util.ArithmeticUtils;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,45,mport org.apache.commons.math3.util.FastMath;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,46,mport org.apache.commons.math3.util.ResizableDoubleArray;
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,28,import org.apache.commons.math3.exception.MathIllegalArgumentException;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,49, Implements the {@link RandomData} interface using a {@link RandomGenerator}
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,31,* Generates random deviates and other random data using a {@link RandomGenerator}
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,72, <strong>one</strong> <code>RandomDataImpl</code> instance repeatedly.</li>
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,54,* <strong>one</strong> <code>RandomDataGenerator</code> instance repeatedly.</li>
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,82," When a new <code>RandomDataImpl</code> is created, the underlying random"
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,64,"* When a new <code>RandomDataGenerator</code> is created, the underlying random"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,99, This implementation is not synchronized.
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,81,* This implementation is not synchronized. The underlying <code>RandomGenerator</code>
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,82,* or <code>SecureRandom</code> instances are not protected by synchronization and
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,83,"* are not guaranteed to be thread-safe.  Therefore, if an instance of this class"
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,84,"* is concurrently utilized by multiple threads, it is the responsibility of"
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,85,* client code to synchronize access to seeding and data generation methods.
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,86,* </li>
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,111, Used when generating Exponential samples.
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,112, Table containing the constants
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,113, q_i = sum_{j=1}^i (ln 2)^j/j! = ln 2 + (ln 2)^2/2 + ... + (ln 2)^i/i!
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,114, until the largest representable fraction below 1 is exceeded.
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,116, Note that
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,117, 1 = 2 - 1 = exp(ln 2) - 1 = sum_{n=1}^infty (ln 2)^n / n!
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,118," thus q_i -> 1 as i -> infty,"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,119," so the higher i, the closer to one we get (the series is not alternating)."
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,121," By trying, n = 16 in Java is enough to reach 1.0."
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,123,rivate static final double[] EXPONENTIAL_SA_QI;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,125,** underlying random number generator */
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,126,rivate RandomGenerator rand = null;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,128,** underlying secure random number generator */
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,129,rivate SecureRandom secRand = null;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,132, Initialize tables
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,134,tatic {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,136, Filling EXPONENTIAL_SA_QI table.
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,137, Note that we don't want qi = 0 in the table.
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,139,inal double LN2 = FastMath.log(2);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,140,ouble qi = 0;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,141,nt i = 1;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,144," MathUtils provides factorials up to 20, so let's use that limit together"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,145," with Precision.EPSILON to generate the following code (a priori, we know that"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,146," there will be 16 elements, but instead of hardcoding that, this is"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,147, prettier):
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,149,inal ResizableDoubleArray ra = new ResizableDoubleArray(20);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,151,hile (qi < 1) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,152,"i += FastMath.pow(LN2, i) / ArithmeticUtils.factorial(i);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,153,a.addElement(qi);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,154,+i;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,157,XPONENTIAL_SA_QI = ra.getElements();
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,97,/** RandomDataGenerator delegate */
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,98,private RandomDataGenerator delegate;
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,109,delegate = new RandomDataGenerator();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,180,uper();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,181,his.rand = rand;
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,121,delegate = new RandomDataGenerator(rand);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,201,f (len <= 0) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,202,"hrow new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,205,/ Get a random number generator
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,206,andomGenerator ran = getRan();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,208,/ Initialize output buffer
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,209,tringBuilder outBuffer = new StringBuilder();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,211,/ Get int(len/2)+1 random bytes
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,212,yte[] randomBytes = new byte[(len / 2) + 1];
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,213,an.nextBytes(randomBytes);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,215,/ Convert each byte to 2 hex digits
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,216,or (int i = 0; i < randomBytes.length; i++) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,217,nteger c = Integer.valueOf(randomBytes[i]);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,220, Add 128 to byte value to make interval 0-255 before doing hex
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,221, conversion. This guarantees <= 2 hex digits from toHexString()
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,222, toHexString would otherwise add 2^32 to negative arguments.
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,224,tring hex = Integer.toHexString(c.intValue() + 128);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,226,/ Make sure we add 2 hex digits for each byte
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,227,f (hex.length() == 1) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,228,"ex = ""0"" + hex;"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,230,utBuffer.append(hex);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,232,"eturn outBuffer.toString().substring(0, len);"
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,141,return delegate.nextHexString(len);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,237,f (lower >= upper) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,238,"hrow new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,239,"ower, upper, false);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,241,ouble r = getRan().nextDouble();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,242,ouble scaled = r * upper + (1.0 - r) * lower + r;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,243,eturn (int) FastMath.floor(scaled);
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,146,"return delegate.nextInt(lower, upper);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,248,f (lower >= upper) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,249,"hrow new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,250,"ower, upper, false);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,252,ouble r = getRan().nextDouble();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,253,ouble scaled = r * upper + (1.0 - r) * lower + r;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,254,eturn (long)FastMath.floor(scaled);
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,151,"return delegate.nextLong(lower, upper);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,274,f (len <= 0) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,275,"hrow new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,278,/ Get SecureRandom and setup Digest provider
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,279,ecureRandom secRan = getSecRan();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,280,essageDigest alg = null;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,281,ry {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,282,"lg = MessageDigest.getInstance(""SHA-1"");"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,283, catch (NoSuchAlgorithmException ex) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,284,/ this should never happen
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,285,hrow new MathInternalError(ex);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,287,lg.reset();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,289,/ Compute number of iterations required (40 bytes each)
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,290,nt numIter = (len / 40) + 1;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,292,tringBuilder outBuffer = new StringBuilder();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,293,or (int iter = 1; iter < numIter + 1; iter++) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,294,yte[] randomBytes = new byte[40];
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,295,ecRan.nextBytes(randomBytes);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,296,lg.update(randomBytes);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,298,/ Compute hash -- will create 20-byte binary hash
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,299,yte[] hash = alg.digest();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,301,"/ Loop over the hash, converting each byte to 2 hex digits"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,302,or (int i = 0; i < hash.length; i++) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,303,nteger c = Integer.valueOf(hash[i]);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,306, Add 128 to byte value to make interval 0-255 This guarantees
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,307, <= 2 hex digits from toHexString() toHexString would
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,308, otherwise add 2^32 to negative arguments
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,310,tring hex = Integer.toHexString(c.intValue() + 128);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,312,/ Keep strings uniform length -- guarantees 40 bytes
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,313,f (hex.length() == 1) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,314,"ex = ""0"" + hex;"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,316,utBuffer.append(hex);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,319,"eturn outBuffer.toString().substring(0, len);"
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,171,return delegate.nextSecureHexString(len);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,324,f (lower >= upper) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,325,"hrow new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,326,"ower, upper, false);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,328,ecureRandom sec = getSecRan();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,329,ouble r = sec.nextDouble();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,330,ouble scaled = r * upper + (1.0 - r) * lower + r;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,331,eturn (int)FastMath.floor(scaled);
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,176,"return delegate.nextSecureInt(lower, upper);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,337,f (lower >= upper) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,338,"hrow new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,339,"ower, upper, false);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,341,ecureRandom sec = getSecRan();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,342,ouble r = sec.nextDouble();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,343,ouble scaled = r * upper + (1.0 - r) * lower + r;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,344,eturn (long)FastMath.floor(scaled);
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,181,"return delegate.nextSecureLong(lower,upper);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,361,f (mean <= 0) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,362,"hrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,365,inal double pivot = 40.0d;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,366,f (mean < pivot) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,367,inal RandomGenerator generator = getRan();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,368,ouble p = FastMath.exp(-mean);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,369,ong n = 0;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,370,ouble r = 1.0d;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,371,ouble rnd = 1.0d;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,373,hile (n < 1000 * mean) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,374,nd = generator.nextDouble();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,375, = r * rnd;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,376,f (r >= p) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,377,++;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,378, else {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,379,eturn n;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,382,eturn n;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,383, else {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,384,inal double lambda = FastMath.floor(mean);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,385,inal double lambdaFractional = mean - lambda;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,386,inal double logLambda = FastMath.log(lambda);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,387,inal double logLambdaFactorial = ArithmeticUtils.factorialLog((int) lambda);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,388,inal long y2 = lambdaFractional < Double.MIN_VALUE ? 0 : nextPoisson(lambdaFractional);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,389,inal double delta = FastMath.sqrt(lambda * FastMath.log(32 * lambda / FastMath.PI + 1));
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,390,inal double halfDelta = delta / 2;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,391,inal double twolpd = 2 * lambda + delta;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,392,inal double a1 = FastMath.sqrt(FastMath.PI * twolpd) * FastMath.exp(1 / 8 * lambda);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,393,inal double a2 = (twolpd / delta) * FastMath.exp(-delta * (1 + delta) / twolpd);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,394,inal double aSum = a1 + a2 + 1;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,395,inal double p1 = a1 / aSum;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,396,inal double p2 = a2 / aSum;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,397,inal double c1 = 1 / (8 * lambda);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,399,ouble x = 0;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,400,ouble y = 0;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,401,ouble v = 0;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,402,nt a = 0;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,403,ouble t = 0;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,404,ouble qr = 0;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,405,ouble qa = 0;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,406,or (;;) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,407,"inal double u = nextUniform(0.0, 1);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,408,f (u <= p1) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,409,"inal double n = nextGaussian(0d, 1d);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,410, = n * FastMath.sqrt(lambda + halfDelta) - 0.5d;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,411,f (x > delta || x < -lambda) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,412,ontinue;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,414, = x < 0 ? FastMath.floor(x) : FastMath.ceil(x);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,415,inal double e = nextExponential(1d);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,416, = -e - (n * n / 2) + c1;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,417, else {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,418,f (u > p1 + p2) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,419, = lambda;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,420,reak;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,421, else {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,422, = delta + (twolpd / delta) * nextExponential(1d);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,423, = FastMath.ceil(x);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,424, = -nextExponential(1d) - delta * (x + 1) / twolpd;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,427, = x < 0 ? 1 : 0;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,428, = y * (y + 1) / (2 * lambda);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,429,f (v < -t && a == 0) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,430, = lambda + y;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,431,reak;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,433,r = t * ((2 * y + 1) / (6 * lambda) - 1);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,434,a = qr - (t * t) / (3 * (lambda + a * (y + 1)));
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,435,f (v < qa) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,436, = lambda + y;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,437,reak;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,439,f (v > qr) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,440,ontinue;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,442,f (v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,443, = lambda + y;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,444,reak;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,447,eturn y2 + (long) y;
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,198,return delegate.nextPoisson(mean);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,454,f (sigma <= 0) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,455,"hrow new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sigma);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,457,eturn sigma * getRan().nextGaussian() + mu;
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,203,"return delegate.nextGaussian(mu,sigma);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,473,f (mean <= 0.0) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,474,"hrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,477,/ Step 1:
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,478,ouble a = 0;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,479,"ouble u = this.nextUniform(0, 1);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,481,/ Step 2 and 3:
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,482,hile (u < 0.5) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,483, += EXPONENTIAL_SA_QI[0];
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,484, *= 2;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,487,/ Step 4 (now u >= 0.5):
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,488, += u - 1;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,490,/ Step 5:
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,491,f (u <= EXPONENTIAL_SA_QI[0]) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,492,eturn mean * (a + u);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,495,/ Step 6:
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,496,"nt i = 0; // Should be 1, be we iterate before it in while using 0"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,497,"ouble u2 = this.nextUniform(0, 1);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,498,ouble umin = u2;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,500,/ Step 7 and 8:
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,501,o {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,502,+i;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,503,"2 = this.nextUniform(0, 1);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,505,f (u2 < umin) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,506,min = u2;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,509,/ Step 8:
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,510, while (u > EXPONENTIAL_SA_QI[i]); // Ensured to exit since EXPONENTIAL_SA_QI[MAX] = 1
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,512,eturn mean * (a + umin * EXPONENTIAL_SA_QI[0]);
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,218,return delegate.nextExponential(mean);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,530,"eturn nextUniform(lower, upper, false);"
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,235,"return delegate.nextUniform(lower, upper);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,551,f (lower >= upper) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,552,"hrow new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,553,"ower, upper, false);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,556,f (Double.isInfinite(lower) || Double.isInfinite(upper)) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,557,hrow new MathIllegalArgumentException(LocalizedFormats.INFINITE_BOUND);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,560,f (Double.isNaN(lower) || Double.isNaN(upper)) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,561,hrow new MathIllegalArgumentException(LocalizedFormats.NAN_NOT_ALLOWED);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,564,inal RandomGenerator generator = getRan();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,566,/ ensure nextDouble() isn't 0.0
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,567,ouble u = generator.nextDouble();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,568,hile (!lowerInclusive && u <= 0.0) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,569, = generator.nextDouble();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,572,eturn u * upper + (1.0 - u) * lower;
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,255,"return delegate.nextUniform(lower, upper, lowerInclusive);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,586,"eturn nextInversionDeviate(new BetaDistribution(alpha, beta));"
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,269,"return delegate.nextBeta(alpha, beta);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,600,"eturn nextInversionDeviate(new BinomialDistribution(numberOfTrials, probabilityOfSuccess));"
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,283,"return delegate.nextBinomial(numberOfTrials, probabilityOfSuccess);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,614,"eturn nextInversionDeviate(new CauchyDistribution(median, scale));"
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,297,"return delegate.nextCauchy(median, scale);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,627,eturn nextInversionDeviate(new ChiSquaredDistribution(df));
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,310,return delegate.nextChiSquare(df);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,641,"eturn nextInversionDeviate(new FDistribution(numeratorDf, denominatorDf));"
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,324,"return delegate.nextF(numeratorDf, denominatorDf);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,666,f (shape < 1) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,667,"/ [1]: p. 228, Algorithm GS"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,669,hile (true) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,670,/ Step 1:
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,671,"inal double u = this.nextUniform(0, 1);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,672,inal double bGS = 1 + shape/FastMath.E;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,673,inal double p = bGS*u;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,675,f (p <= 1) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,676,/ Step 2:
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,678,"inal double x = FastMath.pow(p, 1/shape);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,679,"inal double u2 = this.nextUniform(0.0, 1);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,681,f (u2 > FastMath.exp(-x)) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,682,/ Reject
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,683,ontinue;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,684, else {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,685,eturn scale*x;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,687, else {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,688,/ Step 3:
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,690,inal double x = -1 * FastMath.log((bGS-p)/shape);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,691,"inal double u2 = this.nextUniform(0, 1);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,693,"f (u2 > FastMath.pow(x, shape - 1)) {"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,694,/ Reject
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,695,ontinue;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,696, else {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,697,eturn scale*x;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,703,/ Now shape >= 1
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,705,inal RandomGenerator generator = this.getRan();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,706,inal double d = shape - 0.333333333333333333;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,707,inal double c = 1.0 / (3*FastMath.sqrt(d));
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,709,hile (true) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,710,inal double x = generator.nextGaussian();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,711,inal double v = (1+c*x)*(1+c*x)*(1+c*x);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,713,f (v <= 0) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,714,ontinue;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,717,inal double xx = x*x;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,718,"inal double u = this.nextUniform(0, 1);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,720,/ Squeeze
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,721,f (u < 1 - 0.0331*xx*xx) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,722,eturn scale*d*v;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,725,f (FastMath.log(u) < 0.5*xx + d*(1 - v + FastMath.log(v))) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,726,eturn scale*d*v;
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,349,"return delegate.nextGamma(shape, scale);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,743,"eturn nextInversionDeviate(new HypergeometricDistribution(populationSize, numberOfSuccesses, sampleSize));"
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,364,"return delegate.nextHypergeometric(populationSize, numberOfSuccesses, sampleSize);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,757,"eturn nextInversionDeviate(new PascalDistribution(r, p));"
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,378,"return delegate.nextPascal(r, p);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,770,eturn nextInversionDeviate(new TDistribution(df));
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,391,return delegate.nextT(df);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,784,"eturn nextInversionDeviate(new WeibullDistribution(shape, scale));"
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,405,"return delegate.nextWeibull(shape, scale);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,798,"eturn nextInversionDeviate(new ZipfDistribution(numberOfElements, exponent));"
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,419,"return delegate.nextZipf(numberOfElements, exponent);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,802, Returns the RandomGenerator used to generate non-secure random data.
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,803, <p>
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,804, Creates and initializes a default generator if null. Uses a {@link Well19937c}
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,805, generator with {@code System.currentTimeMillis() + System.identityHashCode(this))} as the default seed.
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,806, </p>
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,808, @return the Random used to generate random data
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,809, @since 1.1
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,811,rivate RandomGenerator getRan() {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,812,f (rand == null) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,813,nitRan();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,815,eturn rand;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,819, Sets the default generator to a {@link Well19937c} generator seeded with
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,820, {@code System.currentTimeMillis() + System.identityHashCode(this))}.
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,822,rivate void initRan() {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,823,and = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,827, Returns the SecureRandom used to generate secure random data.
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,828, <p>
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,829, Creates and initializes if null.  Uses
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,830, {@code System.currentTimeMillis() + System.identityHashCode(this)} as the default seed.
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,831, </p>
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,833, @return the SecureRandom used to generate secure random data
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,835,rivate SecureRandom getSecRan() {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,836,f (secRand == null) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,837,ecRand = new SecureRandom();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,838,ecRand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,840,eturn secRand;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,853,f (rand == null) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,854,nitRan();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,856,and.setSeed(seed);
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,433,delegate.reSeed(seed);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,867,f (secRand == null) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,868,ecRand = new SecureRandom();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,870,ecRand.setSeed(System.currentTimeMillis());
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,444,delegate.reSeedSecure();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,883,f (secRand == null) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,884,ecRand = new SecureRandom();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,886,ecRand.setSeed(seed);
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,457,delegate.reSeedSecure(seed);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,894,f (rand == null) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,895,nitRan();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,897,and.setSeed(System.currentTimeMillis() + System.identityHashCode(this));
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,465,delegate.reSeed();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,922,"ecRand = SecureRandom.getInstance(algorithm, provider);"
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,490,"delegate.setSecureAlgorithm(algorithm, provider);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,935,f (k > n) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,936,"hrow new NumberIsTooLargeException(LocalizedFormats.PERMUTATION_EXCEEDS_N,"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,937,", n, true);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,939,f (k <= 0) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,940,"hrow new NotStrictlyPositiveException(LocalizedFormats.PERMUTATION_SIZE,"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,941,);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,944,nt[] index = getNatural(n);
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,945,"huffle(index, n - k);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,946,nt[] result = new int[k];
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,947,or (int i = 0; i < k; i++) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,948,esult[i] = index[n - i - 1];
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,951,eturn result;
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,503,"return delegate.nextPermutation(n, k);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,969,nt len = c.size();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,970,f (k > len) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,971,"hrow new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE,"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,972,", len, true);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,974,f (k <= 0) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,975,"hrow new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, k);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,978,bject[] objects = c.toArray();
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,979,"nt[] index = nextPermutation(len, k);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,980,bject[] result = new Object[k];
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,981,or (int i = 0; i < k; i++) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,982,esult[i] = objects[index[i]];
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,984,eturn result;
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,520,"return delegate.nextSample(c, k);"
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,530,* @deprecated use the distribution's sample() method
True,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,544,* @deprecated use the distribution's sample() method
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,1012,/ ------------------------Private methods----------------------------------
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,1015, Uses a 2-cycle permutation shuffle to randomly re-order the last elements
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,1016, of list.
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,1018, @param list
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,1019,            list to be shuffled
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,1020, @param end
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,1021,            element past which shuffling begins
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,1023,"rivate void shuffle(int[] list, int end) {"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,1024,nt target = 0;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,1025,or (int i = list.length - 1; i >= end; i--) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,1026,f (i == 0) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,1027,arget = 0;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,1028, else {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,1029,"arget = nextInt(0, i);"
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,1031,nt temp = list[target];
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,1032,ist[target] = list[i];
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,1033,ist[i] = temp;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,1038, Returns an array representing n.
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,1040, @param n
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,1041,            the natural number to represent
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,1042, @return array with entries = elements of n
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,1044,rivate int[] getNatural(int n) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,1045,nt[] natural = new int[n];
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,1046,or (int i = 0; i < n; i++) {
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,1047,atural[i] = i;
False,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,src/main/java/org/apache/commons/math3/random/RandomDataImpl.java,1049,eturn natural;

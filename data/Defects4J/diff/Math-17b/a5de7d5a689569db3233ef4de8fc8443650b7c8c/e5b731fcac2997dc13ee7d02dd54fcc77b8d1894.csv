is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,21,import java.util.Collection;
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,22,import java.util.Iterator;
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,205,* Computes aggregate summary statistics. This method can be used to combine statistics
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,206,"* computed over partitions or subsamples - i.e., the StatisticalSummaryValues returned"
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,207,* should contain the same values that would have been obtained by computing a single
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,208,* StatisticalSummary over the combined dataset.
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,209,* <p>
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,210,* Returns null if the collection is empty or null.
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,211,* </p>
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,213,* @param statistics collection of SummaryStatistics to aggregate
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,214,* @return summary statistics for the combined dataset
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,216,public static StatisticalSummaryValues aggregate(Collection<SummaryStatistics> statistics) {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,217,if (statistics == null) {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,218,return null;
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,220,Iterator<SummaryStatistics> iterator = statistics.iterator();
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,221,if (!iterator.hasNext()) {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,222,return null;
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,224,SummaryStatistics current = iterator.next();
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,225,long n = current.getN();
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,226,double min = current.getMin();
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,227,double sum = current.getSum();
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,228,double max = current.getMax();
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,229,double m2 = current.getSecondMoment();
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,230,double mean = current.getMean();
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,231,while (iterator.hasNext()) {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,232,current = iterator.next();
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,233,if (current.getMin() < min || Double.isNaN(min)) {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,234,min = current.getMin();
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,236,if (current.getMax() > max || Double.isNaN(max)) {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,237,max = current.getMax();
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,239,sum += current.getSum();
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,240,final double oldN = n;
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,241,final long curN = current.getN();
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,242,n += curN;
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,243,final double meanDiff = current.getMean() - mean;
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,244,mean = sum / n;
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,245,m2 = m2 + current.getSecondMoment() + meanDiff * meanDiff * oldN * curN / n;
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,247,final double variance;
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,248,if (n == 0) {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,249,variance = Double.NaN;
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,250,} else if (n == 1) {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,251,variance = 0d;
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,252,} else {
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,253,variance = m2 / (n - 1);
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,255,"return new StatisticalSummaryValues(mean, variance, n, max, min, sum);"
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,24,import java.util.Collection;
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,25,import java.util.ArrayList;
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,27,import org.apache.commons.math.random.RandomData;
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,28,import org.apache.commons.math.random.RandomDataImpl;
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,29,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,39,* Creates and returns a {@code Test} representing all the test cases in this
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,40,* class
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,42,* @return a {@code Test} representing all the test cases in this class
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,44,public static Test suite() {
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,45,TestSuite suite = new TestSuite(AggregateSummaryStatisticsTest.class);
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,46,"suite.setName(""AggregateSummaryStatistics tests"");"
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,47,return suite;
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,80,public void testAggregate() throws Exception {
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,82,// Generate a random sample and random partition
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,83,double[] totalSample = generateSample();
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,84,double[][] subSamples = generatePartition(totalSample);
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,85,int nSamples = subSamples.length;
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,87,// Compute combined stats directly
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,88,SummaryStatistics totalStats = new SummaryStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,89,for (int i = 0; i < totalSample.length; i++) {
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,90,totalStats.addValue(totalSample[i]);
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,93,// Now compute subsample stats individually and aggregate
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,94,SummaryStatistics[] subSampleStats = new SummaryStatistics[nSamples];
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,95,for (int i = 0; i < nSamples; i++) {
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,96,subSampleStats[i] = new SummaryStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,98,Collection<SummaryStatistics> aggregate = new ArrayList<SummaryStatistics>();
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,99,for (int i = 0; i < nSamples; i++) {
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,100,for (int j = 0; j < subSamples[i].length; j++) {
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,101,subSampleStats[i].addValue(subSamples[i][j]);
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,103,aggregate.add(subSampleStats[i]);
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,106,// Compare values
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,107,StatisticalSummaryValues aggregatedStats = AggregateSummaryStatistics.aggregate(aggregate);
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,108,"assertEquals(totalStats.getSummary(), aggregatedStats, 10E-12);"
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,112,* Verifies that two StatisticalSummaryValues report the same values up
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,113,"* to delta, with NaNs, infinities returned in the same spots. For max, min, n, values"
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,114,"* have to agree exactly, delta is used only for sum, mean, variance, std dev."
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,116,"protected static void assertEquals(StatisticalSummary expected, StatisticalSummaryValues observed, double delta) {"
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,117,"TestUtils.assertEquals(expected.getMax(), observed.getMax(), 0);"
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,118,"TestUtils.assertEquals(expected.getMin(), observed.getMin(), 0);"
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,119,"assertEquals(expected.getN(), observed.getN());"
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,120,"TestUtils.assertEquals(expected.getSum(), observed.getSum(), delta);"
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,121,"TestUtils.assertEquals(expected.getMean(), observed.getMean(), delta);"
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,122,"TestUtils.assertEquals(expected.getStandardDeviation(), observed.getStandardDeviation(), delta);"
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,123,"TestUtils.assertEquals(expected.getVariance(), observed.getVariance(), delta);"
False,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,62, Creates and returns a {@code Test} representing all the test cases in this
False,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,63, class
False,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,65, @return a {@code Test} representing all the test cases in this class
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,128,* Generates a random sample of double values.
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,129,"* Sample size is random, between 10 and 100 and values are"
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,130,"* uniformly distributed over [-100, 100]."
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,132,* @return array of random double values
False,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,67,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,68,estSuite suite = new TestSuite(AggregateSummaryStatisticsTest.class);
False,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,69,"uite.setName(""AggregateSummaryStatistics tests"");"
False,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,70,eturn suite;
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,134,private double[] generateSample() {
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,135,final RandomData randomData = new RandomDataImpl();
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,136,"final int sampleSize = randomData.nextInt(10,100);"
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,137,double[] out = new double[sampleSize];
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,138,for (int i = 0; i < out.length; i++) {
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,139,"out[i] = randomData.nextUniform(-100, 100);"
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,141,return out;
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,145,* Generates a partition of <sample> into up to 5 sequentially selected
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,146,* subsamples with randomly selected partition points.
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,148,* @param sample array to partition
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,149,* @return rectangular array with rows = subsamples
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,151,private double[][] generatePartition(double[] sample) {
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,152,final int length = sample.length;
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,153,final double[][] out = new double[5][];
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,154,final RandomData randomData = new RandomDataImpl();
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,155,int cur = 0;
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,156,int offset = 0;
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,157,int sampleCount = 0;
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,158,for (int i = 0; i < 5; i++) {
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,159,if (cur == length || offset == length) {
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,160,break;
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,162,"final int next = (i == 4 || cur == length - 1) ? length - 1 : randomData.nextInt(cur, length - 1);"
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,163,final int subLength = next - cur + 1;
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,164,out[i] = new double[subLength];
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,165,"System.arraycopy(sample, offset, out[i], 0, subLength);"
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,166,cur = next + 1;
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,167,sampleCount++;
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,168,offset += subLength;
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,170,if (sampleCount < 5) {
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,171,double[][] out2 = new double[sampleCount][];
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,172,for (int j = 0; j < sampleCount; j++) {
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,173,final int curSize = out[j].length;
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,174,out2[j] = new double[curSize];
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,175,"System.arraycopy(out[j], 0, out2[j], 0, curSize);"
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,177,return out2;
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,178,} else {
True,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,179,return out;

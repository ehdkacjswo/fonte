is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,19,mport org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,19,import org.apache.commons.math3.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,26,* <p>This class is based on a paper written by Philippe Pbay:
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,27,"* <a href=""http://prod.sandia.gov/techlib/access-control.cgi/2008/086212.pdf"">"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,28,"* Formulas for Robust, One-Pass Parallel Computation of Covariances and"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,29,"* Arbitrary-Order Statistical Moments</a>, 2008, Technical Report SAND2008-6212,"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,30,* Sandia National Laboratories. It computes the covariance for a pair of variables.
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,31,* Use {@link StorelessCovariance} to estimate an entire covariance matrix.</p>
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,31,rivate double deltaX = 0.0;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,33,rivate double deltaY = 0.0;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,38,/** the mean of variable x */
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,39,private double meanX;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,35,rivate double meanX = 0.0;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,41,/** the mean of variable y */
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,42,private double meanY;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,37,rivate double meanY = 0.0;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,44,/** number of observations */
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,45,private double n;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,39,rivate double n = 0;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,47,/** the running covariance estimate */
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,48,private double covarianceNumerator;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,41,rivate double covarianceNumerator = 0.0;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,43,rivate boolean biasCorrected = true;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,50,/** flag for bias correction */
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,51,private boolean biasCorrected;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,54,* Create an empty {@link StorelessBivariateCovariance} instance with
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,55,* bias correction.
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,58,this(true);
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,48,ublic StorelessBivariateCovariance(boolean biasCorrected) {
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,49,his.biasCorrected = biasCorrected;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,62,* Create an empty {@link StorelessBivariateCovariance} instance.
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,64,* @param biasCorrection if <code>true</code> the covariance estimate is corrected
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,65,"* for bias, i.e. n-1 in the denominator, otherwise there is no bias correction,"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,66,* i.e. n in the denominator.
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,68,public StorelessBivariateCovariance(final boolean biasCorrection) {
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,69,meanX = meanY = 0.0;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,70,n = 0;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,71,covarianceNumerator = 0.0;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,72,biasCorrected = biasCorrection;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,52,"ublic void increment(double x, double y) {"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,76,"* Update the covariance estimation with a pair of variables (x, y)."
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,78,* @param x the x value
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,79,* @param y the y value
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,81,"public void increment(final double x, final double y) {"
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,54,eltaX = x - meanX;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,55,eltaY = y - meanY;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,83,final double deltaX = x - meanX;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,84,final double deltaY = y - meanY;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,91,* Returns the number of observations.
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,93,* @return number of observations
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,65,ublic double getResult() throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,100,* Return the current covariance estimate.
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,102,* @return the current covariance
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,103,* @throws NumberIsTooSmallException if the number of observations
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,104,* is &lt; 2
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,106,public double getResult() throws NumberIsTooSmallException {
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,67,"hrow new MathIllegalArgumentException(LocalizedFormats.INSUFFICIENT_DIMENSION,"
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,68,", 2);"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,108,"throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_DIMENSION,"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,109,"n, 2, true);"
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,19,mport org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,19,import org.apache.commons.math3.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,21,mport org.apache.commons.math3.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,22,mport org.apache.commons.math3.linear.Array2DRowRealMatrix;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,21,import org.apache.commons.math3.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,22,import org.apache.commons.math3.linear.MatrixUtils;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,27, stored in memory.
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,27,* stored in memory. The size of the covariance matrix is specified in the
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,28,* constructor. Specific elements of the matrix are incrementally updated with
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,29,* calls to incrementRow() or increment Covariance().
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,31,* <p>This class is based on a paper written by Philippe Pbay:
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,32,"* <a href=""http://prod.sandia.gov/techlib/access-control.cgi/2008/086212.pdf"">"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,33,"* Formulas for Robust, One-Pass Parallel Computation of Covariances and"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,34,"* Arbitrary-Order Statistical Moments</a>, 2008, Technical Report SAND2008-6212,"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,35,* Sandia National Laboratories.</p>
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,34,rivate StorelessBivariateCovariance[][] covMatrix = null;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,42,/** the two-dimensional covariance matrix */
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,43,private StorelessBivariateCovariance[][] covMatrix;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,36,rivate int rowDimension = 1;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,45,/** row dimension of the covariance matrix */
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,46,private int rowDimension;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,38,rivate int colDimension = 1;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,48,/** column dimension of the covariance matrix */
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,49,private int colDimension;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,40,rivate boolean biasCorrected = true;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,51,/** flag for bias correction */
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,52,private boolean biasCorrected;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,42,"ublic StorelessCovariance(int rowDimension, int colDimension){"
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,43,"his(rowDimension, colDimension, true);"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,55,* Create a bias corrected covariance matrix with a given number of rows and columns.
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,57,* @param rows number of rows
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,58,* @param cols number of columns
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,60,"public StorelessCovariance(final int rows, final int cols) {"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,61,"this(rows, cols, true);"
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,46,"ublic StorelessCovariance(int rowDimension, int colDimension, boolean biasCorrected){"
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,47,his.rowDimension = rowDimension;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,48,his.colDimension = colDimension;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,49,his.biasCorrected = biasCorrected;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,65,* Create a covariance matrix with a given number of rows and columns and the
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,66,* indicated bias correction.
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,68,* @param rows number of variables in the rows
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,69,* @param cols number of variables in the columns
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,70,* @param biasCorrection if <code>true</code> the covariance estimate is corrected
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,71,"* for bias, i.e. n-1 in the denominator, otherwise there is no bias correction,"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,72,* i.e. n in the denominator.
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,74,"public StorelessCovariance(final int rows, final int cols,"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,75,final boolean biasCorrection) {
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,76,rowDimension = rows;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,77,colDimension = cols;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,78,biasCorrected = biasCorrection;
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,54,rivate void initializeMatrix(){
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,84,* Initialize the internal two-dimensional array of
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,85,* {@link StorelessBivariateCovariance} instances.
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,87,private void initializeMatrix() {
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,62,"ublic StorelessBivariateCovariance getCovariance(int xIndex, int yIndex){"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,96,* Get the covariance for an individual element of the covariance matrix.
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,98,* @param xIndex row index in the covariance matrix
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,99,* @param yIndex column index in the covariance matrix
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,100,* @return the covariance of the given element
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,102,"public StorelessBivariateCovariance getCovariance(final int xIndex,"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,103,final int yIndex) {
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,66,"ublic void setCovariance(int xIndex, int yIndex, StorelessBivariateCovariance cov){"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,108,* Set the covariance for an individual element of the covariance matrix.
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,110,* @param xIndex row index in the covariance matrix
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,111,* @param yIndex column index in the covariance matrix
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,112,* @param cov the covariance to be set
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,114,"public void setCovariance(final int xIndex, final int yIndex,"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,115,final StorelessBivariateCovariance cov) {
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,70,"ublic void incrementCovariance(int xIndex, int yIndex, double x, double y){"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,120,* Increment one individual element of the covariance matrix.
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,122,* <p>The element is specified by the xIndex and yIndex and incremented with the
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,123,* corresponding values of x and y.</p>
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,125,* @param xIndex row index in the covariance matrix
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,126,* @param yIndex column index in the covariance matrix
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,127,* @param x value of x
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,128,* @param y value of y
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,130,"public void incrementCovariance(final int xIndex, final int yIndex,"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,131,"final double x, final double y) {"
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,74,ublic void incrementRow(double[] rowData)throws IllegalArgumentException{
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,136,* Increment the covariance matrix with one row of data.
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,138,* @param rowData array representing one row of data.
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,139,* @throws DimensionMismatchException if the length of <code>rowData</code>
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,140,* does not match with the covariance matrix
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,142,public void incrementRow(final double[] rowData)
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,143,throws DimensionMismatchException {
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,77,hrow new MathIllegalArgumentException(
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,78,"ocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, length, colDimension);"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,147,"throw new DimensionMismatchException(length, colDimension);"
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,80,or(int i=0;i<length;i++){
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,81,or(int j=0;j<length;j++){
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,149,for (int i = 0; i < length; i++){
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,150,for (int j = 0; j < length; j++){
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,87,Override
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,88,ublic RealMatrix getCovarianceMatrix() throws IllegalArgumentException {
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,89,"ealMatrix matrix = new Array2DRowRealMatrix(rowDimension, colDimension);"
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,90,or(int i=0;i<rowDimension;i++){
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,91,or(int j=0;j<colDimension;j++){
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,92,"atrix.setEntry(i, j, covMatrix[i][j].getResult());"
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,95,eturn matrix;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,158,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,159,* @throws NumberIsTooSmallException if the number of observations
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,160,* in a cell is &lt; 2
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,162,public RealMatrix getCovarianceMatrix() throws NumberIsTooSmallException {
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,163,return MatrixUtils.createRealMatrix(getData());
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,98,ublic double[][] getData() throws IllegalArgumentException {
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,99,ouble[][] data = new double[rowDimension][rowDimension];
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,100,or(int i=0;i<rowDimension;i++){
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,101,or(int j=0;j<colDimension;j++){
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,167,* Return the covariance matrix as two-dimensional array.
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,169,* @return a two-dimensional double array of covariance values
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,170,* @throws NumberIsTooSmallException if the number of observations
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,171,* for a cell is &lt; 2
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,173,public double[][] getData() throws NumberIsTooSmallException {
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,174,final double[][] data = new double[rowDimension][rowDimension];
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,175,for (int i = 0; i < rowDimension; i++) {
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,176,for (int j = 0; j < colDimension; j++) {
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,109," This {@link Covariance} method is not supported by StorelessCovariance, since"
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,110, the number of bivariate observations does not have to be the same for different
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,184,"* This {@link Covariance} method is not supported by a {@link StorelessCovariance},"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,185,* since the number of bivariate observations does not have to be the same for different
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,112, @return nothing as this implementation always throws a {@link MathUnsupportedOperationException}
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,188,* @return nothing as this implementation always throws a
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,189,* {@link MathUnsupportedOperationException}
False,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,115,Override

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,17,package org.apache.commons.math3.analysis.integration;
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,19,import org.apache.commons.math3.analysis.UnivariateFunction;
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,20,import org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory;
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,21,import org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator;
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,22,import org.apache.commons.math3.exception.MaxCountExceededException;
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,23,import org.apache.commons.math3.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,24,import org.apache.commons.math3.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,25,import org.apache.commons.math3.exception.TooManyEvaluationsException;
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,26,import org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,29,* This algorithm divides the integration interval into equally-sized
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,30,* sub-interval and on each of them performs a
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,31,"* <a href=""http://mathworld.wolfram.com/Legendre-GaussQuadrature.html"">"
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,32,* Legendre-Gauss</a> quadrature.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,34,* @version $Id$
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,35,* @since 3.1
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,38,public class IterativeLegendreGaussIntegrator
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,39,extends BaseAbstractUnivariateIntegrator {
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,40,/** Factory that computes the points and weights. */
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,41,private static final GaussIntegratorFactory factory
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,42,= new GaussIntegratorFactory();
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,43,/** Number of integration points (per interval). */
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,44,private final int numberOfPoints;
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,47,* Builds an integrator with given accuracies and iterations counts.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,49,* @param n Number of integration points.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,50,* @param relativeAccuracy Relative accuracy of the result.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,51,* @param absoluteAccuracy Absolute accuracy of the result.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,52,* @param minimalIterationCount Minimum number of iterations.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,53,* @param maximalIterationCount Maximum number of iterations.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,54,* @throws NotStrictlyPositiveException if minimal number of iterations
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,55,* is not strictly positive.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,56,* @throws NumberIsTooSmallException if maximal number of iterations
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,57,* is smaller than or equal to the minimal number of iterations.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,59,"public IterativeLegendreGaussIntegrator(final int n,"
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,60,"final double relativeAccuracy,"
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,61,"final double absoluteAccuracy,"
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,62,"final int minimalIterationCount,"
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,63,final int maximalIterationCount)
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,64,"throws NotStrictlyPositiveException, NumberIsTooSmallException {"
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,65,"super(relativeAccuracy, absoluteAccuracy, minimalIterationCount, maximalIterationCount);"
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,66,numberOfPoints = n;
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,70,* Builds an integrator with given accuracies.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,72,* @param n Number of integration points.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,73,* @param relativeAccuracy Relative accuracy of the result.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,74,* @param absoluteAccuracy Absolute accuracy of the result.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,76,"public IterativeLegendreGaussIntegrator(final int n,"
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,77,"final double relativeAccuracy,"
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,78,final double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,79,"this(n, relativeAccuracy, absoluteAccuracy,"
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,80,"DEFAULT_MIN_ITERATIONS_COUNT, DEFAULT_MAX_ITERATIONS_COUNT);"
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,84,* Builds an integrator with given iteration counts.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,86,* @param n Number of integration points.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,87,* @param minimalIterationCount Minimum number of iterations.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,88,* @param maximalIterationCount Maximum number of iterations.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,89,* @throws NotStrictlyPositiveException if minimal number of iterations
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,90,* is not strictly positive.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,91,* @throws NumberIsTooSmallException if maximal number of iterations
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,92,* is smaller than or equal to the minimal number of iterations.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,94,"public IterativeLegendreGaussIntegrator(final int n,"
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,95,"final int minimalIterationCount,"
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,96,final int maximalIterationCount) {
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,97,"this(n, DEFAULT_RELATIVE_ACCURACY, DEFAULT_ABSOLUTE_ACCURACY,"
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,98,"minimalIterationCount, maximalIterationCount);"
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,101,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,102,@Override
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,103,protected double doIntegrate()
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,104,"throws TooManyEvaluationsException, MaxCountExceededException {"
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,105,// Compute first estimate with a single step.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,106,double oldt = stage(1);
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,108,int n = 2;
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,109,while (true) {
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,110,// Improve integral with a larger number of steps.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,111,final double t = stage(n);
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,113,// Estimate the error.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,114,final double delta = FastMath.abs(t - oldt);
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,115,final double limit =
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,116,"FastMath.max(getAbsoluteAccuracy(),"
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,117,getRelativeAccuracy() * (FastMath.abs(oldt) + FastMath.abs(t)) * 0.5);
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,119,// check convergence
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,120,if (iterations.getCount() + 1 >= getMinimalIterationCount() &&
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,121,delta <= limit) {
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,122,return t;
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,125,// Prepare next iteration.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,126,"final double ratio = FastMath.min(4, FastMath.pow(delta / limit, 0.5 / numberOfPoints));"
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,127,"n = FastMath.max((int) (ratio * n), n + 1);"
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,128,oldt = t;
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,129,iterations.incrementCount();
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,134,* Compute the n-th stage integral.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,136,* @param n Number of steps.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,137,* @return the value of n-th stage integral.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,138,* @throws TooManyEvaluationsException if the maximum number of evaluations
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,139,* is exceeded.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,141,private double stage(final int n)
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,142,throws TooManyEvaluationsException {
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,143,// Function to be integrated is stored in the base class.
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,144,final UnivariateFunction f = new UnivariateFunction() {
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,145,public double value(double x) {
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,146,return computeObjectiveValue(x);
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,150,final double min = getMin();
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,151,final double max = getMax();
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,152,final double step = (max - min) / n;
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,154,double sum = 0;
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,155,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,156,"// Integrate over each sub-interval [a, b]."
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,157,final double a = min + i * step;
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,158,final double b = a + step;
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,159,"final GaussIntegrator g = factory.legendreHighPrecision(numberOfPoints, a, b);"
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,160,sum += g.integrate(f);
True,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java,163,return sum;
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,17,package org.apache.commons.math3.analysis.integration;
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,19,import java.util.Random;
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,21,import org.apache.commons.math3.analysis.QuinticFunction;
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,22,import org.apache.commons.math3.analysis.SinFunction;
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,23,import org.apache.commons.math3.analysis.UnivariateFunction;
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,24,import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,25,import org.apache.commons.math3.exception.TooManyEvaluationsException;
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,26,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,27,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,28,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,31,public class IterativeLegendreGaussIntegratorTest {
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,33,@Test
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,34,public void testSinFunction() {
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,35,UnivariateFunction f = new SinFunction();
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,36,BaseAbstractUnivariateIntegrator integrator
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,37,"= new IterativeLegendreGaussIntegrator(5, 1.0e-14, 1.0e-10, 2, 15);"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,38,"double min, max, expected, result, tolerance;"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,40,min = 0; max = FastMath.PI; expected = 2;
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,41,"tolerance = FastMath.max(integrator.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,42,FastMath.abs(expected * integrator.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,43,"result = integrator.integrate(10000, f, min, max);"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,44,"Assert.assertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,46,min = -FastMath.PI/3; max = 0; expected = -0.5;
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,47,"tolerance = FastMath.max(integrator.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,48,FastMath.abs(expected * integrator.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,49,"result = integrator.integrate(10000, f, min, max);"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,50,"Assert.assertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,53,@Test
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,54,public void testQuinticFunction() {
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,55,UnivariateFunction f = new QuinticFunction();
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,56,UnivariateIntegrator integrator =
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,57,"new IterativeLegendreGaussIntegrator(3,"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,58,"BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY,"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,59,"BaseAbstractUnivariateIntegrator.DEFAULT_ABSOLUTE_ACCURACY,"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,60,"BaseAbstractUnivariateIntegrator.DEFAULT_MIN_ITERATIONS_COUNT,"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,61,64);
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,62,"double min, max, expected, result;"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,64,min = 0; max = 1; expected = -1.0/48;
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,65,"result = integrator.integrate(10000, f, min, max);"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,66,"Assert.assertEquals(expected, result, 1.0e-16);"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,68,min = 0; max = 0.5; expected = 11.0/768;
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,69,"result = integrator.integrate(10000, f, min, max);"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,70,"Assert.assertEquals(expected, result, 1.0e-16);"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,72,min = -1; max = 4; expected = 2048/3.0 - 78 + 1.0/48;
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,73,"result = integrator.integrate(10000, f, min, max);"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,74,"Assert.assertEquals(expected, result, 1.0e-16);"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,77,@Test
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,78,public void testExactIntegration() {
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,79,Random random = new Random(86343623467878363l);
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,80,for (int n = 2; n < 6; ++n) {
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,81,IterativeLegendreGaussIntegrator integrator =
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,82,"new IterativeLegendreGaussIntegrator(n,"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,83,"BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY,"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,84,"BaseAbstractUnivariateIntegrator.DEFAULT_ABSOLUTE_ACCURACY,"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,85,"BaseAbstractUnivariateIntegrator.DEFAULT_MIN_ITERATIONS_COUNT,"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,86,64);
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,88,// an n points Gauss-Legendre integrator integrates 2n-1 degree polynoms exactly
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,89,for (int degree = 0; degree <= 2 * n - 1; ++degree) {
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,90,for (int i = 0; i < 10; ++i) {
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,91,double[] coeff = new double[degree + 1];
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,92,for (int k = 0; k < coeff.length; ++k) {
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,93,coeff[k] = 2 * random.nextDouble() - 1;
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,95,PolynomialFunction p = new PolynomialFunction(coeff);
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,96,"double result    = integrator.integrate(10000, p, -5.0, 15.0);"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,97,"double reference = exactIntegration(p, -5.0, 15.0);"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,98,"Assert.assertEquals(n + "" "" + degree + "" "" + i, reference, result, 1.0e-12 * (1.0 + FastMath.abs(reference)));"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,105,@Test
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,106,public void testIssue464() {
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,107,final double value = 0.2;
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,108,UnivariateFunction f = new UnivariateFunction() {
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,109,public double value(double x) {
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,110,return (x >= 0 && x <= 5) ? value : 0.0;
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,113,IterativeLegendreGaussIntegrator gauss
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,114,"= new IterativeLegendreGaussIntegrator(5, 3, 100);"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,116,"// due to the discontinuity, integration implies *many* calls"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,117,double maxX = 0.32462367623786328;
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,118,"Assert.assertEquals(maxX * value, gauss.integrate(Integer.MAX_VALUE, f, -10, maxX), 1.0e-7);"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,119,Assert.assertTrue(gauss.getEvaluations() > 37000000);
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,120,Assert.assertTrue(gauss.getIterations() < 30);
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,122,// setting up limits prevents such large number of calls
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,123,try {
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,124,"gauss.integrate(1000, f, -10, maxX);"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,125,"Assert.fail(""expected TooManyEvaluationsException"");"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,126,} catch (TooManyEvaluationsException tmee) {
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,127,// expected
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,128,"Assert.assertEquals(1000, tmee.getMax());"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,131,// integrating on the two sides should be simpler
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,132,"double sum1 = gauss.integrate(1000, f, -10, 0);"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,133,int eval1   = gauss.getEvaluations();
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,134,"double sum2 = gauss.integrate(1000, f, 0, maxX);"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,135,int eval2   = gauss.getEvaluations();
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,136,"Assert.assertEquals(maxX * value, sum1 + sum2, 1.0e-7);"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,137,Assert.assertTrue(eval1 + eval2 < 200);
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,141,"private double exactIntegration(PolynomialFunction p, double a, double b) {"
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,142,final double[] coeffs = p.getCoefficients();
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,143,double yb = coeffs[coeffs.length - 1] / coeffs.length;
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,144,double ya = yb;
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,145,for (int i = coeffs.length - 2; i >= 0; --i) {
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,146,yb = yb * b + coeffs[i] / (i + 1);
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,147,ya = ya * a + coeffs[i] / (i + 1);
True,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java,149,return yb * b - ya * a;

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,20,import java.lang.reflect.Array;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,22,import org.apache.commons.math.Field;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,24,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,23, An interface to classes that implement an algorithm to calculate the
False,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,24, LU-decomposition of a real matrix.
False,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,25," <p>The LU-decomposition of matrix A is a set of three matrices: P, L and U"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,26, such that P&times;A = L&times;U. P is a rows permutation matrix that is used
False,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,27, to rearrange the rows of A before so that it can be decomposed. L is a lower
False,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,28, triangular matrix with unit diagonal terms and U is an upper triangular matrix.</p>
False,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,29, <p>This interface is based on the class with similar name from the
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,27,* Calculates the LUP-decomposition of a square matrix.
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,28,* <p>The LUP-decomposition of a matrix A consists of three matrices
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,29,"* L, U and P that satisfy: PA = LU, L is lower triangular, and U is"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,30,* upper triangular and P is a permutation matrix. All matrices are
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,31,* m&times;m.</p>
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,32,* <p>Since {@link FieldElement field elements} do not provide an ordering
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,33,"* operator, the permutation matrix is computed here only in order to avoid"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,34,"* a zero pivot element, no attempt is done to get the largest pivot"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,35,* element.</p>
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,36,* <p>This class is based on the class with similar name from the
False,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,33,   <li>the <code>det</code> method has been renamed as {@link #getDeterminant()
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,40,*   <li>the {@code det} method has been renamed as {@link #getDeterminant()
False,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,35,   <li>the <code>getDoublePivot</code> method has been removed (but the int based
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,42,*   <li>the {@code getDoublePivot} method has been removed (but the int based
False,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,37,   <li>the <code>solve</code> and <code>isNonSingular</code> methods have been replaced
False,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,38,   by a {@link #getSolver() getSolver} method and the equivalent methods provided by
False,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,39,   the returned {@link DecompositionSolver}.</li>
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,44,*   <li>the {@code solve} and {@code isNonSingular} methods have been replaced
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,45,*   by a {@link #getSolver() getSolver} method and the equivalent methods
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,46,*   provided by the returned {@link DecompositionSolver}.</li>
False,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,46, @since 2.0
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,53,* @since 2.0 (changed to concrete class in 3.0)
False,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,48,ublic interface FieldLUDecomposition<T extends FieldElement<T>> {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,55,public class FieldLUDecomposition<T extends FieldElement<T>> {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,57,/** Field to which the elements belong. */
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,58,private final Field<T> field;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,60,/** Entries of LU decomposition. */
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,61,private T[][] lu;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,63,/** Pivot permutation associated with LU decomposition. */
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,64,private int[] pivot;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,66,/** Parity of the permutation associated with the LU decomposition. */
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,67,private boolean even;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,69,/** Singularity indicator. */
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,70,private boolean singular;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,72,/** Cached value of L. */
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,73,private FieldMatrix<T> cachedL;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,75,/** Cached value of U. */
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,76,private FieldMatrix<T> cachedU;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,78,/** Cached value of P. */
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,79,private FieldMatrix<T> cachedP;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,82,* Calculates the LU-decomposition of the given matrix.
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,83,* @param matrix The matrix to decompose.
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,84,* @throws NonSquareMatrixException if matrix is not square
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,86,public FieldLUDecomposition(FieldMatrix<T> matrix) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,87,if (!matrix.isSquare()) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,88,"throw new NonSquareMatrixException(matrix.getRowDimension(),"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,89,matrix.getColumnDimension());
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,92,final int m = matrix.getColumnDimension();
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,93,field = matrix.getField();
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,94,lu = matrix.getData();
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,95,pivot = new int[m];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,96,cachedL = null;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,97,cachedU = null;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,98,cachedP = null;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,100,// Initialize permutation array and parity
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,101,for (int row = 0; row < m; row++) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,102,pivot[row] = row;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,104,even     = true;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,105,singular = false;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,107,// Loop over columns
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,108,for (int col = 0; col < m; col++) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,110,T sum = field.getZero();
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,112,// upper
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,113,for (int row = 0; row < col; row++) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,114,final T[] luRow = lu[row];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,115,sum = luRow[col];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,116,for (int i = 0; i < row; i++) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,117,sum = sum.subtract(luRow[i].multiply(lu[i][col]));
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,119,luRow[col] = sum;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,122,// lower
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,123,int nonZero = col; // permutation row
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,124,for (int row = col; row < m; row++) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,125,final T[] luRow = lu[row];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,126,sum = luRow[col];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,127,for (int i = 0; i < col; i++) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,128,sum = sum.subtract(luRow[i].multiply(lu[i][col]));
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,130,luRow[col] = sum;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,132,if (lu[nonZero][col].equals(field.getZero())) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,133,// try to select a better permutation choice
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,134,++nonZero;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,138,// Singularity check
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,139,if (nonZero >= m) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,140,singular = true;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,141,return;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,144,// Pivot if necessary
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,145,if (nonZero != col) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,146,T tmp = field.getZero();
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,147,for (int i = 0; i < m; i++) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,148,tmp = lu[nonZero][i];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,149,lu[nonZero][i] = lu[col][i];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,150,lu[col][i] = tmp;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,152,int temp = pivot[nonZero];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,153,pivot[nonZero] = pivot[col];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,154,pivot[col] = temp;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,155,even = !even;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,158,"// Divide the lower elements by the ""winning"" diagonal elt."
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,159,final T luDiag = lu[col][col];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,160,for (int row = col + 1; row < m; row++) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,161,final T[] luRow = lu[row];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,162,luRow[col] = luRow[col].divide(luDiag);
False,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,52, <p>L is an lower-triangular matrix</p>
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,170,* <p>L is a lower-triangular matrix</p>
False,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,55,ieldMatrix<T> getL();
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,173,public FieldMatrix<T> getL() {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,174,if ((cachedL == null) && !singular) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,175,final int m = pivot.length;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,176,"cachedL = new Array2DRowFieldMatrix<T>(field, m, m);"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,177,for (int i = 0; i < m; ++i) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,178,final T[] luI = lu[i];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,179,for (int j = 0; j < i; ++j) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,180,"cachedL.setEntry(i, j, luI[j]);"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,182,"cachedL.setEntry(i, i, field.getOne());"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,185,return cachedL;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,62,ieldMatrix<T> getU();
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,193,public FieldMatrix<T> getU() {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,194,if ((cachedU == null) && !singular) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,195,final int m = pivot.length;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,196,"cachedU = new Array2DRowFieldMatrix<T>(field, m, m);"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,197,for (int i = 0; i < m; ++i) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,198,final T[] luI = lu[i];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,199,for (int j = i; j < m; ++j) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,200,"cachedU.setEntry(i, j, luI[j]);"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,204,return cachedU;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,73,ieldMatrix<T> getP();
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,216,public FieldMatrix<T> getP() {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,217,if ((cachedP == null) && !singular) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,218,final int m = pivot.length;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,219,"cachedP = new Array2DRowFieldMatrix<T>(field, m, m);"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,220,for (int i = 0; i < m; ++i) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,221,"cachedP.setEntry(i, pivot[i], field.getOne());"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,224,return cachedP;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,80,nt[] getPivot();
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,232,public int[] getPivot() {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,233,return pivot.clone();
False,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,83, Return the determinant of the matrix
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,237,* Return the determinant of the matrix.
False,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,86, getDeterminant();
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,240,public T getDeterminant() {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,241,if (singular) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,242,return field.getZero();
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,243,} else {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,244,final int m = pivot.length;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,245,T determinant = even ? field.getOne() : field.getZero().subtract(field.getOne());
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,246,for (int i = 0; i < m; i++) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,247,determinant = determinant.multiply(lu[i][i]);
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,249,return determinant;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,92,ieldDecompositionSolver<T> getSolver();
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,257,public FieldDecompositionSolver<T> getSolver() {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,258,"return new Solver<T>(field, lu, pivot, singular);"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,261,/** Specialized solver. */
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,262,private static class Solver<T extends FieldElement<T>> implements FieldDecompositionSolver<T> {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,264,/** Field to which the elements belong. */
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,265,private final Field<T> field;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,267,/** Entries of LU decomposition. */
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,268,private final T[][] lu;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,270,/** Pivot permutation associated with LU decomposition. */
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,271,private final int[] pivot;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,273,/** Singularity indicator. */
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,274,private final boolean singular;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,277,* Build a solver from decomposed matrix.
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,278,* @param field field to which the matrix elements belong
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,279,* @param lu entries of LU decomposition
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,280,* @param pivot pivot permutation associated with LU decomposition
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,281,* @param singular singularity indicator
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,283,"private Solver(final Field<T> field, final T[][] lu,"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,284,"final int[] pivot, final boolean singular) {"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,285,this.field    = field;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,286,this.lu       = lu;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,287,this.pivot    = pivot;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,288,this.singular = singular;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,291,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,292,public boolean isNonSingular() {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,293,return !singular;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,296,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,297,public FieldVector<T> solve(FieldVector<T> b) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,298,try {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,299,return solve((ArrayFieldVector<T>) b);
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,300,} catch (ClassCastException cce) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,302,final int m = pivot.length;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,303,if (b.getDimension() != m) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,304,"throw new DimensionMismatchException(b.getDimension(), m);"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,306,if (singular) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,307,throw new SingularMatrixException();
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,310,"@SuppressWarnings(""unchecked"") // field is of type T"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,311,"final T[] bp = (T[]) Array.newInstance(field.getZero().getClass(), m);"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,313,// Apply permutations to b
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,314,for (int row = 0; row < m; row++) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,315,bp[row] = b.getEntry(pivot[row]);
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,318,// Solve LY = b
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,319,for (int col = 0; col < m; col++) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,320,final T bpCol = bp[col];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,321,for (int i = col + 1; i < m; i++) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,322,bp[i] = bp[i].subtract(bpCol.multiply(lu[i][col]));
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,326,// Solve UX = Y
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,327,for (int col = m - 1; col >= 0; col--) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,328,bp[col] = bp[col].divide(lu[col][col]);
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,329,final T bpCol = bp[col];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,330,for (int i = 0; i < col; i++) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,331,bp[i] = bp[i].subtract(bpCol.multiply(lu[i][col]));
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,335,"return new ArrayFieldVector<T>(field, bp, false);"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,340,/** Solve the linear equation A &times; X = B.
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,341,* <p>The A matrix is implicit here. It is </p>
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,342,* @param b right-hand side of the equation A &times; X = B
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,343,* @return a vector X such that A &times; X = B
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,344,* @throws DimensionMismatchException if the matrices dimensions do not match.
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,345,* @throws SingularMatrixException if the decomposed matrix is singular.
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,347,public ArrayFieldVector<T> solve(ArrayFieldVector<T> b) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,348,final int m = pivot.length;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,349,if (b.data.length != m) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,350,"throw new DimensionMismatchException(b.data.length, m);"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,352,if (singular) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,353,throw new SingularMatrixException();
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,356,"@SuppressWarnings(""unchecked"")"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,357,// field is of type T
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,358,"final T[] bp = (T[]) Array.newInstance(field.getZero().getClass(),"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,359,m);
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,361,// Apply permutations to b
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,362,for (int row = 0; row < m; row++) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,363,bp[row] = b.data[pivot[row]];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,366,// Solve LY = b
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,367,for (int col = 0; col < m; col++) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,368,final T bpCol = bp[col];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,369,for (int i = col + 1; i < m; i++) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,370,bp[i] = bp[i].subtract(bpCol.multiply(lu[i][col]));
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,374,// Solve UX = Y
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,375,for (int col = m - 1; col >= 0; col--) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,376,bp[col] = bp[col].divide(lu[col][col]);
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,377,final T bpCol = bp[col];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,378,for (int i = 0; i < col; i++) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,379,bp[i] = bp[i].subtract(bpCol.multiply(lu[i][col]));
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,383,"return new ArrayFieldVector<T>(bp, false);"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,386,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,387,public FieldMatrix<T> solve(FieldMatrix<T> b) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,388,final int m = pivot.length;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,389,if (b.getRowDimension() != m) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,390,"throw new DimensionMismatchException(b.getRowDimension(), m);"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,392,if (singular) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,393,throw new SingularMatrixException();
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,396,final int nColB = b.getColumnDimension();
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,398,// Apply permutations to b
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,399,"@SuppressWarnings(""unchecked"") // field is of type T"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,400,"final T[][] bp = (T[][]) Array.newInstance(field.getZero().getClass(), new int[] { m, nColB });"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,401,for (int row = 0; row < m; row++) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,402,final T[] bpRow = bp[row];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,403,final int pRow = pivot[row];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,404,for (int col = 0; col < nColB; col++) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,405,"bpRow[col] = b.getEntry(pRow, col);"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,409,// Solve LY = b
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,410,for (int col = 0; col < m; col++) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,411,final T[] bpCol = bp[col];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,412,for (int i = col + 1; i < m; i++) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,413,final T[] bpI = bp[i];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,414,final T luICol = lu[i][col];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,415,for (int j = 0; j < nColB; j++) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,416,bpI[j] = bpI[j].subtract(bpCol[j].multiply(luICol));
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,421,// Solve UX = Y
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,422,for (int col = m - 1; col >= 0; col--) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,423,final T[] bpCol = bp[col];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,424,final T luDiag = lu[col][col];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,425,for (int j = 0; j < nColB; j++) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,426,bpCol[j] = bpCol[j].divide(luDiag);
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,428,for (int i = 0; i < col; i++) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,429,final T[] bpI = bp[i];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,430,final T luICol = lu[i][col];
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,431,for (int j = 0; j < nColB; j++) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,432,bpI[j] = bpI[j].subtract(bpCol[j].multiply(luICol));
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,437,"return new Array2DRowFieldMatrix<T>(field, bp, false);"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,441,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,442,public FieldMatrix<T> getInverse() {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,443,final int m = pivot.length;
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,444,final T one = field.getOne();
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,445,"FieldMatrix<T> identity = new Array2DRowFieldMatrix<T>(field, m, m);"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,446,for (int i = 0; i < m; ++i) {
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,447,"identity.setEntry(i, i, one);"
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,449,return solve(identity);
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,18,ackage org.apache.commons.math.linear;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,20,mport java.lang.reflect.Array;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,22,mport org.apache.commons.math.Field;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,23,mport org.apache.commons.math.FieldElement;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,24,mport org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,27, Calculates the LUP-decomposition of a square matrix.
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,28, <p>The LUP-decomposition of a matrix A consists of three matrices
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,29," L, U and P that satisfy: PA = LU, L is lower triangular, and U is"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,30, upper triangular and P is a permutation matrix. All matrices are
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,31, m&times;m.</p>
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,32, <p>Since {@link FieldElement field elements} do not provide an ordering
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,33," operator, the permutation matrix is computed here only in order to avoid"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,34," a zero pivot element, no attempt is done to get the largest pivot element.</p>"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,36, @param <T> the type of the field elements
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,37, @version $Id$
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,38, @since 2.0
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,40,ublic class FieldLUDecompositionImpl<T extends FieldElement<T>> implements FieldLUDecomposition<T> {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,42,** Field to which the elements belong. */
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,43,rivate final Field<T> field;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,45,** Entries of LU decomposition. */
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,46,rivate T lu[][];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,48,** Pivot permutation associated with LU decomposition */
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,49,rivate int[] pivot;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,51,** Parity of the permutation associated with the LU decomposition */
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,52,rivate boolean even;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,54,** Singularity indicator. */
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,55,rivate boolean singular;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,57,** Cached value of L. */
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,58,rivate FieldMatrix<T> cachedL;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,60,** Cached value of U. */
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,61,rivate FieldMatrix<T> cachedU;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,63,** Cached value of P. */
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,64,rivate FieldMatrix<T> cachedP;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,67, Calculates the LU-decomposition of the given matrix.
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,68, @param matrix The matrix to decompose.
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,69, @throws NonSquareMatrixException if matrix is not square
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,71,ublic FieldLUDecompositionImpl(FieldMatrix<T> matrix) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,72,f (!matrix.isSquare()) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,73,"hrow new NonSquareMatrixException(matrix.getRowDimension(),"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,74,atrix.getColumnDimension());
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,77,inal int m = matrix.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,78,ield = matrix.getField();
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,79,u = matrix.getData();
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,80,ivot = new int[m];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,81,achedL = null;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,82,achedU = null;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,83,achedP = null;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,85,/ Initialize permutation array and parity
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,86,or (int row = 0; row < m; row++) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,87,ivot[row] = row;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,89,ven     = true;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,90,ingular = false;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,92,/ Loop over columns
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,93,or (int col = 0; col < m; col++) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,95, sum = field.getZero();
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,97,/ upper
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,98,or (int row = 0; row < col; row++) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,99,inal T[] luRow = lu[row];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,100,um = luRow[col];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,101,or (int i = 0; i < row; i++) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,102,um = sum.subtract(luRow[i].multiply(lu[i][col]));
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,104,uRow[col] = sum;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,107,/ lower
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,108,nt nonZero = col; // permutation row
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,109,or (int row = col; row < m; row++) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,110,inal T[] luRow = lu[row];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,111,um = luRow[col];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,112,or (int i = 0; i < col; i++) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,113,um = sum.subtract(luRow[i].multiply(lu[i][col]));
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,115,uRow[col] = sum;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,117,f (lu[nonZero][col].equals(field.getZero())) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,118,/ try to select a better permutation choice
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,119,+nonZero;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,123,/ Singularity check
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,124,f (nonZero >= m) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,125,ingular = true;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,126,eturn;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,129,/ Pivot if necessary
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,130,f (nonZero != col) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,131, tmp = field.getZero();
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,132,or (int i = 0; i < m; i++) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,133,mp = lu[nonZero][i];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,134,u[nonZero][i] = lu[col][i];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,135,u[col][i] = tmp;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,137,nt temp = pivot[nonZero];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,138,ivot[nonZero] = pivot[col];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,139,ivot[col] = temp;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,140,ven = !even;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,143,"/ Divide the lower elements by the ""winning"" diagonal elt."
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,144,inal T luDiag = lu[col][col];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,145,or (int row = col + 1; row < m; row++) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,146,inal T[] luRow = lu[row];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,147,uRow[col] = luRow[col].divide(luDiag);
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,153,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,154,ublic FieldMatrix<T> getL() {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,155,f ((cachedL == null) && !singular) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,156,inal int m = pivot.length;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,157,"achedL = new Array2DRowFieldMatrix<T>(field, m, m);"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,158,or (int i = 0; i < m; ++i) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,159,inal T[] luI = lu[i];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,160,or (int j = 0; j < i; ++j) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,161,"achedL.setEntry(i, j, luI[j]);"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,163,"achedL.setEntry(i, i, field.getOne());"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,166,eturn cachedL;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,169,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,170,ublic FieldMatrix<T> getU() {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,171,f ((cachedU == null) && !singular) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,172,inal int m = pivot.length;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,173,"achedU = new Array2DRowFieldMatrix<T>(field, m, m);"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,174,or (int i = 0; i < m; ++i) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,175,inal T[] luI = lu[i];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,176,or (int j = i; j < m; ++j) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,177,"achedU.setEntry(i, j, luI[j]);"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,181,eturn cachedU;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,184,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,185,ublic FieldMatrix<T> getP() {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,186,f ((cachedP == null) && !singular) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,187,inal int m = pivot.length;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,188,"achedP = new Array2DRowFieldMatrix<T>(field, m, m);"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,189,or (int i = 0; i < m; ++i) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,190,"achedP.setEntry(i, pivot[i], field.getOne());"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,193,eturn cachedP;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,196,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,197,ublic int[] getPivot() {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,198,eturn pivot.clone();
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,201,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,202,ublic T getDeterminant() {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,203,f (singular) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,204,eturn field.getZero();
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,205, else {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,206,inal int m = pivot.length;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,207, determinant = even ? field.getOne() : field.getZero().subtract(field.getOne());
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,208,or (int i = 0; i < m; i++) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,209,eterminant = determinant.multiply(lu[i][i]);
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,211,eturn determinant;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,215,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,216,ublic FieldDecompositionSolver<T> getSolver() {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,217,"eturn new Solver<T>(field, lu, pivot, singular);"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,220,** Specialized solver. */
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,221,rivate static class Solver<T extends FieldElement<T>> implements FieldDecompositionSolver<T> {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,223,** Field to which the elements belong. */
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,224,rivate final Field<T> field;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,226,** Entries of LU decomposition. */
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,227,rivate final T lu[][];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,229,** Pivot permutation associated with LU decomposition. */
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,230,rivate final int[] pivot;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,232,** Singularity indicator. */
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,233,rivate final boolean singular;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,236, Build a solver from decomposed matrix.
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,237, @param field field to which the matrix elements belong
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,238, @param lu entries of LU decomposition
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,239, @param pivot pivot permutation associated with LU decomposition
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,240, @param singular singularity indicator
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,242,"rivate Solver(final Field<T> field, final T[][] lu,"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,243,"inal int[] pivot, final boolean singular) {"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,244,his.field    = field;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,245,his.lu       = lu;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,246,his.pivot    = pivot;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,247,his.singular = singular;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,250,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,251,ublic boolean isNonSingular() {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,252,eturn !singular;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,255,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,256,ublic FieldVector<T> solve(FieldVector<T> b) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,257,ry {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,258,eturn solve((ArrayFieldVector<T>) b);
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,259, catch (ClassCastException cce) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,261,inal int m = pivot.length;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,262,f (b.getDimension() != m) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,263,"hrow new DimensionMismatchException(b.getDimension(), m);"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,265,f (singular) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,266,hrow new SingularMatrixException();
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,269,"SuppressWarnings(""unchecked"") // field is of type T"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,270,"inal T[] bp = (T[]) Array.newInstance(field.getZero().getClass(), m);"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,272,/ Apply permutations to b
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,273,or (int row = 0; row < m; row++) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,274,p[row] = b.getEntry(pivot[row]);
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,277,/ Solve LY = b
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,278,or (int col = 0; col < m; col++) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,279,inal T bpCol = bp[col];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,280,or (int i = col + 1; i < m; i++) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,281,p[i] = bp[i].subtract(bpCol.multiply(lu[i][col]));
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,285,/ Solve UX = Y
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,286,or (int col = m - 1; col >= 0; col--) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,287,p[col] = bp[col].divide(lu[col][col]);
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,288,inal T bpCol = bp[col];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,289,or (int i = 0; i < col; i++) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,290,p[i] = bp[i].subtract(bpCol.multiply(lu[i][col]));
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,294,"eturn new ArrayFieldVector<T>(field, bp, false);"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,299,** Solve the linear equation A &times; X = B.
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,300, <p>The A matrix is implicit here. It is </p>
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,301, @param b right-hand side of the equation A &times; X = B
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,302, @return a vector X such that A &times; X = B
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,303, @throws DimensionMismatchException if the matrices dimensions do not match.
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,304, @throws SingularMatrixException if the decomposed matrix is singular.
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,306,ublic ArrayFieldVector<T> solve(ArrayFieldVector<T> b) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,307,inal int m = pivot.length;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,308,f (b.data.length != m) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,309,"hrow new DimensionMismatchException(b.data.length, m);"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,311,f (singular) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,312,hrow new SingularMatrixException();
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,315,"SuppressWarnings(""unchecked"")"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,316,/ field is of type T
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,317,"inal T[] bp = (T[]) Array.newInstance(field.getZero().getClass(),"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,318,);
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,320,/ Apply permutations to b
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,321,or (int row = 0; row < m; row++) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,322,p[row] = b.data[pivot[row]];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,325,/ Solve LY = b
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,326,or (int col = 0; col < m; col++) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,327,inal T bpCol = bp[col];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,328,or (int i = col + 1; i < m; i++) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,329,p[i] = bp[i].subtract(bpCol.multiply(lu[i][col]));
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,333,/ Solve UX = Y
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,334,or (int col = m - 1; col >= 0; col--) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,335,p[col] = bp[col].divide(lu[col][col]);
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,336,inal T bpCol = bp[col];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,337,or (int i = 0; i < col; i++) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,338,p[i] = bp[i].subtract(bpCol.multiply(lu[i][col]));
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,342,"eturn new ArrayFieldVector<T>(bp, false);"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,345,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,346,ublic FieldMatrix<T> solve(FieldMatrix<T> b) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,347,inal int m = pivot.length;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,348,f (b.getRowDimension() != m) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,349,"hrow new DimensionMismatchException(b.getRowDimension(), m);"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,351,f (singular) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,352,hrow new SingularMatrixException();
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,355,inal int nColB = b.getColumnDimension();
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,357,/ Apply permutations to b
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,358,"SuppressWarnings(""unchecked"") // field is of type T"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,359,"inal T[][] bp = (T[][]) Array.newInstance(field.getZero().getClass(), new int[] { m, nColB });"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,360,or (int row = 0; row < m; row++) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,361,inal T[] bpRow = bp[row];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,362,inal int pRow = pivot[row];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,363,or (int col = 0; col < nColB; col++) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,364,"pRow[col] = b.getEntry(pRow, col);"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,368,/ Solve LY = b
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,369,or (int col = 0; col < m; col++) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,370,inal T[] bpCol = bp[col];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,371,or (int i = col + 1; i < m; i++) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,372,inal T[] bpI = bp[i];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,373,inal T luICol = lu[i][col];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,374,or (int j = 0; j < nColB; j++) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,375,pI[j] = bpI[j].subtract(bpCol[j].multiply(luICol));
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,380,/ Solve UX = Y
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,381,or (int col = m - 1; col >= 0; col--) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,382,inal T[] bpCol = bp[col];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,383,inal T luDiag = lu[col][col];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,384,or (int j = 0; j < nColB; j++) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,385,pCol[j] = bpCol[j].divide(luDiag);
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,387,or (int i = 0; i < col; i++) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,388,inal T[] bpI = bp[i];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,389,inal T luICol = lu[i][col];
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,390,or (int j = 0; j < nColB; j++) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,391,pI[j] = bpI[j].subtract(bpCol[j].multiply(luICol));
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,396,"eturn new Array2DRowFieldMatrix<T>(field, bp, false);"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,400,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,401,ublic FieldMatrix<T> getInverse() {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,402,inal int m = pivot.length;
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,403,inal T one = field.getOne();
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,404,"ieldMatrix<T> identity = new Array2DRowFieldMatrix<T>(field, m, m);"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,405,or (int i = 0; i < m; ++i) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,406,"dentity.setEntry(i, i, one);"
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,408,eturn solve(identity);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,29,mport org.apache.commons.math.linear.FieldLUDecompositionImpl;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,29,import org.apache.commons.math.linear.FieldLUDecomposition;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,157,ew FieldLUDecompositionImpl<BigFraction>(bigP).getSolver();
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,157,new FieldLUDecomposition<BigFraction>(bigP).getSolver();
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,437,ieldMatrix<Fraction> mIT = new FieldLUDecompositionImpl<Fraction>(m).getSolver().getInverse().transpose();
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,438,ieldMatrix<Fraction> mTI = new FieldLUDecompositionImpl<Fraction>(m.transpose()).getSolver().getInverse();
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,437,FieldMatrix<Fraction> mIT = new FieldLUDecomposition<Fraction>(m).getSolver().getInverse().transpose();
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,438,FieldMatrix<Fraction> mTI = new FieldLUDecomposition<Fraction>(m.transpose()).getSolver().getInverse();
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,535,ieldMatrix<Fraction> pInverse = new FieldLUDecompositionImpl<Fraction>(p).getSolver().getInverse();
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,535,FieldMatrix<Fraction> pInverse = new FieldLUDecomposition<Fraction>(p).getSolver().getInverse();
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,550,olution = new FieldLUDecompositionImpl<Fraction>(coefficients)
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,550,solution = new FieldLUDecomposition<Fraction>(coefficients)
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,27,ublic class FieldLUDecompositionImplTest {
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,27,public class FieldLUDecompositionTest {
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,61,ieldLUDecomposition<Fraction> LU = new FieldLUDecompositionImpl<Fraction>(matrix);
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,61,FieldLUDecomposition<Fraction> LU = new FieldLUDecomposition<Fraction>(matrix);
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,76,ew FieldLUDecompositionImpl<Fraction>(new Array2DRowFieldMatrix<Fraction>(new Fraction[][] {
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,76,new FieldLUDecomposition<Fraction>(new Array2DRowFieldMatrix<Fraction>(new Fraction[][] {
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,91,ieldLUDecomposition<Fraction> lu = new FieldLUDecompositionImpl<Fraction>(matrix);
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,91,FieldLUDecomposition<Fraction> lu = new FieldLUDecomposition<Fraction>(matrix);
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,98,u = new FieldLUDecompositionImpl<Fraction>(matrix);
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,98,lu = new FieldLUDecomposition<Fraction>(matrix);
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,108,u = new FieldLUDecompositionImpl<Fraction>(matrix);
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,108,lu = new FieldLUDecomposition<Fraction>(matrix);
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,115,u = new FieldLUDecompositionImpl<Fraction>(matrix);
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,115,lu = new FieldLUDecomposition<Fraction>(matrix);
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,122,u = new FieldLUDecompositionImpl<Fraction>(matrix);
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,122,lu = new FieldLUDecomposition<Fraction>(matrix);
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,134,ieldMatrix<Fraction> l = new FieldLUDecompositionImpl<Fraction>(matrix).getL();
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,134,FieldMatrix<Fraction> l = new FieldLUDecomposition<Fraction>(matrix).getL();
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,147,ieldMatrix<Fraction> u = new FieldLUDecompositionImpl<Fraction>(matrix).getU();
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,147,FieldMatrix<Fraction> u = new FieldLUDecomposition<Fraction>(matrix).getU();
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,159,ieldMatrix<Fraction> p   = new FieldLUDecompositionImpl<Fraction>(matrix).getP();
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,159,FieldMatrix<Fraction> p   = new FieldLUDecomposition<Fraction>(matrix).getP();
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,215,"ew FieldLUDecompositionImpl<Fraction>(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), testData));"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,215,"new FieldLUDecomposition<Fraction>(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), testData));"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,217,"u = new FieldLUDecompositionImpl<Fraction>(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), singular));"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,217,"lu = new FieldLUDecomposition<Fraction>(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), singular));"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,219,"u = new FieldLUDecompositionImpl<Fraction>(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), bigSingular));"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,219,"lu = new FieldLUDecomposition<Fraction>(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), bigSingular));"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,227,"ew FieldLUDecompositionImpl<Fraction>(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), testData));"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,227,"new FieldLUDecomposition<Fraction>(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), testData));"
False,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,268,"ew FieldLUDecompositionImpl<Fraction>(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), luData));"
True,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/FieldLUDecompositionTest.java,268,"new FieldLUDecomposition<Fraction>(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), luData));"
False,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,68,olver = new FieldLUDecompositionImpl<Fraction>(createFractionMatrix(testData))
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,68,solver = new FieldLUDecomposition<Fraction>(createFractionMatrix(testData))
False,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,71,olver = new FieldLUDecompositionImpl<Fraction>(createFractionMatrix(singular))
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,71,solver = new FieldLUDecomposition<Fraction>(createFractionMatrix(singular))
False,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,74,olver = new FieldLUDecompositionImpl<Fraction>(createFractionMatrix(bigSingular))
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,74,solver = new FieldLUDecomposition<Fraction>(createFractionMatrix(bigSingular))
False,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,83,olver = new FieldLUDecompositionImpl<Fraction>(createFractionMatrix(testData))
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,83,solver = new FieldLUDecomposition<Fraction>(createFractionMatrix(testData))
False,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,104,olver = new FieldLUDecompositionImpl(createFractionMatrix(singular))
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,104,solver = new FieldLUDecomposition(createFractionMatrix(singular))
False,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,125,olver = new FieldLUDecompositionImpl<Fraction>(createFractionMatrix(testData))
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,125,solver = new FieldLUDecomposition<Fraction>(createFractionMatrix(testData))
False,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,175,eturn new FieldLUDecompositionImpl<Fraction>(m).getDeterminant().doubleValue();
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,175,return new FieldLUDecomposition<Fraction>(m).getDeterminant().doubleValue();
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,300,ieldMatrix<Fraction> mIT = new FieldLUDecompositionImpl<Fraction>(m).getSolver().getInverse().transpose();
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,301,ieldMatrix<Fraction> mTI = new FieldLUDecompositionImpl<Fraction>(m.transpose()).getSolver().getInverse();
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,300,FieldMatrix<Fraction> mIT = new FieldLUDecomposition<Fraction>(m).getSolver().getInverse().transpose();
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,301,FieldMatrix<Fraction> mTI = new FieldLUDecomposition<Fraction>(m.transpose()).getSolver().getInverse();
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,398,ieldMatrix<Fraction> pInverse = new FieldLUDecompositionImpl<Fraction>(p).getSolver().getInverse();
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,398,FieldMatrix<Fraction> pInverse = new FieldLUDecomposition<Fraction>(p).getSolver().getInverse();
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,413,olution = new FieldLUDecompositionImpl<Fraction>(coefficients)
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,413,solution = new FieldLUDecomposition<Fraction>(coefficients)
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,294,ieldMatrix<Fraction> mIT = new FieldLUDecompositionImpl<Fraction>(m).getSolver().getInverse().transpose();
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,295,ieldMatrix<Fraction> mTI = new FieldLUDecompositionImpl<Fraction>(m.transpose()).getSolver().getInverse();
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,294,FieldMatrix<Fraction> mIT = new FieldLUDecomposition<Fraction>(m).getSolver().getInverse().transpose();
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,295,FieldMatrix<Fraction> mTI = new FieldLUDecomposition<Fraction>(m.transpose()).getSolver().getInverse();
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,390,ieldMatrix<Fraction> pInverse = new FieldLUDecompositionImpl<Fraction>(p).getSolver().getInverse();
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,390,FieldMatrix<Fraction> pInverse = new FieldLUDecomposition<Fraction>(p).getSolver().getInverse();
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,400,olution = new FieldLUDecompositionImpl<Fraction>(coefficients)
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,400,solution = new FieldLUDecomposition<Fraction>(coefficients)

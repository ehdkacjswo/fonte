is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,78,resetInternalState();
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,109,resetInternalState();
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,331,public double getCurrentStepStart() {
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,332,return stepStart;
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,335,public double getCurrentStepsize() {
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,336,return stepSize;
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,339,/** Reset internal state to dummy values. */
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,340,protected void resetInternalState() {
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,341,stepStart = Double.NaN;
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,342,stepSize  = Math.sqrt(minStep * maxStep);
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,386,/** Current step start time. */
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,387,protected double stepStart;
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,389,/** Current stepsize. */
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,390,protected double stepSize;
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,66,** Integrate the differential equations up to the given time
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,66,/** Integrate the differential equations up to the given time.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,67,* <p>This method solves an Initial Value Problem (IVP).</p>
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,68,* <p>Since this method stores some internal state variables made
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,69,* available in its public interface during integration ({@link
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,70,"* #getCurrentStepsize()}), it is <em>not</em> thread-safe.</p>"
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,71, (can be set to a value smaller thant <code>t0</code> for backward integration)
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,75,* (can be set to a value smaller than <code>t0</code> for backward integration)
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,87,/** Get the current value of the step start time t<sub>i</sub>.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,88,* <p>This method can be called during integration (typically by
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,89,* the object implementing the {@link FirstOrderDifferentialEquations
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,90,* differential equations} problem) if the value of the current step that
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,91,* is attempted is needed.</p>
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,92,* <p>The result is undefined if the method is called outside of
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,93,* calls to {@link #integrate}</p>
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,94,* @return current value of the step start time t<sub>i</sub>
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,96,public double getCurrentStepStart();
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,98,/** Get the current value of the integration stepsize.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,99,* <p>This method can be called during integration (typically by
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,100,* the object implementing the {@link FirstOrderDifferentialEquations
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,101,* differential equations} problem) if the value of the current stepsize
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,102,* that is tried is needed.</p>
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,103,* <p>The result is undefined if the method is called outside of
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,104,* calls to {@link #integrate}</p>
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,105,* @return current value of the stepsize
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,107,public double getCurrentStepsize();
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,582,ouble  currentT         = t0;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,582,stepStart = t0;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,594,ouble h;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,604,"quations.computeDerivatives(currentT, y, yDot0);"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,603,"equations.computeDerivatives(stepStart, y, yDot0);"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,611,"urrentT, y, yDot0, yTmp, yTmpDot);"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,610,"stepStart, y, yDot0, yTmp, yTmpDot);"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,623, = hNew;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,622,stepSize = hNew;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,626,f ((forward && (currentT + h > t))
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,627,| ((! forward) && (currentT + h < t))) {
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,628, = t - currentT;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,625,if ((forward && (stepStart + stepSize > t))
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,626,|| ((! forward) && (stepStart + stepSize < t))) {
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,627,stepSize = t - stepStart;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,630,ouble nextT = currentT + h;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,629,double nextT = stepStart + stepSize;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,640,"f ( ! tryStep(equations, currentT, y, h, k, scale, fk[k],"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,639,"if ( ! tryStep(equations, stepStart, y, stepSize, k, scale, fk[k],"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,646,"New   = Math.abs(filterStep(h * stabilityReduction, false));"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,645,"hNew   = Math.abs(filterStep(stepSize * stabilityReduction, false));"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,670,"New   = Math.abs(filterStep(h * stabilityReduction, false));"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,669,"hNew   = Math.abs(filterStep(stepSize * stabilityReduction, false));"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,682,"ptimalStep[k]     = Math.abs(filterStep(h * fac, true));"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,681,"optimalStep[k]     = Math.abs(filterStep(stepSize * fac, true));"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,778,"quations.computeDerivatives(currentT + h, y1, yDot1);"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,777,"equations.computeDerivatives(stepStart + stepSize, y1, yDot1);"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,800,MidDots[l+1][i] *= h;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,799,yMidDots[l+1][i] *= stepSize;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,819,"bsInterpolator.computeCoefficients(mu, h);"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,818,"gbsInterpolator.computeCoefficients(mu, stepSize);"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,824,"Int = Math.abs(h / Math.max(Math.pow(interpError, 1.0 / (mu+4)),"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,825,.01));
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,823,"hInt = Math.abs(stepSize / Math.max(Math.pow(interpError, 1.0 / (mu+4)),"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,824,0.01));
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,834,nterpolator.storeTime(currentT + h);
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,833,interpolator.storeTime(stepStart + stepSize);
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,837,New = Math.abs(switchesHandler.getEventTime() - currentT);
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,836,hNew = Math.abs(switchesHandler.getEventTime() - stepStart);
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,854,urrentT += h;
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,853,stepStart += stepSize;
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,857,"witchesHandler.stepAccepted(currentT, y);"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,856,"switchesHandler.stepAccepted(stepStart, y);"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,863,nterpolator.storeTime(currentT);
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,862,interpolator.storeTime(stepStart);
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,866,"f (switchesHandler.reset(currentT, y) && ! lastStep) {"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,865,"if (switchesHandler.reset(stepStart, y) && ! lastStep) {"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,900,"New = Math.min(Math.abs(h), optimalStep[targetIter]);"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,899,"hNew = Math.min(Math.abs(stepSize), optimalStep[targetIter]);"
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,190,ouble  currentT  = t0;
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,190,stepStart  = t0;
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,199,ouble h     = 0;
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,205,"quations.computeDerivatives(currentT, y, yDotK[0]);"
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,204,"equations.computeDerivatives(stepStart, y, yDotK[0]);"
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,219,"urrentT, y, yDotK[0], yTmp, yDotK[1]);"
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,218,"stepStart, y, yDotK[0], yTmp, yDotK[1]);"
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,223, = hNew;
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,222,stepSize = hNew;
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,226,f ((forward && (currentT + h > t))
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,227,| ((! forward) && (currentT + h < t))) {
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,228, = t - currentT;
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,225,if ((forward && (stepStart + stepSize > t))
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,226,|| ((! forward) && (stepStart + stepSize < t))) {
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,227,stepSize = t - stepStart;
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,239,Tmp[j] = y[j] + h * sum;
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,238,yTmp[j] = y[j] + stepSize * sum;
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,242,"quations.computeDerivatives(currentT + c[k-1] * h, yTmp, yDotK[k]);"
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,241,"equations.computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);"
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,252,Tmp[j] = y[j] + h * sum;
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,251,yTmp[j] = y[j] + stepSize * sum;
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,256,"rror = estimateError(yDotK, y, yTmp, h);"
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,255,"error = estimateError(yDotK, y, yTmp, stepSize);"
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,260,nterpolator.storeTime(currentT + h);
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,259,interpolator.storeTime(stepStart + stepSize);
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,263,New = switchesHandler.getEventTime() - currentT;
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,262,hNew = switchesHandler.getEventTime() - stepStart;
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,274,"New = filterStep(h * factor, false);"
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,273,"hNew = filterStep(stepSize * factor, false);"
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,280,urrentT += h;
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,279,stepStart += stepSize;
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,282,"witchesHandler.stepAccepted(currentT, y);"
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,281,"switchesHandler.stepAccepted(stepStart, y);"
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,286,astStep = forward ? (currentT >= t) : (currentT <= t);
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,285,lastStep = forward ? (stepStart >= t) : (stepStart <= t);
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,290,nterpolator.storeTime(currentT);
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,289,interpolator.storeTime(stepStart);
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,298,"f (switchesHandler.reset(currentT, y) && ! lastStep) {"
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,297,"if (switchesHandler.reset(stepStart, y) && ! lastStep) {"
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,301,"quations.computeDerivatives(currentT, y, yDotK[0]);"
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,300,"equations.computeDerivatives(stepStart, y, yDotK[0]);"
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,309,ouble  scaledH    = h * factor;
False,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,310,ouble  nextT      = currentT + scaledH;
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,308,double  scaledH    = stepSize * factor;
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,309,double  nextT      = stepStart + scaledH;
True,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaFehlbergIntegrator.java,316,resetInternalState();
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,81,resetInternalState();
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,183,ouble  currentT  = t0;
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,185,ouble  h         = (t - t0) / nbStep;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,187,stepStart = t0;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,188,stepSize  = (t - t0) / nbStep;
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,198,"quations.computeDerivatives(currentT, y, yDotK[0]);"
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,199,"equations.computeDerivatives(stepStart, y, yDotK[0]);"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,210,Tmp[j] = y[j] + h * sum;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,211,yTmp[j] = y[j] + stepSize * sum;
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,213,"quations.computeDerivatives(currentT + c[k-1] * h, yTmp, yDotK[k]);"
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,214,"equations.computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,223,Tmp[j] = y[j] + h * sum;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,224,yTmp[j] = y[j] + stepSize * sum;
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,227,nterpolator.storeTime(currentT + h);
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,228,interpolator.storeTime(stepStart + stepSize);
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,230, = switchesHandler.getEventTime() - currentT;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,231,stepSize = switchesHandler.getEventTime() - stepStart;
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,238,urrentT += h;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,239,stepStart += stepSize;
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,240,"witchesHandler.stepAccepted(currentT, y);"
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,241,"switchesHandler.stepAccepted(stepStart, y);"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,248,nterpolator.storeTime(currentT);
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,249,interpolator.storeTime(stepStart);
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,256,"f (switchesHandler.reset(currentT, y) && ! lastStep) {"
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,257,"if (switchesHandler.reset(stepStart, y) && ! lastStep) {"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,259,"quations.computeDerivatives(currentT, y, yDotK[0]);"
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,260,"equations.computeDerivatives(stepStart, y, yDotK[0]);"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,265,"bStep = Math.max(1l, Math.abs(Math.round((t - currentT) / step)));"
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,266, = (t - currentT) / nbStep;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,266,"nbStep = Math.max(1l, Math.abs(Math.round((t - stepStart) / step)));"
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,267,stepSize = (t - stepStart) / nbStep;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,273,resetInternalState();
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,277,public double getCurrentStepStart() {
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,278,return stepStart;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,281,public double getCurrentStepsize() {
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,282,return stepSize;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,285,/** Reset internal state to dummy values. */
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,286,private void resetInternalState() {
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,287,stepStart = Double.NaN;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,288,stepSize  = Double.NaN;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,315,/** Current step start time. */
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,316,private double stepStart;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,318,/** Current stepsize. */
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,319,private double stepSize;

is_addition,old_file_path,new_file_path,line_num,content
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,40,rivate RealMatrixImpl decompMatrix;
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,40,private Array2DRowRealMatrix decompMatrix;
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,111,ecompMatrix = new RealMatrixImpl(decomp);
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,111,decompMatrix = new Array2DRowRealMatrix(decomp);
False,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,122,ublic RealMatrixImpl getDecomposition() {
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,122,public Array2DRowRealMatrix getDecomposition() {
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,101,"ew RealMatrixImpl(new double[][]{{numericalZero/2, 0},"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,101,"new Array2DRowRealMatrix(new double[][]{{numericalZero/2, 0},"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,130,olver.decompose(new RealMatrixImpl(m7));
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,130,solver.decompose(new Array2DRowRealMatrix(m7));
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,165,"olver.solve(new RealMatrixImpl(m3), new double[] {1, 2, 3, 4});"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,165,"solver.solve(new Array2DRowRealMatrix(m3), new double[] {1, 2, 3, 4});"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,204,ealMatrix triangularMatrix = new RealMatrixImpl(lowerTriangularMatrix);
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,204,RealMatrix triangularMatrix = new Array2DRowRealMatrix(lowerTriangularMatrix);
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,223,ew RealMatrixImpl(lowerTriangularMatrix);
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,224,ealMatrixImpl pdMatrix =
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,225,RealMatrixImpl) triangularMatrix.multiply(triangularMatrix.transpose());
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,223,new Array2DRowRealMatrix(lowerTriangularMatrix);
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,224,Array2DRowRealMatrix pdMatrix =
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,225,(Array2DRowRealMatrix) triangularMatrix.multiply(triangularMatrix.transpose());
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,235,ealMatrix x = new RealMatrixImpl(solver.solve(c));
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,235,RealMatrix x = new Array2DRowRealMatrix(solver.solve(c));
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,238,"reEqual(pdMatrix.multiply(x),  new RealMatrixImpl(c), 1.0E-10));"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,238,"areEqual(pdMatrix.multiply(x),  new Array2DRowRealMatrix(c), 1.0E-10));"
False,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,250,ealMatrix triangularMatrix = new RealMatrixImpl(lowerTriangularMatrix);
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,250,RealMatrix triangularMatrix = new Array2DRowRealMatrix(lowerTriangularMatrix);
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,19,mport org.apache.commons.math.linear.RealVectorImpl;
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,19,import org.apache.commons.math.linear.ArrayRealVector;
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,56,"uper(""evaluation failed for argument = {0}"", new RealVectorImpl(argument));"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,56,"super(""evaluation failed for argument = {0}"", new ArrayRealVector(argument));"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,368,/ org.apache.commons.math.linear.RealVectorImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,368,// org.apache.commons.math.linear.ArrayRealVector
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,373,/ org.apache.commons.math.linear.RealVectorImpl
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,374,/ org.apache.commons.math.linear.FieldVectorImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,373,// org.apache.commons.math.linear.ArrayRealVector
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,374,// org.apache.commons.math.linear.ArrayFieldVector
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,569,/ org.apache.commons.math.linear.RealVectorImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,569,// org.apache.commons.math.linear.ArrayRealVector
False,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,27,mport org.apache.commons.math.linear.RealVectorImpl;
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,27,import org.apache.commons.math.linear.ArrayRealVector;
False,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,166,ealVectorImpl bDecrement = new RealVectorImpl(parameters.length);
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,166,ArrayRealVector bDecrement = new ArrayRealVector(parameters.length);
False,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,176,ealVector b = new RealVectorImpl(parameters.length);
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,176,RealVector b = new ArrayRealVector(parameters.length);
False,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,502,"eturn new FieldVectorImpl<T>(getRow(row), false);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,502,"return new ArrayFieldVector<T>(getRow(row), false);"
False,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,525,"eturn new FieldVectorImpl<T>(getColumn(column), false);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,525,"return new ArrayFieldVector<T>(getColumn(column), false);"
False,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,700,"eturn new FieldVectorImpl<T>(operate(((FieldVectorImpl<T>) v).getDataRef()), false);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,700,"return new ArrayFieldVector<T>(operate(((ArrayFieldVector<T>) v).getDataRef()), false);"
False,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,719,"eturn new FieldVectorImpl<T>(out, false);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,719,"return new ArrayFieldVector<T>(out, false);"
False,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,752,"eturn new FieldVectorImpl<T>(preMultiply(((FieldVectorImpl<T>) v).getDataRef()), false);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,752,"return new ArrayFieldVector<T>(preMultiply(((ArrayFieldVector<T>) v).getDataRef()), false);"
False,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,772,eturn new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,772,return new ArrayFieldVector<T>(out);
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,477,"eturn new RealVectorImpl(getRow(row), false);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,477,"return new ArrayRealVector(getRow(row), false);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,500,"eturn new RealVectorImpl(getColumn(column), false);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,500,"return new ArrayRealVector(getColumn(column), false);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,701,"eturn new RealVectorImpl(operate(((RealVectorImpl) v).getDataRef()), false);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,701,"return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,720,"eturn new RealVectorImpl(out, false);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,720,"return new ArrayRealVector(out, false);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,753,"eturn new RealVectorImpl(preMultiply(((RealVectorImpl) v).getDataRef()), false);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,753,"return new ArrayRealVector(preMultiply(((ArrayRealVector) v).getDataRef()), false);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,773,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,773,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,37,ublic class FieldMatrixImpl<T extends FieldElement<T>> extends AbstractFieldMatrix<T> implements Serializable {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,37,public class Array2DRowFieldMatrix<T extends FieldElement<T>> extends AbstractFieldMatrix<T> implements Serializable {
False,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,49,ublic FieldMatrixImpl(final Field<T> field) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,49,public Array2DRowFieldMatrix(final Field<T> field) {
False,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,62,"ublic FieldMatrixImpl(final Field<T> field,"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,62,"public Array2DRowFieldMatrix(final Field<T> field,"
False,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,73," the same effect as calling {@link #FieldMatrixImpl(FieldElement[][], boolean)}"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,73,"* the same effect as calling {@link #Array2DRowFieldMatrix(FieldElement[][], boolean)}"
False,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,80," @see #FieldMatrixImpl(FieldElement[][], boolean)"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,80,"* @see #Array2DRowFieldMatrix(FieldElement[][], boolean)"
False,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,82,ublic FieldMatrixImpl(final T[][] d)
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,82,public Array2DRowFieldMatrix(final T[][] d)
False,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,101, @see #FieldMatrixImpl(FieldElement[][])
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,101,* @see #Array2DRowFieldMatrix(FieldElement[][])
False,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,103,"ublic FieldMatrixImpl(final T[][] d, final boolean copyArray)"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,103,"public Array2DRowFieldMatrix(final T[][] d, final boolean copyArray)"
False,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,139,ublic FieldMatrixImpl(final T[] v) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,139,public Array2DRowFieldMatrix(final T[] v) {
False,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,152,"eturn new FieldMatrixImpl<T>(getField(), rowDimension, columnDimension);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,152,"return new Array2DRowFieldMatrix<T>(getField(), rowDimension, columnDimension);"
False,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,158,"eturn new FieldMatrixImpl<T>(copyOut(), false);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,158,"return new Array2DRowFieldMatrix<T>(copyOut(), false);"
False,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,166,eturn add((FieldMatrixImpl<T>) m);
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,166,return add((Array2DRowFieldMatrix<T>) m);
False,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,179,ublic FieldMatrixImpl<T> add(final FieldMatrixImpl<T> m)
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,179,public Array2DRowFieldMatrix<T> add(final Array2DRowFieldMatrix<T> m)
False,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,197,"eturn new FieldMatrixImpl<T>(outData, false);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,197,"return new Array2DRowFieldMatrix<T>(outData, false);"
False,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,206,eturn subtract((FieldMatrixImpl<T>) m);
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,206,return subtract((Array2DRowFieldMatrix<T>) m);
False,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,219,ublic FieldMatrixImpl<T> subtract(final FieldMatrixImpl<T> m)
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,219,public Array2DRowFieldMatrix<T> subtract(final Array2DRowFieldMatrix<T> m)
False,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,237,"eturn new FieldMatrixImpl<T>(outData, false);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,237,"return new Array2DRowFieldMatrix<T>(outData, false);"
False,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,246,eturn multiply((FieldMatrixImpl<T>) m);
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,246,return multiply((Array2DRowFieldMatrix<T>) m);
False,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,259,ublic FieldMatrixImpl<T> multiply(final FieldMatrixImpl<T> m)
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,259,public Array2DRowFieldMatrix<T> multiply(final Array2DRowFieldMatrix<T> m)
False,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,281,"eturn new FieldMatrixImpl<T>(outData, false);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,281,"return new Array2DRowFieldMatrix<T>(outData, false);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,22,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,25,* Implementation of RealMatrix using a double[][] array to store entries and
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,26,"* <a href=""http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf"">"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,27,* LU decomposition</a> to support linear system
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,28,* solution and inverse.
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,29,* <p>
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,30,"* The LU decomposition is performed as needed, to support the following operations: <ul>"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,31,* <li>solve</li>
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,32,* <li>isSingular</li>
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,33,* <li>getDeterminant</li>
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,34,* <li>inverse</li> </ul></p>
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,35,* <p>
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,36,* <strong>Usage notes</strong>:<br>
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,37,* <ul><li>
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,38,* The LU decomposition is cached and reused on subsequent calls.
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,39,* If data are modified via references to the underlying array obtained using
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,40,"* <code>getDataRef()</code>, then the stored LU decomposition will not be"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,41,"* discarded.  In this case, you need to explicitly invoke"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,42,* <code>LUDecompose()</code> to recompute the decomposition
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,43,* before using any of the methods above.</li>
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,44,* <li>
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,45,"* As specified in the {@link RealMatrix} interface, matrix element indexing"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,46,"* is 0-based -- e.g., <code>getEntry(0, 0)</code>"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,47,"* returns the element in the first row, first column of the matrix.</li></ul>"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,48,* </p>
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,50,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,52,public class Array2DRowRealMatrix extends AbstractRealMatrix implements Serializable {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,54,/** Serializable version identifier */
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,55,private static final long serialVersionUID = -1067294169172445528L;
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,57,/** Entries of the matrix */
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,58,protected double data[][];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,61,* Creates a matrix with no data
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,63,public Array2DRowRealMatrix() {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,67,* Create a new RealMatrix with the supplied row and column dimensions.
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,69,* @param rowDimension  the number of rows in the new matrix
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,70,* @param columnDimension  the number of columns in the new matrix
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,71,* @throws IllegalArgumentException if row or column dimension is not
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,72,*  positive
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,74,"public Array2DRowRealMatrix(final int rowDimension, final int columnDimension)"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,75,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,76,"super(rowDimension, columnDimension);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,77,data = new double[rowDimension][columnDimension];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,81,* Create a new RealMatrix using the input array as the underlying
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,82,* data array.
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,83,"* <p>The input array is copied, not referenced. This constructor has"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,84,"* the same effect as calling {@link #Array2DRowRealMatrix(double[][], boolean)}"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,85,* with the second argument set to <code>true</code>.</p>
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,87,* @param d data for new matrix
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,88,* @throws IllegalArgumentException if <code>d</code> is not rectangular
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,89,*  (not all rows have the same length) or empty
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,90,* @throws NullPointerException if <code>d</code> is null
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,91,"* @see #Array2DRowRealMatrix(double[][], boolean)"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,93,public Array2DRowRealMatrix(final double[][] d)
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,94,"throws IllegalArgumentException, NullPointerException {"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,95,copyIn(d);
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,99,* Create a new RealMatrix using the input array as the underlying
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,100,* data array.
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,101,* <p>If an array is built specially in order to be embedded in a
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,102,"* RealMatrix and not used directly, the <code>copyArray</code> may be"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,103,* set to <code>false</code. This will prevent the copying and improve
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,104,* performance as no new array will be built and no data will be copied.</p>
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,105,* @param d data for new matrix
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,106,"* @param copyArray if true, the input array will be copied, otherwise"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,107,* it will be referenced
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,108,* @throws IllegalArgumentException if <code>d</code> is not rectangular
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,109,*  (not all rows have the same length) or empty
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,110,* @throws NullPointerException if <code>d</code> is null
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,111,* @see #Array2DRowRealMatrix(double[][])
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,113,"public Array2DRowRealMatrix(final double[][] d, final boolean copyArray)"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,114,"throws IllegalArgumentException, NullPointerException {"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,115,if (copyArray) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,116,copyIn(d);
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,117,} else {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,118,if (d == null) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,119,throw new NullPointerException();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,121,final int nRows = d.length;
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,122,if (nRows == 0) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,123,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,125,final int nCols = d[0].length;
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,126,if (nCols == 0) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,127,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,129,for (int r = 1; r < nRows; r++) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,130,if (d[r].length != nCols) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,131,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,132,"""some rows have length {0} while others have length {1}"","
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,133,"nCols, d[r].length);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,136,data = d;
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,141,* Create a new (column) RealMatrix using <code>v</code> as the
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,142,* data for the unique column of the <code>v.length x 1</code> matrix
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,143,* created.
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,144,"* <p>The input array is copied, not referenced.</p>"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,146,* @param v column vector holding data for new matrix
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,148,public Array2DRowRealMatrix(final double[] v) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,149,final int nRows = v.length;
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,150,data = new double[nRows][1];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,151,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,152,data[row][0] = v[row];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,156,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,157,@Override
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,158,"public RealMatrix createMatrix(final int rowDimension, final int columnDimension)"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,159,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,160,"return new Array2DRowRealMatrix(rowDimension, columnDimension);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,163,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,164,@Override
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,165,public RealMatrix copy() {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,166,"return new Array2DRowRealMatrix(copyOut(), false);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,169,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,170,@Override
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,171,public RealMatrix add(final RealMatrix m)
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,172,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,173,try {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,174,return add((Array2DRowRealMatrix) m);
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,175,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,176,return super.add(m);
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,181,* Compute the sum of this and <code>m</code>.
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,183,* @param m    matrix to be added
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,184,* @return     this + m
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,185,* @throws  IllegalArgumentException if m is not the same size as this
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,187,public Array2DRowRealMatrix add(final Array2DRowRealMatrix m)
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,188,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,190,// safety check
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,191,"MatrixUtils.checkAdditionCompatible(this, m);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,193,final int rowCount    = getRowDimension();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,194,final int columnCount = getColumnDimension();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,195,final double[][] outData = new double[rowCount][columnCount];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,196,for (int row = 0; row < rowCount; row++) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,197,final double[] dataRow    = data[row];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,198,final double[] mRow       = m.data[row];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,199,final double[] outDataRow = outData[row];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,200,for (int col = 0; col < columnCount; col++) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,201,outDataRow[col] = dataRow[col] + mRow[col];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,205,"return new Array2DRowRealMatrix(outData, false);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,209,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,210,@Override
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,211,public RealMatrix subtract(final RealMatrix m)
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,212,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,213,try {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,214,return subtract((Array2DRowRealMatrix) m);
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,215,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,216,return super.subtract(m);
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,221,* Compute  this minus <code>m</code>.
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,223,* @param m    matrix to be subtracted
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,224,* @return     this + m
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,225,* @throws  IllegalArgumentException if m is not the same size as this
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,227,public Array2DRowRealMatrix subtract(final Array2DRowRealMatrix m)
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,228,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,230,// safety check
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,231,"MatrixUtils.checkSubtractionCompatible(this, m);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,233,final int rowCount    = getRowDimension();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,234,final int columnCount = getColumnDimension();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,235,final double[][] outData = new double[rowCount][columnCount];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,236,for (int row = 0; row < rowCount; row++) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,237,final double[] dataRow    = data[row];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,238,final double[] mRow       = m.data[row];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,239,final double[] outDataRow = outData[row];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,240,for (int col = 0; col < columnCount; col++) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,241,outDataRow[col] = dataRow[col] - mRow[col];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,245,"return new Array2DRowRealMatrix(outData, false);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,249,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,250,@Override
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,251,public RealMatrix multiply(final RealMatrix m)
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,252,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,253,try {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,254,return multiply((Array2DRowRealMatrix) m);
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,255,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,256,return super.multiply(m);
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,261,* Returns the result of postmultiplying this by <code>m</code>.
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,262,* @param m    matrix to postmultiply by
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,263,* @return     this*m
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,264,* @throws     IllegalArgumentException
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,265,*             if columnDimension(this) != rowDimension(m)
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,267,public Array2DRowRealMatrix multiply(final Array2DRowRealMatrix m)
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,268,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,270,// safety check
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,271,"MatrixUtils.checkMultiplicationCompatible(this, m);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,273,final int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,274,final int nCols = m.getColumnDimension();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,275,final int nSum = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,276,final double[][] outData = new double[nRows][nCols];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,277,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,278,final double[] dataRow    = data[row];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,279,final double[] outDataRow = outData[row];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,280,for (int col = 0; col < nCols; col++) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,281,double sum = 0;
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,282,for (int i = 0; i < nSum; i++) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,283,sum += dataRow[i] * m.data[i][col];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,285,outDataRow[col] = sum;
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,289,"return new Array2DRowRealMatrix(outData, false);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,293,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,294,@Override
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,295,public double[][] getData() {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,296,return copyOut();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,300,* Returns a reference to the underlying data array.
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,301,* <p>
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,302,* Does <strong>not</strong> make a fresh copy of the underlying data.</p>
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,304,* @return 2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,306,public double[][] getDataRef() {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,307,return data;
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,310,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,311,@Override
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,312,"public void setSubMatrix(final double[][] subMatrix, final int row, final int column)"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,313,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,314,if (data == null) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,315,if (row > 0) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,316,throw MathRuntimeException.createIllegalStateException(
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,317,"""first {0} rows are not initialized yet"","
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,318,row);
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,320,if (column > 0) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,321,throw MathRuntimeException.createIllegalStateException(
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,322,"""first {0} columns are not initialized yet"","
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,323,column);
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,325,final int nRows = subMatrix.length;
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,326,if (nRows == 0) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,327,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,330,final int nCols = subMatrix[0].length;
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,331,if (nCols == 0) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,332,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,334,data = new double[subMatrix.length][nCols];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,335,for (int i = 0; i < data.length; ++i) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,336,if (subMatrix[i].length != nCols) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,337,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,338,"""some rows have length {0} while others have length {1}"","
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,339,"nCols, subMatrix[i].length);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,341,"System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,343,} else {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,344,"super.setSubMatrix(subMatrix, row, column);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,349,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,350,@Override
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,351,"public double getEntry(final int row, final int column)"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,352,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,353,try {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,354,return data[row][column];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,355,} catch (ArrayIndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,356,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,357,"""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,358,"row, column, getRowDimension(), getColumnDimension());"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,362,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,363,@Override
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,364,"public void setEntry(final int row, final int column, final double value)"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,365,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,366,try {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,367,data[row][column] = value;
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,368,} catch (ArrayIndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,369,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,370,"""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,371,"row, column, getRowDimension(), getColumnDimension());"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,375,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,376,@Override
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,377,"public void addToEntry(final int row, final int column, final double increment)"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,378,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,379,try {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,380,data[row][column] += increment;
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,381,} catch (ArrayIndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,382,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,383,"""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,384,"row, column, getRowDimension(), getColumnDimension());"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,388,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,389,@Override
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,390,"public void multiplyEntry(final int row, final int column, final double factor)"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,391,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,392,try {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,393,data[row][column] *= factor;
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,394,} catch (ArrayIndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,395,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,396,"""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,397,"row, column, getRowDimension(), getColumnDimension());"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,401,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,402,@Override
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,403,public int getRowDimension() {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,404,return (data == null) ? 0 : data.length;
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,407,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,408,@Override
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,409,public int getColumnDimension() {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,410,return ((data == null) || (data[0] == null)) ? 0 : data[0].length;
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,413,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,414,@Override
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,415,public double[] operate(final double[] v)
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,416,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,417,final int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,418,final int nCols = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,419,if (v.length != nCols) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,420,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,421,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,422,"v.length, nCols);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,424,final double[] out = new double[nRows];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,425,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,426,final double[] dataRow = data[row];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,427,double sum = 0;
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,428,for (int i = 0; i < nCols; i++) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,429,sum += dataRow[i] * v[i];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,431,out[row] = sum;
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,433,return out;
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,436,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,437,@Override
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,438,public double[] preMultiply(final double[] v)
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,439,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,441,final int nRows = getRowDimension();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,442,final int nCols = getColumnDimension();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,443,if (v.length != nRows) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,444,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,445,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,446,"v.length, nRows);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,449,final double[] out = new double[nCols];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,450,for (int col = 0; col < nCols; ++col) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,451,double sum = 0;
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,452,for (int i = 0; i < nRows; ++i) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,453,sum += data[i][col] * v[i];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,455,out[col] = sum;
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,458,return out;
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,462,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,463,@Override
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,464,public double walkInRowOrder(final RealMatrixChangingVisitor visitor)
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,465,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,466,final int rows    = getRowDimension();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,467,final int columns = getColumnDimension();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,468,"visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,469,for (int i = 0; i < rows; ++i) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,470,final double[] rowI = data[i];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,471,for (int j = 0; j < columns; ++j) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,472,"rowI[j] = visitor.visit(i, j, rowI[j]);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,475,return visitor.end();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,478,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,479,@Override
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,480,public double walkInRowOrder(final RealMatrixPreservingVisitor visitor)
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,481,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,482,final int rows    = getRowDimension();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,483,final int columns = getColumnDimension();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,484,"visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,485,for (int i = 0; i < rows; ++i) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,486,final double[] rowI = data[i];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,487,for (int j = 0; j < columns; ++j) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,488,"visitor.visit(i, j, rowI[j]);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,491,return visitor.end();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,494,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,495,@Override
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,496,"public double walkInRowOrder(final RealMatrixChangingVisitor visitor,"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,497,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,498,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,499,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,500,"MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,501,"visitor.start(getRowDimension(), getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,502,"startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,503,for (int i = startRow; i <= endRow; ++i) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,504,final double[] rowI = data[i];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,505,for (int j = startColumn; j <= endColumn; ++j) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,506,"rowI[j] = visitor.visit(i, j, rowI[j]);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,509,return visitor.end();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,512,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,513,@Override
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,514,"public double walkInRowOrder(final RealMatrixPreservingVisitor visitor,"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,515,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,516,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,517,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,518,"MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,519,"visitor.start(getRowDimension(), getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,520,"startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,521,for (int i = startRow; i <= endRow; ++i) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,522,final double[] rowI = data[i];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,523,for (int j = startColumn; j <= endColumn; ++j) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,524,"visitor.visit(i, j, rowI[j]);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,527,return visitor.end();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,530,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,531,@Override
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,532,public double walkInColumnOrder(final RealMatrixChangingVisitor visitor)
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,533,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,534,final int rows    = getRowDimension();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,535,final int columns = getColumnDimension();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,536,"visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,537,for (int j = 0; j < columns; ++j) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,538,for (int i = 0; i < rows; ++i) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,539,final double[] rowI = data[i];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,540,"rowI[j] = visitor.visit(i, j, rowI[j]);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,543,return visitor.end();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,546,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,547,@Override
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,548,public double walkInColumnOrder(final RealMatrixPreservingVisitor visitor)
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,549,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,550,final int rows    = getRowDimension();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,551,final int columns = getColumnDimension();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,552,"visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,553,for (int j = 0; j < columns; ++j) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,554,for (int i = 0; i < rows; ++i) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,555,"visitor.visit(i, j, data[i][j]);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,558,return visitor.end();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,561,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,562,@Override
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,563,"public double walkInColumnOrder(final RealMatrixChangingVisitor visitor,"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,564,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,565,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,566,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,567,"MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,568,"visitor.start(getRowDimension(), getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,569,"startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,570,for (int j = startColumn; j <= endColumn; ++j) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,571,for (int i = startRow; i <= endRow; ++i) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,572,final double[] rowI = data[i];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,573,"rowI[j] = visitor.visit(i, j, rowI[j]);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,576,return visitor.end();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,579,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,580,@Override
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,581,"public double walkInColumnOrder(final RealMatrixPreservingVisitor visitor,"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,582,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,583,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,584,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,585,"MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,586,"visitor.start(getRowDimension(), getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,587,"startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,588,for (int j = startColumn; j <= endColumn; ++j) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,589,for (int i = startRow; i <= endRow; ++i) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,590,"visitor.visit(i, j, data[i][j]);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,593,return visitor.end();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,597,* Returns a fresh copy of the underlying data array.
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,599,* @return a copy of the underlying data array.
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,601,private double[][] copyOut() {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,602,final int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,603,final double[][] out = new double[nRows][this.getColumnDimension()];
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,604,"// can't copy 2-d array in one shot, otherwise get row references"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,605,for (int i = 0; i < nRows; i++) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,606,"System.arraycopy(data[i], 0, out[i], 0, data[i].length);"
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,608,return out;
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,612,* Replaces data with a fresh copy of the input array.
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,613,* <p>
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,614,* Verifies that the input array is rectangular and non-empty.</p>
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,616,* @param in data to copy in
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,617,* @throws IllegalArgumentException if input array is empty or not
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,618,*    rectangular
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,619,* @throws NullPointerException if input array is null
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,621,private void copyIn(final double[][] in) {
True,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,622,"setSubMatrix(in, 0, 0);"
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,33,"ublic class FieldVectorImpl<T extends FieldElement<T>> implements FieldVector<T>, Serializable {"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,33,"public class ArrayFieldVector<T extends FieldElement<T>> implements FieldVector<T>, Serializable {"
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,57," #FieldVectorImpl(FieldVectorImpl, FieldVectorImpl)} constructor"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,57,"* #ArrayFieldVector(ArrayFieldVector, ArrayFieldVector)} constructor"
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,59," {@link #add(FieldVector)}, {@link #append(FieldVectorImpl)}) to gather data"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,59,"* {@link #add(FieldVector)}, {@link #append(ArrayFieldVector)}) to gather data"
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,63,ublic FieldVectorImpl(final Field<T> field) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,63,public ArrayFieldVector(final Field<T> field) {
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,72,"ublic FieldVectorImpl(Field<T> field, int size) {"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,72,"public ArrayFieldVector(Field<T> field, int size) {"
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,83,"ublic FieldVectorImpl(int size, T preset) {"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,83,"public ArrayFieldVector(int size, T preset) {"
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,93,ublic FieldVectorImpl(T[] d)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,93,public ArrayFieldVector(T[] d)
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,105, Create a new FieldVectorImpl using the input array as the underlying
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,105,* Create a new ArrayFieldVector using the input array as the underlying
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,108," FieldVectorImpl and not used directly, the <code>copyArray</code> may be"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,108,"* ArrayFieldVector and not used directly, the <code>copyArray</code> may be"
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,116, @see #FieldVectorImpl(FieldElement[])
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,116,* @see #ArrayFieldVector(FieldElement[])
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,118,"ublic FieldVectorImpl(T[] d, boolean copyArray)"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,118,"public ArrayFieldVector(T[] d, boolean copyArray)"
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,135,"ublic FieldVectorImpl(T[] d, int pos, int size) {"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,135,"public ArrayFieldVector(T[] d, int pos, int size) {"
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,150,ublic FieldVectorImpl(FieldVector<T> v) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,150,public ArrayFieldVector(FieldVector<T> v) {
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,162,ublic FieldVectorImpl(FieldVectorImpl<T> v) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,162,public ArrayFieldVector(ArrayFieldVector<T> v) {
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,172,"ublic FieldVectorImpl(FieldVectorImpl<T> v, boolean deep) {"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,172,"public ArrayFieldVector(ArrayFieldVector<T> v, boolean deep) {"
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,182,"ublic FieldVectorImpl(FieldVectorImpl<T> v1, FieldVectorImpl<T> v2) {"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,182,"public ArrayFieldVector(ArrayFieldVector<T> v1, ArrayFieldVector<T> v2) {"
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,194,"ublic FieldVectorImpl(FieldVectorImpl<T> v1, T[] v2) {"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,194,"public ArrayFieldVector(ArrayFieldVector<T> v1, T[] v2) {"
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,206,"ublic FieldVectorImpl(T[] v1, FieldVectorImpl<T> v2) {"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,206,"public ArrayFieldVector(T[] v1, ArrayFieldVector<T> v2) {"
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,219,"ublic FieldVectorImpl(T[] v1, T[] v2) {"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,219,"public ArrayFieldVector(T[] v1, T[] v2) {"
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,238,"eturn new FieldVectorImpl<T>(this, true);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,238,"return new ArrayFieldVector<T>(this, true);"
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,244,eturn add((FieldVectorImpl<T>) v);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,244,return add((ArrayFieldVector<T>) v);
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,251,eturn new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,251,return new ArrayFieldVector<T>(out);
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,262,eturn new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,262,return new ArrayFieldVector<T>(out);
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,271,ublic FieldVectorImpl<T> add(FieldVectorImpl<T> v)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,271,public ArrayFieldVector<T> add(ArrayFieldVector<T> v)
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,273,eturn (FieldVectorImpl<T>) add(v.data);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,273,return (ArrayFieldVector<T>) add(v.data);
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,279,eturn subtract((FieldVectorImpl<T>) v);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,279,return subtract((ArrayFieldVector<T>) v);
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,286,eturn new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,286,return new ArrayFieldVector<T>(out);
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,297,eturn new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,297,return new ArrayFieldVector<T>(out);
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,306,ublic FieldVectorImpl<T> subtract(FieldVectorImpl<T> v)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,306,public ArrayFieldVector<T> subtract(ArrayFieldVector<T> v)
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,308,eturn (FieldVectorImpl<T>) subtract(v.data);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,308,return (ArrayFieldVector<T>) subtract(v.data);
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,317,eturn new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,317,return new ArrayFieldVector<T>(out);
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,334,eturn new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,334,return new ArrayFieldVector<T>(out);
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,351,eturn new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,351,return new ArrayFieldVector<T>(out);
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,368,eturn new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,368,return new ArrayFieldVector<T>(out);
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,386,eturn new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,386,return new ArrayFieldVector<T>(out);
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,402,eturn ebeMultiply((FieldVectorImpl<T>) v);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,402,return ebeMultiply((ArrayFieldVector<T>) v);
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,409,eturn new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,409,return new ArrayFieldVector<T>(out);
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,421,eturn new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,421,return new ArrayFieldVector<T>(out);
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,430,ublic FieldVectorImpl<T> ebeMultiply(FieldVectorImpl<T> v)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,430,public ArrayFieldVector<T> ebeMultiply(ArrayFieldVector<T> v)
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,432,eturn (FieldVectorImpl<T>) ebeMultiply(v.data);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,432,return (ArrayFieldVector<T>) ebeMultiply(v.data);
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,439,eturn ebeDivide((FieldVectorImpl<T>) v);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,439,return ebeDivide((ArrayFieldVector<T>) v);
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,446,eturn new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,446,return new ArrayFieldVector<T>(out);
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,458,eturn new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,458,return new ArrayFieldVector<T>(out);
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,467,ublic FieldVectorImpl<T> ebeDivide(FieldVectorImpl<T> v)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,467,public ArrayFieldVector<T> ebeDivide(ArrayFieldVector<T> v)
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,469,eturn (FieldVectorImpl<T>) ebeDivide(v.data);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,469,return (ArrayFieldVector<T>) ebeDivide(v.data);
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,490,eturn dotProduct((FieldVectorImpl<T>) v);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,490,return dotProduct((ArrayFieldVector<T>) v);
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,518,ublic T dotProduct(FieldVectorImpl<T> v)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,518,public T dotProduct(ArrayFieldVector<T> v)
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,530,"eturn projection(new FieldVectorImpl<T>(v, false));"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,530,"return projection(new ArrayFieldVector<T>(v, false));"
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,538,ublic FieldVectorImpl<T> projection(FieldVectorImpl<T> v) {
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,539,eturn (FieldVectorImpl<T>) v.mapMultiply(dotProduct(v).divide(v.dotProduct(v)));
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,538,public ArrayFieldVector<T> projection(ArrayFieldVector<T> v) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,539,return (ArrayFieldVector<T>) v.mapMultiply(dotProduct(v).divide(v.dotProduct(v)));
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,546,eturn outerProduct((FieldVectorImpl<T>) v);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,546,return outerProduct((ArrayFieldVector<T>) v);
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,550,"inal FieldMatrix<T> out = new FieldMatrixImpl<T>(field, m, m);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,550,"final FieldMatrix<T> out = new Array2DRowFieldMatrix<T>(field, m, m);"
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,566,ublic FieldMatrix<T> outerProduct(FieldVectorImpl<T> v)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,566,public FieldMatrix<T> outerProduct(ArrayFieldVector<T> v)
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,576,"inal FieldMatrix<T> out = new FieldMatrixImpl<T>(field, m, m);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,576,"final FieldMatrix<T> out = new Array2DRowFieldMatrix<T>(field, m, m);"
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,598,eturn append((FieldVectorImpl<T>) v);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,598,return append((ArrayFieldVector<T>) v);
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,600,"eturn new FieldVectorImpl<T>(this,new FieldVectorImpl<T>(v));"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,600,"return new ArrayFieldVector<T>(this,new ArrayFieldVector<T>(v));"
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,609,ublic FieldVectorImpl<T> append(FieldVectorImpl<T> v) {
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,610,"eturn new FieldVectorImpl<T>(this, v);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,609,public ArrayFieldVector<T> append(ArrayFieldVector<T> v) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,610,"return new ArrayFieldVector<T>(this, v);"
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,618,eturn new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,618,return new ArrayFieldVector<T>(out);
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,623,"eturn new FieldVectorImpl<T>(this, in);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,623,"return new ArrayFieldVector<T>(this, in);"
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,628,"ieldVectorImpl<T> out = new FieldVectorImpl<T>(field, n);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,628,"ArrayFieldVector<T> out = new ArrayFieldVector<T>(field, n);"
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,651,"et(index, (FieldVectorImpl<T>) v);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,651,"set(index, (ArrayFieldVector<T>) v);"
False,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,681,"ublic void set(int index, FieldVectorImpl<T> v)"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayFieldVector.java,681,"public void set(int index, ArrayFieldVector<T> v)"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,30,"ublic class RealVectorImpl implements RealVector, Serializable {"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,30,"public class ArrayRealVector implements RealVector, Serializable {"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,46," #RealVectorImpl(RealVectorImpl, RealVectorImpl)} constructor"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,46,"* #ArrayRealVector(ArrayRealVector, ArrayRealVector)} constructor"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,48," #append(double[])}, {@link #append(RealVectorImpl)}) to gather data"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,48,"* #append(double[])}, {@link #append(ArrayRealVector)}) to gather data"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,51,ublic RealVectorImpl() {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,51,public ArrayRealVector() {
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,59,ublic RealVectorImpl(int size) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,59,public ArrayRealVector(int size) {
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,68,"ublic RealVectorImpl(int size, double preset) {"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,68,"public ArrayRealVector(int size, double preset) {"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,77,ublic RealVectorImpl(double[] d) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,77,public ArrayRealVector(double[] d) {
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,82, Create a new RealVectorImpl using the input array as the underlying
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,82,* Create a new ArrayRealVector using the input array as the underlying
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,85," RealVectorImpl and not used directly, the <code>copyArray</code> may be"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,85,"* ArrayRealVector and not used directly, the <code>copyArray</code> may be"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,93, @see #RealVectorImpl(double[])
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,93,* @see #ArrayRealVector(double[])
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,95,"ublic RealVectorImpl(double[] d, boolean copyArray)"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,95,"public ArrayRealVector(double[] d, boolean copyArray)"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,112,"ublic RealVectorImpl(double[] d, int pos, int size) {"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,112,"public ArrayRealVector(double[] d, int pos, int size) {"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,126,ublic RealVectorImpl(Double[] d) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,126,public ArrayRealVector(Double[] d) {
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,139,"ublic RealVectorImpl(Double[] d, int pos, int size) {"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,139,"public ArrayRealVector(Double[] d, int pos, int size) {"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,155,ublic RealVectorImpl(RealVector v) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,155,public ArrayRealVector(RealVector v) {
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,166,ublic RealVectorImpl(RealVectorImpl v) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,166,public ArrayRealVector(ArrayRealVector v) {
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,175,"ublic RealVectorImpl(RealVectorImpl v, boolean deep) {"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,175,"public ArrayRealVector(ArrayRealVector v, boolean deep) {"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,184,"ublic RealVectorImpl(RealVectorImpl v1, RealVectorImpl v2) {"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,184,"public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) {"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,195,"ublic RealVectorImpl(RealVectorImpl v1, double[] v2) {"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,195,"public ArrayRealVector(ArrayRealVector v1, double[] v2) {"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,206,"ublic RealVectorImpl(double[] v1, RealVectorImpl v2) {"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,206,"public ArrayRealVector(double[] v1, ArrayRealVector v2) {"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,217,"ublic RealVectorImpl(double[] v1, double[] v2) {"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,217,"public ArrayRealVector(double[] v1, double[] v2) {"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,225,"eturn new RealVectorImpl(this, true);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,225,"return new ArrayRealVector(this, true);"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,232,eturn add((RealVectorImpl) v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,232,return add((ArrayRealVector) v);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,239,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,239,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,251,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,251,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,260,ublic RealVectorImpl add(RealVectorImpl v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,260,public ArrayRealVector add(ArrayRealVector v)
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,262,eturn (RealVectorImpl) add(v.data);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,262,return (ArrayRealVector) add(v.data);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,269,eturn subtract((RealVectorImpl) v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,269,return subtract((ArrayRealVector) v);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,276,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,276,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,288,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,288,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,297,ublic RealVectorImpl subtract(RealVectorImpl v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,297,public ArrayRealVector subtract(ArrayRealVector v)
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,299,eturn (RealVectorImpl) subtract(v.data);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,299,return (ArrayRealVector) subtract(v.data);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,308,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,308,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,325,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,325,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,342,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,342,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,359,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,359,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,376,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,376,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,393,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,393,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,410,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,410,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,427,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,427,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,444,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,444,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,461,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,461,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,478,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,478,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,495,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,495,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,512,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,512,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,529,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,529,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,546,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,546,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,563,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,563,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,580,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,580,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,597,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,597,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,614,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,614,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,631,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,631,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,648,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,648,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,665,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,665,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,682,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,682,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,699,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,699,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,716,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,716,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,733,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,733,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,750,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,750,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,767,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,767,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,782,eturn ebeMultiply((RealVectorImpl) v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,782,return ebeMultiply((ArrayRealVector) v);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,789,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,789,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,801,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,801,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,810,ublic RealVectorImpl ebeMultiply(RealVectorImpl v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,810,public ArrayRealVector ebeMultiply(ArrayRealVector v)
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,812,eturn (RealVectorImpl) ebeMultiply(v.data);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,812,return (ArrayRealVector) ebeMultiply(v.data);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,819,eturn ebeDivide((RealVectorImpl) v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,819,return ebeDivide((ArrayRealVector) v);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,826,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,826,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,838,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,838,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,847,ublic RealVectorImpl ebeDivide(RealVectorImpl v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,847,public ArrayRealVector ebeDivide(ArrayRealVector v)
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,849,eturn (RealVectorImpl) ebeDivide(v.data);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,849,return (ArrayRealVector) ebeDivide(v.data);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,870,eturn dotProduct((RealVectorImpl) v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,870,return dotProduct((ArrayRealVector) v);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,898,ublic double dotProduct(RealVectorImpl v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,898,public double dotProduct(ArrayRealVector v)
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,934,eturn getDistance((RealVectorImpl) v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,934,return getDistance((ArrayRealVector) v);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,967, @see #getL1Distance(RealVectorImpl)
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,968, @see #getLInfDistance(RealVectorImpl)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,967,* @see #getL1Distance(ArrayRealVector)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,968,* @see #getLInfDistance(ArrayRealVector)
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,971,ublic double getDistance(RealVectorImpl v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,971,public double getDistance(ArrayRealVector v)
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,980,eturn getL1Distance((RealVectorImpl) v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,980,return getL1Distance((ArrayRealVector) v);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1013, @see #getL1Distance(RealVectorImpl)
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1014, @see #getLInfDistance(RealVectorImpl)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1013,* @see #getL1Distance(ArrayRealVector)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1014,* @see #getLInfDistance(ArrayRealVector)
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1017,ublic double getL1Distance(RealVectorImpl v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1017,public double getL1Distance(ArrayRealVector v)
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1026,eturn getLInfDistance((RealVectorImpl) v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1026,return getLInfDistance((ArrayRealVector) v);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1059, @see #getL1Distance(RealVectorImpl)
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1060, @see #getLInfDistance(RealVectorImpl)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1059,* @see #getL1Distance(ArrayRealVector)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1060,* @see #getLInfDistance(ArrayRealVector)
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1063,ublic double getLInfDistance(RealVectorImpl v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1063,public double getLInfDistance(ArrayRealVector v)
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1095,"eturn projection(new RealVectorImpl(v, false));"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1095,"return projection(new ArrayRealVector(v, false));"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1103,ublic RealVectorImpl projection(RealVectorImpl v) {
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1104,eturn (RealVectorImpl) v.mapMultiply(dotProduct(v) / v.dotProduct(v));
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1103,public ArrayRealVector projection(ArrayRealVector v) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1104,return (ArrayRealVector) v.mapMultiply(dotProduct(v) / v.dotProduct(v));
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1111,eturn outerProduct((RealVectorImpl) v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1111,return outerProduct((ArrayRealVector) v);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1131,ublic RealMatrix outerProduct(RealVectorImpl v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1131,public RealMatrix outerProduct(ArrayRealVector v)
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1163,eturn append((RealVectorImpl) v);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1163,return append((ArrayRealVector) v);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1165,"eturn new RealVectorImpl(this,new RealVectorImpl(v));"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1165,"return new ArrayRealVector(this,new ArrayRealVector(v));"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1174,ublic RealVectorImpl append(RealVectorImpl v) {
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1175,"eturn new RealVectorImpl(this, v);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1174,public ArrayRealVector append(ArrayRealVector v) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1175,"return new ArrayRealVector(this, v);"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1183,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1183,return new ArrayRealVector(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1188,"eturn new RealVectorImpl(this, in);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1188,"return new ArrayRealVector(this, in);"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1193,ealVectorImpl out = new RealVectorImpl(n);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1193,ArrayRealVector out = new ArrayRealVector(n);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1216,"et(index, (RealVectorImpl) v);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1216,"set(index, (ArrayRealVector) v);"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1246,"ublic void set(int index, RealVectorImpl v)"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/ArrayRealVector.java,1246,"public void set(int index, ArrayRealVector v)"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,50," @deprecated as of 2.0, replaced by {@link FieldMatrixImpl} with a {@link"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,50,"* @deprecated as of 2.0, replaced by {@link Array2DRowFieldMatrix} with a {@link"
False,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1033,"eturn new FieldVectorImpl<T>(outData, false);"
True,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1033,"return new ArrayFieldVector<T>(outData, false);"
False,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1042,"etRow(row, ((FieldVectorImpl<T>) vector).getDataRef());"
True,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1042,"setRow(row, ((ArrayFieldVector<T>) vector).getDataRef());"
False,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1069,"eturn new FieldVectorImpl<T>(outData, false);"
True,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1069,"return new ArrayFieldVector<T>(outData, false);"
False,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1078,"etColumn(column, ((FieldVectorImpl<T>) vector).getDataRef());"
True,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/java/org/apache/commons/math/linear/BlockFieldMatrix.java,1078,"setColumn(column, ((ArrayFieldVector<T>) vector).getDataRef());"
False,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,1056,"eturn new RealVectorImpl(outData, false);"
True,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,1056,"return new ArrayRealVector(outData, false);"
False,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,1065,"etRow(row, ((RealVectorImpl) vector).getDataRef());"
True,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,1065,"setRow(row, ((ArrayRealVector) vector).getDataRef());"
False,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,1092,"eturn new RealVectorImpl(outData, false);"
True,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,1092,"return new ArrayRealVector(outData, false);"
False,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,1101,"etColumn(column, ((RealVectorImpl) vector).getDataRef());"
True,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/java/org/apache/commons/math/linear/BlockRealMatrix.java,1101,"setColumn(column, ((ArrayRealVector) vector).getDataRef());"
False,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,248,eturn solve((RealVectorImpl) b);
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,248,return solve((ArrayRealVector) b);
False,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,279,"eturn new RealVectorImpl(x, false);"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,279,"return new ArrayRealVector(x, false);"
False,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,291,ublic RealVectorImpl solve(RealVectorImpl b)
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,291,public ArrayRealVector solve(ArrayRealVector b)
False,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,293,"eturn new RealVectorImpl(solve(b.getDataRef()), false);"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,293,"return new ArrayRealVector(solve(b.getDataRef()), false);"
False,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,343,"eturn new RealMatrixImpl(x, false);"
True,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java,343,"return new Array2DRowRealMatrix(x, false);"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,142,rivate RealVectorImpl[] eigenvectors;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,142,private ArrayRealVector[] eigenvectors;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,369,rivate final RealVectorImpl[] eigenvectors;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,369,private final ArrayRealVector[] eigenvectors;
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,378,inal RealVectorImpl[] eigenvectors) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,378,final ArrayRealVector[] eigenvectors) {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,408,inal RealVectorImpl v = eigenvectors[i];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,408,final ArrayRealVector v = eigenvectors[i];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,444,inal RealVectorImpl v = eigenvectors[i];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,444,final ArrayRealVector v = eigenvectors[i];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,452,"eturn new RealVectorImpl(bp, false);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,452,"return new ArrayRealVector(bp, false);"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,482,inal RealVectorImpl v = eigenvectors[i];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,482,final ArrayRealVector v = eigenvectors[i];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1690,igenvectors = new RealVectorImpl[m];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1690,eigenvectors = new ArrayRealVector[m];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1721,"rivate RealVectorImpl findEigenvector(final double eigenvalue,"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1721,"private ArrayRealVector findEigenvector(final double eigenvalue,"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1768,"ew RealVectorImpl(eigenvector, false) :"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1769,"ew RealVectorImpl(transformer.getQ().operate(eigenvector), false);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1768,"new ArrayRealVector(eigenvector, false) :"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1769,"new ArrayRealVector(transformer.getQ().operate(eigenvector), false);"
False,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,158,"achedL = new FieldMatrixImpl<T>(field, m, m);"
True,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,158,"cachedL = new Array2DRowFieldMatrix<T>(field, m, m);"
False,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,174,"achedU = new FieldMatrixImpl<T>(field, m, m);"
True,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,174,"cachedU = new Array2DRowFieldMatrix<T>(field, m, m);"
False,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,189,"achedP = new FieldMatrixImpl<T>(field, m, m);"
True,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,189,"cachedP = new Array2DRowFieldMatrix<T>(field, m, m);"
False,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,307,eturn solve((FieldVectorImpl<T>) b);
True,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,307,return solve((ArrayFieldVector<T>) b);
False,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,344,"eturn new FieldVectorImpl<T>(bp, false);"
True,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,344,"return new ArrayFieldVector<T>(bp, false);"
False,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,356,ublic FieldVectorImpl<T> solve(FieldVectorImpl<T> b)
True,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,356,public ArrayFieldVector<T> solve(ArrayFieldVector<T> b)
False,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,358,"eturn new FieldVectorImpl<T>(solve(b.getDataRef()), false);"
True,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,358,"return new ArrayFieldVector<T>(solve(b.getDataRef()), false);"
False,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,416,"eturn new FieldMatrixImpl<T>(bp, false);"
True,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,416,"return new Array2DRowFieldMatrix<T>(bp, false);"
False,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,424,"ieldMatrix<T> identity = new FieldMatrixImpl<T>(field, m, m);"
True,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,424,"FieldMatrix<T> identity = new Array2DRowFieldMatrix<T>(field, m, m);"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,304,eturn solve((RealVectorImpl) b);
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,304,return solve((ArrayRealVector) b);
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,341,"eturn new RealVectorImpl(bp, false);"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,341,"return new ArrayRealVector(bp, false);"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,353,ublic RealVectorImpl solve(RealVectorImpl b)
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,353,public ArrayRealVector solve(ArrayRealVector b)
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,355,"eturn new RealVectorImpl(solve(b.getDataRef()), false);"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,355,"return new ArrayRealVector(solve(b.getDataRef()), false);"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,412,"eturn new RealMatrixImpl(bp, false);"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,412,"return new Array2DRowRealMatrix(bp, false);"
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,52, RealMatrixImpl} instance is built. Above this threshold a {@link
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,52,* Array2DRowRealMatrix} instance is built. Above this threshold a {@link
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,62,"ew RealMatrixImpl(rows, columns) : new BlockRealMatrix(rows, columns);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,62,"new Array2DRowRealMatrix(rows, columns) : new BlockRealMatrix(rows, columns);"
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,84,"ew FieldMatrixImpl<T>(field, rows, columns) : new BlockFieldMatrix<T>(field, rows, columns);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,84,"new Array2DRowFieldMatrix<T>(field, rows, columns) : new BlockFieldMatrix<T>(field, rows, columns);"
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,93, RealMatrixImpl} instance is built. Above this threshold a {@link
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,93,* Array2DRowRealMatrix} instance is built. Above this threshold a {@link
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,107,ew RealMatrixImpl(data) : new BlockRealMatrix(data);
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,107,new Array2DRowRealMatrix(data) : new BlockRealMatrix(data);
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,130,ew FieldMatrixImpl<T>(data) : new BlockFieldMatrix<T>(data);
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,130,new Array2DRowFieldMatrix<T>(data) : new BlockFieldMatrix<T>(data);
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,170,"eturn new FieldMatrixImpl<T>(d, false);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,170,"return new Array2DRowFieldMatrix<T>(d, false);"
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,307,"eturn new RealVectorImpl(data, true);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,307,"return new ArrayRealVector(data, true);"
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,320,"eturn new FieldVectorImpl<T>(data, true);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,320,"return new ArrayFieldVector<T>(data, true);"
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,697,"eturn new RealMatrixImpl(data, false);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,697,"return new Array2DRowRealMatrix(data, false);"
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,741,"eturn new RealMatrixImpl(data, false);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,741,"return new Array2DRowRealMatrix(data, false);"
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,827,"inal RealVector vector = new RealVectorImpl(data, false);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,827,"final RealVector vector = new ArrayRealVector(data, false);"
False,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,936,"inal RealMatrix matrix = new RealMatrixImpl(data, false);"
True,src/java/org/apache/commons/math/linear/MatrixUtils.java,src/java/org/apache/commons/math/linear/MatrixUtils.java,936,"final RealMatrix matrix = new Array2DRowRealMatrix(data, false);"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,338,eturn solve((RealVectorImpl) b);
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,338,return solve((ArrayRealVector) b);
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,340,"eturn new RealVectorImpl(solve(b.getData()), false);"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,340,"return new ArrayRealVector(solve(b.getData()), false);"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,351,ublic RealVectorImpl solve(RealVectorImpl b)
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,351,public ArrayRealVector solve(ArrayRealVector b)
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,353,"eturn new RealVectorImpl(solve(b.getDataRef()), false);"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,353,"return new ArrayRealVector(solve(b.getDataRef()), false);"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,51,* @deprecated as of 2.0 replaced by {@link Array2DRowRealMatrix}
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,53,@Deprecated
False,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,261,ublic RealVectorImpl parse(String source) throws ParseException {
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,261,public ArrayRealVector parse(String source) throws ParseException {
False,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,263,"ealVectorImpl result = parse(source, parsePosition);"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,263,"ArrayRealVector result = parse(source, parsePosition);"
False,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,278,"ublic RealVectorImpl parse(String source, ParsePosition pos) {"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,278,"public ArrayRealVector parse(String source, ParsePosition pos) {"
False,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,324,"eturn new RealVectorImpl(data, false);"
True,src/java/org/apache/commons/math/linear/RealVectorFormat.java,src/java/org/apache/commons/math/linear/RealVectorFormat.java,324,"return new ArrayRealVector(data, false);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,33,mport org.apache.commons.math.linear.FieldMatrixImpl;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,33,import org.apache.commons.math.linear.Array2DRowFieldMatrix;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,37,mport org.apache.commons.math.linear.RealMatrixImpl;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,37,import org.apache.commons.math.linear.Array2DRowRealMatrix;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,340,"eturn coefficients.msToN.multiply(new RealMatrixImpl(multistep, false));"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,340,"return coefficients.msToN.multiply(new Array2DRowRealMatrix(multistep, false));"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,414,"igMStoN.multiply(new FieldMatrixImpl<BigFraction>(shiftedP, false));"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,414,"bigMStoN.multiply(new Array2DRowFieldMatrix<BigFraction>(shiftedP, false));"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,455,"eturn new FieldMatrixImpl<BigFraction>(pData, false);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,455,"return new Array2DRowFieldMatrix<BigFraction>(pData, false);"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,33,mport org.apache.commons.math.linear.FieldMatrixImpl;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,33,import org.apache.commons.math.linear.Array2DRowFieldMatrix;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,37,mport org.apache.commons.math.linear.RealMatrixImpl;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,37,import org.apache.commons.math.linear.Array2DRowRealMatrix;
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,401,"eturn coefficients.msToN.multiply(new RealMatrixImpl(multistep, false));"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,401,"return coefficients.msToN.multiply(new Array2DRowRealMatrix(multistep, false));"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,530,"igMStoN.multiply(new FieldMatrixImpl<BigFraction>(shiftedP, false));"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,530,"bigMStoN.multiply(new Array2DRowFieldMatrix<BigFraction>(shiftedP, false));"
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,571,"eturn new FieldMatrixImpl<BigFraction>(pData, false);"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,571,"return new Array2DRowFieldMatrix<BigFraction>(pData, false);"
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,26,mport org.apache.commons.math.linear.RealMatrixImpl;
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,26,import org.apache.commons.math.linear.Array2DRowRealMatrix;
False,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,254,"ordsieck = new RealMatrixImpl(nData, false);"
True,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,254,"nordsieck = new Array2DRowRealMatrix(nData, false);"
False,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,27,mport org.apache.commons.math.linear.RealVectorImpl;
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,27,import org.apache.commons.math.linear.ArrayRealVector;
False,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,81,"his(new RealVectorImpl(coefficients), relationship, value);"
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,81,"this(new ArrayRealVector(coefficients), relationship, value);"
False,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,131,"his.coefficients = new RealVectorImpl(sub, false);"
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,131,"this.coefficients = new ArrayRealVector(sub, false);"
False,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,27,mport org.apache.commons.math.linear.RealVectorImpl;
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,27,import org.apache.commons.math.linear.ArrayRealVector;
False,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,58,"his(new RealVectorImpl(coefficients), constantTerm);"
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,58,"this(new ArrayRealVector(coefficients), constantTerm);"
False,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,32,mport org.apache.commons.math.linear.RealMatrixImpl;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,32,import org.apache.commons.math.linear.Array2DRowRealMatrix;
False,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,114,his.tableau = new RealMatrixImpl(createTableau(goalType == GoalType.MAXIMIZE));
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,114,this.tableau = new Array2DRowRealMatrix(createTableau(goalType == GoalType.MAXIMIZE));
False,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,300,his.tableau = new RealMatrixImpl(matrix);
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,300,this.tableau = new Array2DRowRealMatrix(matrix);
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,21,mport org.apache.commons.math.linear.RealMatrixImpl;
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,21,import org.apache.commons.math.linear.Array2DRowRealMatrix;
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,23,mport org.apache.commons.math.linear.RealVectorImpl;
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,23,import org.apache.commons.math.linear.ArrayRealVector;
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,58,his.X = new RealMatrixImpl(x);
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,59,his.Y = new RealVectorImpl(y);
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,58,this.X = new Array2DRowRealMatrix(x);
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,59,this.Y = new ArrayRealVector(y);
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,68,his.Y = new RealVectorImpl(y);
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,68,this.Y = new ArrayRealVector(y);
False,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,77,his.X = new RealMatrixImpl(x);
True,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java,77,this.X = new Array2DRowRealMatrix(x);
False,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,21,mport org.apache.commons.math.linear.RealMatrixImpl;
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,21,import org.apache.commons.math.linear.Array2DRowRealMatrix;
False,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,71,his.Omega = new RealMatrixImpl(omega);
True,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,71,this.Omega = new Array2DRowRealMatrix(omega);
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,24,mport org.apache.commons.math.linear.RealMatrixImpl;
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,24,import org.apache.commons.math.linear.Array2DRowRealMatrix;
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,26,mport org.apache.commons.math.linear.RealVectorImpl;
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,26,import org.apache.commons.math.linear.ArrayRealVector;
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,110,"ealMatrixImpl augI = new RealMatrixImpl(n, n);"
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,110,"Array2DRowRealMatrix augI = new Array2DRowRealMatrix(n, n);"
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,133,his.X = new RealMatrixImpl(x);
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,133,this.X = new Array2DRowRealMatrix(x);
False,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,214,eturn new RealVectorImpl(x);
True,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,214,return new ArrayRealVector(x);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,17,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,19,import junit.framework.Test;
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,20,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,21,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,23,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,26,* Test cases for the {@link Array2DRowRealMatrix} class.
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,28,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,31,public final class Array2DRowRealMatrixTest extends TestCase {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,33,// 3 x 3 identity matrix
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,34,"protected double[][] id = { {1d,0d,0d}, {0d,1d,0d}, {0d,0d,1d} };"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,36,// Test data for group operations
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,37,"protected double[][] testData = { {1d,2d,3d}, {2d,5d,3d}, {1d,0d,8d} };"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,38,"protected double[][] testDataLU = {{2d, 5d, 3d}, {.5d, -2.5d, 6.5d}, {0.5d, 0.2d, .2d}};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,39,"protected double[][] testDataPlus2 = { {3d,4d,5d}, {4d,7d,5d}, {3d,2d,10d} };"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,40,"protected double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d},"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,41,"{-1d,0d,-8d} };"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,42,"protected double[] testDataRow1 = {1d,2d,3d};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,43,"protected double[] testDataCol3 = {3d,3d,8d};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,44,protected double[][] testDataInv =
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,45,"{ {-40d,16d,9d}, {13d,-5d,-3d}, {5d,-2d,-1d} };"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,46,"protected double[] preMultTest = {8,12,33};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,47,"protected double[][] testData2 ={ {1d,2d,3d}, {2d,5d,3d}};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,48,"protected double[][] testData2T = { {1d,2d}, {2d,5d}, {3d,3d}};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,49,protected double[][] testDataPlusInv =
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,50,"{ {-39d,18d,12d}, {15d,0d,0d}, {6d,-2d,7d} };"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,52,// lu decomposition tests
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,53,"protected double[][] luData = { {2d,3d,3d}, {0d,5d,7d}, {6d,9d,8d} };"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,54,"protected double[][] luDataLUDecomposition = { {6d,9d,8d}, {0d,5d,7d},"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,55,"{0.33333333333333,0d,0.33333333333333} };"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,57,// singular matrices
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,58,"protected double[][] singular = { {2d,3d}, {2d,3d} };"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,59,"protected double[][] bigSingular = {{1d,2d,3d,4d}, {2d,5d,3d,4d},"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,60,"{7d,3d,256d,1930d}, {3d,7d,6d,8d}}; // 4th row = 1st + 2nd"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,61,"protected double[][] detData = { {1d,2d,3d}, {4d,5d,6d}, {7d,8d,10d} };"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,62,"protected double[][] detData2 = { {1d, 3d}, {2d, 4d}};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,64,// vectors
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,65,"protected double[] testVector = {1,2,3};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,66,"protected double[] testVector2 = {1,2,3,4};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,68,// submatrix accessor tests
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,69,"protected double[][] subTestData = {{1, 2, 3, 4}, {1.5, 2.5, 3.5, 4.5},"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,70,"{2, 4, 6, 8}, {4, 5, 6, 7}};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,71,// array selections
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,72,"protected double[][] subRows02Cols13 = { {2, 4}, {4, 8}};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,73,"protected double[][] subRows03Cols12 = { {2, 3}, {5, 6}};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,74,"protected double[][] subRows03Cols123 = { {2, 3, 4} , {5, 6, 7}};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,75,// effective permutations
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,76,"protected double[][] subRows20Cols123 = { {4, 6, 8} , {2, 3, 4}};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,77,"protected double[][] subRows31Cols31 = {{7, 5}, {4.5, 2.5}};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,78,// contiguous ranges
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,79,"protected double[][] subRows01Cols23 = {{3,4} , {3.5, 4.5}};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,80,"protected double[][] subRows23Cols00 = {{2} , {4}};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,81,protected double[][] subRows00Cols33 = {{4}};
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,82,// row matrices
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,83,"protected double[][] subRow0 = {{1,2,3,4}};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,84,"protected double[][] subRow3 = {{4,5,6,7}};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,85,// column matrices
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,86,"protected double[][] subColumn1 = {{2}, {2.5}, {4}, {5}};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,87,"protected double[][] subColumn3 = {{4}, {4.5}, {8}, {7}};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,89,// tolerances
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,90,protected double entryTolerance = 10E-16;
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,91,protected double normTolerance = 10E-14;
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,93,public Array2DRowRealMatrixTest(String name) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,94,super(name);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,97,public static Test suite() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,98,TestSuite suite = new TestSuite(Array2DRowRealMatrixTest.class);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,99,"suite.setName(""Array2DRowRealMatrix Tests"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,100,return suite;
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,103,/** test dimensions */
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,104,public void testDimensions() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,105,Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,106,Array2DRowRealMatrix m2 = new Array2DRowRealMatrix(testData2);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,107,"assertEquals(""testData row dimension"",3,m.getRowDimension());"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,108,"assertEquals(""testData column dimension"",3,m.getColumnDimension());"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,109,"assertTrue(""testData is square"",m.isSquare());"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,110,"assertEquals(""testData2 row dimension"",m2.getRowDimension(),2);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,111,"assertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,112,"assertTrue(""testData2 is not square"",!m2.isSquare());"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,115,/** test copy functions */
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,116,public void testCopyFunctions() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,117,Array2DRowRealMatrix m1 = new Array2DRowRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,118,Array2DRowRealMatrix m2 = new Array2DRowRealMatrix(m1.getData());
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,119,"assertEquals(m2,m1);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,120,Array2DRowRealMatrix m3 = new Array2DRowRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,121,"Array2DRowRealMatrix m4 = new Array2DRowRealMatrix(m3.getData(), false);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,122,"assertEquals(m4,m3);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,125,/** test add */
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,126,public void testAdd() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,127,Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,128,Array2DRowRealMatrix mInv = new Array2DRowRealMatrix(testDataInv);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,129,RealMatrix mPlusMInv = m.add(mInv);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,130,double[][] sumEntries = mPlusMInv.getData();
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,131,for (int row = 0; row < m.getRowDimension(); row++) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,132,for (int col = 0; col < m.getColumnDimension(); col++) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,133,"assertEquals(""sum entry entry"","
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,134,"testDataPlusInv[row][col],sumEntries[row][col],"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,135,entryTolerance);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,140,/** test add failure */
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,141,public void testAddFail() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,142,Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,143,Array2DRowRealMatrix m2 = new Array2DRowRealMatrix(testData2);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,144,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,145,m.add(m2);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,146,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,147,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,148,// ignored
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,152,/** test norm */
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,153,public void testNorm() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,154,Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,155,Array2DRowRealMatrix m2 = new Array2DRowRealMatrix(testData2);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,156,"assertEquals(""testData norm"",14d,m.getNorm(),entryTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,157,"assertEquals(""testData2 norm"",7d,m2.getNorm(),entryTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,160,/** test Frobenius norm */
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,161,public void testFrobeniusNorm() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,162,Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,163,Array2DRowRealMatrix m2 = new Array2DRowRealMatrix(testData2);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,164,"assertEquals(""testData Frobenius norm"", Math.sqrt(117.0), m.getFrobeniusNorm(), entryTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,165,"assertEquals(""testData2 Frobenius norm"", Math.sqrt(52.0), m2.getFrobeniusNorm(), entryTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,168,/** test m-n = m + -n */
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,169,public void testPlusMinus() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,170,Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,171,Array2DRowRealMatrix m2 = new Array2DRowRealMatrix(testDataInv);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,172,"TestUtils.assertEquals(""m-n = m + -n"",m.subtract(m2),"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,173,"m2.scalarMultiply(-1d).add(m),entryTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,174,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,175,m.subtract(new Array2DRowRealMatrix(testData2));
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,176,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,177,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,178,// ignored
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,182,/** test multiply */
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,183,public void testMultiply() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,184,Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,185,Array2DRowRealMatrix mInv = new Array2DRowRealMatrix(testDataInv);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,186,Array2DRowRealMatrix identity = new Array2DRowRealMatrix(id);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,187,Array2DRowRealMatrix m2 = new Array2DRowRealMatrix(testData2);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,188,"TestUtils.assertEquals(""inverse multiply"",m.multiply(mInv),"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,189,"identity,entryTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,190,"TestUtils.assertEquals(""inverse multiply"",mInv.multiply(m),"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,191,"identity,entryTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,192,"TestUtils.assertEquals(""identity multiply"",m.multiply(identity),"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,193,"m,entryTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,194,"TestUtils.assertEquals(""identity multiply"",identity.multiply(mInv),"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,195,"mInv,entryTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,196,"TestUtils.assertEquals(""identity multiply"",m2.multiply(identity),"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,197,"m2,entryTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,198,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,199,m.multiply(new Array2DRowRealMatrix(bigSingular));
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,200,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,201,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,202,// ignored
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,206,//Additional Test for Array2DRowRealMatrixTest.testMultiply
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,208,"private double[][] d3 = new double[][] {{1,2,3,4},{5,6,7,8}};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,209,"private double[][] d4 = new double[][] {{1},{2},{3},{4}};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,210,"private double[][] d5 = new double[][] {{30},{70}};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,212,public void testMultiply2() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,213,RealMatrix m3 = new Array2DRowRealMatrix(d3);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,214,RealMatrix m4 = new Array2DRowRealMatrix(d4);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,215,RealMatrix m5 = new Array2DRowRealMatrix(d5);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,216,"TestUtils.assertEquals(""m3*m4=m5"", m3.multiply(m4), m5, entryTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,219,/** test trace */
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,220,public void testTrace() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,221,RealMatrix m = new Array2DRowRealMatrix(id);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,222,"assertEquals(""identity trace"",3d,m.getTrace(),entryTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,223,m = new Array2DRowRealMatrix(testData2);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,224,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,225,m.getTrace();
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,226,"fail(""Expecting NonSquareMatrixException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,227,} catch (NonSquareMatrixException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,228,// ignored
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,232,/** test sclarAdd */
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,233,public void testScalarAdd() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,234,RealMatrix m = new Array2DRowRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,235,"TestUtils.assertEquals(""scalar add"",new Array2DRowRealMatrix(testDataPlus2),"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,236,"m.scalarAdd(2d),entryTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,239,/** test operate */
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,240,public void testOperate() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,241,RealMatrix m = new Array2DRowRealMatrix(id);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,242,"TestUtils.assertEquals(""identity operate"", testVector,"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,243,"m.operate(testVector), entryTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,244,"TestUtils.assertEquals(""identity operate"", testVector,"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,245,"m.operate(new ArrayRealVector(testVector)).getData(), entryTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,246,m = new Array2DRowRealMatrix(bigSingular);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,247,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,248,m.operate(testVector);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,249,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,250,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,251,// ignored
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,255,/** test issue MATH-209 */
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,256,public void testMath209() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,257,RealMatrix a = new Array2DRowRealMatrix(new double[][] {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,258,"{ 1, 2 }, { 3, 4 }, { 5, 6 }"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,259,"}, false);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,260,"double[] b = a.operate(new double[] { 1, 1 });"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,261,"assertEquals(a.getRowDimension(), b.length);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,262,"assertEquals( 3.0, b[0], 1.0e-12);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,263,"assertEquals( 7.0, b[1], 1.0e-12);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,264,"assertEquals(11.0, b[2], 1.0e-12);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,267,/** test transpose */
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,268,public void testTranspose() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,269,RealMatrix m = new Array2DRowRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,270,RealMatrix mIT = new LUDecompositionImpl(m).getSolver().getInverse().transpose();
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,271,RealMatrix mTI = new LUDecompositionImpl(m.transpose()).getSolver().getInverse();
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,272,"TestUtils.assertEquals(""inverse-transpose"", mIT, mTI, normTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,273,m = new Array2DRowRealMatrix(testData2);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,274,RealMatrix mt = new Array2DRowRealMatrix(testData2T);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,275,"TestUtils.assertEquals(""transpose"",mt,m.transpose(),normTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,278,/** test preMultiply by vector */
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,279,public void testPremultiplyVector() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,280,RealMatrix m = new Array2DRowRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,281,"TestUtils.assertEquals(""premultiply"", m.preMultiply(testVector),"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,282,"preMultTest, normTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,283,"TestUtils.assertEquals(""premultiply"", m.preMultiply(new ArrayRealVector(testVector).getData()),"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,284,"preMultTest, normTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,285,m = new Array2DRowRealMatrix(bigSingular);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,286,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,287,m.preMultiply(testVector);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,288,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,289,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,290,// ignored
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,294,public void testPremultiply() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,295,RealMatrix m3 = new Array2DRowRealMatrix(d3);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,296,RealMatrix m4 = new Array2DRowRealMatrix(d4);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,297,RealMatrix m5 = new Array2DRowRealMatrix(d5);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,298,"TestUtils.assertEquals(""m3*m4=m5"", m4.preMultiply(m3), m5, entryTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,300,Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,301,Array2DRowRealMatrix mInv = new Array2DRowRealMatrix(testDataInv);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,302,Array2DRowRealMatrix identity = new Array2DRowRealMatrix(id);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,303,"TestUtils.assertEquals(""inverse multiply"",m.preMultiply(mInv),"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,304,"identity,entryTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,305,"TestUtils.assertEquals(""inverse multiply"",mInv.preMultiply(m),"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,306,"identity,entryTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,307,"TestUtils.assertEquals(""identity multiply"",m.preMultiply(identity),"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,308,"m,entryTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,309,"TestUtils.assertEquals(""identity multiply"",identity.preMultiply(mInv),"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,310,"mInv,entryTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,311,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,312,m.preMultiply(new Array2DRowRealMatrix(bigSingular));
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,313,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,314,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,315,// ignored
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,319,public void testGetVectors() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,320,RealMatrix m = new Array2DRowRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,321,"TestUtils.assertEquals(""get row"",m.getRow(0),testDataRow1,entryTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,322,"TestUtils.assertEquals(""get col"",m.getColumn(2),testDataCol3,entryTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,323,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,324,m.getRow(10);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,325,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,326,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,327,// ignored
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,329,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,330,m.getColumn(-1);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,331,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,332,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,333,// ignored
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,337,public void testGetEntry() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,338,RealMatrix m = new Array2DRowRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,339,"assertEquals(""get entry"",m.getEntry(0,1),2d,entryTolerance);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,340,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,341,"m.getEntry(10, 4);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,342,"fail (""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,343,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,344,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,348,/** test examples in user guide */
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,349,public void testExamples() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,350,// Create a real matrix with two rows and three columns
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,351,"double[][] matrixData = { {1d,2d,3d}, {2d,5d,3d}};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,352,RealMatrix m = new Array2DRowRealMatrix(matrixData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,353,"// One more with three rows, two columns"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,354,"double[][] matrixData2 = { {1d,2d}, {2d,5d}, {1d, 7d}};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,355,RealMatrix n = new Array2DRowRealMatrix(matrixData2);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,356,// Now multiply m by n
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,357,RealMatrix p = m.multiply(n);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,358,"assertEquals(2, p.getRowDimension());"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,359,"assertEquals(2, p.getColumnDimension());"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,360,// Invert p
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,361,RealMatrix pInverse = new LUDecompositionImpl(p).getSolver().getInverse();
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,362,"assertEquals(2, pInverse.getRowDimension());"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,363,"assertEquals(2, pInverse.getColumnDimension());"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,365,// Solve example
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,366,"double[][] coefficientsData = {{2, 3, -2}, {-1, 7, 6}, {4, -3, -5}};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,367,RealMatrix coefficients = new Array2DRowRealMatrix(coefficientsData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,368,"double[] constants = {1, -2, 1};"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,369,double[] solution = new LUDecompositionImpl(coefficients).getSolver().solve(constants);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,370,"assertEquals(2 * solution[0] + 3 * solution[1] -2 * solution[2], constants[0], 1E-12);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,371,"assertEquals(-1 * solution[0] + 7 * solution[1] + 6 * solution[2], constants[1], 1E-12);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,372,"assertEquals(4 * solution[0] - 3 * solution[1] -5 * solution[2], constants[2], 1E-12);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,376,// test submatrix accessors
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,377,public void testGetSubMatrix() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,378,RealMatrix m = new Array2DRowRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,379,"checkGetSubMatrix(m, subRows23Cols00,  2 , 3 , 0, 0, false);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,380,"checkGetSubMatrix(m, subRows00Cols33,  0 , 0 , 3, 3, false);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,381,"checkGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3, false);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,382,"checkGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,383,"checkGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,384,"checkGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,385,"checkGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,386,"checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,387,"checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,388,"checkGetSubMatrix(m, null,  1, 0, 2, 4, true);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,389,"checkGetSubMatrix(m, null, -1, 1, 2, 2, true);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,390,"checkGetSubMatrix(m, null,  1, 0, 2, 2, true);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,391,"checkGetSubMatrix(m, null,  1, 0, 2, 4, true);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,392,"checkGetSubMatrix(m, null, new int[] {},    new int[] { 0 }, true);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,393,"checkGetSubMatrix(m, null, new int[] { 0 }, new int[] { 4 }, true);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,396,"private void checkGetSubMatrix(RealMatrix m, double[][] reference,"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,397,"int startRow, int endRow, int startColumn, int endColumn,"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,398,boolean mustFail) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,399,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,400,"RealMatrix sub = m.getSubMatrix(startRow, endRow, startColumn, endColumn);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,401,"assertEquals(new Array2DRowRealMatrix(reference), sub);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,402,if (mustFail) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,403,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,405,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,406,if (!mustFail) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,407,throw e;
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,412,"private void checkGetSubMatrix(RealMatrix m, double[][] reference,"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,413,"int[] selectedRows, int[] selectedColumns,"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,414,boolean mustFail) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,415,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,416,"RealMatrix sub = m.getSubMatrix(selectedRows, selectedColumns);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,417,"assertEquals(new Array2DRowRealMatrix(reference), sub);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,418,if (mustFail) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,419,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,421,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,422,if (!mustFail) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,423,throw e;
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,428,public void testCopySubMatrix() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,429,RealMatrix m = new Array2DRowRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,430,"checkCopy(m, subRows23Cols00,  2 , 3 , 0, 0, false);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,431,"checkCopy(m, subRows00Cols33,  0 , 0 , 3, 3, false);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,432,"checkCopy(m, subRows01Cols23,  0 , 1 , 2, 3, false);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,433,"checkCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,434,"checkCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,435,"checkCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,436,"checkCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,437,"checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,438,"checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,440,"checkCopy(m, null,  1, 0, 2, 4, true);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,441,"checkCopy(m, null, -1, 1, 2, 2, true);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,442,"checkCopy(m, null,  1, 0, 2, 2, true);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,443,"checkCopy(m, null,  1, 0, 2, 4, true);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,444,"checkCopy(m, null, new int[] {},    new int[] { 0 }, true);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,445,"checkCopy(m, null, new int[] { 0 }, new int[] { 4 }, true);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,448,"private void checkCopy(RealMatrix m, double[][] reference,"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,449,"int startRow, int endRow, int startColumn, int endColumn,"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,450,boolean mustFail) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,451,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,452,double[][] sub = (reference == null) ?
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,453,new double[1][1] :
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,454,new double[reference.length][reference[0].length];
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,455,"m.copySubMatrix(startRow, endRow, startColumn, endColumn, sub);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,456,"assertEquals(new Array2DRowRealMatrix(reference), new Array2DRowRealMatrix(sub));"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,457,if (mustFail) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,458,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,460,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,461,if (!mustFail) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,462,throw e;
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,467,"private void checkCopy(RealMatrix m, double[][] reference,"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,468,"int[] selectedRows, int[] selectedColumns,"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,469,boolean mustFail) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,470,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,471,double[][] sub = (reference == null) ?
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,472,new double[1][1] :
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,473,new double[reference.length][reference[0].length];
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,474,"m.copySubMatrix(selectedRows, selectedColumns, sub);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,475,"assertEquals(new Array2DRowRealMatrix(reference), new Array2DRowRealMatrix(sub));"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,476,if (mustFail) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,477,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,479,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,480,if (!mustFail) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,481,throw e;
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,486,public void testGetRowMatrix() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,487,RealMatrix m = new Array2DRowRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,488,RealMatrix mRow0 = new Array2DRowRealMatrix(subRow0);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,489,RealMatrix mRow3 = new Array2DRowRealMatrix(subRow3);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,490,"assertEquals(""Row0"", mRow0,"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,491,m.getRowMatrix(0));
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,492,"assertEquals(""Row3"", mRow3,"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,493,m.getRowMatrix(3));
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,494,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,495,m.getRowMatrix(-1);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,496,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,497,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,498,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,500,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,501,m.getRowMatrix(4);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,502,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,503,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,504,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,508,public void testSetRowMatrix() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,509,RealMatrix m = new Array2DRowRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,510,RealMatrix mRow3 = new Array2DRowRealMatrix(subRow3);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,511,"assertNotSame(mRow3, m.getRowMatrix(0));"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,512,"m.setRowMatrix(0, mRow3);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,513,"assertEquals(mRow3, m.getRowMatrix(0));"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,514,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,515,"m.setRowMatrix(-1, mRow3);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,516,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,517,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,518,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,520,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,521,"m.setRowMatrix(0, m);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,522,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,523,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,524,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,528,public void testGetColumnMatrix() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,529,RealMatrix m = new Array2DRowRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,530,RealMatrix mColumn1 = new Array2DRowRealMatrix(subColumn1);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,531,RealMatrix mColumn3 = new Array2DRowRealMatrix(subColumn3);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,532,"assertEquals(""Column1"", mColumn1,"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,533,m.getColumnMatrix(1));
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,534,"assertEquals(""Column3"", mColumn3,"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,535,m.getColumnMatrix(3));
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,536,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,537,m.getColumnMatrix(-1);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,538,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,539,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,540,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,542,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,543,m.getColumnMatrix(4);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,544,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,545,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,546,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,550,public void testSetColumnMatrix() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,551,RealMatrix m = new Array2DRowRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,552,RealMatrix mColumn3 = new Array2DRowRealMatrix(subColumn3);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,553,"assertNotSame(mColumn3, m.getColumnMatrix(1));"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,554,"m.setColumnMatrix(1, mColumn3);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,555,"assertEquals(mColumn3, m.getColumnMatrix(1));"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,556,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,557,"m.setColumnMatrix(-1, mColumn3);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,558,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,559,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,560,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,562,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,563,"m.setColumnMatrix(0, m);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,564,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,565,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,566,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,570,public void testGetRowVector() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,571,RealMatrix m = new Array2DRowRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,572,RealVector mRow0 = new ArrayRealVector(subRow0[0]);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,573,RealVector mRow3 = new ArrayRealVector(subRow3[0]);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,574,"assertEquals(""Row0"", mRow0, m.getRowVector(0));"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,575,"assertEquals(""Row3"", mRow3, m.getRowVector(3));"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,576,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,577,m.getRowVector(-1);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,578,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,579,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,580,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,582,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,583,m.getRowVector(4);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,584,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,585,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,586,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,590,public void testSetRowVector() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,591,RealMatrix m = new Array2DRowRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,592,RealVector mRow3 = new ArrayRealVector(subRow3[0]);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,593,"assertNotSame(mRow3, m.getRowMatrix(0));"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,594,"m.setRowVector(0, mRow3);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,595,"assertEquals(mRow3, m.getRowVector(0));"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,596,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,597,"m.setRowVector(-1, mRow3);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,598,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,599,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,600,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,602,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,603,"m.setRowVector(0, new ArrayRealVector(5));"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,604,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,605,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,606,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,610,public void testGetColumnVector() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,611,RealMatrix m = new Array2DRowRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,612,RealVector mColumn1 = columnToVector(subColumn1);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,613,RealVector mColumn3 = columnToVector(subColumn3);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,614,"assertEquals(""Column1"", mColumn1, m.getColumnVector(1));"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,615,"assertEquals(""Column3"", mColumn3, m.getColumnVector(3));"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,616,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,617,m.getColumnVector(-1);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,618,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,619,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,620,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,622,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,623,m.getColumnVector(4);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,624,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,625,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,626,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,630,public void testSetColumnVector() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,631,RealMatrix m = new Array2DRowRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,632,RealVector mColumn3 = columnToVector(subColumn3);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,633,"assertNotSame(mColumn3, m.getColumnVector(1));"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,634,"m.setColumnVector(1, mColumn3);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,635,"assertEquals(mColumn3, m.getColumnVector(1));"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,636,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,637,"m.setColumnVector(-1, mColumn3);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,638,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,639,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,640,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,642,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,643,"m.setColumnVector(0, new ArrayRealVector(5));"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,644,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,645,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,646,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,650,private RealVector columnToVector(double[][] column) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,651,double[] data = new double[column.length];
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,652,for (int i = 0; i < data.length; ++i) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,653,data[i] = column[i][0];
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,655,"return new ArrayRealVector(data, false);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,658,public void testGetRow() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,659,RealMatrix m = new Array2DRowRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,660,"checkArrays(subRow0[0], m.getRow(0));"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,661,"checkArrays(subRow3[0], m.getRow(3));"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,662,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,663,m.getRow(-1);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,664,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,665,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,666,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,668,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,669,m.getRow(4);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,670,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,671,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,672,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,676,public void testSetRow() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,677,RealMatrix m = new Array2DRowRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,678,assertTrue(subRow3[0][0] != m.getRow(0)[0]);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,679,"m.setRow(0, subRow3[0]);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,680,"checkArrays(subRow3[0], m.getRow(0));"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,681,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,682,"m.setRow(-1, subRow3[0]);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,683,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,684,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,685,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,687,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,688,"m.setRow(0, new double[5]);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,689,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,690,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,691,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,695,public void testGetColumn() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,696,RealMatrix m = new Array2DRowRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,697,double[] mColumn1 = columnToArray(subColumn1);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,698,double[] mColumn3 = columnToArray(subColumn3);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,699,"checkArrays(mColumn1, m.getColumn(1));"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,700,"checkArrays(mColumn3, m.getColumn(3));"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,701,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,702,m.getColumn(-1);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,703,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,704,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,705,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,707,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,708,m.getColumn(4);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,709,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,710,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,711,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,715,public void testSetColumn() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,716,RealMatrix m = new Array2DRowRealMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,717,double[] mColumn3 = columnToArray(subColumn3);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,718,assertTrue(mColumn3[0] != m.getColumn(1)[0]);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,719,"m.setColumn(1, mColumn3);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,720,"checkArrays(mColumn3, m.getColumn(1));"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,721,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,722,"m.setColumn(-1, mColumn3);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,723,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,724,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,725,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,727,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,728,"m.setColumn(0, new double[5]);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,729,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,730,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,731,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,735,private double[] columnToArray(double[][] column) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,736,double[] data = new double[column.length];
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,737,for (int i = 0; i < data.length; ++i) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,738,data[i] = column[i][0];
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,740,return data;
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,743,"private void checkArrays(double[] expected, double[] actual) {"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,744,"assertEquals(expected.length, actual.length);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,745,for (int i = 0; i < expected.length; ++i) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,746,"assertEquals(expected[i], actual[i]);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,750,public void testEqualsAndHashCode() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,751,Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,752,Array2DRowRealMatrix m1 = (Array2DRowRealMatrix) m.copy();
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,753,Array2DRowRealMatrix mt = (Array2DRowRealMatrix) m.transpose();
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,754,assertTrue(m.hashCode() != mt.hashCode());
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,755,"assertEquals(m.hashCode(), m1.hashCode());"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,756,"assertEquals(m, m);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,757,"assertEquals(m, m1);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,758,assertFalse(m.equals(null));
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,759,assertFalse(m.equals(mt));
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,760,assertFalse(m.equals(new Array2DRowRealMatrix(bigSingular)));
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,763,public void testToString() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,764,Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,765,"assertEquals(""Array2DRowRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"","
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,766,m.toString());
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,767,m = new Array2DRowRealMatrix();
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,768,"assertEquals(""Array2DRowRealMatrix{}"","
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,769,m.toString());
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,772,public void testSetSubMatrix() throws Exception {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,773,Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,774,"m.setSubMatrix(detData2,1,1);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,775,RealMatrix expected = MatrixUtils.createRealMatrix
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,776,"(new double[][] {{1.0,2.0,3.0},{2.0,1.0,3.0},{1.0,2.0,4.0}});"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,777,"assertEquals(expected, m);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,779,"m.setSubMatrix(detData2,0,0);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,780,expected = MatrixUtils.createRealMatrix
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,781,"(new double[][] {{1.0,3.0,3.0},{2.0,4.0,3.0},{1.0,2.0,4.0}});"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,782,"assertEquals(expected, m);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,784,"m.setSubMatrix(testDataPlus2,0,0);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,785,expected = MatrixUtils.createRealMatrix
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,786,"(new double[][] {{3.0,4.0,5.0},{4.0,7.0,5.0},{3.0,2.0,10.0}});"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,787,"assertEquals(expected, m);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,789,// dimension overflow
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,790,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,791,"m.setSubMatrix(testData,1,1);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,792,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,793,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,794,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,796,// dimension underflow
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,797,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,798,"m.setSubMatrix(testData,-1,1);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,799,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,800,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,801,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,803,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,804,"m.setSubMatrix(testData,1,-1);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,805,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,806,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,807,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,810,// null
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,811,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,812,"m.setSubMatrix(null,1,1);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,813,"fail(""expecting NullPointerException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,814,} catch (NullPointerException e) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,815,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,817,Array2DRowRealMatrix m2 = new Array2DRowRealMatrix();
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,818,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,819,"m2.setSubMatrix(testData,0,1);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,820,"fail(""expecting IllegalStateException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,821,} catch (IllegalStateException e) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,822,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,824,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,825,"m2.setSubMatrix(testData,1,0);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,826,"fail(""expecting IllegalStateException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,827,} catch (IllegalStateException e) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,828,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,831,// ragged
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,832,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,833,"m.setSubMatrix(new double[][] {{1}, {2, 3}}, 0, 0);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,834,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,835,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,836,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,839,// empty
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,840,try {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,841,"m.setSubMatrix(new double[][] {{}}, 0, 0);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,842,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,843,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,844,// expected
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,849,public void testWalk() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,850,int rows    = 150;
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,851,int columns = 75;
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,853,"RealMatrix m = new Array2DRowRealMatrix(rows, columns);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,854,m.walkInRowOrder(new SetVisitor());
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,855,GetVisitor getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,856,m.walkInOptimizedOrder(getVisitor);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,857,"assertEquals(rows * columns, getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,859,"m = new Array2DRowRealMatrix(rows, columns);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,860,"m.walkInRowOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,861,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,862,"m.walkInOptimizedOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,863,"assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,864,for (int i = 0; i < rows; ++i) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,865,"assertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,866,"assertEquals(0.0, m.getEntry(i, columns - 1), 0);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,868,for (int j = 0; j < columns; ++j) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,869,"assertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,870,"assertEquals(0.0, m.getEntry(rows - 1, j), 0);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,873,"m = new Array2DRowRealMatrix(rows, columns);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,874,m.walkInColumnOrder(new SetVisitor());
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,875,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,876,m.walkInOptimizedOrder(getVisitor);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,877,"assertEquals(rows * columns, getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,879,"m = new Array2DRowRealMatrix(rows, columns);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,880,"m.walkInColumnOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,881,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,882,"m.walkInOptimizedOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,883,"assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,884,for (int i = 0; i < rows; ++i) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,885,"assertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,886,"assertEquals(0.0, m.getEntry(i, columns - 1), 0);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,888,for (int j = 0; j < columns; ++j) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,889,"assertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,890,"assertEquals(0.0, m.getEntry(rows - 1, j), 0);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,893,"m = new Array2DRowRealMatrix(rows, columns);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,894,m.walkInOptimizedOrder(new SetVisitor());
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,895,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,896,m.walkInRowOrder(getVisitor);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,897,"assertEquals(rows * columns, getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,899,"m = new Array2DRowRealMatrix(rows, columns);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,900,"m.walkInOptimizedOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,901,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,902,"m.walkInRowOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,903,"assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,904,for (int i = 0; i < rows; ++i) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,905,"assertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,906,"assertEquals(0.0, m.getEntry(i, columns - 1), 0);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,908,for (int j = 0; j < columns; ++j) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,909,"assertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,910,"assertEquals(0.0, m.getEntry(rows - 1, j), 0);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,913,"m = new Array2DRowRealMatrix(rows, columns);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,914,m.walkInOptimizedOrder(new SetVisitor());
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,915,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,916,m.walkInColumnOrder(getVisitor);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,917,"assertEquals(rows * columns, getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,919,"m = new Array2DRowRealMatrix(rows, columns);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,920,"m.walkInOptimizedOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,921,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,922,"m.walkInColumnOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,923,"assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,924,for (int i = 0; i < rows; ++i) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,925,"assertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,926,"assertEquals(0.0, m.getEntry(i, columns - 1), 0);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,928,for (int j = 0; j < columns; ++j) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,929,"assertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,930,"assertEquals(0.0, m.getEntry(rows - 1, j), 0);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,935,public void testSerial()  {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,936,Array2DRowRealMatrix m = new Array2DRowRealMatrix(testData);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,937,"assertEquals(m,TestUtils.serializeAndRecover(m));"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,941,private static class SetVisitor extends DefaultRealMatrixChangingVisitor {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,942,@Override
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,943,"public double visit(int i, int j, double value) {"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,944,return i + j / 1024.0;
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,948,private static class GetVisitor extends DefaultRealMatrixPreservingVisitor {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,949,private int count = 0;
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,950,@Override
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,951,"public void visit(int i, int j, double value) {"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,952,++count;
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,953,"assertEquals(i + j / 1024.0, value, 0.0);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,955,public int getCount() {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,956,return count;
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,960,//--------------- -----------------Protected methods
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,962,/** extracts the l  and u matrices from compact lu representation */
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,963,"protected void splitLU(RealMatrix lu, double[][] lowerData, double[][] upperData) throws InvalidMatrixException {"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,964,if (!lu.isSquare() || lowerData.length != lowerData[0].length || upperData.length != upperData[0].length ||
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,965,lowerData.length != upperData.length
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,966,|| lowerData.length != lu.getRowDimension()) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,967,"throw new InvalidMatrixException(""incorrect dimensions"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,969,int n = lu.getRowDimension();
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,970,for (int i = 0; i < n; i++) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,971,for (int j = 0; j < n; j++) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,972,if (j < i) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,973,"lowerData[i][j] = lu.getEntry(i, j);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,974,upperData[i][j] = 0d;
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,975,} else if (i == j) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,976,lowerData[i][j] = 1d;
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,977,"upperData[i][j] = lu.getEntry(i, j);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,978,} else {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,979,lowerData[i][j] = 0d;
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,980,"upperData[i][j] = lu.getEntry(i, j);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,986,/** Returns the result of applying the given row permutation to the matrix */
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,987,"protected RealMatrix permuteRows(RealMatrix matrix, int[] permutation) {"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,988,if (!matrix.isSquare() || matrix.getRowDimension() != permutation.length) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,989,"throw new IllegalArgumentException(""dimension mismatch"");"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,991,int n = matrix.getRowDimension();
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,992,int m = matrix.getColumnDimension();
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,993,double out[][] = new double[m][n];
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,994,for (int i = 0; i < n; i++) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,995,for (int j = 0; j < m; j++) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,996,"out[i][j] = matrix.getEntry(permutation[i], j);"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,999,return new Array2DRowRealMatrix(out);
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,1002,//    /** Useful for debugging */
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,1003,//    private void dumpMatrix(RealMatrix m) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,1004,//          for (int i = 0; i < m.getRowDimension(); i++) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,1005,"//              String os = """";"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,1006,//              for (int j = 0; j < m.getColumnDimension(); j++) {
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,1007,"//                  os += m.getEntry(i, j) + "" "";"
True,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,1009,//              System.out.println(os);
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,33, Test cases for the {@link FieldVectorImpl} class.
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,33,* Test cases for the {@link ArrayFieldVector} class.
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,37,ublic class FieldVectorImplTest extends TestCase {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,37,public class ArrayFieldVectorTest extends TestCase {
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,258,estSuite suite = new TestSuite(FieldVectorImplTest.class);
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,259,"uite.setName(""FieldVectorImpl<Fraction> Tests"");"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,258,TestSuite suite = new TestSuite(ArrayFieldVectorTest.class);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,259,"suite.setName(""ArrayFieldVector<Fraction> Tests"");"
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,265,ieldVectorImpl<Fraction> v0 = new FieldVectorImpl<Fraction>(FractionField.getInstance());
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,265,ArrayFieldVector<Fraction> v0 = new ArrayFieldVector<Fraction>(FractionField.getInstance());
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,268,"ieldVectorImpl<Fraction> v1 = new FieldVectorImpl<Fraction>(FractionField.getInstance(), 7);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,268,"ArrayFieldVector<Fraction> v1 = new ArrayFieldVector<Fraction>(FractionField.getInstance(), 7);"
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,272,"ieldVectorImpl<Fraction> v2 = new FieldVectorImpl<Fraction>(5, new Fraction(123, 100));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,272,"ArrayFieldVector<Fraction> v2 = new ArrayFieldVector<Fraction>(5, new Fraction(123, 100));"
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,276,ieldVectorImpl<Fraction> v3 = new FieldVectorImpl<Fraction>(vec1);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,276,ArrayFieldVector<Fraction> v3 = new ArrayFieldVector<Fraction>(vec1);
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,280,"ieldVectorImpl<Fraction> v4 = new FieldVectorImpl<Fraction>(vec4, 3, 2);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,280,"ArrayFieldVector<Fraction> v4 = new ArrayFieldVector<Fraction>(vec4, 3, 2);"
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,284,"ew FieldVectorImpl<Fraction>(vec4, 8, 3);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,284,"new ArrayFieldVector<Fraction>(vec4, 8, 3);"
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,292,ieldVector<Fraction> v5_i = new FieldVectorImpl<Fraction>(dvec1);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,292,FieldVector<Fraction> v5_i = new ArrayFieldVector<Fraction>(dvec1);
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,296,ieldVectorImpl<Fraction> v5 = new FieldVectorImpl<Fraction>(dvec1);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,296,ArrayFieldVector<Fraction> v5 = new ArrayFieldVector<Fraction>(dvec1);
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,300,"ieldVectorImpl<Fraction> v6 = new FieldVectorImpl<Fraction>(dvec1, 3, 2);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,300,"ArrayFieldVector<Fraction> v6 = new ArrayFieldVector<Fraction>(dvec1, 3, 2);"
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,304,"ew FieldVectorImpl<Fraction>(dvec1, 8, 3);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,304,"new ArrayFieldVector<Fraction>(dvec1, 8, 3);"
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,312,ieldVectorImpl<Fraction> v7 = new FieldVectorImpl<Fraction>(v1);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,312,ArrayFieldVector<Fraction> v7 = new ArrayFieldVector<Fraction>(v1);
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,318,ieldVectorImpl<Fraction> v7_2 = new FieldVectorImpl<Fraction>(v7_i);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,318,ArrayFieldVector<Fraction> v7_2 = new ArrayFieldVector<Fraction>(v7_i);
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,322,"ieldVectorImpl<Fraction> v8 = new FieldVectorImpl<Fraction>(v1, true);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,322,"ArrayFieldVector<Fraction> v8 = new ArrayFieldVector<Fraction>(v1, true);"
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,327,"ieldVectorImpl<Fraction> v8_2 = new FieldVectorImpl<Fraction>(v1, false);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,327,"ArrayFieldVector<Fraction> v8_2 = new ArrayFieldVector<Fraction>(v1, false);"
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,332,"ieldVectorImpl<Fraction> v9 = new FieldVectorImpl<Fraction>(v1, v3);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,332,"ArrayFieldVector<Fraction> v9 = new ArrayFieldVector<Fraction>(v1, v3);"
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,340,ieldVectorImpl<Fraction> v1 = new FieldVectorImpl<Fraction>(vec1);
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,341,ieldVectorImpl<Fraction> v2 = new FieldVectorImpl<Fraction>(vec2);
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,342,ieldVectorImpl<Fraction> v4 = new FieldVectorImpl<Fraction>(vec4);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,340,ArrayFieldVector<Fraction> v1 = new ArrayFieldVector<Fraction>(vec1);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,341,ArrayFieldVector<Fraction> v2 = new ArrayFieldVector<Fraction>(vec2);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,342,ArrayFieldVector<Fraction> v4 = new ArrayFieldVector<Fraction>(vec4);
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,370,/      FieldVectorImpl<Fraction> vout4 = (FieldVectorImpl<Fraction>) v1.clone();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,370,//      ArrayFieldVector<Fraction> vout4 = (ArrayFieldVector<Fraction>) v1.clone();
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,387,ieldVectorImpl<Fraction> v_set1 = (FieldVectorImpl<Fraction>) v1.copy();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,387,ArrayFieldVector<Fraction> v_set1 = (ArrayFieldVector<Fraction>) v1.copy();
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,399,ieldVectorImpl<Fraction> v_set2 = (FieldVectorImpl<Fraction>) v4.copy();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,399,ArrayFieldVector<Fraction> v_set2 = (ArrayFieldVector<Fraction>) v4.copy();
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,412,ieldVectorImpl<Fraction> v_set3 = (FieldVectorImpl<Fraction>) v1.copy();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,412,ArrayFieldVector<Fraction> v_set3 = (ArrayFieldVector<Fraction>) v1.copy();
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,425,ieldVectorImpl<Fraction> v_set4 = (FieldVectorImpl<Fraction>) v4.copy();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,425,ArrayFieldVector<Fraction> v_set4 = (ArrayFieldVector<Fraction>) v4.copy();
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,439,ieldVectorImpl<Fraction> vout10 = (FieldVectorImpl<Fraction>) v1.copy();
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,440,ieldVectorImpl<Fraction> vout10_2 = (FieldVectorImpl<Fraction>) v1.copy();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,439,ArrayFieldVector<Fraction> vout10 = (ArrayFieldVector<Fraction>) v1.copy();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,440,ArrayFieldVector<Fraction> vout10_2 = (ArrayFieldVector<Fraction>) v1.copy();
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,448,ieldVectorImpl<Fraction> v1 = new FieldVectorImpl<Fraction>(vec1);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,448,ArrayFieldVector<Fraction> v1 = new ArrayFieldVector<Fraction>(vec1);
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,508,ieldVectorImpl<Fraction> v1 = new FieldVectorImpl<Fraction>(vec1);
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,509,ieldVectorImpl<Fraction> v2 = new FieldVectorImpl<Fraction>(vec2);
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,510,ew FieldVectorImpl<Fraction>(vec_null);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,508,ArrayFieldVector<Fraction> v1 = new ArrayFieldVector<Fraction>(vec1);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,509,ArrayFieldVector<Fraction> v2 = new ArrayFieldVector<Fraction>(vec2);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,510,new ArrayFieldVector<Fraction>(vec_null);
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,515,ieldVectorImpl<Fraction> v_add = v1.add(v2);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,515,ArrayFieldVector<Fraction> v_add = v1.add(v2);
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,525,ieldVectorImpl<Fraction> v_subtract = v1.subtract(v2);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,525,ArrayFieldVector<Fraction> v_subtract = v1.subtract(v2);
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,534,ieldVectorImpl<Fraction>  v_ebeMultiply = v1.ebeMultiply(v2);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,534,ArrayFieldVector<Fraction>  v_ebeMultiply = v1.ebeMultiply(v2);
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,543,ieldVectorImpl<Fraction>  v_ebeDivide = v1.ebeDivide(v2);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,543,ArrayFieldVector<Fraction>  v_ebeDivide = v1.ebeDivide(v2);
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,565,ieldVectorImpl<Fraction> v_projection = v1.projection(v2);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,565,ArrayFieldVector<Fraction> v_projection = v1.projection(v2);
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,576,ieldVectorImpl<Fraction> v1 = new FieldVectorImpl<Fraction>(vec1);
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,577,ieldVectorImpl<Fraction> v4 = new FieldVectorImpl<Fraction>(vec4);
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,578,ieldVector<Fraction> v4_2 = new FieldVectorImpl<Fraction>(vec4);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,576,ArrayFieldVector<Fraction> v1 = new ArrayFieldVector<Fraction>(vec1);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,577,ArrayFieldVector<Fraction> v4 = new ArrayFieldVector<Fraction>(vec4);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,578,FieldVector<Fraction> v4_2 = new ArrayFieldVector<Fraction>(vec4);
False,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,617,ieldVectorImpl<Fraction> v = new FieldVectorImpl<Fraction>(vec1);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayFieldVectorTest.java,617,ArrayFieldVector<Fraction> v = new ArrayFieldVector<Fraction>(vec1);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,28, Test cases for the {@link RealVectorImpl} class.
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,28,* Test cases for the {@link ArrayRealVector} class.
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,32,ublic class RealVectorImplTest extends TestCase {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,32,public class ArrayRealVectorTest extends TestCase {
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,107,eturn new RealVectorImpl(out);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,107,return new ArrayRealVector(out);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,465,estSuite suite = new TestSuite(RealVectorImplTest.class);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,466,"uite.setName(""RealVectorImpl Tests"");"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,465,TestSuite suite = new TestSuite(ArrayRealVectorTest.class);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,466,"suite.setName(""ArrayRealVector Tests"");"
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,472,ealVectorImpl v0 = new RealVectorImpl();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,472,ArrayRealVector v0 = new ArrayRealVector();
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,475,ealVectorImpl v1 = new RealVectorImpl(7);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,475,ArrayRealVector v1 = new ArrayRealVector(7);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,479,"ealVectorImpl v2 = new RealVectorImpl(5, 1.23);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,479,"ArrayRealVector v2 = new ArrayRealVector(5, 1.23);"
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,483,ealVectorImpl v3 = new RealVectorImpl(vec1);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,483,ArrayRealVector v3 = new ArrayRealVector(vec1);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,487,"ealVectorImpl v4 = new RealVectorImpl(vec4, 3, 2);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,487,"ArrayRealVector v4 = new ArrayRealVector(vec4, 3, 2);"
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,491,"ew RealVectorImpl(vec4, 8, 3);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,491,"new ArrayRealVector(vec4, 8, 3);"
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,499,ealVector v5_i = new RealVectorImpl(dvec1);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,499,RealVector v5_i = new ArrayRealVector(dvec1);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,503,ealVectorImpl v5 = new RealVectorImpl(dvec1);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,503,ArrayRealVector v5 = new ArrayRealVector(dvec1);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,507,"ealVectorImpl v6 = new RealVectorImpl(dvec1, 3, 2);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,507,"ArrayRealVector v6 = new ArrayRealVector(dvec1, 3, 2);"
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,511,"ew RealVectorImpl(dvec1, 8, 3);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,511,"new ArrayRealVector(dvec1, 8, 3);"
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,519,ealVectorImpl v7 = new RealVectorImpl(v1);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,519,ArrayRealVector v7 = new ArrayRealVector(v1);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,525,ealVectorImpl v7_2 = new RealVectorImpl(v7_i);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,525,ArrayRealVector v7_2 = new ArrayRealVector(v7_i);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,529,"ealVectorImpl v8 = new RealVectorImpl(v1, true);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,529,"ArrayRealVector v8 = new ArrayRealVector(v1, true);"
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,534,"ealVectorImpl v8_2 = new RealVectorImpl(v1, false);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,534,"ArrayRealVector v8_2 = new ArrayRealVector(v1, false);"
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,539,"ealVectorImpl v9 = new RealVectorImpl(v1, v3);"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,539,"ArrayRealVector v9 = new ArrayRealVector(v1, v3);"
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,547,ealVectorImpl v1 = new RealVectorImpl(vec1);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,548,ealVectorImpl v2 = new RealVectorImpl(vec2);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,549,ealVectorImpl v4 = new RealVectorImpl(vec4);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,547,ArrayRealVector v1 = new ArrayRealVector(vec1);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,548,ArrayRealVector v2 = new ArrayRealVector(vec2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,549,ArrayRealVector v4 = new ArrayRealVector(vec4);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,577,/      RealVectorImpl vout4 = (RealVectorImpl) v1.clone();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,577,//      ArrayRealVector vout4 = (ArrayRealVector) v1.clone();
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,594,ealVectorImpl v_set1 = (RealVectorImpl) v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,594,ArrayRealVector v_set1 = (ArrayRealVector) v1.copy();
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,606,ealVectorImpl v_set2 = (RealVectorImpl) v4.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,606,ArrayRealVector v_set2 = (ArrayRealVector) v4.copy();
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,619,ealVectorImpl v_set3 = (RealVectorImpl) v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,619,ArrayRealVector v_set3 = (ArrayRealVector) v1.copy();
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,632,ealVectorImpl v_set4 = (RealVectorImpl) v4.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,632,ArrayRealVector v_set4 = (ArrayRealVector) v4.copy();
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,646,ealVectorImpl vout10 = (RealVectorImpl) v1.copy();
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,647,ealVectorImpl vout10_2 = (RealVectorImpl) v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,646,ArrayRealVector vout10 = (ArrayRealVector) v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,647,ArrayRealVector vout10_2 = (ArrayRealVector) v1.copy();
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,655,ealVectorImpl v1 = new RealVectorImpl(vec1);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,655,ArrayRealVector v1 = new ArrayRealVector(vec1);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,835,ealVectorImpl vat = new RealVectorImpl(vat_a);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,835,ArrayRealVector vat = new ArrayRealVector(vat_a);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,882,ealVectorImpl abs_v = new RealVectorImpl(abs_a);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,882,ArrayRealVector abs_v = new ArrayRealVector(abs_a);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,907,ealVectorImpl cbrt_v = new RealVectorImpl(cbrt_a);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,907,ArrayRealVector cbrt_v = new ArrayRealVector(cbrt_a);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,921,ealVectorImpl ceil_v = new RealVectorImpl(ceil_a);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,921,ArrayRealVector ceil_v = new ArrayRealVector(ceil_a);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,983,ealVectorImpl v1 = new RealVectorImpl(vec1);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,984,ealVectorImpl v2 = new RealVectorImpl(vec2);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,985,ealVectorImpl v_null = new RealVectorImpl(vec_null);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,983,ArrayRealVector v1 = new ArrayRealVector(vec1);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,984,ArrayRealVector v2 = new ArrayRealVector(vec2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,985,ArrayRealVector v_null = new ArrayRealVector(vec_null);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1022,ealVectorImpl v_add = v1.add(v2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1022,ArrayRealVector v_add = v1.add(v2);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1032,ealVectorImpl v_subtract = v1.subtract(v2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1032,ArrayRealVector v_subtract = v1.subtract(v2);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1041,ealVectorImpl  v_ebeMultiply = v1.ebeMultiply(v2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1041,ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1050,ealVectorImpl  v_ebeDivide = v1.ebeDivide(v2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1050,ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1085,ealVectorImpl v_unitize = (RealVectorImpl)v1.copy();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1085,ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1097,ealVectorImpl v_projection = v1.projection(v2);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1097,ArrayRealVector v_projection = v1.projection(v2);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1108,ealVectorImpl v1 = new RealVectorImpl(vec1);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1109,ealVectorImpl v4 = new RealVectorImpl(vec4);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1110,ealVector v4_2 = new RealVectorImpl(vec4);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1108,ArrayRealVector v1 = new ArrayRealVector(vec1);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1109,ArrayRealVector v4 = new ArrayRealVector(vec4);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1110,RealVector v4_2 = new ArrayRealVector(vec4);
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1150,"ealVectorImpl v = new RealVectorImpl(new double[] { 0, 1, 2 });"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1150,"ArrayRealVector v = new ArrayRealVector(new double[] { 0, 1, 2 });"
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1163,"ssertEquals(v, new RealVectorImpl(new double[] { 0, 1, 2 }));"
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1164,"ssertNotSame(v, new RealVectorImpl(new double[] { 0, 1, 2 + Math.ulp(2)}));"
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1165,"ssertNotSame(v, new RealVectorImpl(new double[] { 0, 1, 2, 3 }));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1163,"assertEquals(v, new ArrayRealVector(new double[] { 0, 1, 2 }));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1164,"assertNotSame(v, new ArrayRealVector(new double[] { 0, 1, 2 + Math.ulp(2)}));"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1165,"assertNotSame(v, new ArrayRealVector(new double[] { 0, 1, 2, 3 }));"
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1167,"ssertEquals(new RealVectorImpl(new double[] { Double.NaN, 1, 2 }).hashCode(),"
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1168,"ew RealVectorImpl(new double[] { 0, Double.NaN, 2 }).hashCode());"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1167,"assertEquals(new ArrayRealVector(new double[] { Double.NaN, 1, 2 }).hashCode(),"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1168,"new ArrayRealVector(new double[] { 0, Double.NaN, 2 }).hashCode());"
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1170,"ssertTrue(new RealVectorImpl(new double[] { Double.NaN, 1, 2 }).hashCode() !="
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1171,"ew RealVectorImpl(new double[] { 0, 1, 2 }).hashCode());"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1170,"assertTrue(new ArrayRealVector(new double[] { Double.NaN, 1, 2 }).hashCode() !="
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1171,"new ArrayRealVector(new double[] { 0, 1, 2 }).hashCode());"
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1176,"ealVectorImpl v = new RealVectorImpl(new double[] { 0, 1, 2 });"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java,1176,"ArrayRealVector v = new ArrayRealVector(new double[] { 0, 1, 2 });"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,36,ublic final class DenseFieldMatrixTest extends TestCase {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,36,public final class BlockFieldMatrixTest extends TestCase {
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,155,ublic DenseFieldMatrixTest(String name) {
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,155,public BlockFieldMatrixTest(String name) {
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,160,estSuite suite = new TestSuite(DenseFieldMatrixTest.class);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,160,TestSuite suite = new TestSuite(BlockFieldMatrixTest.class);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,375,"estUtils.assertEquals(testVector, m.operate(new FieldVectorImpl<Fraction>(testVector)).getData());"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,375,"TestUtils.assertEquals(testVector, m.operate(new ArrayFieldVector<Fraction>(testVector)).getData());"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,440,"estUtils.assertEquals(m.preMultiply(new FieldVectorImpl<Fraction>(testVector).getData()),"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,440,"TestUtils.assertEquals(m.preMultiply(new ArrayFieldVector<Fraction>(testVector).getData()),"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,804,ieldVector<Fraction> mRow0 = new FieldVectorImpl<Fraction>(subRow0[0]);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,805,ieldVector<Fraction> mRow3 = new FieldVectorImpl<Fraction>(subRow3[0]);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,804,FieldVector<Fraction> mRow0 = new ArrayFieldVector<Fraction>(subRow0[0]);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,805,FieldVector<Fraction> mRow3 = new ArrayFieldVector<Fraction>(subRow3[0]);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,824,ieldVector<Fraction> mRow3 = new FieldVectorImpl<Fraction>(subRow3[0]);
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,824,FieldVector<Fraction> mRow3 = new ArrayFieldVector<Fraction>(subRow3[0]);
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,835,".setRowVector(0, new FieldVectorImpl<Fraction>(FractionField.getInstance(), 5));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,835,"m.setRowVector(0, new ArrayFieldVector<Fraction>(FractionField.getInstance(), 5));"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,845,"ieldVector<Fraction> sub = new FieldVectorImpl<Fraction>(n, new Fraction(1));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,845,"FieldVector<Fraction> sub = new ArrayFieldVector<Fraction>(n, new Fraction(1));"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,894,".setColumnVector(0, new FieldVectorImpl<Fraction>(FractionField.getInstance(), 5));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,894,"m.setColumnVector(0, new ArrayFieldVector<Fraction>(FractionField.getInstance(), 5));"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,904,"ieldVector<Fraction> sub = new FieldVectorImpl<Fraction>(n, new Fraction(1));"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,904,"FieldVector<Fraction> sub = new ArrayFieldVector<Fraction>(n, new Fraction(1));"
False,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,925,"eturn new FieldVectorImpl<Fraction>(data, false);"
True,src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java,925,"return new ArrayFieldVector<Fraction>(data, false);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,34,ublic final class DenseRealMatrixTest extends TestCase {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,34,public final class BlockRealMatrixTest extends TestCase {
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,96,ublic DenseRealMatrixTest(String name) {
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,96,public BlockRealMatrixTest(String name) {
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,101,estSuite suite = new TestSuite(DenseRealMatrixTest.class);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,101,TestSuite suite = new TestSuite(BlockRealMatrixTest.class);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,324,"ssertClose(testVector, m.operate(new RealVectorImpl(testVector)).getData(), entryTolerance);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,324,"assertClose(testVector, m.operate(new ArrayRealVector(testVector)).getData(), entryTolerance);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,387,"ssertClose(m.preMultiply(new RealVectorImpl(testVector).getData()),"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,387,"assertClose(m.preMultiply(new ArrayRealVector(testVector).getData()),"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,725,ealVector mRow0 = new RealVectorImpl(subRow0[0]);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,726,ealVector mRow3 = new RealVectorImpl(subRow3[0]);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,725,RealVector mRow0 = new ArrayRealVector(subRow0[0]);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,726,RealVector mRow3 = new ArrayRealVector(subRow3[0]);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,745,ealVector mRow3 = new RealVectorImpl(subRow3[0]);
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,745,RealVector mRow3 = new ArrayRealVector(subRow3[0]);
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,756,".setRowVector(0, new RealVectorImpl(5));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,756,"m.setRowVector(0, new ArrayRealVector(5));"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,766,"ealVector sub = new RealVectorImpl(n, 1.0);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,766,"RealVector sub = new ArrayRealVector(n, 1.0);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,815,".setColumnVector(0, new RealVectorImpl(5));"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,815,"m.setColumnVector(0, new ArrayRealVector(5));"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,825,"ealVector sub = new RealVectorImpl(n, 1.0);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,825,"RealVector sub = new ArrayRealVector(n, 1.0);"
False,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,846,"eturn new RealVectorImpl(data, false);"
True,src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java,src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java,846,"return new ArrayRealVector(data, false);"
False,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,29,mport org.apache.commons.math.linear.RealVectorImpl;
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,29,import org.apache.commons.math.linear.ArrayRealVector;
False,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,73,olver.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,73,solver.solve(new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(0)));
False,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,107,"ew RealVectorImpl(solver.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,107,"new ArrayRealVector(solver.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,111,/ using RealVectorImpl
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,111,// using ArrayRealVector
False,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,120,ealVectorImplTest.RealVectorTestImpl v =
False,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,121,ew RealVectorImplTest.RealVectorTestImpl(b.getColumn(i));
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,120,ArrayRealVectorTest.RealVectorTestImpl v =
True,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,src/test/org/apache/commons/math/linear/CholeskySolverTest.java,121,new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(i));
False,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,31,mport org.apache.commons.math.linear.RealVectorImpl;
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,31,import org.apache.commons.math.linear.ArrayRealVector;
False,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,100,s.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,100,es.solve(new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(0)));
False,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,143,"ew RealVectorImpl(es.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,143,"new ArrayRealVector(es.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,147,/ using RealMatrixImpl
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,147,// using Array2DRowRealMatrix
False,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,156,ealVectorImplTest.RealVectorTestImpl v =
False,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,157,ew RealVectorImplTest.RealVectorTestImpl(b.getColumn(i));
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,156,ArrayRealVectorTest.RealVectorTestImpl v =
True,src/test/org/apache/commons/math/linear/EigenSolverTest.java,src/test/org/apache/commons/math/linear/EigenSolverTest.java,157,new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(i));
False,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,30,mport org.apache.commons.math.linear.FieldMatrixImpl;
True,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,30,import org.apache.commons.math.linear.Array2DRowFieldMatrix;
False,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,74,ieldMatrix<Fraction> matrix = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,74,FieldMatrix<Fraction> matrix = new Array2DRowFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,88,ew FieldLUDecompositionImpl<Fraction>(new FieldMatrixImpl<Fraction>(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,88,new FieldLUDecompositionImpl<Fraction>(new Array2DRowFieldMatrix<Fraction>(new Fraction[][] {
False,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,102,ieldMatrix<Fraction> matrix = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,102,FieldMatrix<Fraction> matrix = new Array2DRowFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,109,atrix = new FieldMatrixImpl<Fraction>(testDataMinus);
True,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,109,matrix = new Array2DRowFieldMatrix<Fraction>(testDataMinus);
False,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,116,"atrix = new FieldMatrixImpl<Fraction>(FractionField.getInstance(), 17, 17);"
True,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,116,"matrix = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), 17, 17);"
False,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,126,atrix = new FieldMatrixImpl<Fraction>(singular);
True,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,126,matrix = new Array2DRowFieldMatrix<Fraction>(singular);
False,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,133,atrix = new FieldMatrixImpl<Fraction>(bigSingular);
True,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,133,matrix = new Array2DRowFieldMatrix<Fraction>(bigSingular);
False,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,144,ieldMatrix<Fraction> matrix = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,144,FieldMatrix<Fraction> matrix = new Array2DRowFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,156,ieldMatrix<Fraction> matrix = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,156,FieldMatrix<Fraction> matrix = new Array2DRowFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,167,ieldMatrix<Fraction> matrix = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,167,FieldMatrix<Fraction> matrix = new Array2DRowFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,172,"ew FieldMatrixImpl<Fraction>(FractionField.getInstance(),"
True,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,172,"new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),"
False,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,223,ew FieldLUDecompositionImpl<Fraction>(new FieldMatrixImpl<Fraction>(testData));
True,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,223,new FieldLUDecompositionImpl<Fraction>(new Array2DRowFieldMatrix<Fraction>(testData));
False,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,225,u = new FieldLUDecompositionImpl<Fraction>(new FieldMatrixImpl<Fraction>(singular));
True,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,225,lu = new FieldLUDecompositionImpl<Fraction>(new Array2DRowFieldMatrix<Fraction>(singular));
False,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,227,u = new FieldLUDecompositionImpl<Fraction>(new FieldMatrixImpl<Fraction>(bigSingular));
True,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,227,lu = new FieldLUDecompositionImpl<Fraction>(new Array2DRowFieldMatrix<Fraction>(bigSingular));
False,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,234,ew FieldLUDecompositionImpl<Fraction>(new FieldMatrixImpl<Fraction>(testData));
False,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,235,ieldMatrix<Fraction> lRef = new FieldMatrixImpl<Fraction>(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,234,new FieldLUDecompositionImpl<Fraction>(new Array2DRowFieldMatrix<Fraction>(testData));
True,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,235,FieldMatrix<Fraction> lRef = new Array2DRowFieldMatrix<Fraction>(new Fraction[][] {
False,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,240,ieldMatrix<Fraction> uRef = new FieldMatrixImpl<Fraction>(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,240,FieldMatrix<Fraction> uRef = new Array2DRowFieldMatrix<Fraction>(new Fraction[][] {
False,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,245,ieldMatrix<Fraction> pRef = new FieldMatrixImpl<Fraction>(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,245,FieldMatrix<Fraction> pRef = new Array2DRowFieldMatrix<Fraction>(new Fraction[][] {
False,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,274,ew FieldLUDecompositionImpl<Fraction>(new FieldMatrixImpl<Fraction>(luData));
False,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,275,ieldMatrix<Fraction> lRef = new FieldMatrixImpl<Fraction>(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,274,new FieldLUDecompositionImpl<Fraction>(new Array2DRowFieldMatrix<Fraction>(luData));
True,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,275,FieldMatrix<Fraction> lRef = new Array2DRowFieldMatrix<Fraction>(new Fraction[][] {
False,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,280,ieldMatrix<Fraction> uRef = new FieldMatrixImpl<Fraction>(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,280,FieldMatrix<Fraction> uRef = new Array2DRowFieldMatrix<Fraction>(new Fraction[][] {
False,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,285,ieldMatrix<Fraction> pRef = new FieldMatrixImpl<Fraction>(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java,285,FieldMatrix<Fraction> pRef = new Array2DRowFieldMatrix<Fraction>(new Fraction[][] {
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,28, Test cases for the {@link FieldMatrixImpl} class.
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,28,* Test cases for the {@link Array2DRowFieldMatrix} class.
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,101,"uite.setName(""FieldMatrixImpl<Fraction> Tests"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,101,"suite.setName(""Array2DRowFieldMatrix<Fraction> Tests"");"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,107,ieldMatrixImpl<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,108,ieldMatrixImpl<Fraction> m2 = new FieldMatrixImpl<Fraction>(testData2);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,107,Array2DRowFieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,108,Array2DRowFieldMatrix<Fraction> m2 = new Array2DRowFieldMatrix<Fraction>(testData2);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,119,ieldMatrixImpl<Fraction> m1 = new FieldMatrixImpl<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,120,ieldMatrixImpl<Fraction> m2 = new FieldMatrixImpl<Fraction>(m1.getData());
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,119,Array2DRowFieldMatrix<Fraction> m1 = new Array2DRowFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,120,Array2DRowFieldMatrix<Fraction> m2 = new Array2DRowFieldMatrix<Fraction>(m1.getData());
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,122,ieldMatrixImpl<Fraction> m3 = new FieldMatrixImpl<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,123,"ieldMatrixImpl<Fraction> m4 = new FieldMatrixImpl<Fraction>(m3.getData(), false);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,122,Array2DRowFieldMatrix<Fraction> m3 = new Array2DRowFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,123,"Array2DRowFieldMatrix<Fraction> m4 = new Array2DRowFieldMatrix<Fraction>(m3.getData(), false);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,129,ieldMatrixImpl<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,130,ieldMatrixImpl<Fraction> mInv = new FieldMatrixImpl<Fraction>(testDataInv);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,129,Array2DRowFieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,130,Array2DRowFieldMatrix<Fraction> mInv = new Array2DRowFieldMatrix<Fraction>(testDataInv);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,142,ieldMatrixImpl<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,143,ieldMatrixImpl<Fraction> m2 = new FieldMatrixImpl<Fraction>(testData2);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,142,Array2DRowFieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,143,Array2DRowFieldMatrix<Fraction> m2 = new Array2DRowFieldMatrix<Fraction>(testData2);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,154,ieldMatrixImpl<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,155,ieldMatrixImpl<Fraction> m2 = new FieldMatrixImpl<Fraction>(testDataInv);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,154,Array2DRowFieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,155,Array2DRowFieldMatrix<Fraction> m2 = new Array2DRowFieldMatrix<Fraction>(testDataInv);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,158,.subtract(new FieldMatrixImpl<Fraction>(testData2));
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,158,m.subtract(new Array2DRowFieldMatrix<Fraction>(testData2));
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,167,ieldMatrixImpl<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,168,ieldMatrixImpl<Fraction> mInv = new FieldMatrixImpl<Fraction>(testDataInv);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,169,ieldMatrixImpl<Fraction> identity = new FieldMatrixImpl<Fraction>(id);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,170,ieldMatrixImpl<Fraction> m2 = new FieldMatrixImpl<Fraction>(testData2);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,167,Array2DRowFieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,168,Array2DRowFieldMatrix<Fraction> mInv = new Array2DRowFieldMatrix<Fraction>(testDataInv);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,169,Array2DRowFieldMatrix<Fraction> identity = new Array2DRowFieldMatrix<Fraction>(id);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,170,Array2DRowFieldMatrix<Fraction> m2 = new Array2DRowFieldMatrix<Fraction>(testData2);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,177,.multiply(new FieldMatrixImpl<Fraction>(bigSingular));
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,177,m.multiply(new Array2DRowFieldMatrix<Fraction>(bigSingular));
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,184,/Additional Test for FieldMatrixImpl<Fraction>Test.testMultiply
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,184,//Additional Test for Array2DRowFieldMatrix<Fraction>Test.testMultiply
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,191,ieldMatrix<Fraction> m3 = new FieldMatrixImpl<Fraction>(d3);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,192,ieldMatrix<Fraction> m4 = new FieldMatrixImpl<Fraction>(d4);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,193,ieldMatrix<Fraction> m5 = new FieldMatrixImpl<Fraction>(d5);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,191,FieldMatrix<Fraction> m3 = new Array2DRowFieldMatrix<Fraction>(d3);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,192,FieldMatrix<Fraction> m4 = new Array2DRowFieldMatrix<Fraction>(d4);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,193,FieldMatrix<Fraction> m5 = new Array2DRowFieldMatrix<Fraction>(d5);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,199,ieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(id);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,199,FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(id);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,201, = new FieldMatrixImpl<Fraction>(testData2);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,201,m = new Array2DRowFieldMatrix<Fraction>(testData2);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,212,ieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,213,"estUtils.assertEquals(new FieldMatrixImpl<Fraction>(testDataPlus2), m.scalarAdd(new Fraction(2)));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,212,FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,213,"TestUtils.assertEquals(new Array2DRowFieldMatrix<Fraction>(testDataPlus2), m.scalarAdd(new Fraction(2)));"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,218,ieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(id);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,218,FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(id);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,220,"estUtils.assertEquals(testVector, m.operate(new FieldVectorImpl<Fraction>(testVector)).getData());"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,221, = new FieldMatrixImpl<Fraction>(bigSingular);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,220,"TestUtils.assertEquals(testVector, m.operate(new ArrayFieldVector<Fraction>(testVector)).getData());"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,221,m = new Array2DRowFieldMatrix<Fraction>(bigSingular);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,232,ieldMatrix<Fraction> a = new FieldMatrixImpl<Fraction>(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,232,FieldMatrix<Fraction> a = new Array2DRowFieldMatrix<Fraction>(new Fraction[][] {
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,244,ieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,244,FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,248, = new FieldMatrixImpl<Fraction>(testData2);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,249,ieldMatrix<Fraction> mt = new FieldMatrixImpl<Fraction>(testData2T);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,248,m = new Array2DRowFieldMatrix<Fraction>(testData2);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,249,FieldMatrix<Fraction> mt = new Array2DRowFieldMatrix<Fraction>(testData2T);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,255,ieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,255,FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,257,"estUtils.assertEquals(m.preMultiply(new FieldVectorImpl<Fraction>(testVector).getData()),"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,257,"TestUtils.assertEquals(m.preMultiply(new ArrayFieldVector<Fraction>(testVector).getData()),"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,259, = new FieldMatrixImpl<Fraction>(bigSingular);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,259,m = new Array2DRowFieldMatrix<Fraction>(bigSingular);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,269,ieldMatrix<Fraction> m3 = new FieldMatrixImpl<Fraction>(d3);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,270,ieldMatrix<Fraction> m4 = new FieldMatrixImpl<Fraction>(d4);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,271,ieldMatrix<Fraction> m5 = new FieldMatrixImpl<Fraction>(d5);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,269,FieldMatrix<Fraction> m3 = new Array2DRowFieldMatrix<Fraction>(d3);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,270,FieldMatrix<Fraction> m4 = new Array2DRowFieldMatrix<Fraction>(d4);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,271,FieldMatrix<Fraction> m5 = new Array2DRowFieldMatrix<Fraction>(d5);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,274,ieldMatrixImpl<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,275,ieldMatrixImpl<Fraction> mInv = new FieldMatrixImpl<Fraction>(testDataInv);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,276,ieldMatrixImpl<Fraction> identity = new FieldMatrixImpl<Fraction>(id);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,274,Array2DRowFieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,275,Array2DRowFieldMatrix<Fraction> mInv = new Array2DRowFieldMatrix<Fraction>(testDataInv);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,276,Array2DRowFieldMatrix<Fraction> identity = new Array2DRowFieldMatrix<Fraction>(id);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,282,.preMultiply(new FieldMatrixImpl<Fraction>(bigSingular));
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,282,m.preMultiply(new Array2DRowFieldMatrix<Fraction>(bigSingular));
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,290,ieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,290,FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,308,ieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,308,FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,325,ieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(matrixData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,325,FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(matrixData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,332,ieldMatrix<Fraction> n = new FieldMatrixImpl<Fraction>(matrixData2);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,332,FieldMatrix<Fraction> n = new Array2DRowFieldMatrix<Fraction>(matrixData2);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,348,ieldMatrix<Fraction> coefficients = new FieldMatrixImpl<Fraction>(coefficientsData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,348,FieldMatrix<Fraction> coefficients = new Array2DRowFieldMatrix<Fraction>(coefficientsData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,365,ieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,365,FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,388,"ssertEquals(new FieldMatrixImpl<Fraction>(reference), sub);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,388,"assertEquals(new Array2DRowFieldMatrix<Fraction>(reference), sub);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,404,"ssertEquals(new FieldMatrixImpl<Fraction>(reference), sub);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,404,"assertEquals(new Array2DRowFieldMatrix<Fraction>(reference), sub);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,416,ieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,416,FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,443,"ssertEquals(new FieldMatrixImpl<Fraction>(reference), new FieldMatrixImpl<Fraction>(sub));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,443,"assertEquals(new Array2DRowFieldMatrix<Fraction>(reference), new Array2DRowFieldMatrix<Fraction>(sub));"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,462,"ssertEquals(new FieldMatrixImpl<Fraction>(reference), new FieldMatrixImpl<Fraction>(sub));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,462,"assertEquals(new Array2DRowFieldMatrix<Fraction>(reference), new Array2DRowFieldMatrix<Fraction>(sub));"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,474,ieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,475,ieldMatrix<Fraction> mRow0 = new FieldMatrixImpl<Fraction>(subRow0);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,476,ieldMatrix<Fraction> mRow3 = new FieldMatrixImpl<Fraction>(subRow3);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,474,FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,475,FieldMatrix<Fraction> mRow0 = new Array2DRowFieldMatrix<Fraction>(subRow0);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,476,FieldMatrix<Fraction> mRow3 = new Array2DRowFieldMatrix<Fraction>(subRow3);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,496,ieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,497,ieldMatrix<Fraction> mRow3 = new FieldMatrixImpl<Fraction>(subRow3);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,496,FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,497,FieldMatrix<Fraction> mRow3 = new Array2DRowFieldMatrix<Fraction>(subRow3);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,516,ieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,517,ieldMatrix<Fraction> mColumn1 = new FieldMatrixImpl<Fraction>(subColumn1);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,518,ieldMatrix<Fraction> mColumn3 = new FieldMatrixImpl<Fraction>(subColumn3);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,516,FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,517,FieldMatrix<Fraction> mColumn1 = new Array2DRowFieldMatrix<Fraction>(subColumn1);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,518,FieldMatrix<Fraction> mColumn3 = new Array2DRowFieldMatrix<Fraction>(subColumn3);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,538,ieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,539,ieldMatrix<Fraction> mColumn3 = new FieldMatrixImpl<Fraction>(subColumn3);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,538,FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,539,FieldMatrix<Fraction> mColumn3 = new Array2DRowFieldMatrix<Fraction>(subColumn3);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,558,ieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,559,ieldVector<Fraction> mRow0 = new FieldVectorImpl<Fraction>(subRow0[0]);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,560,ieldVector<Fraction> mRow3 = new FieldVectorImpl<Fraction>(subRow3[0]);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,558,FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,559,FieldVector<Fraction> mRow0 = new ArrayFieldVector<Fraction>(subRow0[0]);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,560,FieldVector<Fraction> mRow3 = new ArrayFieldVector<Fraction>(subRow3[0]);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,578,ieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,579,ieldVector<Fraction> mRow3 = new FieldVectorImpl<Fraction>(subRow3[0]);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,578,FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,579,FieldVector<Fraction> mRow3 = new ArrayFieldVector<Fraction>(subRow3[0]);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,590,".setRowVector(0, new FieldVectorImpl<Fraction>(FractionField.getInstance(), 5));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,590,"m.setRowVector(0, new ArrayFieldVector<Fraction>(FractionField.getInstance(), 5));"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,598,ieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,598,FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,618,ieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,618,FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,630,".setColumnVector(0, new FieldVectorImpl<Fraction>(FractionField.getInstance(), 5));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,630,"m.setColumnVector(0, new ArrayFieldVector<Fraction>(FractionField.getInstance(), 5));"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,642,"eturn new FieldVectorImpl<Fraction>(data, false);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,642,"return new ArrayFieldVector<Fraction>(data, false);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,646,ieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,646,FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,664,ieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,664,FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,683,ieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,683,FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,703,ieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,703,FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(subTestData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,738,ieldMatrixImpl<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,739,ieldMatrixImpl<Fraction> m1 = (FieldMatrixImpl<Fraction>) m.copy();
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,740,ieldMatrixImpl<Fraction> mt = (FieldMatrixImpl<Fraction>) m.transpose();
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,738,Array2DRowFieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,739,Array2DRowFieldMatrix<Fraction> m1 = (Array2DRowFieldMatrix<Fraction>) m.copy();
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,740,Array2DRowFieldMatrix<Fraction> mt = (Array2DRowFieldMatrix<Fraction>) m.transpose();
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,747,ssertFalse(m.equals(new FieldMatrixImpl<Fraction>(bigSingular)));
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,747,assertFalse(m.equals(new Array2DRowFieldMatrix<Fraction>(bigSingular)));
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,751,ieldMatrixImpl<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,752,"ssertEquals(""FieldMatrixImpl{{1,2,3},{2,5,3},{1,0,8}}"", m.toString());"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,753, = new FieldMatrixImpl<Fraction>(FractionField.getInstance());
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,754,"ssertEquals(""FieldMatrixImpl{}"", m.toString());"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,751,Array2DRowFieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,752,"assertEquals(""Array2DRowFieldMatrix{{1,2,3},{2,5,3},{1,0,8}}"", m.toString());"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,753,m = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance());
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,754,"assertEquals(""Array2DRowFieldMatrix{}"", m.toString());"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,758,ieldMatrixImpl<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,758,Array2DRowFieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,760,ieldMatrix<Fraction> expected = new FieldMatrixImpl<Fraction>
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,760,FieldMatrix<Fraction> expected = new Array2DRowFieldMatrix<Fraction>
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,769,xpected = new FieldMatrixImpl<Fraction>
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,769,expected = new Array2DRowFieldMatrix<Fraction>
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,778,xpected = new FieldMatrixImpl<Fraction>
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,778,expected = new Array2DRowFieldMatrix<Fraction>
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,814,ieldMatrixImpl<Fraction> m2 = new FieldMatrixImpl<Fraction>(FractionField.getInstance());
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,814,Array2DRowFieldMatrix<Fraction> m2 = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance());
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,851,"ew FieldMatrixImpl<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,851,"new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,857," = new FieldMatrixImpl<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,857,"m = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,871," = new FieldMatrixImpl<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,871,"m = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,877," = new FieldMatrixImpl<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,877,"m = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,891," = new FieldMatrixImpl<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,891,"m = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,897," = new FieldMatrixImpl<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,897,"m = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,911," = new FieldMatrixImpl<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,911,"m = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,917," = new FieldMatrixImpl<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,917,"m = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(), rows, columns);"
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,934,ieldMatrixImpl<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,934,Array2DRowFieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData);
False,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,1008,eturn new FieldMatrixImpl<Fraction>(out);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,1008,return new Array2DRowFieldMatrix<Fraction>(out);
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,29,mport org.apache.commons.math.linear.RealVectorImpl;
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,29,import org.apache.commons.math.linear.ArrayRealVector;
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,109,olver.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,109,solver.solve(new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(0)));
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,148,olver.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,148,solver.solve(new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(0)));
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,174,"ew RealVectorImpl(solver.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,174,"new ArrayRealVector(solver.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,178,/ using RealVectorImpl
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,178,// using ArrayRealVector
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,187,ealVectorImplTest.RealVectorTestImpl v =
False,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,188,ew RealVectorImplTest.RealVectorTestImpl(b.getColumn(i));
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,187,ArrayRealVectorTest.RealVectorTestImpl v =
True,src/test/org/apache/commons/math/linear/LUSolverTest.java,src/test/org/apache/commons/math/linear/LUSolverTest.java,188,new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(i));
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,100,"ssertEquals(new FieldMatrixImpl<Fraction>(asFraction(testData)),"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,100,"assertEquals(new Array2DRowFieldMatrix<Fraction>(asFraction(testData)),"
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,102,"ssertEquals(new FieldMatrixImpl<Fraction>(fractionColMatrix),"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,102,"assertEquals(new Array2DRowFieldMatrix<Fraction>(fractionColMatrix),"
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,175,ew FieldMatrixImpl<Fraction>(asFraction(rowMatrix)));
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,175,new Array2DRowFieldMatrix<Fraction>(asFraction(rowMatrix)));
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,177,ew FieldMatrixImpl<Fraction>(fractionRowMatrix));
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,177,new Array2DRowFieldMatrix<Fraction>(fractionRowMatrix));
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,233,ew FieldMatrixImpl<Fraction>(asFraction(colMatrix)));
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,233,new Array2DRowFieldMatrix<Fraction>(asFraction(colMatrix)));
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,235,ew FieldMatrixImpl<Fraction>(fractionColMatrix));
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,235,new Array2DRowFieldMatrix<Fraction>(fractionColMatrix));
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,332,"ieldMatrix<BigFraction> m = new FieldMatrixImpl<BigFraction>(bfData, false);"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,332,"FieldMatrix<BigFraction> m = new Array2DRowFieldMatrix<BigFraction>(bfData, false);"
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,334,"ealMatrix reference = new RealMatrixImpl(testData, false);"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,334,"RealMatrix reference = new Array2DRowRealMatrix(testData, false);"
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,344,"ieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(fData, false);"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,344,"FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(fData, false);"
False,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,346,"ealMatrix reference = new RealMatrixImpl(testData, false);"
True,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/org/apache/commons/math/linear/MatrixUtilsTest.java,346,"RealMatrix reference = new Array2DRowRealMatrix(testData, false);"
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,36,mport org.apache.commons.math.linear.RealVectorImpl;
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,36,import org.apache.commons.math.linear.ArrayRealVector;
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,171,inal double error = new RealVectorImpl(x).subtract(xRef.getColumnVector(i)).getNorm();
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,171,final double error = new ArrayRealVector(x).subtract(xRef.getColumnVector(i)).getNorm();
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,175,/ using RealVectorImpl
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,175,// using ArrayRealVector
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,184,ealVectorImplTest.RealVectorTestImpl v =
False,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,185,ew RealVectorImplTest.RealVectorTestImpl(b.getColumn(i));
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,184,ArrayRealVectorTest.RealVectorTestImpl v =
True,src/test/org/apache/commons/math/linear/QRSolverTest.java,src/test/org/apache/commons/math/linear/QRSolverTest.java,185,new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(i));
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,30,@Deprecated
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,245,".operate(new RealVectorImpl(testVector)).getData(), entryTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,245,"m.operate(new ArrayRealVector(testVector)).getData(), entryTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,283,"estUtils.assertEquals(""premultiply"", m.preMultiply(new RealVectorImpl(testVector).getData()),"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,283,"TestUtils.assertEquals(""premultiply"", m.preMultiply(new ArrayRealVector(testVector).getData()),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,572,ealVector mRow0 = new RealVectorImpl(subRow0[0]);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,573,ealVector mRow3 = new RealVectorImpl(subRow3[0]);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,572,RealVector mRow0 = new ArrayRealVector(subRow0[0]);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,573,RealVector mRow3 = new ArrayRealVector(subRow3[0]);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,592,ealVector mRow3 = new RealVectorImpl(subRow3[0]);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,592,RealVector mRow3 = new ArrayRealVector(subRow3[0]);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,603,".setRowVector(0, new RealVectorImpl(5));"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,603,"m.setRowVector(0, new ArrayRealVector(5));"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,643,".setColumnVector(0, new RealVectorImpl(5));"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,643,"m.setColumnVector(0, new ArrayRealVector(5));"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,655,"eturn new RealVectorImpl(data, false);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,655,"return new ArrayRealVector(data, false);"
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,47,"ealVectorImpl c = new RealVectorImpl(new double[] {1, 1, 1});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,47,"ArrayRealVector c = new ArrayRealVector(new double[] {1, 1, 1});"
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,54,"ealVectorImpl c = new RealVectorImpl(new double[] {1.23, 1.43, 1.63});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,54,"ArrayRealVector c = new ArrayRealVector(new double[] {1.23, 1.43, 1.63});"
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,65,"ealVectorImpl c = new RealVectorImpl(new double[] {1.2323, 1.4343, 1.6333});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,65,"ArrayRealVector c = new ArrayRealVector(new double[] {1.2323, 1.4343, 1.6333});"
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,76,"ealVectorImpl c = new RealVectorImpl(new double[] {-1.2323, 1.4343, 1.6333});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,76,"ArrayRealVector c = new ArrayRealVector(new double[] {-1.2323, 1.4343, 1.6333});"
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,87,"ealVectorImpl c = new RealVectorImpl(new double[] {1.2323, -1.4343, 1.6333});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,87,"ArrayRealVector c = new ArrayRealVector(new double[] {1.2323, -1.4343, 1.6333});"
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,98,"ealVectorImpl c = new RealVectorImpl(new double[] {1.2323, 1.4343, -1.6333});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,98,"ArrayRealVector c = new ArrayRealVector(new double[] {1.2323, 1.4343, -1.6333});"
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,109,"ealVectorImpl c = new RealVectorImpl(new double[] {1, 1, 1});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,109,"ArrayRealVector c = new ArrayRealVector(new double[] {1, 1, 1});"
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,119,"ealVectorImpl c = new RealVectorImpl(new double[] {232.222, -342.33, 432.444});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,119,"ArrayRealVector c = new ArrayRealVector(new double[] {232.222, -342.33, 432.444});"
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,132,"ealVectorImpl c = new RealVectorImpl(new double[] {Double.NaN, Double.NaN, Double.NaN});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,132,"ArrayRealVector c = new ArrayRealVector(new double[] {Double.NaN, Double.NaN, Double.NaN});"
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,139,ealVectorImpl c = new RealVectorImpl(new double[] {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,139,ArrayRealVector c = new ArrayRealVector(new double[] {
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,148,ealVectorImpl c = new RealVectorImpl(new double[] {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,148,ArrayRealVector c = new ArrayRealVector(new double[] {
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,158,"ealVectorImpl expected = new RealVectorImpl(new double[] {1, 1, 1});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,158,"ArrayRealVector expected = new ArrayRealVector(new double[] {1, 1, 1});"
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,160,ealVectorImpl actual = (RealVectorImpl) realVectorFormat.parseObject(source);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,160,ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,168,"ealVectorImpl expected = new RealVectorImpl(new double[] {1, 1, 1});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,168,"ArrayRealVector expected = new ArrayRealVector(new double[] {1, 1, 1});"
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,185,"ealVectorImpl expected = new RealVectorImpl(new double[] {1.23, 1.43, 1.63});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,185,"ArrayRealVector expected = new ArrayRealVector(new double[] {1.23, 1.43, 1.63});"
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,187,ealVectorImpl actual = (RealVectorImpl) realVectorFormat.parseObject(source);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,187,ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,200,"ealVectorImpl expected = new RealVectorImpl(new double[] {1.2323, 1.4343, 1.6333});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,200,"ArrayRealVector expected = new ArrayRealVector(new double[] {1.2323, 1.4343, 1.6333});"
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,202,ealVectorImpl actual = (RealVectorImpl) realVectorFormat.parseObject(source);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,202,ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,215,"ealVectorImpl expected = new RealVectorImpl(new double[] {-1.2323, 1.4343, 1.6333});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,215,"ArrayRealVector expected = new ArrayRealVector(new double[] {-1.2323, 1.4343, 1.6333});"
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,217,ealVectorImpl actual = (RealVectorImpl) realVectorFormat.parseObject(source);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,217,ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,230,"ealVectorImpl expected = new RealVectorImpl(new double[] {1.2323, -1.4343, 1.6333});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,230,"ArrayRealVector expected = new ArrayRealVector(new double[] {1.2323, -1.4343, 1.6333});"
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,232,ealVectorImpl actual = (RealVectorImpl) realVectorFormat.parseObject(source);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,232,ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,245,"ealVectorImpl expected = new RealVectorImpl(new double[] {1.2323, 1.4343, -1.6333});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,245,"ArrayRealVector expected = new ArrayRealVector(new double[] {1.2323, 1.4343, -1.6333});"
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,247,ealVectorImpl actual = (RealVectorImpl) realVectorFormat.parseObject(source);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,247,ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,260,"ealVectorImpl expected = new RealVectorImpl(new double[] {-1.2323, -1.4343, -1.6333});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,260,"ArrayRealVector expected = new ArrayRealVector(new double[] {-1.2323, -1.4343, -1.6333});"
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,262,ealVectorImpl actual = (RealVectorImpl) realVectorFormat.parseObject(source);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,262,ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,275,"ealVectorImpl expected = new RealVectorImpl(new double[] {0.0, -1.4343, 1.6333});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,275,"ArrayRealVector expected = new ArrayRealVector(new double[] {0.0, -1.4343, 1.6333});"
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,277,ealVectorImpl actual = (RealVectorImpl) realVectorFormat.parseObject(source);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,277,ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,290,"ealVectorImpl expected = new RealVectorImpl(new double[] {1.2323, 1.4343, 1.6333});"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,290,"ArrayRealVector expected = new ArrayRealVector(new double[] {1.2323, 1.4343, 1.6333});"
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,292,ealVectorImpl actual = (RealVectorImpl) realVectorFormatSquare.parseObject(source);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,292,ArrayRealVector actual = (ArrayRealVector) realVectorFormatSquare.parseObject(source);
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,302,ealVectorImpl actual = (RealVectorImpl) realVectorFormat.parseObject(source);
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,303,"ssertEquals(new RealVectorImpl(new double[] {Double.NaN, Double.NaN, Double.NaN}), actual);"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,302,ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,303,"assertEquals(new ArrayRealVector(new double[] {Double.NaN, Double.NaN, Double.NaN}), actual);"
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,312,ealVectorImpl actual = (RealVectorImpl)realVectorFormat.parseObject(source);
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,313,ssertEquals(new RealVectorImpl(new double[] {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,312,ArrayRealVector actual = (ArrayRealVector)realVectorFormat.parseObject(source);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,313,assertEquals(new ArrayRealVector(new double[] {
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,324,ealVectorImpl actual = (RealVectorImpl)realVectorFormat.parseObject(source);
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,325,ssertEquals(new RealVectorImpl(new double[] {
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,324,ArrayRealVector actual = (ArrayRealVector)realVectorFormat.parseObject(source);
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,325,assertEquals(new ArrayRealVector(new double[] {
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,344,ealVectorImpl parsed =
False,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,345,"RealVectorImpl) realVectorFormat.parseObject(""{0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0}"");"
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,344,ArrayRealVector parsed =
True,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,345,"(ArrayRealVector) realVectorFormat.parseObject(""{0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0}"");"
False,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,28,mport org.apache.commons.math.linear.RealVectorImpl;
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,28,import org.apache.commons.math.linear.ArrayRealVector;
False,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,72,olver.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,72,solver.solve(new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(0)));
False,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,115,olver.solve(new RealVectorImplTest.RealVectorTestImpl(b.getColumn(0)));
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,115,solver.solve(new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(0)));
False,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,142,"ew RealVectorImpl(solver.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),"
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,142,"new ArrayRealVector(solver.solve(b.getColumn(i))).subtract(xRef.getColumnVector(i)).getNorm(),"
False,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,146,/ using RealMatrixImpl
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,146,// using Array2DRowRealMatrix
False,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,155,ealVectorImplTest.RealVectorTestImpl v =
False,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,156,ew RealVectorImplTest.RealVectorTestImpl(b.getColumn(i));
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,155,ArrayRealVectorTest.RealVectorTestImpl v =
True,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/org/apache/commons/math/linear/SingularValueSolverTest.java,156,new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(i));
False,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,210,"ssertClose(""inverse multiply"", m.multiply(new FieldMatrixImpl<Fraction>(testDataInv)), identity,"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,210,"assertClose(""inverse multiply"", m.multiply(new Array2DRowFieldMatrix<Fraction>(testDataInv)), identity,"
False,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,228,/ Additional Test for RealMatrixImplTest.testMultiply
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,228,// Additional Test for Array2DRowRealMatrixTest.testMultiply
False,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,267,"ew FieldVectorImpl<Fraction>(testVector)).getData(), entryTolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,267,"new ArrayFieldVector<Fraction>(testVector)).getData(), entryTolerance);"
False,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,306,"ew FieldVectorImpl<Fraction>(testVector).getData()), preMultTest, normTolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,306,"new ArrayFieldVector<Fraction>(testVector).getData()), preMultTest, normTolerance);"
False,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,509,ieldVector<Fraction> mRow0 = new FieldVectorImpl<Fraction>(subRow0[0]);
False,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,510,ieldVector<Fraction> mRow3 = new FieldVectorImpl<Fraction>(subRow3[0]);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,509,FieldVector<Fraction> mRow0 = new ArrayFieldVector<Fraction>(subRow0[0]);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,510,FieldVector<Fraction> mRow3 = new ArrayFieldVector<Fraction>(subRow3[0]);
False,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,552,"eturn new FieldVectorImpl<Fraction>(data, false);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,552,"return new ArrayFieldVector<Fraction>(data, false);"
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,216,/ Additional Test for RealMatrixImplTest.testMultiply
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,216,// Additional Test for Array2DRowRealMatrixTest.testMultiply
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,255,"ew RealVectorImpl(testVector)).getData(), entryTolerance);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,255,"new ArrayRealVector(testVector)).getData(), entryTolerance);"
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,294,"ew RealVectorImpl(testVector).getData()), preMultTest, normTolerance);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,294,"new ArrayRealVector(testVector).getData()), preMultTest, normTolerance);"
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,497,ealVector mRow0 = new RealVectorImpl(subRow0[0]);
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,498,ealVector mRow3 = new RealVectorImpl(subRow3[0]);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,497,RealVector mRow0 = new ArrayRealVector(subRow0[0]);
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,498,RealVector mRow3 = new ArrayRealVector(subRow3[0]);
False,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,540,"eturn new RealVectorImpl(data, false);"
True,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java,540,"return new ArrayRealVector(data, false);"
False,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,26,mport org.apache.commons.math.linear.RealVectorImpl;
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,26,import org.apache.commons.math.linear.ArrayRealVector;
False,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,342,ealVector lhs = new RealVectorImpl(numCoefficients);
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,342,RealVector lhs = new ArrayRealVector(numCoefficients);
False,src/test/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/org/apache/commons/math/stat/correlation/CovarianceTest.java,21,mport org.apache.commons.math.linear.RealMatrixImpl;
True,src/test/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/org/apache/commons/math/stat/correlation/CovarianceTest.java,21,import org.apache.commons.math.linear.Array2DRowRealMatrix;
False,src/test/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/org/apache/commons/math/stat/correlation/CovarianceTest.java,173,"ealMatrix matrix = new RealMatrixImpl(new double[][] {{0},{1}});"
True,src/test/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/org/apache/commons/math/stat/correlation/CovarianceTest.java,173,"RealMatrix matrix = new Array2DRowRealMatrix(new double[][] {{0},{1}});"
False,src/test/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/org/apache/commons/math/stat/correlation/CovarianceTest.java,202,"ealMatrix repeatedColumns = new RealMatrixImpl(47, 3);"
True,src/test/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/org/apache/commons/math/stat/correlation/CovarianceTest.java,202,"RealMatrix repeatedColumns = new Array2DRowRealMatrix(47, 3);"
False,src/test/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/org/apache/commons/math/stat/correlation/CovarianceTest.java,234,eturn new RealMatrixImpl(matrixData);
True,src/test/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/org/apache/commons/math/stat/correlation/CovarianceTest.java,234,return new Array2DRowRealMatrix(matrixData);
False,src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,26,mport org.apache.commons.math.linear.RealMatrixImpl;
True,src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,26,import org.apache.commons.math.linear.Array2DRowRealMatrix;
False,src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,94,"ew RealMatrixImpl(regression.estimateRegressionParametersVariance(), false);"
True,src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,94,"new Array2DRowRealMatrix(regression.estimateRegressionParametersVariance(), false);"
False,src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,96,"ealMatrix referenceVariance = new RealMatrixImpl(s.length, s.length);"
True,src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,96,"RealMatrix referenceVariance = new Array2DRowRealMatrix(s.length, s.length);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,18,package org.apache.commons.math.geometry;
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,20,import java.lang.reflect.Field;
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,22,import org.apache.commons.math.geometry.RotationOrder;
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,24,import junit.framework.*;
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,26,public class RotationOrderTest
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,27,extends TestCase {
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,29,public RotationOrderTest(String name) {
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,30,super(name);
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,33,public void testName() {
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,35,RotationOrder[] orders = {
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,36,"RotationOrder.XYZ, RotationOrder.XZY, RotationOrder.YXZ,"
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,37,"RotationOrder.YZX, RotationOrder.ZXY, RotationOrder.ZYX,"
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,38,"RotationOrder.XYX, RotationOrder.XZX, RotationOrder.YXY,"
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,39,"RotationOrder.YZY, RotationOrder.ZXZ, RotationOrder.ZYZ"
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,42,for (int i = 0; i < orders.length; ++i) {
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,43,"assertEquals(getFieldName(orders[i]), orders[i].toString());"
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,48,private String getFieldName(RotationOrder order) {
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,49,try {
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,50,Field[] fields = RotationOrder.class.getFields();
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,51,for (int i = 0; i < fields.length; ++i) {
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,52,if (fields[i].get(null) == order) {
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,53,return fields[i].getName();
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,56,} catch (IllegalAccessException iae) {
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,57,// ignored
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,59,"return ""unknown"";"
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,62,public static Test suite() {
True,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,src/test/org/apache/commons/math/geometry/RotationOrderTest.java,63,return new TestSuite(RotationOrderTest.class);
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,83,"checkVector(new Rotation().getAxis(), Vector3D.plusI);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,87,public void testRevert() {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,88,"Rotation r = new Rotation(0.001, 0.36, 0.48, 0.8, true);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,89,Rotation reverted = r.revert();
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,90,"checkRotation(r.applyTo(reverted), 1, 0, 0, 0);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,91,"checkRotation(reverted.applyTo(r), 1, 0, 0, 0);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,92,"assertEquals(r.getAngle(), reverted.getAngle(), 1.0e-12);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,93,"assertEquals(-1, Vector3D.dotProduct(r.getAxis(), reverted.getAxis()), 1.0e-12);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,105,try {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,106,"new Rotation(u, new Vector3D());"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,107,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,108,} catch (ArithmeticException e) {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,109,} catch (Exception e) {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,110,"fail(""unexpected exception"");"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,134,double sqrt = Math.sqrt(2) / 2;
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,135,"r = new Rotation(Vector3D.plusI,  Vector3D.plusJ,"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,136,"new Vector3D(0.5, 0.5,  sqrt),"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,137,"new Vector3D(0.5, 0.5, -sqrt));"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,138,"checkRotation(r, sqrt, 0.5, 0.5, 0);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,140,"r = new Rotation(u1, u2, u1, Vector3D.crossProduct(u1, u2));"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,141,"checkRotation(r, sqrt, -sqrt, 0, 0);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,143,"checkRotation(new Rotation(u1, u2, u1, u2), 1, 0, 0, 0);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,145,try {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,146,"new Rotation(u1, u2, new Vector3D(), v2);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,147,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,148,} catch (ArithmeticException e) {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,149,} catch (Exception e) {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,150,"fail(""unexpected exception"");"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,158,try {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,159,new Rotation(new double[][] {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,160,"{ 0.0, 1.0, 0.0 },"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,161,"{ 1.0, 0.0, 0.0 }"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,162,"}, 1.0e-7);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,163,} catch (NotARotationMatrixException nrme) {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,164,// expected behavior
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,165,} catch (Exception e) {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,166,"fail(""wrong exception caught: "" + e.getMessage());"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,169,try {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,170,new Rotation(new double[][] {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,171,"{  0.445888,  0.797184, -0.407040 },"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,172,"{  0.821760, -0.184320,  0.539200 },"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,173,"{ -0.354816,  0.574912,  0.737280 }"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,174,"}, 1.0e-7);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,175,} catch (NotARotationMatrixException nrme) {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,176,// expected behavior
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,177,} catch (Exception e) {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,178,"fail(""wrong exception caught: "" + e.getMessage());"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,181,try {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,182,new Rotation(new double[][] {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,183,"{  0.4,  0.8, -0.4 },"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,184,"{ -0.4,  0.6,  0.7 },"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,185,"{  0.8, -0.2,  0.5 }"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,186,"}, 1.0e-15);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,187,} catch (NotARotationMatrixException nrme) {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,188,// expected behavior
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,189,} catch (Exception e) {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,190,"fail(""wrong exception caught: "" + e.getMessage());"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,193,checkRotation(new Rotation(new double[][] {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,194,"{  0.445888,  0.797184, -0.407040 },"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,195,"{ -0.354816,  0.574912,  0.737280 },"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,196,"{  0.821760, -0.184320,  0.539200 }"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,197,"}, 1.0e-10),"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,198,"0.8, 0.288, 0.384, 0.36);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,200,checkRotation(new Rotation(new double[][] {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,201,"{  0.539200,  0.737280,  0.407040 },"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,202,"{  0.184320, -0.574912,  0.797184 },"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,203,"{  0.821760, -0.354816, -0.445888 }"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,204,"}, 1.0e-10),"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,205,"0.36, 0.8, 0.288, 0.384);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,207,checkRotation(new Rotation(new double[][] {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,208,"{ -0.445888,  0.797184, -0.407040 },"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,209,"{  0.354816,  0.574912,  0.737280 },"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,210,"{  0.821760,  0.184320, -0.539200 }"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,211,"}, 1.0e-10),"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,212,"0.384, 0.36, 0.8, 0.288);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,214,checkRotation(new Rotation(new double[][] {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,215,"{ -0.539200,  0.737280,  0.407040 },"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,216,"{ -0.184320, -0.574912,  0.797184 },"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,217,"{  0.821760,  0.354816,  0.445888 }"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,218,"}, 1.0e-10),"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,219,"0.288, 0.384, 0.36, 0.8);"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,212,otationOrder[] EulerOrders = {
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,213,"otationOrder.XYX, RotationOrder.XZX, RotationOrder.YXY,"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,214,"otationOrder.YZY, RotationOrder.ZXZ, RotationOrder.ZYZ"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,221,"otation r = new Rotation(CardanOrders[i],"
False,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,222,"lpha1, alpha2, alpha3);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,317,"Rotation r = new Rotation(CardanOrders[i], alpha1, alpha2, alpha3);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,327,RotationOrder[] EulerOrders = {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,328,"RotationOrder.XYX, RotationOrder.XZX, RotationOrder.YXY,"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,329,"RotationOrder.YZY, RotationOrder.ZXZ, RotationOrder.ZYZ"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,349,public void testSingularities()
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,350,throws CardanEulerSingularityException {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,352,RotationOrder[] CardanOrders = {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,353,"RotationOrder.XYZ, RotationOrder.XZY, RotationOrder.YXZ,"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,354,"RotationOrder.YZX, RotationOrder.ZXY, RotationOrder.ZYX"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,357,"double[] singularCardanAngle = { Math.PI / 2, -Math.PI / 2 };"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,358,for (int i = 0; i < CardanOrders.length; ++i) {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,359,for (int j = 0; j < singularCardanAngle.length; ++j) {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,360,"Rotation r = new Rotation(CardanOrders[i], 0.1, singularCardanAngle[j], 0.3);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,361,try {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,362,r.getAngles(CardanOrders[i]);
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,363,"fail(""an exception should have been caught"");"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,364,} catch (CardanEulerSingularityException cese) {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,365,// expected behavior
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,366,} catch (Exception e) {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,367,"fail(""wrong exception caught: "" + e.getMessage());"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,372,RotationOrder[] EulerOrders = {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,373,"RotationOrder.XYX, RotationOrder.XZX, RotationOrder.YXY,"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,374,"RotationOrder.YZY, RotationOrder.ZXZ, RotationOrder.ZYZ"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,377,"double[] singularEulerAngle = { 0, Math.PI };"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,378,for (int i = 0; i < EulerOrders.length; ++i) {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,379,for (int j = 0; j < singularEulerAngle.length; ++j) {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,380,"Rotation r = new Rotation(EulerOrders[i], 0.1, singularEulerAngle[j], 0.3);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,381,try {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,382,r.getAngles(EulerOrders[i]);
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,383,"fail(""an exception should have been caught"");"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,384,} catch (CardanEulerSingularityException cese) {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,385,// expected behavior
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,386,} catch (Exception e) {
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,387,"fail(""wrong exception caught: "" + e.getMessage());"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,411,"r1 = new Rotation( 0.288,  0.384,  0.36,  0.8, false);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,412,"checkRotation(r1, -r1.getQ0(), -r1.getQ1(), -r1.getQ2(), -r1.getQ3());"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,497,"private void checkRotation(Rotation r, double q0, double q1, double q2, double q3) {"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,498,"Rotation reference = new Rotation(q0, q1, q2, q3, false);"
True,src/test/org/apache/commons/math/geometry/RotationTest.java,src/test/org/apache/commons/math/geometry/RotationTest.java,499,"assertEquals(0, r.applyInverseTo(reference).getAngle(), 1.0e-12);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,31,public void testConstructors() {
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,32,double r = Math.sqrt(2) /2;
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,33,"checkVector(new Vector3D(2, new Vector3D(Math.PI / 3, -Math.PI / 4)),"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,34,"r, r * Math.sqrt(3), -2 * r);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,35,"checkVector(new Vector3D(2, Vector3D.plusI,"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,36,"-3, Vector3D.minusK),"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,37,"2, 0, 3);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,38,"checkVector(new Vector3D(2, Vector3D.plusI,"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,39,"5, Vector3D.plusJ,"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,40,"-3, Vector3D.minusK),"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,41,"2, 5, 3);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,42,"checkVector(new Vector3D(2, Vector3D.plusI,"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,43,"5, Vector3D.plusJ,"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,44,"5, Vector3D.minusJ,"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,45,"-3, Vector3D.minusK),"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,46,"2, 0, 3);"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,49,"heckVector(v1, new Vector3D(4, 4, 4));"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,67,"checkVector(v1, 4, 4, 4);"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,51,"heckVector(v2.subtract(v1), new Vector3D(-7, -6, -5));"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,69,"checkVector(v2.subtract(v1), -7, -6, -5);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,70,"checkVector(v2.subtract(3, v1), -15, -14, -13);"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,59,"heckVector(v1, new Vector3D(-2, 0, 2));"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,78,"checkVector(v1, -2, 0, 2);"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,61,"heckVector(v2.add(v1), new Vector3D(-5, -2, 1));"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,80,"checkVector(v2.add(v1), -5, -2, 1);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,81,"checkVector(v2.add(3, v1), -9, -2, 5);"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,68,"heckVector(v, new Vector3D(3, 6, 9));"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,88,"checkVector(v, 3, 6, 9);"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,70,"heckVector(v.multiply(0.5), new Vector3D(1.5, 3, 4.5));"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,90,"checkVector(v.multiply(0.5), 1.5, 3, 4.5);"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,81,"heckVector(v3, new Vector3D(3, -10, -1));"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,101,"checkVector(v3, 3, -10, -1);"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,114,"rivate void checkVector(Vector3D v1, Vector3D v2) {"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,115,ssertTrue(v1.subtract(v2).getNorm() < 1.0e-12);
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,134,public void testNormalize() {
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,135,"assertEquals(1.0, new Vector3D(5, -4, 2).normalize().getNorm(), 1.0e-12);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,136,try {
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,137,new Vector3D().normalize();
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,138,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,139,} catch (ArithmeticException ae) {
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,140,// expected behavior
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,141,} catch (Exception e) {
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,142,"fail(""wrong exception caught: "" + e.getMessage());"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,146,public void testOrthogonal() {
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,147,"Vector3D v1 = new Vector3D(0.1, 2.5, 1.3);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,148,"assertEquals(0.0, Vector3D.dotProduct(v1, v1.orthogonal()), 1.0e-12);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,149,"Vector3D v2 = new Vector3D(2.3, -0.003, 7.6);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,150,"assertEquals(0.0, Vector3D.dotProduct(v2, v2.orthogonal()), 1.0e-12);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,151,"Vector3D v3 = new Vector3D(-1.7, 1.4, 0.2);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,152,"assertEquals(0.0, Vector3D.dotProduct(v3, v3.orthogonal()), 1.0e-12);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,153,try {
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,154,"new Vector3D(0, 0, 0).orthogonal();"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,155,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,156,} catch (ArithmeticException ae) {
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,157,// expected behavior
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,158,} catch (Exception e) {
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,159,"fail(""wrong exception caught: "" + e.getMessage());"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,163,public void testAngle() {
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,164,"assertEquals(0.22572612855273393616,"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,165,"Vector3D.angle(new Vector3D(1, 2, 3), new Vector3D(4, 5, 6)),"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,166,1.0e-12);
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,167,"assertEquals(7.98595620686106654517199e-8,"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,168,"Vector3D.angle(new Vector3D(1, 2, 3), new Vector3D(2, 4, 6.000001)),"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,169,1.0e-12);
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,170,"assertEquals(3.14159257373023116985197793156,"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,171,"Vector3D.angle(new Vector3D(1, 2, 3), new Vector3D(-2, -4, -6.000001)),"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,172,1.0e-12);
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,173,try {
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,174,"Vector3D.angle(new Vector3D(), Vector3D.plusI);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,175,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,176,} catch (ArithmeticException ae) {
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,177,// expected behavior
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,178,} catch (Exception e) {
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,179,"fail(""wrong exception caught: "" + e.getMessage());"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,183,"private void checkVector(Vector3D v, double x, double y, double z) {"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,184,"assertEquals(x, v.getX(), 1.0e-12);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,185,"assertEquals(y, v.getY(), 1.0e-12);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,186,"assertEquals(z, v.getZ(), 1.0e-12);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,19,mport org.apache.commons.math3.exception.NoDataException;
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,19,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,20,import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
False,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,21,mport org.apache.commons.math3.analysis.UnivariateFunction;
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,22,import org.apache.commons.math3.exception.NoDataException;
False,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,37,ublic class PolynomialFunctionNewtonForm implements UnivariateFunction {
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,38,public class PolynomialFunctionNewtonForm implements UnivariateDifferentiable {
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,98,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,99,public DerivativeStructure value(final DerivativeStructure t) {
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,100,"verifyInputArray(a, c);"
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,102,final int n = c.length;
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,103,"DerivativeStructure value = new DerivativeStructure(t.getFreeParameters(), t.getOrder(), a[n]);"
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,104,for (int i = n - 1; i >= 0; i--) {
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,105,value = t.subtract(c[i]).multiply(value).add(a[i]);
True,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java,108,return value;
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,19,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,131,* Test for derivatives.
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,133,@Test
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,134,public void testDerivative() {
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,136,// x^3 = 0 * [1] + 1 * [x] + 3 * [x(x-1)] + 1 * [x(x-1)(x-2)]
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,137,PolynomialFunctionNewtonForm p =
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,138,"new PolynomialFunctionNewtonForm(new double[] { 0, 1, 3, 1 },"
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,139,"new double[] { 0, 1, 2 });"
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,141,double eps = 2.0e-14;
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,142,for (double t = 0.0; t < 10.0; t += 0.1) {
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,143,"DerivativeStructure x = new DerivativeStructure(1, 4, 0, t);"
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,144,DerivativeStructure y = p.value(x);
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,145,"Assert.assertEquals(t * t * t,   y.getValue(),              eps * t * t * t);"
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,146,"Assert.assertEquals(3.0 * t * t, y.getPartialDerivative(1), eps * 3.0 * t * t);"
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,147,"Assert.assertEquals(6.0 * t,     y.getPartialDerivative(2), eps * 6.0 * t);"
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,148,"Assert.assertEquals(6.0,         y.getPartialDerivative(3), eps * 6.0);"
True,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,149,"Assert.assertEquals(0.0,         y.getPartialDerivative(4), eps);"

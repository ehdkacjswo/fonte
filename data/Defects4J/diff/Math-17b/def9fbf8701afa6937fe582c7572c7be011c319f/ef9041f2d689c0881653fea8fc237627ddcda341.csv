is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,135,his.x = a1 * u1.x + a2 * u2.x;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,136,his.y = a1 * u1.y + a2 * u2.y;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,137,his.z = a1 * u1.z + a2 * u2.z;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,135,"this.x = MathUtils.linearCombination(a1, u1.x, a2, u2.x);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,136,"this.y = MathUtils.linearCombination(a1, u1.y, a2, u2.y);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,137,"this.z = MathUtils.linearCombination(a1, u1.z, a2, u2.z);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,152,his.x = a1 * u1.x + a2 * u2.x + a3 * u3.x;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,153,his.y = a1 * u1.y + a2 * u2.y + a3 * u3.y;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,154,his.z = a1 * u1.z + a2 * u2.z + a3 * u3.z;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,152,"this.x = MathUtils.linearCombination(a1, u1.x, a2, u2.x, a3, u3.x);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,153,"this.y = MathUtils.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,154,"this.z = MathUtils.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,171,his.x = a1 * u1.x + a2 * u2.x + a3 * u3.x + a4 * u4.x;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,172,his.y = a1 * u1.y + a2 * u2.y + a3 * u3.y + a4 * u4.y;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,173,his.z = a1 * u1.z + a2 * u2.z + a3 * u3.z + a4 * u4.z;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,171,"this.x = MathUtils.linearCombination(a1, u1.x, a2, u2.x, a3, u3.x, a4, u4.x);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,172,"this.y = MathUtils.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y, a4, u4.y);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,173,"this.z = MathUtils.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z, a4, u4.z);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,217,"// there are no cancellation problems here, so we use the straightforward formula"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,223,"// there are no cancellation problems here, so we use the straightforward formula"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,254,inal Vector3D v3 = (Vector3D) v;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,255,"eturn new Vector3D(x + factor * v3.x, y + factor * v3.y, z + factor * v3.z);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,256,"return new Vector3D(1, this, factor, (Vector3D) v);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,266,inal Vector3D v3 = (Vector3D) v;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,267,"eturn new Vector3D(x - factor * v3.x, y - factor * v3.y, z - factor * v3.z);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,267,"return new Vector3D(1, this, -factor, (Vector3D) v);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,331,"ouble dot = dotProduct(v1, v2);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,331,double dot = v1.dotProduct(v2);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,419,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,419,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,420,* <p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,421,* The implementation uses specific multiplication and addition
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,422,* algorithms to preserve accuracy and reduce cancellation effects.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,423,* It should be very accurate even for nearly orthogonal vectors.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,424,* </p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,425,"* @see MathUtils#linearCombination(double, double, double, double, double, double)"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,422,eturn x * v3.x + y * v3.y + z * v3.z;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,429,"return MathUtils.linearCombination(x, v3.x, y, v3.y, z, v3.z);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,426, @param v other vectorvector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,433,* @param v other vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,432,inal double n1 = getNormSq();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,433,inal double n2 = v.getNormSq();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,434,f ((n1 * n2) < MathUtils.SAFE_MIN) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,435,eturn ZERO;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,438,"/ rescale both vectors without losing precision,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,439,/ to ensure their norm are the same order of magnitude
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,440,inal int deltaExp = (FastMath.getExponent(n1) - FastMath.getExponent(n2)) / 4;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,441,"inal double x1    = FastMath.scalb(x,   -deltaExp);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,442,"inal double y1    = FastMath.scalb(y,   -deltaExp);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,443,"inal double z1    = FastMath.scalb(z,   -deltaExp);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,444,"inal double x2    = FastMath.scalb(v3.x, deltaExp);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,445,"inal double y2    = FastMath.scalb(v3.y, deltaExp);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,446,"inal double z2    = FastMath.scalb(v3.z, deltaExp);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,448,"/ we reduce cancellation errors by preconditioning,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,449,/ we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,450,/ v3 without loss of precision. See Kahan lecture
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,451,"/ ""Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"""
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,452,/ available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,454,/ compute rho as an 8 bits approximation of v1.v2 / v2.v2
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,455,"inal double ratio = (x1 * x2 + y1 * y2 + z1 * z2) / FastMath.scalb(n2, 2 * deltaExp);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,456,inal double rho   = FastMath.rint(256 * ratio) / 256;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,458,inal double x3 = x1 - rho * x2;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,459,inal double y3 = y1 - rho * y2;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,460,inal double z3 = z1 - rho * z2;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,462,/ compute cross product from v3 and v2 instead of v1 and v2
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,463,"eturn new Vector3D(y3 * z2 - z3 * y2, z3 * x2 - x3 * z2, x3 * y2 - y3 * x2);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,438,"return new Vector3D(MathUtils.linearCombination(y, v3.z, -z, v3.y),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,439,"MathUtils.linearCombination(z, v3.x, -x, v3.z),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,440,"MathUtils.linearCombination(x, v3.y, -y, v3.x));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,20,mport org.apache.commons.math.geometry.euclidean.threed.Vector3D;
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,21,mport org.apache.commons.math.util.FastMath;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,21,import org.apache.commons.math.random.Well1024a;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,22,import org.apache.commons.math.util.FastMath;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,238,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,239,public void testAccurateDotProduct() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,240,// the following two vectors are nearly but not exactly orthogonal
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,241,// naive dot product (i.e. computing u1.x * u2.x + u1.y * u2.y + u1.z * u2.z
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,242,"// leads to a result of 0.0, instead of the correct -1.855129..."
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,243,"Vector3D u1 = new Vector3D(-1321008684645961.0 /  268435456.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,244,"-5774608829631843.0 /  268435456.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,245,-7645843051051357.0 / 8589934592.0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,246,"Vector3D u2 = new Vector3D(-5712344449280879.0 /    2097152.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,247,"-4550117129121957.0 /    2097152.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,248,8846951984510141.0 /     131072.0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,249,double sNaive = u1.getX() * u2.getX() + u1.getY() * u2.getY() + u1.getZ() * u2.getZ();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,250,double sAccurate = u1.dotProduct(u2);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,251,"Assert.assertEquals(0.0, sNaive, 1.0e-30);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,252,"Assert.assertEquals(-2088690039198397.0 / 1125899906842624.0, sAccurate, 1.0e-16);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,255,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,256,public void testDotProduct() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,257,// we compare accurate versus naive dot product implementations
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,258,// on regular vectors (i.e. not extreme cases like in the previous test)
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,259,Well1024a random = new Well1024a(553267312521321234l);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,260,for (int i = 0; i < 10000; ++i) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,261,double ux = 10000 * random.nextDouble();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,262,double uy = 10000 * random.nextDouble();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,263,double uz = 10000 * random.nextDouble();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,264,double vx = 10000 * random.nextDouble();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,265,double vy = 10000 * random.nextDouble();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,266,double vz = 10000 * random.nextDouble();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,267,double sNaive = ux * vx + uy * vy + uz * vz;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,268,"double sAccurate = new Vector3D(ux, uy, uz).dotProduct(new Vector3D(vx, vy, vz));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,269,"Assert.assertEquals(sNaive, sAccurate, 2.5e-16 * sAccurate);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,273,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,274,public void testAccurateCrossProduct() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,275,// the vectors u1 and u2 are nearly but not exactly anti-parallel
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,276,// (7.31e-16 degrees from 180 degrees) naive cross product (i.e.
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,277,// computing u1.x * u2.x + u1.y * u2.y + u1.z * u2.z
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,278,"// leads to a result of   [0.0009765, -0.0001220, -0.0039062],"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,279,"// instead of the correct [0.0006913, -0.0001254, -0.0007909]"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,280,"final Vector3D u1 = new Vector3D(-1321008684645961.0 /   268435456.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,281,"-5774608829631843.0 /   268435456.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,282,-7645843051051357.0 /  8589934592.0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,283,"final Vector3D u2 = new Vector3D( 1796571811118507.0 /  2147483648.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,284,"7853468008299307.0 /  2147483648.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,285,2599586637357461.0 / 17179869184.0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,286,"final Vector3D u3 = new Vector3D(12753243807587107.0 / 18446744073709551616.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,287,"-2313766922703915.0 / 18446744073709551616.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,288,-227970081415313.0 /   288230376151711744.0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,289,"Vector3D cNaive = new Vector3D(u1.getY() * u2.getZ() - u1.getZ() * u2.getY(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,290,"u1.getZ() * u2.getX() - u1.getX() * u2.getZ(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,291,u1.getX() * u2.getY() - u1.getY() * u2.getX());
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,292,Vector3D cAccurate = u1.crossProduct(u2);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,293,Assert.assertTrue(u3.distance(cNaive) > 2.9 * u3.getNorm());
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,294,"Assert.assertEquals(0.0, u3.distance(cAccurate), 1.0e-30 * cAccurate.getNorm());"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,297,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,298,public void testCrossProduct() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,299,// we compare accurate versus naive cross product implementations
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,300,// on regular vectors (i.e. not extreme cases like in the previous test)
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,301,Well1024a random = new Well1024a(885362227452043214l);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,302,for (int i = 0; i < 10000; ++i) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,303,double ux = 10000 * random.nextDouble();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,304,double uy = 10000 * random.nextDouble();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,305,double uz = 10000 * random.nextDouble();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,306,double vx = 10000 * random.nextDouble();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,307,double vy = 10000 * random.nextDouble();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,308,double vz = 10000 * random.nextDouble();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,309,"Vector3D cNaive = new Vector3D(uy * vz - uz * vy, uz * vx - ux * vz, ux * vy - uy * vx);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,310,"Vector3D cAccurate = new Vector3D(ux, uy, uz).crossProduct(new Vector3D(vx, vy, vz));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,311,"Assert.assertEquals(0.0, cAccurate.distance(cNaive), 6.0e-15 * cAccurate.getNorm());"

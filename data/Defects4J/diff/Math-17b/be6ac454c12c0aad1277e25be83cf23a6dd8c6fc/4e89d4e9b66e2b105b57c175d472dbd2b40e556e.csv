is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/genetics/AbstractListChromosome.java,src/main/java/org/apache/commons/math3/genetics/AbstractListChromosome.java,41,ublic AbstractListChromosome(final List<T> representation) {
True,src/main/java/org/apache/commons/math3/genetics/AbstractListChromosome.java,src/main/java/org/apache/commons/math3/genetics/AbstractListChromosome.java,41,public AbstractListChromosome(final List<T> representation) throws InvalidRepresentationException {
True,src/main/java/org/apache/commons/math3/genetics/AbstractListChromosome.java,src/main/java/org/apache/commons/math3/genetics/AbstractListChromosome.java,49,* @throws InvalidRepresentationException iff the <code>representation</code> can not represent a valid chromosome
False,src/main/java/org/apache/commons/math3/genetics/AbstractListChromosome.java,src/main/java/org/apache/commons/math3/genetics/AbstractListChromosome.java,50,ublic AbstractListChromosome(final T[] representation) {
True,src/main/java/org/apache/commons/math3/genetics/AbstractListChromosome.java,src/main/java/org/apache/commons/math3/genetics/AbstractListChromosome.java,51,public AbstractListChromosome(final T[] representation) throws InvalidRepresentationException {
False,src/main/java/org/apache/commons/math3/genetics/BinaryChromosome.java,src/main/java/org/apache/commons/math3/genetics/BinaryChromosome.java,37,ublic BinaryChromosome(List<Integer> representation) {
True,src/main/java/org/apache/commons/math3/genetics/BinaryChromosome.java,src/main/java/org/apache/commons/math3/genetics/BinaryChromosome.java,37,public BinaryChromosome(List<Integer> representation) throws InvalidRepresentationException {
False,src/main/java/org/apache/commons/math3/genetics/BinaryChromosome.java,src/main/java/org/apache/commons/math3/genetics/BinaryChromosome.java,46,ublic BinaryChromosome(Integer[] representation) {
True,src/main/java/org/apache/commons/math3/genetics/BinaryChromosome.java,src/main/java/org/apache/commons/math3/genetics/BinaryChromosome.java,46,public BinaryChromosome(Integer[] representation) throws InvalidRepresentationException {
False,src/main/java/org/apache/commons/math3/genetics/BinaryChromosome.java,src/main/java/org/apache/commons/math3/genetics/BinaryChromosome.java,54,rotected void checkValidity(List<Integer> chromosomeRepresentation)
False,src/main/java/org/apache/commons/math3/genetics/BinaryChromosome.java,src/main/java/org/apache/commons/math3/genetics/BinaryChromosome.java,55,hrows InvalidRepresentationException {
True,src/main/java/org/apache/commons/math3/genetics/BinaryChromosome.java,src/main/java/org/apache/commons/math3/genetics/BinaryChromosome.java,54,protected void checkValidity(List<Integer> chromosomeRepresentation) throws InvalidRepresentationException {
False,src/main/java/org/apache/commons/math3/genetics/BinaryChromosome.java,src/main/java/org/apache/commons/math3/genetics/BinaryChromosome.java,79, {@inheritDoc}
False,src/main/java/org/apache/commons/math3/genetics/BinaryMutation.java,src/main/java/org/apache/commons/math3/genetics/BinaryMutation.java,40,ublic Chromosome mutate(Chromosome original) {
True,src/main/java/org/apache/commons/math3/genetics/BinaryMutation.java,src/main/java/org/apache/commons/math3/genetics/BinaryMutation.java,40,public Chromosome mutate(Chromosome original) throws MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math3/genetics/CrossoverPolicy.java,src/main/java/org/apache/commons/math3/genetics/CrossoverPolicy.java,19,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math3/genetics/CrossoverPolicy.java,src/main/java/org/apache/commons/math3/genetics/CrossoverPolicy.java,36,* @throws MathIllegalArgumentException if the given chromosomes are not compatible with this {@link CrossoverPolicy}
False,src/main/java/org/apache/commons/math3/genetics/CrossoverPolicy.java,src/main/java/org/apache/commons/math3/genetics/CrossoverPolicy.java,35,"hromosomePair crossover(Chromosome first, Chromosome second);"
True,src/main/java/org/apache/commons/math3/genetics/CrossoverPolicy.java,src/main/java/org/apache/commons/math3/genetics/CrossoverPolicy.java,38,"ChromosomePair crossover(Chromosome first, Chromosome second) throws MathIllegalArgumentException;"
True,src/main/java/org/apache/commons/math3/genetics/CycleCrossover.java,src/main/java/org/apache/commons/math3/genetics/CycleCrossover.java,99,* @throws MathIllegalArgumentException if the chromosomes are not an instance of {@link AbstractListChromosome}
True,src/main/java/org/apache/commons/math3/genetics/CycleCrossover.java,src/main/java/org/apache/commons/math3/genetics/CycleCrossover.java,100,* @throws DimensionMismatchException if the length of the two chromosomes is different
False,src/main/java/org/apache/commons/math3/genetics/CycleCrossover.java,src/main/java/org/apache/commons/math3/genetics/CycleCrossover.java,100,"ublic ChromosomePair crossover(final Chromosome first, final Chromosome second) {"
True,src/main/java/org/apache/commons/math3/genetics/CycleCrossover.java,src/main/java/org/apache/commons/math3/genetics/CycleCrossover.java,103,"public ChromosomePair crossover(final Chromosome first, final Chromosome second)"
True,src/main/java/org/apache/commons/math3/genetics/CycleCrossover.java,src/main/java/org/apache/commons/math3/genetics/CycleCrossover.java,104,"throws DimensionMismatchException, MathIllegalArgumentException {"
False,src/main/java/org/apache/commons/math3/genetics/CycleCrossover.java,src/main/java/org/apache/commons/math3/genetics/CycleCrossover.java,115,"rotected ChromosomePair mate(final AbstractListChromosome<T> first, final AbstractListChromosome<T> second) {"
True,src/main/java/org/apache/commons/math3/genetics/CycleCrossover.java,src/main/java/org/apache/commons/math3/genetics/CycleCrossover.java,120,"protected ChromosomePair mate(final AbstractListChromosome<T> first, final AbstractListChromosome<T> second)"
True,src/main/java/org/apache/commons/math3/genetics/CycleCrossover.java,src/main/java/org/apache/commons/math3/genetics/CycleCrossover.java,121,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,22,import org.apache.commons.math3.exception.NotPositiveException;
True,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,23,import org.apache.commons.math3.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,24,import org.apache.commons.math3.exception.NumberIsTooLargeException;
True,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,47,* @throws NullArgumentException if the list of chromosomes is {@code null}
True,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,48,* @throws NotPositiveException if the population limit is not a positive number (&lt; 1)
True,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,49,* @throws NumberIsTooLargeException if the list of chromosomes exceeds the population limit
False,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,46,"ublic ElitisticListPopulation(final List<Chromosome> chromosomes,"
False,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,47,"inal int populationLimit,"
False,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,48,inal double elitismRate) {
True,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,52,"public ElitisticListPopulation(final List<Chromosome> chromosomes, final int populationLimit,"
True,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,53,final double elitismRate)
True,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,54,"throws NullArgumentException, NotPositiveException, NumberIsTooLargeException, OutOfRangeException {"
True,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,66,* @throws NotPositiveException if the population limit is not a positive number (&lt; 1)
False,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,60,"ublic ElitisticListPopulation(final int populationLimit, final double elitismRate) {"
True,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,69,"public ElitisticListPopulation(final int populationLimit, final double elitismRate)"
True,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,70,"throws NotPositiveException, OutOfRangeException {"
False,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,93,ublic void setElitismRate(final double elitismRate) {
True,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java,105,public void setElitismRate(final double elitismRate) throws OutOfRangeException {
False,src/main/java/org/apache/commons/math3/genetics/FixedElapsedTime.java,src/main/java/org/apache/commons/math3/genetics/FixedElapsedTime.java,46,ublic FixedElapsedTime(final long maxTime) {
True,src/main/java/org/apache/commons/math3/genetics/FixedElapsedTime.java,src/main/java/org/apache/commons/math3/genetics/FixedElapsedTime.java,46,public FixedElapsedTime(final long maxTime) throws NumberIsTooSmallException {
False,src/main/java/org/apache/commons/math3/genetics/FixedElapsedTime.java,src/main/java/org/apache/commons/math3/genetics/FixedElapsedTime.java,57,"ublic FixedElapsedTime(final long maxTime, final TimeUnit unit) {"
True,src/main/java/org/apache/commons/math3/genetics/FixedElapsedTime.java,src/main/java/org/apache/commons/math3/genetics/FixedElapsedTime.java,57,"public FixedElapsedTime(final long maxTime, final TimeUnit unit) throws NumberIsTooSmallException {"
False,src/main/java/org/apache/commons/math3/genetics/FixedGenerationCount.java,src/main/java/org/apache/commons/math3/genetics/FixedGenerationCount.java,42,ublic FixedGenerationCount(final int maxGenerations) {
True,src/main/java/org/apache/commons/math3/genetics/FixedGenerationCount.java,src/main/java/org/apache/commons/math3/genetics/FixedGenerationCount.java,42,public FixedGenerationCount(final int maxGenerations) throws NumberIsTooSmallException {
False,src/main/java/org/apache/commons/math3/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math3/genetics/GeneticAlgorithm.java,72,inal SelectionPolicy selectionPolicy) {
True,src/main/java/org/apache/commons/math3/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math3/genetics/GeneticAlgorithm.java,72,final SelectionPolicy selectionPolicy) throws OutOfRangeException {
False,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,51,ublic ListPopulation(final int populationLimit) {
True,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,51,public ListPopulation(final int populationLimit) throws NotPositiveException {
False,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,66,"ublic ListPopulation(final List<Chromosome> chromosomes, final int populationLimit) {"
True,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,66,"public ListPopulation(final List<Chromosome> chromosomes, final int populationLimit)"
True,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,67,"throws NullArgumentException, NotPositiveException, NumberIsTooLargeException {"
False,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,94,ublic void setChromosomes(final List<Chromosome> chromosomes) {
True,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,96,public void setChromosomes(final List<Chromosome> chromosomes)
True,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,97,"throws NullArgumentException, NumberIsTooLargeException {"
False,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,110, adding this chromosome
True,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,114,*   adding this chromosome
False,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,112,ublic void addChromosomes(final Collection<Chromosome> chromosomeColl) {
True,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,116,public void addChromosomes(final Collection<Chromosome> chromosomeColl) throws NumberIsTooLargeException {
False,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,143,ublic void addChromosome(final Chromosome chromosome) {
True,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,147,public void addChromosome(final Chromosome chromosome) throws NumberIsTooLargeException {
False,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,182,ublic void setPopulationLimit(final int populationLimit) {
True,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,src/main/java/org/apache/commons/math3/genetics/ListPopulation.java,186,"public void setPopulationLimit(final int populationLimit) throws NotPositiveException, NumberIsTooSmallException {"
True,src/main/java/org/apache/commons/math3/genetics/MutationPolicy.java,src/main/java/org/apache/commons/math3/genetics/MutationPolicy.java,19,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math3/genetics/MutationPolicy.java,src/main/java/org/apache/commons/math3/genetics/MutationPolicy.java,33,* @throws MathIllegalArgumentException if the given chromosome is not compatible with this {@link MutationPolicy}
False,src/main/java/org/apache/commons/math3/genetics/MutationPolicy.java,src/main/java/org/apache/commons/math3/genetics/MutationPolicy.java,32,hromosome mutate(Chromosome original);
True,src/main/java/org/apache/commons/math3/genetics/MutationPolicy.java,src/main/java/org/apache/commons/math3/genetics/MutationPolicy.java,35,Chromosome mutate(Chromosome original) throws MathIllegalArgumentException;
False,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,67,ublic NPointCrossover(final int crossoverPoints) {
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,67,public NPointCrossover(final int crossoverPoints) throws NotStrictlyPositiveException {
False,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,108,"ublic ChromosomePair crossover(final Chromosome first, final Chromosome second) {"
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,108,"public ChromosomePair crossover(final Chromosome first, final Chromosome second)"
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,109,"throws DimensionMismatchException, MathIllegalArgumentException {"
False,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,125,inal AbstractListChromosome<T> second) {
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,127,final AbstractListChromosome<T> second)
True,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java,128,"throws DimensionMismatchException, NumberIsTooLargeException {"
False,src/main/java/org/apache/commons/math3/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math3/genetics/OnePointCrossover.java,79,"ublic ChromosomePair crossover(final Chromosome first, final Chromosome second) {"
True,src/main/java/org/apache/commons/math3/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math3/genetics/OnePointCrossover.java,79,"public ChromosomePair crossover(final Chromosome first, final Chromosome second)"
True,src/main/java/org/apache/commons/math3/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math3/genetics/OnePointCrossover.java,80,"throws DimensionMismatchException, MathIllegalArgumentException {"
False,src/main/java/org/apache/commons/math3/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math3/genetics/OnePointCrossover.java,96,inal AbstractListChromosome<T> second) {
True,src/main/java/org/apache/commons/math3/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math3/genetics/OnePointCrossover.java,98,final AbstractListChromosome<T> second) throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,66,* @throws MathIllegalArgumentException iff one of the chromosomes is
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,67,*   not an instance of {@link AbstractListChromosome}
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,68,* @throws DimensionMismatchException if the length of the two chromosomes is different
False,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,67,"ublic ChromosomePair crossover(final Chromosome first, final Chromosome second) {"
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,71,"public ChromosomePair crossover(final Chromosome first, final Chromosome second)"
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,72,"throws DimensionMismatchException, MathIllegalArgumentException {"
False,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,82,"rotected ChromosomePair mate(final AbstractListChromosome<T> first, final AbstractListChromosome<T> second) {"
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,88,"protected ChromosomePair mate(final AbstractListChromosome<T> first, final AbstractListChromosome<T> second)"
True,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java,89,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/genetics/Population.java,src/main/java/org/apache/commons/math3/genetics/Population.java,19,import org.apache.commons.math3.exception.NumberIsTooLargeException;
False,src/main/java/org/apache/commons/math3/genetics/Population.java,src/main/java/org/apache/commons/math3/genetics/Population.java,48, @throws org.apache.commons.math3.exception.NumberIsTooLargeException if the population would exceed
False,src/main/java/org/apache/commons/math3/genetics/Population.java,src/main/java/org/apache/commons/math3/genetics/Population.java,49,   the population limit when adding this chromosome
True,src/main/java/org/apache/commons/math3/genetics/Population.java,src/main/java/org/apache/commons/math3/genetics/Population.java,50,* @throws NumberIsTooLargeException if the population would exceed the population limit when adding
True,src/main/java/org/apache/commons/math3/genetics/Population.java,src/main/java/org/apache/commons/math3/genetics/Population.java,51,*   this chromosome
False,src/main/java/org/apache/commons/math3/genetics/Population.java,src/main/java/org/apache/commons/math3/genetics/Population.java,51,oid addChromosome(Chromosome chromosome);
True,src/main/java/org/apache/commons/math3/genetics/Population.java,src/main/java/org/apache/commons/math3/genetics/Population.java,53,void addChromosome(Chromosome chromosome) throws NumberIsTooLargeException;
False,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,71, @throws InvalidRepresentationException iff the <code>representation</code> can not represent
False,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,72,   a valid chromosome
True,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,71,* @throws InvalidRepresentationException iff the <code>representation</code> can not represent a valid chromosome
False,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,74,ublic RandomKey(final List<Double> representation) {
True,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,73,public RandomKey(final List<Double> representation) throws InvalidRepresentationException {
True,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,89,* @throws InvalidRepresentationException iff the <code>representation</code> can not represent a valid chromosome
False,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,91,ublic RandomKey(final Double[] representation) {
True,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,91,public RandomKey(final Double[] representation) throws InvalidRepresentationException {
False,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,115,inal List<Double> sortedRepr) {
True,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,115,final List<Double> sortedRepr)
True,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,116,throws DimensionMismatchException {
False,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,233,ist<S> sortedData = new ArrayList<S> (data);
True,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,235,List<S> sortedData = new ArrayList<S>(data);
False,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,257,inal List<S> permutedData) {
True,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,259,final List<S> permutedData)
True,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,src/main/java/org/apache/commons/math3/genetics/RandomKey.java,260,"throws DimensionMismatchException, MathIllegalArgumentException {"
False,src/main/java/org/apache/commons/math3/genetics/RandomKeyMutation.java,src/main/java/org/apache/commons/math3/genetics/RandomKeyMutation.java,39,ublic Chromosome mutate(final Chromosome original) {
True,src/main/java/org/apache/commons/math3/genetics/RandomKeyMutation.java,src/main/java/org/apache/commons/math3/genetics/RandomKeyMutation.java,39,public Chromosome mutate(final Chromosome original) throws MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math3/genetics/SelectionPolicy.java,src/main/java/org/apache/commons/math3/genetics/SelectionPolicy.java,19,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math3/genetics/SelectionPolicy.java,src/main/java/org/apache/commons/math3/genetics/SelectionPolicy.java,32,* @throws MathIllegalArgumentException if the population is not compatible with this {@link SelectionPolicy}
False,src/main/java/org/apache/commons/math3/genetics/SelectionPolicy.java,src/main/java/org/apache/commons/math3/genetics/SelectionPolicy.java,31,hromosomePair select(Population population);
True,src/main/java/org/apache/commons/math3/genetics/SelectionPolicy.java,src/main/java/org/apache/commons/math3/genetics/SelectionPolicy.java,34,ChromosomePair select(Population population) throws MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math3/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math3/genetics/TournamentSelection.java,56,* @throws MathIllegalArgumentException if the tournament arity is bigger than the population size
False,src/main/java/org/apache/commons/math3/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math3/genetics/TournamentSelection.java,57,ublic ChromosomePair select(final Population population) {
True,src/main/java/org/apache/commons/math3/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math3/genetics/TournamentSelection.java,58,public ChromosomePair select(final Population population) throws MathIllegalArgumentException {
False,src/main/java/org/apache/commons/math3/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math3/genetics/TournamentSelection.java,70,rivate Chromosome tournament(final ListPopulation population) {
True,src/main/java/org/apache/commons/math3/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math3/genetics/TournamentSelection.java,71,private Chromosome tournament(final ListPopulation population) throws MathIllegalArgumentException {
False,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,63,ublic UniformCrossover(final double ratio) {
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,63,public UniformCrossover(final double ratio) throws OutOfRangeException {
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,82,* @throws MathIllegalArgumentException iff one of the chromosomes is
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,83,*   not an instance of {@link AbstractListChromosome}
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,84,* @throws DimensionMismatchException if the length of the two chromosomes is different
False,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,83,"ublic ChromosomePair crossover(final Chromosome first, final Chromosome second) {"
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,87,"public ChromosomePair crossover(final Chromosome first, final Chromosome second)"
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,88,"throws DimensionMismatchException, MathIllegalArgumentException {"
False,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,99,inal AbstractListChromosome<T> second) {
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,105,final AbstractListChromosome<T> second) throws DimensionMismatchException {

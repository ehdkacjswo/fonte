is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,21,** The kinds of solutions that a {@link UnivariateRealSolver (univariate real)
False,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,22, root-finding algorithm} may accept as solutions. This basically controls
False,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,23, whether or not under-approximations and over-approximations are allowed.
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,21,/** The kinds of solutions that a {@link BracketedUnivariateRealSolver
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,22,* (bracketed univariate real) root-finding algorithm} may accept as solutions.
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,23,* This basically controls whether or not under-approximations and
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,24,* over-approximations are allowed.
False,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,33, may be necessary to guarantee that a solution is returned that does not
False,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,34, under-approximate the solution.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,34,* may be necessary to guarantee that a solution is returned that lies on a
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,35,* specific side the solution.</p>
False,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,43," are allowed. So, if a function f(x) has a root at x = y, then the"
False,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,44," root-finding result s may be smaller than y, equal to y, or greater"
False,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,45, than y.
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,44,"* are allowed. So, if a function f(x) has a root at x = x0, then the"
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,45,"* root-finding result s may be smaller than x0, equal to x0, or greater"
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,46,* than x0.
False,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,52," at x = y, then the root-finding result s must satisfy s &lt;= y."
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,53,"* at x = x0, then the root-finding result s must satisfy s &lt;= x0."
False,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,59," at x = y, then the root-finding result s must satisfy s &gt;= y."
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,60,"* at x = x0, then the root-finding result s must satisfy s &gt;= x0."
False,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,61,IGHT_SIDE;
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,62,"RIGHT_SIDE,"
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,64,/** Only solutions for which values are less than or equal to zero are
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,65,"* acceptable as solutions for root-finding. So, if a function f(x) has"
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,66,"* a root at x = x0, then the root-finding result s must satisfy f(s) &lt;= 0."
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,68,"BELOW_SIDE,"
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,70,/** Only solutions for which values are greater than or equal to zero are
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,71,"* acceptable as solutions for root-finding. So, if a function f(x) has"
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,72,"* a root at x = x0, then the root-finding result s must satisfy f(s) &gt;= 0."
True,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,src/main/java/org/apache/commons/math/analysis/solvers/AllowedSolutions.java,74,ABOVE_SIDE;
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,104,/ Variables to hold new bounds.
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,105,ouble x;
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,106,ouble fx;
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,116, = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,117,x = computeObjectiveValue(x);
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,112,final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,113,final double fx = computeObjectiveValue(x);
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,154,"/ given the function value accuracy, then we can't get close to"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,150,"// given the function value accuracy, then we can't get closer to"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,166,case BELOW_SIDE:
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,167,if (f1 <= 0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,168,return x1;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,170,break;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,171,case ABOVE_SIDE:
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,172,if (f1 >= 0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,173,return x1;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,175,break;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,192,case BELOW_SIDE:
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,193,return (f1 <= 0) ? x1 : x0;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,194,case ABOVE_SIDE:
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,195,return (f1 >= 0) ? x1 : x0;
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,198,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,199,public void testSolutionBelowSide() {
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,200,UnivariateRealFunction f = new SinFunction();
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,201,UnivariateRealSolver solver = getSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,202,if (!(solver instanceof BracketedUnivariateRealSolver)) return;
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,203,((BracketedUnivariateRealSolver)solver).setAllowedSolutions(AllowedSolutions.BELOW_SIDE);
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,204,double left = -1.5;
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,205,double right = 0.05;
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,206,for(int i = 0; i < 10; i++) {
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,207,// Test whether the allowed solutions are taken into account.
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,208,"double solution = solver.solve(100, f, left, right);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,209,Assert.assertTrue(f.value(solution) <= 0.0);
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,211,// Prepare for next test.
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,212,left -= 0.1;
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,213,right += 0.3;
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,217,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,218,public void testSolutionAboveSide() {
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,219,UnivariateRealFunction f = new SinFunction();
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,220,UnivariateRealSolver solver = getSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,221,if (!(solver instanceof BracketedUnivariateRealSolver)) return;
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,222,((BracketedUnivariateRealSolver)solver).setAllowedSolutions(AllowedSolutions.ABOVE_SIDE);
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,223,double left = -1.5;
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,224,double right = 0.05;
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,225,for(int i = 0; i < 10; i++) {
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,226,// Test whether the allowed solutions are taken into account.
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,227,"double solution = solver.solve(100, f, left, right);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,228,Assert.assertTrue(f.value(solution) >= 0.0);
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,230,// Prepare for next test.
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,231,left -= 0.1;
True,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java,232,right += 0.3;

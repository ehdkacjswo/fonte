is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,41,*   <li>a {@link #getSolver() getSolver} method has been added.</li>
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,124,* Get a solver for A &times; X = B.
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,125,* @return a solver
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,127,DecompositionSolver getSolver();
False,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,37,rivate static final long serialVersionUID = -238768772547767847L;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,37,private static final long serialVersionUID = -3532767302235568872L;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,290,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,291,public DecompositionSolver getSolver() {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,292,"return new Solver(singularValues, getUT(), getV(),"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,293,getRank() == singularValues.length);
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,296,/** Specialized solver. */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,297,private static class Solver implements DecompositionSolver {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,299,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,300,private static final long serialVersionUID = -1959408026708904378L;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,302,/** Singular values. */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,303,private final double[] singularValues;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,305,/** U<sup>T</sup> matrix of the decomposition. */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,306,private final RealMatrix uT;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,308,/** V matrix of the decomposition. */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,309,private final RealMatrix v;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,311,/** Singularity indicator. */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,312,private boolean nonSingular;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,315,* Build a solver from decomposed matrix.
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,316,* @param singularValues singularValues
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,317,* @param uT U<sup>T</sup> matrix of the decomposition
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,318,* @param v V matrix of the decomposition
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,319,* @param nonSingular singularity indicator
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,321,"private Solver(final double[] singularValues, final RealMatrix uT, final RealMatrix v,"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,322,final boolean nonSingular) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,323,this.singularValues = singularValues;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,324,this.uT             = uT;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,325,this.v              = v;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,326,this.nonSingular    = nonSingular;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,329,/** Solve the linear equation A &times; X = B in least square sense.
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,330,"* <p>The m&times;n matrix A may not be square, the solution X is"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,331,* such that ||A &times; X - B|| is minimal.</p>
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,332,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,333,* @return a vector X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,334,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,335,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,337,public double[] solve(final double[] b)
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,338,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,340,if (b.length != singularValues.length) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,341,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,344,final double[] w = uT.operate(b);
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,345,for (int i = 0; i < singularValues.length; ++i) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,346,final double si = singularValues[i];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,347,if (si == 0) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,348,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,350,w[i] /= si;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,352,return v.operate(w);
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,356,/** Solve the linear equation A &times; X = B in least square sense.
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,357,"* <p>The m&times;n matrix A may not be square, the solution X is"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,358,* such that ||A &times; X - B|| is minimal.</p>
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,359,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,360,* @return a vector X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,361,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,362,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,364,public RealVector solve(final RealVector b)
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,365,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,367,if (b.getDimension() != singularValues.length) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,368,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,371,final RealVector w = uT.operate(b);
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,372,for (int i = 0; i < singularValues.length; ++i) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,373,final double si = singularValues[i];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,374,if (si == 0) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,375,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,377,"w.set(i, w.getEntry(i) / si);"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,379,return v.operate(w);
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,383,/** Solve the linear equation A &times; X = B in least square sense.
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,384,"* <p>The m&times;n matrix A may not be square, the solution X is"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,385,* such that ||A &times; X - B|| is minimal.</p>
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,386,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,387,* @return a matrix X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,388,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,389,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,391,public RealMatrix solve(final RealMatrix b)
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,392,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,394,if (b.getRowDimension() != singularValues.length) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,395,"throw new IllegalArgumentException(""Incorrect row dimension"");"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,398,final RealMatrix w = uT.multiply(b);
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,399,for (int i = 0; i < singularValues.length; ++i) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,400,final double si  = singularValues[i];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,401,if (si == 0) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,402,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,404,final double inv = 1.0 / si;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,405,for (int j = 0; j < b.getColumnDimension(); ++j) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,406,"w.multiplyEntry(i, j, inv);"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,409,return v.multiply(w);
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,414,* Check if the decomposed matrix is non-singular.
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,415,* @return true if the decomposed matrix is non-singular
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,417,public boolean isNonSingular() {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,418,return nonSingular;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,421,/** Get the pseudo-inverse of the decomposed matrix.
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,422,* @return inverse matrix
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,423,* @throws InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,425,public RealMatrix getInverse()
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,426,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,428,if (!isNonSingular()) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,429,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,432,return solve(MatrixUtils.createRealIdentityMatrix(singularValues.length));
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,33,rivate static final long serialVersionUID = -33167987924870528L;
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,33,private static final long serialVersionUID = 4388219358640335388L;
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,35,** Underlying decomposition. */
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,36,rivate final SingularValueDecomposition decomposition;
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,35,/** Underlying solver. */
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,36,private final DecompositionSolver solver;
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,43,his.decomposition = decomposition;
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,43,this.solver = decomposition.getSolver();
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,57,inal double[] singularValues = decomposition.getSingularValues();
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,58,f (b.length != singularValues.length) {
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,59,"hrow new IllegalArgumentException(""constant vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,62,inal double[] w = decomposition.getUT().operate(b);
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,63,or (int i = 0; i < singularValues.length; ++i) {
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,64,inal double si = singularValues[i];
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,65,f (si == 0) {
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,66,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,68,[i] /= si;
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,70,eturn decomposition.getV().operate(w);
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,56,return solver.solve(b);
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,85,inal double[] singularValues = decomposition.getSingularValues();
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,86,f (b.getDimension() != singularValues.length) {
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,87,"hrow new IllegalArgumentException(""constant vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,90,inal RealVector w = decomposition.getUT().operate(b);
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,91,or (int i = 0; i < singularValues.length; ++i) {
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,92,inal double si = singularValues[i];
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,93,f (si == 0) {
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,94,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,96,".set(i, w.getEntry(i) / si);"
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,98,eturn decomposition.getV().operate(w);
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,69,return solver.solve(b);
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,113,inal double[] singularValues = decomposition.getSingularValues();
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,114,f (b.getRowDimension() != singularValues.length) {
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,115,"hrow new IllegalArgumentException(""Incorrect row dimension"");"
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,118,inal RealMatrix w = decomposition.getUT().multiply(b);
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,119,or (int i = 0; i < singularValues.length; ++i) {
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,120,inal double si  = singularValues[i];
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,121,f (si == 0) {
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,122,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,124,inal double inv = 1.0 / si;
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,125,or (int j = 0; j < b.getColumnDimension(); ++j) {
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,126,".multiplyEntry(i, j, inv);"
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,129,eturn decomposition.getV().multiply(w);
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,82,return solver.solve(b);
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,138,eturn decomposition.getRank() == decomposition.getSingularValues().length;
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,90,return solver.isNonSingular();
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,148,f (!isNonSingular()) {
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,149,hrow new SingularMatrixException();
False,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,152,eturn solve(MatrixUtils.createRealIdentityMatrix(decomposition.getSingularValues().length));
True,src/java/org/apache/commons/math/linear/SingularValueSolver.java,src/java/org/apache/commons/math/linear/SingularValueSolver.java,99,return solver.getInverse();

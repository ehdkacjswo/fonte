is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/geometry/Space.java,src/main/java/org/apache/commons/math3/geometry/Space.java,21,import org.apache.commons.math3.exception.MathUnsupportedOperationException;
True,src/main/java/org/apache/commons/math3/geometry/Space.java,src/main/java/org/apache/commons/math3/geometry/Space.java,38,* @exception MathUnsupportedOperationException for dimension-1 spaces
True,src/main/java/org/apache/commons/math3/geometry/Space.java,src/main/java/org/apache/commons/math3/geometry/Space.java,39,* which do not have sub-spaces
False,src/main/java/org/apache/commons/math3/geometry/Space.java,src/main/java/org/apache/commons/math3/geometry/Space.java,37,pace getSubSpace();
True,src/main/java/org/apache/commons/math3/geometry/Space.java,src/main/java/org/apache/commons/math3/geometry/Space.java,41,Space getSubSpace() throws MathUnsupportedOperationException;
True,src/main/java/org/apache/commons/math3/geometry/Vector.java,src/main/java/org/apache/commons/math3/geometry/Vector.java,22,import org.apache.commons.math3.exception.MathArithmeticException;
False,src/main/java/org/apache/commons/math3/geometry/Vector.java,src/main/java/org/apache/commons/math3/geometry/Vector.java,94, @exception ArithmeticException if the norm is zero
True,src/main/java/org/apache/commons/math3/geometry/Vector.java,src/main/java/org/apache/commons/math3/geometry/Vector.java,96,* @exception MathArithmeticException if the norm is zero
False,src/main/java/org/apache/commons/math3/geometry/Vector.java,src/main/java/org/apache/commons/math3/geometry/Vector.java,96,ector<S> normalize();
True,src/main/java/org/apache/commons/math3/geometry/Vector.java,src/main/java/org/apache/commons/math3/geometry/Vector.java,98,Vector<S> normalize() throws MathArithmeticException;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/oned/Vector1D.java,186,ublic Vector1D normalize() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/oned/Vector1D.java,186,public Vector1D normalize() throws MathArithmeticException {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math3/geometry/euclidean/oned/Vector1DFormat.java,112,ublic Vector1D parse(final String source) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math3/geometry/euclidean/oned/Vector1DFormat.java,112,public Vector1D parse(final String source) throws MathParseException {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,19,import org.apache.commons.math3.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,21,import org.apache.commons.math3.exception.MathInternalError;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,54,"ublic Line(final Vector3D p1, final Vector3D p2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,56,"public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,73,"ublic void reset(final Vector3D p1, final Vector3D p2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,75,"public void reset(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,87,"eturn new Line(zero, zero.subtract(direction));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,89,try {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,90,"return new Line(zero, zero.subtract(direction));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,91,} catch (MathIllegalArgumentException miae) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,92,// this should never happen has the instance was already built without error
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,93,throw new MathInternalError(miae);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,145,"inal double angle = Vector3D.angle(direction, line.direction);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,146,eturn ((angle < 1.0e-10) || (angle > (FastMath.PI - 1.0e-10))) && contains(line.zero);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,152,try {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,153,"final double angle = Vector3D.angle(direction, line.direction);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,154,return ((angle < 1.0e-10) || (angle > (FastMath.PI - 1.0e-10))) && contains(line.zero);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,155,} catch (MathArithmeticException mae) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,156,// this should never happen as directions are non-zero vectors
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java,157,throw new MathInternalError(mae);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,20,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,21,import org.apache.commons.math3.exception.MathInternalError;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,24,mport org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,27,import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,55,ublic Plane(final Vector3D normal) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,57,public Plane(final Vector3D normal) throws MathArithmeticException {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,66,"ublic Plane(final Vector3D p, final Vector3D normal) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,68,"public Plane(final Vector3D p, final Vector3D normal) throws MathArithmeticException {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,80,"ublic Plane(final Vector3D p1, final Vector3D p2, final Vector3D p3) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,82,"public Plane(final Vector3D p1, final Vector3D p2, final Vector3D p3)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,83,throws MathArithmeticException {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,114,* @exception MathArithmeticException if the normal norm is too small
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,112,"ublic void reset(final Vector3D p, final Vector3D normal) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,116,"public void reset(final Vector3D p, final Vector3D normal) throws MathArithmeticException {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,136,rivate void setNormal(final Vector3D normal) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,140,private void setNormal(final Vector3D normal) throws MathArithmeticException {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,147,"rigin = new Vector3D(-originOffset, w);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,148, = w.orthogonal();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,149," = Vector3D.crossProduct(w, u);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,151,try {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,152,"origin = new Vector3D(-originOffset, w);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,153,u = w.orthogonal();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,154,"v = Vector3D.crossProduct(w, u);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,155,} catch (MathArithmeticException mae) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,156,// this should never happen as w is built to be non-zero
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,157,throw new MathInternalError(mae);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,258,"inal double angle = Vector3D.angle(w, plane.w);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,259,eturn ((angle < 1.0e-10) && (FastMath.abs(originOffset - plane.originOffset) < 1.0e-10)) ||
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,260,(angle > (FastMath.PI - 1.0e-10)) && (FastMath.abs(originOffset + plane.originOffset) < 1.0e-10));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,267,try {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,268,"final double angle = Vector3D.angle(w, plane.w);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,269,return ((angle < 1.0e-10) && (FastMath.abs(originOffset - plane.originOffset) < 1.0e-10)) ||
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,270,((angle > (FastMath.PI - 1.0e-10)) && (FastMath.abs(originOffset + plane.originOffset) < 1.0e-10));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,271,} catch (MathArithmeticException mae) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,272,// this should never happen as w vectors are built to be non-zero
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,273,throw new MathInternalError(mae);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,271,inal Vector3D delta = origin.subtract(center);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,272,"inal Plane plane = new Plane(center.add(rotation.applyTo(delta)),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,273,otation.applyTo(w));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,285,try {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,286,final Vector3D delta = origin.subtract(center);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,287,"final Plane plane = new Plane(center.add(rotation.applyTo(delta)),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,288,rotation.applyTo(w));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,275,/ make sure the frame is transformed as desired
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,276,lane.u = rotation.applyTo(u);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,277,lane.v = rotation.applyTo(v);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,290,// make sure the frame is transformed as desired
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,291,plane.u = rotation.applyTo(u);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,292,plane.v = rotation.applyTo(v);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,279,eturn plane;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,294,return plane;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,295,} catch (MathArithmeticException mae) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,296,// this should never happen as w vector is built to be non-zero
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,297,throw new MathInternalError(mae);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,290,"inal Plane plane = new Plane(origin.add(translation), w);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,309,try {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,310,"final Plane plane = new Plane(origin.add(translation), w);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,292,/ make sure the frame is transformed as desired
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,293,lane.u = u;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,294,lane.v = v;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,312,// make sure the frame is transformed as desired
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,313,plane.u = u;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,314,plane.v = v;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,296,eturn plane;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,316,return plane;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,317,} catch (MathArithmeticException mae) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,318,// this should never happen as w vector is built to be non-zero
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,319,throw new MathInternalError(mae);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,322,"inal Vector3D direction = Vector3D.crossProduct(w, other.w);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,323,f (direction.getNorm() < 1.0e-10) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,324,eturn null;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,346,try {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,347,"final Vector3D direction = Vector3D.crossProduct(w, other.w);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,348,if (direction.getNorm() < 1.0e-10) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,349,return null;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,351,"final Vector3D point = intersection(this, other, new Plane(direction));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,352,"return new Line(point, point.add(direction));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,353,} catch (MathIllegalArgumentException miae) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,354,// this should never happen as direction has been checked to have non-zero norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,355,throw new MathInternalError(miae);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,356,} catch (MathArithmeticException mae) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,357,// this should never happen as direction has been checked to have non-zero norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,358,throw new MathInternalError(mae);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,326,"inal Vector3D point = intersection(this, other, new Plane(direction));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java,327,"eturn new Line(point, point.add(direction));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,22,import org.apache.commons.math3.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,23,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,24,import org.apache.commons.math3.exception.MathInternalError;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,94,"SuppressWarnings(""unchecked"")"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,98,his(new RegionFactory<Euclidean3D>().buildConvex(
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,99,"ew Plane(new Vector3D(xMin, 0,    0),   Vector3D.MINUS_I),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,100,"ew Plane(new Vector3D(xMax, 0,    0),   Vector3D.PLUS_I),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,101,"ew Plane(new Vector3D(0,    yMin, 0),   Vector3D.MINUS_J),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,102,"ew Plane(new Vector3D(0,    yMax, 0),   Vector3D.PLUS_J),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,103,"ew Plane(new Vector3D(0,    0,   zMin), Vector3D.MINUS_K),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,104,"ew Plane(new Vector3D(0,    0,   zMax), Vector3D.PLUS_K)).getTree(false));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,100,"super(buildBoundary(xMin, xMax, yMin, yMax, zMin, zMax));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,103,/** Build a parallellepipedic box boundary.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,104,* @param xMin low bound along the x direction
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,105,* @param xMax high bound along the x direction
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,106,* @param yMin low bound along the y direction
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,107,* @param yMax high bound along the y direction
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,108,* @param zMin low bound along the z direction
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,109,* @param zMax high bound along the z direction
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,110,* @return boundary tree
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,112,"private static BSPTree<Euclidean3D> buildBoundary(final double xMin, final double xMax,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,113,"final double yMin, final double yMax,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,114,"final double zMin, final double zMax) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,115,try {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,116,"final Plane pxMin = new Plane(new Vector3D(xMin, 0,    0),   Vector3D.MINUS_I);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,117,"final Plane pxMax = new Plane(new Vector3D(xMax, 0,    0),   Vector3D.PLUS_I);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,118,"final Plane pyMin = new Plane(new Vector3D(0,    yMin, 0),   Vector3D.MINUS_J);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,119,"final Plane pyMax = new Plane(new Vector3D(0,    yMax, 0),   Vector3D.PLUS_J);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,120,"final Plane pzMin = new Plane(new Vector3D(0,    0,   zMin), Vector3D.MINUS_K);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,121,"final Plane pzMax = new Plane(new Vector3D(0,    0,   zMax), Vector3D.PLUS_K);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,122,"@SuppressWarnings(""unchecked"")"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,123,final Region<Euclidean3D> boundary =
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,124,"new RegionFactory<Euclidean3D>().buildConvex(pxMin, pxMax, pyMin, pyMax, pzMin, pzMax);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,125,return boundary.getTree(false);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,126,} catch (MathArithmeticException mae) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,127,// this should never happen as provided normals are all non-zero
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,128,throw new MathInternalError(mae);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,348,inal Vector2D  tP00   = tPlane.toSubSpace(apply(p00));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,349,inal Vector2D  tP10   = tPlane.toSubSpace(apply(p10));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,350,inal Vector2D  tP01   = tPlane.toSubSpace(apply(p01));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,373,final Vector2D tP00   = tPlane.toSubSpace(apply(p00));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,374,final Vector2D tP10   = tPlane.toSubSpace(apply(p10));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,375,final Vector2D tP01   = tPlane.toSubSpace(apply(p01));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,357,achedTransform = org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,382,try {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,383,cachedTransform = org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,384,} catch (MathIllegalArgumentException miae) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,385,"// this should never happen as the transform built on p00, p10, p01 is invertible"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,386,throw new MathInternalError(miae);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,417,achedTransform =
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,418,rg.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,447,try {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,448,cachedTransform =
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,449,org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,450,} catch (MathIllegalArgumentException miae) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,451,// this should never happen as a translation is always invertible
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java,452,throw new MathInternalError(miae);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,22,import org.apache.commons.math3.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,24,import org.apache.commons.math3.exception.MathInternalError;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,174,"ublic Rotation(Vector3D axis, double angle) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,176,"public Rotation(Vector3D axis, double angle) throws MathIllegalArgumentException {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,269," @exception MathIllegalArgumentException if the norm of one of the vectors is zero,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,271,"* @exception MathArithmeticException if the norm of one of the vectors is zero,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,273,hrows MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,275,throws MathArithmeticException {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,325, @exception MathIllegalArgumentException if the norm of one of the vectors is zero
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,327,* @exception MathArithmeticException if the norm of one of the vectors is zero
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,327,"ublic Rotation(Vector3D u, Vector3D v) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,329,"public Rotation(Vector3D u, Vector3D v) throws MathArithmeticException {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,331,hrow new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,333,throw new MathArithmeticException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,378,"otation r1 = new Rotation(order.getA1(), alpha1);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,379,"otation r2 = new Rotation(order.getA2(), alpha2);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,380,"otation r3 = new Rotation(order.getA3(), alpha3);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,381,otation composed = r1.applyTo(r2.applyTo(r3));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,382,0 = composed.q0;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,383,1 = composed.q1;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,384,2 = composed.q2;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,385,3 = composed.q3;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,380,try {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,381,"Rotation r1 = new Rotation(order.getA1(), alpha1);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,382,"Rotation r2 = new Rotation(order.getA2(), alpha2);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,383,"Rotation r3 = new Rotation(order.getA3(), alpha3);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,384,Rotation composed = r1.applyTo(r2.applyTo(r3));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,385,q0 = composed.q0;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,386,q1 = composed.q1;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,387,q2 = composed.q2;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,388,q3 = composed.q3;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,389,} catch (MathIllegalArgumentException miae) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,390,"// this should never happen as RotationOrder axes are all normalized,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,391,// and hence never null
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java,392,throw new MathInternalError(miae);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java,22,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java,52,* @exception MathIllegalArgumentException if the points are equal
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java,52,"ublic SubLine(final Vector3D start, final Vector3D end) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java,54,"public SubLine(final Vector3D start, final Vector3D end)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java,55,throws MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java,61,* @exception MathIllegalArgumentException if the segment endpoints are equal
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java,59,ublic SubLine(final Segment segment) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java,63,public SubLine(final Segment segment) throws MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java,133,* @exception MathIllegalArgumentException if the points are equal
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java,130,"rivate static IntervalsSet buildIntervalSet(final Vector3D start, final Vector3D end) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java,135,"private static IntervalsSet buildIntervalSet(final Vector3D start, final Vector3D end)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java,136,throws MathIllegalArgumentException {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java,296,ublic Vector3D normalize() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java,296,public Vector3D normalize() throws MathArithmeticException {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java,319,ublic Vector3D orthogonal() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java,319,public Vector3D orthogonal() throws MathArithmeticException {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java,349,"ublic static double angle(Vector3D v1, Vector3D v2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java,349,"public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormat.java,127,ublic Vector3D parse(final String source) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormat.java,127,public Vector3D parse(final String source) throws MathParseException {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Vector2D.java,224,ublic Vector2D normalize() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Vector2D.java,224,public Vector2D normalize() throws MathArithmeticException {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Vector2DFormat.java,115,ublic Vector2D parse(final String source) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Vector2DFormat.java,115,public Vector2D parse(final String source) throws MathParseException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,19,import org.apache.commons.math3.exception.MathArithmeticException;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,20,import org.apache.commons.math3.exception.MathIllegalArgumentException;
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,28,ublic void testContains() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,30,"public void testContains() throws MathIllegalArgumentException, MathArithmeticException {"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,42,ublic void testSimilar() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,44,"public void testSimilar() throws MathIllegalArgumentException, MathArithmeticException {"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,52,ublic void testPointDistance() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,54,public void testPointDistance() throws MathIllegalArgumentException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,59,ublic void testLineDistance() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,61,public void testLineDistance() throws MathIllegalArgumentException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,85,ublic void testClosest() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,87,public void testClosest() throws MathIllegalArgumentException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,111,ublic void testIntersection() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,113,public void testIntersection() throws MathIllegalArgumentException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,19,import org.apache.commons.math3.exception.MathArithmeticException;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,20,import org.apache.commons.math3.exception.MathIllegalArgumentException;
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,29,ublic void testContains() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,31,public void testContains() throws MathArithmeticException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,37,ublic void testOffset() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,39,public void testOffset() throws MathArithmeticException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,51,ublic void testPoint() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,53,public void testPoint() throws MathArithmeticException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,57,ublic void testThreePoints() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,59,public void testThreePoints() throws MathArithmeticException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,68,ublic void testRotate() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,70,"public void testRotate() throws MathArithmeticException, MathIllegalArgumentException {"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,93,ublic void testTranslate() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,95,public void testTranslate() throws MathArithmeticException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,117,ublic void testIntersection() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,119,"public void testIntersection() throws MathArithmeticException, MathIllegalArgumentException {"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,128,ublic void testIntersection2() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,130,public void testIntersection2() throws MathArithmeticException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,140,ublic void testIntersection3() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,142,public void testIntersection3() throws MathArithmeticException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,152,ublic void testSimilar() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java,154,public void testSimilar() throws MathArithmeticException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,21,import org.apache.commons.math3.exception.MathArithmeticException;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,22,import org.apache.commons.math3.exception.MathIllegalArgumentException;
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,77,ublic void testTetrahedron() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,79,public void testTetrahedron() throws MathArithmeticException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,112,ublic void testIsometry() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,114,"public void testIsometry() throws MathArithmeticException, MathIllegalArgumentException {"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,237,ublic void testIssue780() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,239,public void testIssue780() throws MathArithmeticException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,54,ublic void testAxisAngle() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,54,public void testAxisAngle() throws MathIllegalArgumentException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,93,ublic void testVectorOnePair() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,93,public void testVectorOnePair() throws MathArithmeticException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,105, catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,105,} catch (MathArithmeticException e) {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,112,ublic void testVectorTwoPairs() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,112,public void testVectorTwoPairs() throws MathArithmeticException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,385,ublic void testQuaternion() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,385,public void testQuaternion() throws MathIllegalArgumentException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,407,ublic void testCompose() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,407,public void testCompose() throws MathIllegalArgumentException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,425,ublic void testComposeInverse() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,425,public void testComposeInverse() throws MathIllegalArgumentException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,443,ublic void testArray() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,443,public void testArray() throws MathIllegalArgumentException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,468,ublic void testApplyInverseTo() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,468,public void testApplyInverseTo() throws MathIllegalArgumentException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,507,ublic void testIssue639(){
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,507,public void testIssue639() throws MathArithmeticException{
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,522,ublic void testIssue801() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java,522,public void testIssue801() throws MathArithmeticException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,21,import org.apache.commons.math3.exception.MathIllegalArgumentException;
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,30,ublic void testEndPoints() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,31,public void testEndPoints() throws MathIllegalArgumentException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,42,ublic void testNoEndPoints() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,43,public void testNoEndPoints() throws MathIllegalArgumentException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,61,ublic void testNoSegments() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,62,public void testNoSegments() throws MathIllegalArgumentException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,69,ublic void testSeveralSegments() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,70,public void testSeveralSegments() throws MathIllegalArgumentException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,78,ublic void testHalfInfiniteNeg() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,79,public void testHalfInfiniteNeg() throws MathIllegalArgumentException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,93,ublic void testHalfInfinitePos() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,94,public void testHalfInfinitePos() throws MathIllegalArgumentException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,108,ublic void testIntersectionInsideInside() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,109,public void testIntersectionInsideInside() throws MathIllegalArgumentException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,116,ublic void testIntersectionInsideBoundary() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,117,public void testIntersectionInsideBoundary() throws MathIllegalArgumentException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,124,ublic void testIntersectionInsideOutside() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,125,public void testIntersectionInsideOutside() throws MathIllegalArgumentException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,132,ublic void testIntersectionBoundaryBoundary() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,133,public void testIntersectionBoundaryBoundary() throws MathIllegalArgumentException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,140,ublic void testIntersectionBoundaryOutside() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,141,public void testIntersectionBoundaryOutside() throws MathIllegalArgumentException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,148,ublic void testIntersectionOutsideOutside() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,149,public void testIntersectionOutsideOutside() throws MathIllegalArgumentException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,24,import org.apache.commons.math3.exception.MathParseException;
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,163,ublic void testParseSimpleNoDecimals() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,164,public void testParseSimpleNoDecimals() throws MathParseException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,184,ublic void testParseSimpleWithDecimals() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,185,public void testParseSimpleWithDecimals() throws MathParseException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,196,ublic void testParseSimpleWithDecimalsTrunc() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,197,public void testParseSimpleWithDecimalsTrunc() throws MathParseException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,208,ublic void testParseNegativeX() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,209,public void testParseNegativeX() throws MathParseException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,220,ublic void testParseNegativeY() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,221,public void testParseNegativeY() throws MathParseException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,232,ublic void testParseNegativeZ() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,233,public void testParseNegativeZ() throws MathParseException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,244,ublic void testParseNegativeAll() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,245,public void testParseNegativeAll() throws MathParseException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,256,ublic void testParseZeroX() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,257,public void testParseZeroX() throws MathParseException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,268,ublic void testParseNonDefaultSetting() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,269,public void testParseNonDefaultSetting() throws MathParseException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,280,ublic void testParseNan() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,281,public void testParseNan() throws MathParseException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,287,ublic void testParsePositiveInfinity() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,288,public void testParsePositiveInfinity() throws MathParseException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,294,ublic void testParseNegativeInfinity() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java,295,public void testParseNegativeInfinity() throws MathParseException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,29,ublic void testConstructors() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,29,public void testConstructors() throws DimensionMismatchException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,50,ublic void testWrongDimension() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,50,public void testWrongDimension() throws DimensionMismatchException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,194,ublic void testAngularSeparation() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,194,public void testAngularSeparation() throws MathArithmeticException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,205,ublic void testNormalize() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,205,public void testNormalize() throws MathArithmeticException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,216,ublic void testOrthogonal() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,216,public void testOrthogonal() throws MathArithmeticException {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,232,ublic void testAngle() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java,232,public void testAngle() throws MathArithmeticException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/LineTest.java,19,import org.apache.commons.math3.exception.MathIllegalArgumentException;
False,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/LineTest.java,101,ublic void testTransform() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/twod/LineTest.java,102,public void testTransform() throws MathIllegalArgumentException {

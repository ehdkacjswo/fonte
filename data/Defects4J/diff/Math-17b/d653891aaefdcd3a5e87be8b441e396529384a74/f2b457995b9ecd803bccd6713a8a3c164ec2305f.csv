is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,560," the following arbitrary choices. For Cardan angles, the chosen"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,561, set is the one for which the second angle is between -&pi;/2 and
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,562," &pi;/2 (i.e its cosine is positive). For Euler angles, the chosen"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,563, set is the one for which the second angle is between 0 and &pi;
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,564, (i.e its sine is positive).</p>
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,560,* the following arbitrary choices:</p>
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,561,* <ul>
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,562,"*   <li>for Cardan angles, the chosen set is the one for which the"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,563,*   second angle is between -&pi;/2 and &pi;/2 (i.e its cosine is
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,564,"*   positive),</li>"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,565,"*   <li>for Euler angles, the chosen set is the one for which the"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,566,*   second angle is between 0 and &pi; (i.e its sine is positive).</li>
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,567,* </ul>
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,571," <em>nothing</em> to do to prevent this, it is an intrisic problem"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,574,"* <em>nothing</em> to do to prevent this, it is an intrinsic problem"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,577, rotation is always singular for Euler angles!
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,580,* rotation is always singular for Euler angles!</p>
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,587,inal double small        = 1.0e-10;
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,588,inal double maxThreshold = 1.0 - small;
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,589,inal double minThreshold = -maxThreshold;
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,591,ouble[] angles = new double[3];
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,592,ector3D v1 = null;
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,593,ector3D v2 = null;
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,602,1 = applyTo(Vector3D.plusK);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,603,2 = applyInverseTo(Vector3D.plusI);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,604,f  ((v2.getZ() < minThreshold) || (v2.getZ() > maxThreshold)) {
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,597,Vector3D v1 = applyTo(Vector3D.plusK);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,598,Vector3D v2 = applyInverseTo(Vector3D.plusI);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,599,if  ((v2.getZ() < -0.9999999999) || (v2.getZ() > 0.9999999999)) {
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,607,"ngles[0] = Math.atan2(-(v1.getY()), v1.getZ());"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,608,ngles[1] = Math.asin(v2.getZ());
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,609,"ngles[2] = Math.atan2(-(v2.getY()), v2.getX());"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,602,return new double[] {
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,603,"Math.atan2(-(v1.getY()), v1.getZ()),"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,604,"Math.asin(v2.getZ()),"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,605,"Math.atan2(-(v2.getY()), v2.getX())"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,618,1 = applyTo(Vector3D.plusJ);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,619,2 = applyInverseTo(Vector3D.plusI);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,620,f ((v2.getY() < minThreshold) || (v2.getY() > maxThreshold)) {
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,615,Vector3D v1 = applyTo(Vector3D.plusJ);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,616,Vector3D v2 = applyInverseTo(Vector3D.plusI);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,617,if ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999)) {
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,623,"ngles[0] = Math.atan2(v1.getZ(), v1.getY());"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,624,ngles[1] = -Math.asin(v2.getY());
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,625,"ngles[2] = Math.atan2(v2.getZ(), v2.getX());"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,620,return new double[] {
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,621,"Math.atan2(v1.getZ(), v1.getY()),"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,622,"-Math.asin(v2.getY()),"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,623,"Math.atan2(v2.getZ(), v2.getX())"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,634,1 = applyTo(Vector3D.plusK);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,635,2 = applyInverseTo(Vector3D.plusJ);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,636,f ((v2.getZ() < minThreshold) || (v2.getZ() > maxThreshold)) {
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,633,Vector3D v1 = applyTo(Vector3D.plusK);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,634,Vector3D v2 = applyInverseTo(Vector3D.plusJ);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,635,if ((v2.getZ() < -0.9999999999) || (v2.getZ() > 0.9999999999)) {
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,639,"ngles[0] = Math.atan2(v1.getX(), v1.getZ());"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,640,ngles[1] = -Math.asin(v2.getZ());
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,641,"ngles[2] = Math.atan2(v2.getX(), v2.getY());"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,638,return new double[] {
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,639,"Math.atan2(v1.getX(), v1.getZ()),"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,640,"-Math.asin(v2.getZ()),"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,641,"Math.atan2(v2.getX(), v2.getY())"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,650,1 = applyTo(Vector3D.plusI);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,651,2 = applyInverseTo(Vector3D.plusJ);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,652,f ((v2.getX() < minThreshold) || (v2.getX() > maxThreshold)) {
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,651,Vector3D v1 = applyTo(Vector3D.plusI);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,652,Vector3D v2 = applyInverseTo(Vector3D.plusJ);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,653,if ((v2.getX() < -0.9999999999) || (v2.getX() > 0.9999999999)) {
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,655,"ngles[0] = Math.atan2(-(v1.getZ()), v1.getX());"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,656,ngles[1] = Math.asin(v2.getX());
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,657,"ngles[2] = Math.atan2(-(v2.getZ()), v2.getY());"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,656,return new double[] {
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,657,"Math.atan2(-(v1.getZ()), v1.getX()),"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,658,"Math.asin(v2.getX()),"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,659,"Math.atan2(-(v2.getZ()), v2.getY())"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,666,1 = applyTo(Vector3D.plusJ);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,667,2 = applyInverseTo(Vector3D.plusK);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,668,f ((v2.getY() < minThreshold) || (v2.getY() > maxThreshold)) {
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,669,Vector3D v1 = applyTo(Vector3D.plusJ);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,670,Vector3D v2 = applyInverseTo(Vector3D.plusK);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,671,if ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999)) {
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,671,"ngles[0] = Math.atan2(-(v1.getX()), v1.getY());"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,672,ngles[1] = Math.asin(v2.getY());
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,673,"ngles[2] = Math.atan2(-(v2.getX()), v2.getZ());"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,674,return new double[] {
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,675,"Math.atan2(-(v1.getX()), v1.getY()),"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,676,"Math.asin(v2.getY()),"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,677,"Math.atan2(-(v2.getX()), v2.getZ())"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,682,1 = applyTo(Vector3D.plusI);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,683,2 = applyInverseTo(Vector3D.plusK);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,684,f ((v2.getX() < minThreshold) || (v2.getX() > maxThreshold)) {
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,687,Vector3D v1 = applyTo(Vector3D.plusI);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,688,Vector3D v2 = applyInverseTo(Vector3D.plusK);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,689,if ((v2.getX() < -0.9999999999) || (v2.getX() > 0.9999999999)) {
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,687,"ngles[0] = Math.atan2(v1.getY(), v1.getX());"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,688,ngles[1] = -Math.asin(v2.getX());
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,689,"ngles[2] = Math.atan2(v2.getY(), v2.getZ());"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,692,return new double[] {
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,693,"Math.atan2(v1.getY(), v1.getX()),"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,694,"-Math.asin(v2.getX()),"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,695,"Math.atan2(v2.getY(), v2.getZ())"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,698,1 = applyTo(Vector3D.plusI);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,699,2 = applyInverseTo(Vector3D.plusI);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,700,f ((v2.getX() < minThreshold) || (v2.getX() > maxThreshold)) {
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,705,Vector3D v1 = applyTo(Vector3D.plusI);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,706,Vector3D v2 = applyInverseTo(Vector3D.plusI);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,707,if ((v2.getX() < -0.9999999999) || (v2.getX() > 0.9999999999)) {
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,703,"ngles[0] = Math.atan2(v1.getY(), -v1.getZ());"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,704,ngles[1] = Math.acos(v2.getX());
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,705,"ngles[2] = Math.atan2(v2.getY(), v2.getZ());"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,710,return new double[] {
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,711,"Math.atan2(v1.getY(), -v1.getZ()),"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,712,"Math.acos(v2.getX()),"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,713,"Math.atan2(v2.getY(), v2.getZ())"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,714,1 = applyTo(Vector3D.plusI);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,715,2 = applyInverseTo(Vector3D.plusI);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,716,f ((v2.getX() < minThreshold) || (v2.getX() > maxThreshold)) {
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,723,Vector3D v1 = applyTo(Vector3D.plusI);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,724,Vector3D v2 = applyInverseTo(Vector3D.plusI);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,725,if ((v2.getX() < -0.9999999999) || (v2.getX() > 0.9999999999)) {
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,719,"ngles[0] = Math.atan2(v1.getZ(), v1.getY());"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,720,ngles[1] = Math.acos(v2.getX());
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,721,"ngles[2] = Math.atan2(v2.getZ(), -v2.getY());"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,728,return new double[] {
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,729,"Math.atan2(v1.getZ(), v1.getY()),"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,730,"Math.acos(v2.getX()),"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,731,"Math.atan2(v2.getZ(), -v2.getY())"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,730,1 = applyTo(Vector3D.plusJ);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,731,2 = applyInverseTo(Vector3D.plusJ);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,732,f ((v2.getY() < minThreshold) || (v2.getY() > maxThreshold)) {
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,741,Vector3D v1 = applyTo(Vector3D.plusJ);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,742,Vector3D v2 = applyInverseTo(Vector3D.plusJ);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,743,if ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999)) {
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,735,"ngles[0] = Math.atan2(v1.getX(), v1.getZ());"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,736,ngles[1] = Math.acos(v2.getY());
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,737,"ngles[2] = Math.atan2(v2.getX(), -v2.getZ());"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,746,return new double[] {
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,747,"Math.atan2(v1.getX(), v1.getZ()),"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,748,"Math.acos(v2.getY()),"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,749,"Math.atan2(v2.getX(), -v2.getZ())"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,746,1 = applyTo(Vector3D.plusJ);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,747,2 = applyInverseTo(Vector3D.plusJ);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,748,f ((v2.getY() < minThreshold) || (v2.getY() > maxThreshold)) {
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,759,Vector3D v1 = applyTo(Vector3D.plusJ);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,760,Vector3D v2 = applyInverseTo(Vector3D.plusJ);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,761,if ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999)) {
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,751,"ngles[0] = Math.atan2(v1.getZ(), -v1.getX());"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,752,ngles[1] = Math.acos(v2.getY());
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,753,"ngles[2] = Math.atan2(v2.getZ(), v2.getX());"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,764,return new double[] {
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,765,"Math.atan2(v1.getZ(), -v1.getX()),"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,766,"Math.acos(v2.getY()),"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,767,"Math.atan2(v2.getZ(), v2.getX())"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,762,1 = applyTo(Vector3D.plusK);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,763,2 = applyInverseTo(Vector3D.plusK);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,764,f ((v2.getZ() < minThreshold) || (v2.getZ() > maxThreshold)) {
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,777,Vector3D v1 = applyTo(Vector3D.plusK);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,778,Vector3D v2 = applyInverseTo(Vector3D.plusK);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,779,if ((v2.getZ() < -0.9999999999) || (v2.getZ() > 0.9999999999)) {
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,767,"ngles[0] = Math.atan2(v1.getX(), -v1.getY());"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,768,ngles[1] = Math.acos(v2.getZ());
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,769,"ngles[2] = Math.atan2(v2.getX(), v2.getY());"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,782,return new double[] {
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,783,"Math.atan2(v1.getX(), -v1.getY()),"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,784,"Math.acos(v2.getZ()),"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,785,"Math.atan2(v2.getX(), v2.getY())"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,778,1 = applyTo(Vector3D.plusK);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,779,2 = applyInverseTo(Vector3D.plusK);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,780,f ((v2.getZ() < minThreshold) || (v2.getZ() > maxThreshold)) {
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,795,Vector3D v1 = applyTo(Vector3D.plusK);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,796,Vector3D v2 = applyInverseTo(Vector3D.plusK);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,797,if ((v2.getZ() < -0.9999999999) || (v2.getZ() > 0.9999999999)) {
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,783,"ngles[0] = Math.atan2(v1.getY(), v1.getX());"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,784,ngles[1] = Math.acos(v2.getZ());
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,785,"ngles[2] = Math.atan2(v2.getY(), -v2.getX());"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,800,return new double[] {
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,801,"Math.atan2(v1.getY(), v1.getX()),"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,802,"Math.acos(v2.getZ()),"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,803,"Math.atan2(v2.getY(), -v2.getX())"
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,789,eturn angles;
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,46,inal double entryTolerance = 10e-16;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,46,private static final double entryTolerance = 10e-16;
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,48,inal double normTolerance = 10e-14;
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,48,private static final double normTolerance = 10e-14;
False,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,159,ercentile = new Percentile(0);
True,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,159,new Percentile(0);

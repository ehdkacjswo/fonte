is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,84,       like {@link org.apache.commons.math.util.MathUtils#SAFE_MIN MathUtils.SAFE_MIN}.</li>
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java,84,*       like {@link org.apache.commons.math.util.Precision#SAFE_MIN Precision.SAFE_MIN}.</li>
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,27,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,27,import org.apache.commons.math.util.Precision;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,175,f (n < MathUtils.SAFE_MIN) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,175,if (n < Precision.SAFE_MIN) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,195,f (n < MathUtils.EPSILON) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,195,if (n < Precision.EPSILON) {
False,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,23,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,23,import org.apache.commons.math.util.Precision;
False,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,46, hence computes only real real Eigenvalues. This implies the D matrix returned
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,46,* hence computes only real realEigenvalues. This implies the D matrix returned
False,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,156,inal double eps = 10 * rows * columns * MathUtils.EPSILON;
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,156,final double eps = 10 * rows * columns * Precision.EPSILON;
False,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,500,f (FastMath.abs(realEigenvalues[i])<=MathUtils.EPSILON*maxAbsoluteValue) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,500,if (FastMath.abs(realEigenvalues[i])<=Precision.EPSILON*maxAbsoluteValue) {
False,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,503,f (FastMath.abs(e[i])<=MathUtils.EPSILON*maxAbsoluteValue) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,503,if (FastMath.abs(e[i])<=Precision.EPSILON*maxAbsoluteValue) {
False,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,609,f (FastMath.abs(realEigenvalues[i])<MathUtils.EPSILON*maxAbsoluteValue) {
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,609,if (FastMath.abs(realEigenvalues[i])<Precision.EPSILON*maxAbsoluteValue) {
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,40,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,40,import org.apache.commons.math.util.Precision;
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,840,f( FastMath.abs(diag) < MathUtils.SAFE_MIN ){
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,840,if( FastMath.abs(diag) < Precision.SAFE_MIN ){
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,880,f( FastMath.abs(diag) < MathUtils.SAFE_MIN ){
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,880,if( FastMath.abs(diag) < Precision.SAFE_MIN ){
False,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,22,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,22,import org.apache.commons.math.util.Precision;
False,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,468,astMath.sqrt(MathUtils.SAFE_MIN));
True,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,468,FastMath.sqrt(Precision.SAFE_MIN));
False,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,508," non-increasing order, for compatibility with JAMA.</p>"
True,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,508,"* non-increasing order, for compatibility with Jama.</p>"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,201, for such a step is {@code pval * FastMath.sqrt(MathUtils.EPSILON)}.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,201,* for such a step is {@code pval * FastMath.sqrt(Precision.EPSILON)}.
False,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,20,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,20,import org.apache.commons.math.util.Precision;
False,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,35,rivate static final double DEFAULT_RELATIVE_THRESHOLD = 100 * MathUtils.EPSILON;
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,35,private static final double DEFAULT_RELATIVE_THRESHOLD = 100 * Precision.EPSILON;
False,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,39,rivate static final double DEFAULT_ABSOLUTE_THRESHOLD = 100 * MathUtils.SAFE_MIN;
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,39,private static final double DEFAULT_ABSOLUTE_THRESHOLD = 100 * Precision.SAFE_MIN;
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,25,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,25,import org.apache.commons.math.util.Precision;
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,147,  <li>QR ranking threshold: {@link MathUtils#SAFE_MIN}</li>
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,147,*  <li>QR ranking threshold: {@link Precision#SAFE_MIN}</li>
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,151,"his(100, 1e-10, 1e-10, 1e-10, MathUtils.SAFE_MIN);"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,151,"this(100, 1e-10, 1e-10, 1e-10, Precision.SAFE_MIN);"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,164,  <li>QR ranking threshold: {@link MathUtils#SAFE_MIN}</li>
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,164,*  <li>QR ranking threshold: {@link Precision#SAFE_MIN}</li>
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,170,"his(100, checker, 1e-10, 1e-10, 1e-10, MathUtils.SAFE_MIN);"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,170,"this(100, checker, 1e-10, 1e-10, 1e-10, Precision.SAFE_MIN);"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,217,  <li>QR ranking threshold}: {@link MathUtils#SAFE_MIN}</li>
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,217,*  <li>QR ranking threshold}: {@link Precision#SAFE_MIN}</li>
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,232,athUtils.SAFE_MIN);
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,232,Precision.SAFE_MIN);
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,144," with MathUtils.EPSILON to generate the following code (a priori, we know that"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,144,"* with Precision.EPSILON to generate the following code (a priori, we know that"
False,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,22,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,22,import org.apache.commons.math.util.Precision;
False,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,156,"his(numberOfVariables, includeConstant, MathUtils.EPSILON);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,156,"this(numberOfVariables, includeConstant, Precision.EPSILON);"
False,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,274,f (FastMath.abs(tmp) > MathUtils.EPSILON) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,274,if (FastMath.abs(tmp) > Precision.EPSILON) {
False,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,315,ouble eps = _a * MathUtils.EPSILON;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,315,double eps = _a * Precision.EPSILON;
False,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,321,ouble eps = _b * MathUtils.EPSILON;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,321,double eps = _b * Precision.EPSILON;
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,29,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,29,import org.apache.commons.math.util.Precision;
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,709,f( FastMath.abs( sumXX ) > MathUtils.SAFE_MIN ){
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,709,if( FastMath.abs( sumXX ) > Precision.SAFE_MIN ){
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,104,rivate static final boolean RECOMPUTE_TABLES_AT_RUNTIME = false;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,104,private static /* final */ boolean RECOMPUTE_TABLES_AT_RUNTIME = false;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,106,rivate static final boolean LOAD_RESOURCES = false;
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,106,private static /* final */ boolean LOAD_RESOURCES = false;
False,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,361,f (d > -MathUtils.SAFE_MIN && d < MathUtils.SAFE_MIN){
True,src/main/java/org/apache/commons/math/util/FastMath.java,src/main/java/org/apache/commons/math/util/FastMath.java,361,if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,36,** Smallest positive number such that 1 - EPSILON is not numerically equal to 1. */
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,37,ublic static final double EPSILON = 0x1.0p-53;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,39,"** Safe minimum, such that 1 / SAFE_MIN does not overflow."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,40," <p>In IEEE 754 arithmetic, this is also the smallest normalized"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,41, number 2<sup>-1022</sup>.</p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,43,ublic static final double SAFE_MIN = 0x1.0p-1022;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,34,* Smallest positive number such that {@code 1 - EPSILON} is not
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,35,* numerically equal to 1: {@value}.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,37,public static final double EPSILON = 0x1.0p-53;
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,39,"* Safe minimum, such that {@code 1 / SAFE_MIN} does not overflow."
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,40,"* In IEEE 754 arithmetic, this is also the smallest normalized"
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,41,* number 2<sup>-1022</sup>: {@value}.
True,src/main/java/org/apache/commons/math/util/Precision.java,src/main/java/org/apache/commons/math/util/Precision.java,43,public static final double SAFE_MIN = 0x1.0p-1022;
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,21,mport org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,21,import org.apache.commons.math.util.Precision;
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1552,"ssert.assertEquals(0.0, field.getZero().toDouble(), MathUtils.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1553,"ssert.assertEquals(0.0, field.newDfp(0.0).toDouble(), MathUtils.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1554,"ssert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), MathUtils.EPSILON);"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1555,"ssert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1552,"Assert.assertEquals(0.0, field.getZero().toDouble(), Precision.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1553,"Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), Precision.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1554,"Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), Precision.EPSILON);"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1555,"Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,25,mport org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,25,import org.apache.commons.math.util.Precision;
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,41,"d = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,41,"ed = new EigenDecomposition(matrix, Precision.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,53,"d = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,53,"ed = new EigenDecomposition(matrix, Precision.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,67,"d = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,67,"ed = new EigenDecomposition(matrix, Precision.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,82,"d = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,82,"ed = new EigenDecomposition(matrix, Precision.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,98,"d = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,98,"ed = new EigenDecomposition(matrix, Precision.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,115,"d = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,115,"ed = new EigenDecomposition(matrix, Precision.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,149,athUtils.SAFE_MIN);
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,149,Precision.SAFE_MIN);
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,194,athUtils.SAFE_MIN);
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,194,Precision.SAFE_MIN);
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,241,athUtils.SAFE_MIN);
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,241,Precision.SAFE_MIN);
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,273,athUtils.SAFE_MIN);
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,273,Precision.SAFE_MIN);
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,287,"d = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,287,"ed = new EigenDecomposition(matrix, Precision.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,300,"d = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,300,"ed = new EigenDecomposition(matrix, Precision.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,319,athUtils.SAFE_MIN);
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,319,Precision.SAFE_MIN);
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,331,"d = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,331,"ed = new EigenDecomposition(matrix, Precision.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,344,"d = new EigenDecomposition(matrix, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,344,"ed = new EigenDecomposition(matrix, Precision.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,355,"ealMatrix v = new EigenDecomposition(matrix, MathUtils.SAFE_MIN).getV();"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,355,"RealMatrix v = new EigenDecomposition(matrix, Precision.SAFE_MIN).getV();"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,367,"d = new EigenDecomposition(m, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,367,"ed = new EigenDecomposition(m, Precision.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,385,"d = new EigenDecomposition(repeated, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,385,"ed = new EigenDecomposition(repeated, Precision.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,401,"d = new EigenDecomposition(distinct, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,401,"ed = new EigenDecomposition(distinct, Precision.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,419,"d = new EigenDecomposition(indefinite, MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionTest.java,419,"ed = new EigenDecomposition(indefinite, Precision.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,22,mport org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,22,import org.apache.commons.math.util.Precision;
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,36,"ecompositionSolver es = new EigenDecomposition(m, MathUtils.SAFE_MIN).getSolver();"
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,36,"DecompositionSolver es = new EigenDecomposition(m, Precision.SAFE_MIN).getSolver();"
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,52,"ecompositionSolver es = new EigenDecomposition(m, MathUtils.SAFE_MIN).getSolver();"
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,52,"DecompositionSolver es = new EigenDecomposition(m, Precision.SAFE_MIN).getSolver();"
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,68,"ecompositionSolver es = new EigenDecomposition(matrix, MathUtils.SAFE_MIN).getSolver();"
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,68,"DecompositionSolver es = new EigenDecomposition(matrix, Precision.SAFE_MIN).getSolver();"
False,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,101,"ecompositionSolver es = new EigenDecomposition(m, MathUtils.SAFE_MIN).getSolver();"
True,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,src/test/java/org/apache/commons/math/linear/EigenSolverTest.java,101,"DecompositionSolver es = new EigenDecomposition(m, Precision.SAFE_MIN).getSolver();"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,38,mport org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,38,import org.apache.commons.math.util.Precision;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,379,athUtils.SAFE_MIN);
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,379,Precision.SAFE_MIN);
False,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,51,"MathUtils.EPSILON, MathUtils.EPSILON,              // 8,9"
False,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,52,"MathUtils.SAFE_MIN, MathUtils.SAFE_MIN,            // 10,11"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,51,"-Precision.EPSILON, Precision.EPSILON,              // 8,9"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,52,"-Precision.SAFE_MIN, Precision.SAFE_MIN,            // 10,11"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,61," MathUtils.SAFE_MIN, MathUtils.EPSILON }"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,61,"{ Precision.SAFE_MIN, Precision.EPSILON }"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,67,athUtils.EPSILON);
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,67,Precision.EPSILON);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,71,athUtils.EPSILON);
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,71,Precision.EPSILON);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,75,athUtils.EPSILON);
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,75,Precision.EPSILON);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,79,athUtils.EPSILON);
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,79,Precision.EPSILON);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,100,athUtils.EPSILON);
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,100,Precision.EPSILON);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,104,athUtils.EPSILON);
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,104,Precision.EPSILON);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,108,athUtils.EPSILON);
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,108,Precision.EPSILON);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,112,athUtils.EPSILON);
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,112,Precision.EPSILON);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,126,"ssert.assertEquals(Math.atan2(y1, x1), FastMath.atan2(y1, x1), 2 * MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,126,"Assert.assertEquals(Math.atan2(y1, x1), FastMath.atan2(y1, x1), 2 * Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,129,"ssert.assertEquals(Math.atan2(y2, x2), FastMath.atan2(y2, x2), MathUtils.SAFE_MIN);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,129,"Assert.assertEquals(Math.atan2(y2, x2), FastMath.atan2(y2, x2), Precision.SAFE_MIN);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,175,or (double x = -1 + MathUtils.EPSILON; x < 1 - MathUtils.EPSILON; x += 0.0001) {
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,175,for (double x = -1 + Precision.EPSILON; x < 1 - Precision.EPSILON; x += 0.0001) {
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,273,"ssert.assertEquals(""Log of Double.MIN_VALUE should be -744.4400719213812"", -744.4400719213812, FastMath.log(Double.MIN_VALUE), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,273,"Assert.assertEquals(""Log of Double.MIN_VALUE should be -744.4400719213812"", -744.4400719213812, FastMath.log(Double.MIN_VALUE), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,281,"ssert.assertEquals(Double.MIN_VALUE, FastMath.exp(-745.1332191019411), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,281,"Assert.assertEquals(Double.MIN_VALUE, FastMath.exp(-745.1332191019411), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,283,"ssert.assertEquals(""exp(-745.1332191019412) should be 0.0"", 0.0, FastMath.exp(-745.1332191019412), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,283,"Assert.assertEquals(""exp(-745.1332191019412) should be 0.0"", 0.0, FastMath.exp(-745.1332191019412), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,289,"ssert.assertEquals(""exp of -infinity should be 0.0"", 0.0, FastMath.exp(Double.NEGATIVE_INFINITY), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,289,"Assert.assertEquals(""exp of -infinity should be 0.0"", 0.0, FastMath.exp(Double.NEGATIVE_INFINITY), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,291,"ssert.assertEquals(""exp(1) should be Math.E"", Math.E, FastMath.exp(1.0), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,291,"Assert.assertEquals(""exp(1) should be Math.E"", Math.E, FastMath.exp(1.0), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,297,"ssert.assertEquals(""pow(-1, 0) should be 1.0"", 1.0, FastMath.pow(-1.0, 0.0), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,297,"Assert.assertEquals(""pow(-1, 0) should be 1.0"", 1.0, FastMath.pow(-1.0, 0.0), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,299,"ssert.assertEquals(""pow(-1, -0) should be 1.0"", 1.0, FastMath.pow(-1.0, -0.0), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,299,"Assert.assertEquals(""pow(-1, -0) should be 1.0"", 1.0, FastMath.pow(-1.0, -0.0), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,301,"ssert.assertEquals(""pow(PI, 1.0) should be PI"", FastMath.PI, FastMath.pow(FastMath.PI, 1.0), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,301,"Assert.assertEquals(""pow(PI, 1.0) should be PI"", FastMath.PI, FastMath.pow(FastMath.PI, 1.0), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,303,"ssert.assertEquals(""pow(-PI, 1.0) should be -PI"", -FastMath.PI, FastMath.pow(-FastMath.PI, 1.0), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,303,"Assert.assertEquals(""pow(-PI, 1.0) should be -PI"", -FastMath.PI, FastMath.pow(-FastMath.PI, 1.0), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,313,"ssert.assertEquals(""pow(0.5, Infinity) should be 0.0"", 0.0, FastMath.pow(0.5, Double.POSITIVE_INFINITY), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,313,"Assert.assertEquals(""pow(0.5, Infinity) should be 0.0"", 0.0, FastMath.pow(0.5, Double.POSITIVE_INFINITY), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,315,"ssert.assertEquals(""pow(2.0, -Infinity) should be 0.0"", 0.0, FastMath.pow(2.0, Double.NEGATIVE_INFINITY), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,315,"Assert.assertEquals(""pow(2.0, -Infinity) should be 0.0"", 0.0, FastMath.pow(2.0, Double.NEGATIVE_INFINITY), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,317,"ssert.assertEquals(""pow(0.0, 0.5) should be 0.0"", 0.0, FastMath.pow(0.0, 0.5), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,317,"Assert.assertEquals(""pow(0.0, 0.5) should be 0.0"", 0.0, FastMath.pow(0.0, 0.5), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,319,"ssert.assertEquals(""pow(Infinity, -0.5) should be 0.0"", 0.0, FastMath.pow(Double.POSITIVE_INFINITY, -0.5), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,319,"Assert.assertEquals(""pow(Infinity, -0.5) should be 0.0"", 0.0, FastMath.pow(Double.POSITIVE_INFINITY, -0.5), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,333,"ssert.assertEquals(""pow(-2.0, 3.0) should be -8.0"", -8.0, FastMath.pow(-2.0, 3.0), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,333,"Assert.assertEquals(""pow(-2.0, 3.0) should be -8.0"", -8.0, FastMath.pow(-2.0, 3.0), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,345,"ssert.assertEquals(""pow(-Inf, -1.0) should be 0.0"", 0.0, FastMath.pow(Double.NEGATIVE_INFINITY, -1.0), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,345,"Assert.assertEquals(""pow(-Inf, -1.0) should be 0.0"", 0.0, FastMath.pow(Double.NEGATIVE_INFINITY, -1.0), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,347,"ssert.assertEquals(""pow(-Inf, -2.0) should be 0.0"", 0.0, FastMath.pow(Double.NEGATIVE_INFINITY, -2.0), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,347,"Assert.assertEquals(""pow(-Inf, -2.0) should be 0.0"", 0.0, FastMath.pow(Double.NEGATIVE_INFINITY, -2.0), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,364,"ssert.assertEquals(""atan2(0.0, 0.0) should be 0.0"", 0.0, FastMath.atan2(0.0, 0.0), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,364,"Assert.assertEquals(""atan2(0.0, 0.0) should be 0.0"", 0.0, FastMath.atan2(0.0, 0.0), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,366,"ssert.assertEquals(""atan2(0.0, 0.001) should be 0.0"", 0.0, FastMath.atan2(0.0, 0.001), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,366,"Assert.assertEquals(""atan2(0.0, 0.001) should be 0.0"", 0.0, FastMath.atan2(0.0, 0.001), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,368,"ssert.assertEquals(""atan2(0.1, +Inf) should be 0.0"", 0.0, FastMath.atan2(0.1, Double.POSITIVE_INFINITY), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,368,"Assert.assertEquals(""atan2(0.1, +Inf) should be 0.0"", 0.0, FastMath.atan2(0.1, Double.POSITIVE_INFINITY), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,370,"ssert.assertEquals(""atan2(-0.0, 0.0) should be -0.0"", -0.0, FastMath.atan2(-0.0, 0.0), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,370,"Assert.assertEquals(""atan2(-0.0, 0.0) should be -0.0"", -0.0, FastMath.atan2(-0.0, 0.0), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,372,"ssert.assertEquals(""atan2(-0.0, 0.001) should be -0.0"", -0.0, FastMath.atan2(-0.0, 0.001), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,372,"Assert.assertEquals(""atan2(-0.0, 0.001) should be -0.0"", -0.0, FastMath.atan2(-0.0, 0.001), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,374,"ssert.assertEquals(""atan2(-0.0, +Inf) should be -0.0"", -0.0, FastMath.atan2(-0.1, Double.POSITIVE_INFINITY), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,374,"Assert.assertEquals(""atan2(-0.0, +Inf) should be -0.0"", -0.0, FastMath.atan2(-0.1, Double.POSITIVE_INFINITY), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,376,"ssert.assertEquals(""atan2(0.0, -0.0) should be PI"", FastMath.PI, FastMath.atan2(0.0, -0.0), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,376,"Assert.assertEquals(""atan2(0.0, -0.0) should be PI"", FastMath.PI, FastMath.atan2(0.0, -0.0), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,378,"ssert.assertEquals(""atan2(0.1, -Inf) should be PI"", FastMath.PI, FastMath.atan2(0.1, Double.NEGATIVE_INFINITY), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,378,"Assert.assertEquals(""atan2(0.1, -Inf) should be PI"", FastMath.PI, FastMath.atan2(0.1, Double.NEGATIVE_INFINITY), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,380,"ssert.assertEquals(""atan2(-0.0, -0.0) should be -PI"", -FastMath.PI, FastMath.atan2(-0.0, -0.0), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,380,"Assert.assertEquals(""atan2(-0.0, -0.0) should be -PI"", -FastMath.PI, FastMath.atan2(-0.0, -0.0), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,382,"ssert.assertEquals(""atan2(0.1, -Inf) should be -PI"", -FastMath.PI, FastMath.atan2(-0.1, Double.NEGATIVE_INFINITY), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,382,"Assert.assertEquals(""atan2(0.1, -Inf) should be -PI"", -FastMath.PI, FastMath.atan2(-0.1, Double.NEGATIVE_INFINITY), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,384,"ssert.assertEquals(""atan2(0.1, 0.0) should be PI/2"", FastMath.PI / 2.0, FastMath.atan2(0.1, 0.0), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,384,"Assert.assertEquals(""atan2(0.1, 0.0) should be PI/2"", FastMath.PI / 2.0, FastMath.atan2(0.1, 0.0), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,386,"ssert.assertEquals(""atan2(0.1, -0.0) should be PI/2"", FastMath.PI / 2.0, FastMath.atan2(0.1, -0.0), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,386,"Assert.assertEquals(""atan2(0.1, -0.0) should be PI/2"", FastMath.PI / 2.0, FastMath.atan2(0.1, -0.0), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,388,"ssert.assertEquals(""atan2(Inf, 0.1) should be PI/2"", FastMath.PI / 2.0, FastMath.atan2(Double.POSITIVE_INFINITY, 0.1), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,388,"Assert.assertEquals(""atan2(Inf, 0.1) should be PI/2"", FastMath.PI / 2.0, FastMath.atan2(Double.POSITIVE_INFINITY, 0.1), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,390,"ssert.assertEquals(""atan2(Inf, -0.1) should be PI/2"", FastMath.PI / 2.0, FastMath.atan2(Double.POSITIVE_INFINITY, -0.1), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,390,"Assert.assertEquals(""atan2(Inf, -0.1) should be PI/2"", FastMath.PI / 2.0, FastMath.atan2(Double.POSITIVE_INFINITY, -0.1), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,392,"ssert.assertEquals(""atan2(-0.1, 0.0) should be -PI/2"", -FastMath.PI / 2.0, FastMath.atan2(-0.1, 0.0), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,392,"Assert.assertEquals(""atan2(-0.1, 0.0) should be -PI/2"", -FastMath.PI / 2.0, FastMath.atan2(-0.1, 0.0), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,394,"ssert.assertEquals(""atan2(-0.1, -0.0) should be -PI/2"", -FastMath.PI / 2.0, FastMath.atan2(-0.1, -0.0), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,394,"Assert.assertEquals(""atan2(-0.1, -0.0) should be -PI/2"", -FastMath.PI / 2.0, FastMath.atan2(-0.1, -0.0), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,396,"ssert.assertEquals(""atan2(-Inf, 0.1) should be -PI/2"", -FastMath.PI / 2.0, FastMath.atan2(Double.NEGATIVE_INFINITY, 0.1), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,396,"Assert.assertEquals(""atan2(-Inf, 0.1) should be -PI/2"", -FastMath.PI / 2.0, FastMath.atan2(Double.NEGATIVE_INFINITY, 0.1), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,398,"ssert.assertEquals(""atan2(-Inf, -0.1) should be -PI/2"", -FastMath.PI / 2.0, FastMath.atan2(Double.NEGATIVE_INFINITY, -0.1), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,398,"Assert.assertEquals(""atan2(-Inf, -0.1) should be -PI/2"", -FastMath.PI / 2.0, FastMath.atan2(Double.NEGATIVE_INFINITY, -0.1), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,401,athUtils.EPSILON);
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,401,Precision.EPSILON);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,404,"astMath.atan2(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,404,"FastMath.atan2(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,407,athUtils.EPSILON);
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,407,Precision.EPSILON);
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,410,"astMath.atan2(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY), MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,410,"FastMath.atan2(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY), Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,716,"ssert.assertEquals(""acos(-1.0) should be PI"", FastMath.acos(-1.0), FastMath.PI, MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,716,"Assert.assertEquals(""acos(-1.0) should be PI"", FastMath.acos(-1.0), FastMath.PI, Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,718,"ssert.assertEquals(""acos(1.0) should be 0.0"", FastMath.acos(1.0), 0.0, MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,718,"Assert.assertEquals(""acos(1.0) should be 0.0"", FastMath.acos(1.0), 0.0, Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,720,"ssert.assertEquals(""acos(0.0) should be PI/2"", FastMath.acos(0.0), FastMath.PI / 2.0, MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,720,"Assert.assertEquals(""acos(0.0) should be PI/2"", FastMath.acos(0.0), FastMath.PI / 2.0, Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,735,"ssert.assertEquals(""asin(1.0) should be PI/2"", FastMath.asin(1.0), FastMath.PI / 2.0, MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,735,"Assert.assertEquals(""asin(1.0) should be PI/2"", FastMath.asin(1.0), FastMath.PI / 2.0, Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,737,"ssert.assertEquals(""asin(-1.0) should be -PI/2"", FastMath.asin(-1.0), -FastMath.PI / 2.0, MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,737,"Assert.assertEquals(""asin(-1.0) should be -PI/2"", FastMath.asin(-1.0), -FastMath.PI / 2.0, Precision.EPSILON);"
False,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,739,"ssert.assertEquals(""asin(0.0) should be 0.0"", FastMath.asin(0.0), 0.0, MathUtils.EPSILON);"
True,src/test/java/org/apache/commons/math/util/FastMathTest.java,src/test/java/org/apache/commons/math/util/FastMathTest.java,739,"Assert.assertEquals(""asin(0.0) should be 0.0"", FastMath.asin(0.0), 0.0, Precision.EPSILON);"

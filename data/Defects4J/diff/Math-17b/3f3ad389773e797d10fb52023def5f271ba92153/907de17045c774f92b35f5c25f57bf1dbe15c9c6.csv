is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,25, Returns the arithmetic mean of the available values. Uses the definitional
False,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,26, formula:
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,25,* <p>Computes the arithmetic mean of a set of values. Uses the definitional
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,26,* formula:</p>
False,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,29, <p>
False,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,30, where <code>n</code> is the number of observations.
False,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,31, <p>
False,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,32, The value of the statistic is computed using the following recursive
False,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,33, updating algorithm:
False,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,34, <p>
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,29,* </p>
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,30,* <p>where <code>n</code> is the number of observations.
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,31,* </p>
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,32,* <p>When {@link #increment(double)} is used to add data incrementally from a
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,33,"* stream of (unstored) values, the value of the statistic that"
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,34,* {@link #getResult()} returns is computed using the following recursive
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,35,* updating algorithm: </p>
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,41,* <p> If {@link #evaluate(double[])} is used to compute the mean of an array
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,42,"* of stored values, a two-pass, corrected algorithm is used, starting with"
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,43,* the definitional formula computed using the array of stored values and then
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,44,* correcting this by adding the mean deviation of the data values from the
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,45,"* arithmetic mean. See, e.g. ""Comparison of Several Algorithms for Computing"
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,46,"* Sample Means and Variances,"" Robert F. Ling, Journal of the American"
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,47,"* Statistical Association, Vol. 69, No. 348 (Dec., 1974), pp. 859-866. </p>"
False,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,42, <p>
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,50,* </p>
False,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,134,"eturn sum.evaluate(values, begin, length) / ((double) length);"
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,142,double sampleSize = (double) length;
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,144,// Compute initial estimate using definitional formula
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,145,"double xbar = sum.evaluate(values, begin, length) / sampleSize;"
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,147,// Compute correction factor in second pass
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,148,double correction = 0;
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,149,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,150,correction += (values[i] - xbar);
True,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,152,return xbar + (correction/sampleSize);
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,64, Test StorelessDescriptiveStatistics
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,64,* Test SummaryStatistics - implementations that do not store the data
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,65,* and use single pass algorithms to compute statistics
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,66,ublic void testUnivariateImpl() throws Exception {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,67,public void testSummaryStatistics() throws Exception {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,69,"ssertEquals(""PiDigits: std"", std, u.getStandardDeviation(), .0000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,70,"ssertEquals(""PiDigits: mean"", mean, u.getMean(), .0000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,70,"assertEquals(""PiDigits: std"", std, u.getStandardDeviation(), 1E-13);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,71,"assertEquals(""PiDigits: mean"", mean, u.getMean(), 1E-13);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,73,"ssertEquals(""Mavro: std"", std, u.getStandardDeviation(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,74,"ssertEquals(""Mavro: mean"", mean, u.getMean(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,74,"assertEquals(""Mavro: std"", std, u.getStandardDeviation(), 1E-14);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,75,"assertEquals(""Mavro: mean"", mean, u.getMean(), 1E-14);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,76,"/loadStats(""data/Michelso.txt"");"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,77,"/assertEquals(""Michelso: std"", std, u.getStandardDeviation(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,78,"/assertEquals(""Michelso: mean"", mean, u.getMean(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,77,"loadStats(""data/Michelso.txt"", u);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,78,"assertEquals(""Michelso: std"", std, u.getStandardDeviation(), 1E-13);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,79,"assertEquals(""Michelso: mean"", mean, u.getMean(), 1E-13);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,81,"ssertEquals(""NumAcc1: std"", std, u.getStandardDeviation(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,82,"ssertEquals(""NumAcc1: mean"", mean, u.getMean(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,82,"assertEquals(""NumAcc1: std"", std, u.getStandardDeviation(), 1E-14);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,83,"assertEquals(""NumAcc1: mean"", mean, u.getMean(), 1E-14);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,84,"/loadStats(""data/NumAcc2.txt"");"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,85,"/assertEquals(""NumAcc2: std"", std, u.getStandardDeviation(), .000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,86,"/assertEquals(""NumAcc2: mean"", mean, u.getMean(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,85,"loadStats(""data/NumAcc2.txt"", u);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,86,"assertEquals(""NumAcc2: std"", std, u.getStandardDeviation(), 1E-14);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,87,"assertEquals(""NumAcc2: mean"", mean, u.getMean(), 1E-14);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,90, Test StorelessDescriptiveStatistics
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,91,* Test DescriptiveStatistics - implementations that store full array of
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,92,* values and execute multi-pass algorithms
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,92,ublic void testStoredUnivariateImpl() throws Exception {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,94,public void testDescriptiveStatistics() throws Exception {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,97,"ssertEquals(""PiDigits: std"", std, u.getStandardDeviation(), .0000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,98,"ssertEquals(""PiDigits: mean"", mean, u.getMean(), .0000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,99,"assertEquals(""PiDigits: std"", std, u.getStandardDeviation(), 1E-14);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,100,"assertEquals(""PiDigits: mean"", mean, u.getMean(), 1E-14);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,101,"ssertEquals(""Mavro: std"", std, u.getStandardDeviation(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,102,"ssertEquals(""Mavro: mean"", mean, u.getMean(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,103,"assertEquals(""Mavro: std"", std, u.getStandardDeviation(), 1E-14);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,104,"assertEquals(""Mavro: mean"", mean, u.getMean(), 1E-14);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,104,"/loadStats(""data/Michelso.txt"");"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,105,"/assertEquals(""Michelso: std"", std, u.getStandardDeviation(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,106,"/assertEquals(""Michelso: mean"", mean, u.getMean(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,106,"loadStats(""data/Michelso.txt"", u);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,107,"assertEquals(""Michelso: std"", std, u.getStandardDeviation(), 1E-14);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,108,"assertEquals(""Michelso: mean"", mean, u.getMean(), 1E-14);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,109,"ssertEquals(""NumAcc1: std"", std, u.getStandardDeviation(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,110,"ssertEquals(""NumAcc1: mean"", mean, u.getMean(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,111,"assertEquals(""NumAcc1: std"", std, u.getStandardDeviation(), 1E-14);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,112,"assertEquals(""NumAcc1: mean"", mean, u.getMean(), 1E-14);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,112,"/loadStats(""data/NumAcc2.txt"");"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,113,"/assertEquals(""NumAcc2: std"", std, u.getStandardDeviation(), .000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,114,"/assertEquals(""NumAcc2: mean"", mean, u.getMean(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,114,"loadStats(""data/NumAcc2.txt"", u);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,115,"assertEquals(""NumAcc2: std"", std, u.getStandardDeviation(), 1E-14);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,116,"assertEquals(""NumAcc2: mean"", mean, u.getMean(), 1E-14);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,20,import java.io.Serializable;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,22,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,23,import org.apache.commons.math.exception.NumberIsTooLargeException;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,24,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,25,import org.apache.commons.math.special.Erf;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,26,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,21, Normal (Gauss) Distribution.
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,23, <p>
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,24, References:</p><p>
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,25, <ul>
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,26," <li><a href=""http://mathworld.wolfram.com/NormalDistribution.html"">"
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,27, Normal Distribution</a></li>
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,28, </ul>
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,29, </p>
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,29,* Implementation of the normal (gaussian) distribution.
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,31,"* @see <a href=""http://en.wikipedia.org/wiki/Normal_distribution"">Normal distribution (Wikipedia)</a>"
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,32,"* @see <a href=""http://mathworld.wolfram.com/NormalDistribution.html"">Normal distribution (MathWorld)</a>"
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,33,ublic interface NormalDistribution extends ContinuousDistribution {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,35,public class NormalDistribution extends AbstractContinuousDistribution
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,36,implements Serializable {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,38,* Default inverse cumulative probability accuracy.
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,39,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,41,public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,42,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,43,private static final long serialVersionUID = 8589540077390120676L;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,44,/** &radic;(2 &pi;) */
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,45,private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,46,/** &radic;(2) */
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,47,private static final double SQRT2 = FastMath.sqrt(2.0);
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,48,/** Mean of this distribution. */
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,49,private final double mean;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,50,/** Standard deviation of this distribution. */
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,51,private final double standardDeviation;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,52,/** Inverse cumulative probability accuracy. */
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,53,private final double solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,56,* Create a normal distribution using the given mean and standard deviation.
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,58,* @param mean Mean for this distribution.
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,59,* @param sd Standard deviation for this distribution.
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,60,* @throws NotStrictlyPositiveException if {@code sd <= 0}.
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,62,"public NormalDistribution(double mean, double sd)"
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,63,throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,64,"this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,68,"* Create a normal distribution using the given mean, standard deviation and"
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,69,* inverse cumulative distribution accuracy.
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,71,* @param mean Mean for this distribution.
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,72,* @param sd Standard deviation for this distribution.
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,73,* @param inverseCumAccuracy Inverse cumulative probability accuracy.
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,74,* @throws NotStrictlyPositiveException if {@code sd <= 0}.
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,75,* @since 2.1
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,77,"public NormalDistribution(double mean, double sd, double inverseCumAccuracy) {"
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,78,if (sd <= 0) {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,79,"throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd);"
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,82,this.mean = mean;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,83,standardDeviation = sd;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,84,solverAbsoluteAccuracy = inverseCumAccuracy;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,88,* Create a normal distribution with mean equal to zero and standard
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,89,* deviation equal to one.
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,91,public NormalDistribution(){
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,92,"this(0, 1);"
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,39,ouble getMean();
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,100,public double getMean() {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,101,return mean;
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,46,ouble getStandardDeviation();
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,109,public double getStandardDeviation() {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,110,return standardDeviation;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,113,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,114,public double density(double x) {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,115,final double x0 = x - mean;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,116,final double x1 = x0 / standardDeviation;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,117,return FastMath.exp(-0.5 * x1 * x1) / (standardDeviation * SQRT2PI);
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,121,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,123,"* If {@code x} is more than 40 standard deviations from the mean, 0 or 1"
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,124,"* is returned, as in these cases the actual value is within"
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,125,* {@code Double.MIN_VALUE} of 0 or 1.
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,127,public double cumulativeProbability(double x)  {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,128,final double dev = x - mean;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,129,if (FastMath.abs(dev) > 40 * standardDeviation) {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,130,return dev < 0 ? 0.0d : 1.0d;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,132,return 0.5 * (1 + Erf.erf(dev / (standardDeviation * SQRT2)));
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,135,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,136,@Override
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,137,"public double cumulativeProbability(double x0, double x1)"
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,138,throws NumberIsTooLargeException {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,139,if (x0 > x1) {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,140,"throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,"
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,141,"x0, x1, true);"
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,143,final double denom = standardDeviation * SQRT2;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,144,final double v0 = (x0 - mean) / denom;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,145,final double v1 = (x1 - mean) / denom;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,146,"return 0.5 * Erf.erf(v0, v1);"
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,149,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,150,@Override
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,151,protected double getSolverAbsoluteAccuracy() {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,152,return solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,156,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,158,* Returns {@code Double.NEGATIVE_INFINITY} when {@code p == 0}
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,159,* and {@code Double.POSITIVE_INFINITY} for {@code p == 1}.
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,161,@Override
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,162,public double inverseCumulativeProbability(final double p) {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,163,if (p == 0) {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,164,return Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,166,if (p == 1) {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,167,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,169,return super.inverseCumulativeProbability(p);
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,172,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,173,@Override
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,174,public double sample()  {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,175,"return randomData.nextGaussian(mean, standardDeviation);"
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,178,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,179,@Override
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,180,protected double getDomainLowerBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,181,double ret;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,183,if (p < 0.5) {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,184,ret = -Double.MAX_VALUE;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,185,} else {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,186,ret = mean;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,189,return ret;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,192,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,193,@Override
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,194,protected double getDomainUpperBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,195,double ret;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,197,if (p < 0.5) {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,198,ret = mean;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,199,} else {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,200,ret = Double.MAX_VALUE;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,203,return ret;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,206,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,207,@Override
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,208,protected double getInitialDomain(double p) {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,209,double ret;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,211,if (p < 0.5) {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,212,ret = mean - standardDeviation;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,213,} else if (p > 0.5) {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,214,ret = mean + standardDeviation;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,215,} else {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,216,ret = mean;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,219,return ret;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,223,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,225,* The lower bound of the support is always negative infinity
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,226,* no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,228,* @return lower bound of the support (always
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,229,* {@code Double.NEGATIVE_INFINITY})
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,231,@Override
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,232,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,233,return Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,237,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,239,* The upper bound of the support is always positive infinity
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,240,* no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,242,* @return upper bound of the support (always
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,243,* {@code Double.POSITIVE_INFINITY})
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,245,@Override
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,246,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,247,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,251,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,253,"* For mean parameter {@code mu}, the mean is {@code mu}."
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,255,@Override
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,256,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,257,return getMean();
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,261,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,263,"* For standard deviation parameter {@code s}, the variance is {@code s^2}."
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,265,@Override
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,266,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,267,final double s = getStandardDeviation();
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,268,return s * s;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,271,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,272,@Override
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,273,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,274,return false;
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,277,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,278,@Override
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,279,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,280,return false;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,18,ackage org.apache.commons.math.distribution;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,20,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,22,mport org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,23,mport org.apache.commons.math.exception.NumberIsTooLargeException;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,24,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,25,mport org.apache.commons.math.special.Erf;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,26,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,29, Default implementation of
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,30, {@link org.apache.commons.math.distribution.NormalDistribution}.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,32, @version $Id$
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,34,ublic class NormalDistributionImpl extends AbstractContinuousDistribution
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,35,"mplements NormalDistribution, Serializable {"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,37, Default inverse cumulative probability accuracy.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,38, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,40,ublic static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,41,** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,42,rivate static final long serialVersionUID = 8589540077390120676L;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,43,** &radic;(2 &pi;) */
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,44,rivate static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,45,** &radic;(2) */
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,46,rivate static final double SQRT2 = FastMath.sqrt(2.0);
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,47,** Mean of this distribution. */
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,48,rivate final double mean;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,49,** Standard deviation of this distribution. */
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,50,rivate final double standardDeviation;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,51,** Inverse cumulative probability accuracy. */
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,52,rivate final double solverAbsoluteAccuracy;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,55, Create a normal distribution using the given mean and standard deviation.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,57, @param mean Mean for this distribution.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,58, @param sd Standard deviation for this distribution.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,60,"ublic NormalDistributionImpl(double mean, double sd){"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,61,"his(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,65," Create a normal distribution using the given mean, standard deviation and"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,66, inverse cumulative distribution accuracy.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,68, @param mean Mean for this distribution.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,69, @param sd Standard deviation for this distribution.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,70, @param inverseCumAccuracy Inverse cumulative probability accuracy.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,71, @throws NotStrictlyPositiveException if {@code sd <= 0}.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,72, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,74,"ublic NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy) {"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,75,f (sd <= 0) {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,76,"hrow new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd);"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,79,his.mean = mean;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,80,tandardDeviation = sd;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,81,olverAbsoluteAccuracy = inverseCumAccuracy;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,85, Create a normal distribution with mean equal to zero and standard
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,86, deviation equal to one.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,88,ublic NormalDistributionImpl(){
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,89,"his(0, 1);"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,93, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,95,ublic double getMean() {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,96,eturn mean;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,100, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,102,ublic double getStandardDeviation() {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,103,eturn standardDeviation;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,107, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,109,ublic double density(double x) {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,110,inal double x0 = x - mean;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,111,inal double x1 = x0 / standardDeviation;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,112,eturn FastMath.exp(-0.5 * x1 * x1) / (standardDeviation * SQRT2PI);
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,116, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,118," If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,119, as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,121,ublic double cumulativeProbability(double x)  {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,122,inal double dev = x - mean;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,123,f (FastMath.abs(dev) > 40 * standardDeviation) {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,124,eturn dev < 0 ? 0.0d : 1.0d;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,126,eturn 0.5 * (1 + Erf.erf(dev / (standardDeviation * SQRT2)));
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,130, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,132,Override
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,133,"ublic double cumulativeProbability(double x0, double x1) throws NumberIsTooLargeException {"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,134,f (x0 > x1) {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,135,"hrow new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,136,"0, x1, true);"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,138,inal double denom = standardDeviation * SQRT2;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,139,inal double v0 = (x0 - mean) / denom;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,140,inal double v1 = (x1 - mean) / denom;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,141,"eturn 0.5 * Erf.erf(v0, v1);"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,145, Return the absolute accuracy setting of the solver used to estimate
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,146, inverse cumulative probabilities.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,148, @return the solver absolute accuracy.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,149, @since 2.1
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,151,Override
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,152,rotected double getSolverAbsoluteAccuracy() {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,153,eturn solverAbsoluteAccuracy;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,157, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,159, It will return {@code Double.NEGATIVE_INFINITY} when {@code p = 0}
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,160, and {@code Double.POSITIVE_INFINITY} for {@code p = 1}.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,162,Override
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,163,ublic double inverseCumulativeProbability(final double p) {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,164,f (p == 0) {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,165,eturn Double.NEGATIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,167,f (p == 1) {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,168,eturn Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,170,eturn super.inverseCumulativeProbability(p);
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,174, Generate a random value sampled from this distribution.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,176, @return a random value.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,177, @since 2.2
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,179,Override
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,180,ublic double sample()  {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,181,"eturn randomData.nextGaussian(mean, standardDeviation);"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,185," Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,186, bracket a CDF root.  This method is used by
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,187, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,189, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,190," @return the domain value lower bound, i.e. {@code P(X < 'lower bound') < p}."
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,192,Override
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,193,rotected double getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,194,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,196,f (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,197,et = -Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,198, else {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,199,et = mean;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,202,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,206," Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,207, bracket a CDF root.  This method is used by
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,208, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,210, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,211," @return the domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,213,Override
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,214,rotected double getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,215,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,217,f (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,218,et = mean;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,219, else {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,220,et = Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,223,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,227," Access the initial domain value, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,228, bracket a CDF root.  This method is used by
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,229, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,231, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,232, @return the initial domain value.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,234,Override
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,235,rotected double getInitialDomain(double p) {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,236,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,238,f (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,239,et = mean - standardDeviation;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,240, else if (p > 0.5) {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,241,et = mean + standardDeviation;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,242, else {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,243,et = mean;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,246,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,250, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,252, The lower bound of the support is always negative infinity
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,253, no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,255, @return lower bound of the support (always Double.NEGATIVE_INFINITY)
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,257,Override
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,258,ublic double getSupportLowerBound() {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,259,eturn Double.NEGATIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,263, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,265, The upper bound of the support is always positive infinity
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,266, no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,268, @return upper bound of the support (always Double.POSITIVE_INFINITY)
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,270,Override
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,271,ublic double getSupportUpperBound() {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,272,eturn Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,276, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,278," For mean parameter <code>mu</code>, the mean is <code>mu</code>"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,280, @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,282,Override
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,283,rotected double calculateNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,284,eturn getMean();
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,288, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,290," For standard deviation parameter <code>s</code>,"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,291, the variance is <code>s^2</code>
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,293, @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,295,Override
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,296,rotected double calculateNumericalVariance() {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,297,inal double s = getStandardDeviation();
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,298,eturn s * s;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,302, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,304,Override
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,305,ublic boolean isSupportLowerBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,306,eturn false;
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,310, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,312,Override
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,313,ublic boolean isSupportUpperBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,314,eturn false;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,19,import java.io.Serializable;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,21,import org.apache.commons.math.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,22,import org.apache.commons.math.exception.NotPositiveException;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,23,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,24,import org.apache.commons.math.special.Beta;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,25,import org.apache.commons.math.util.ArithmeticUtils;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,26,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,20, The Pascal distribution.  The Pascal distribution is a special case of the
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,21, Negative Binomial distribution where the number of successes parameter is an
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,22, integer.
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,29,* <p>
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,30,* Implementation of the Pascal distribution. The Pascal distribution is a
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,31,* special case of the Negative Binomial distribution where the number of
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,32,* successes parameter is an integer.
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,33,* </p>
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,34,* <p>
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,27, a Bernoulli experiment [2].
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,29, <p>
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,30, References:
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,31, <ol>
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,32," <li><a href=""http://mathworld.wolfram.com/NegativeBinomialDistribution.html"">"
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,33, Negative Binomial Distribution</a></li>
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,34," <oi><a href=""http://en.wikipedia.org/wiki/Negative_binomial_distribution#Waiting_time_in_a_Bernoulli_process"">Waiting Time in a Bernoulli Process</a></li>"
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,35, </ul>
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,38,* a Bernoulli experiment
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,39,"* (see <a href=""http://en.wikipedia.org/wiki/Negative_binomial_distribution#Waiting_time_in_a_Bernoulli_process"">Waiting Time in a Bernoulli Process</a>)."
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,42,"* @see <a href=""http://en.wikipedia.org/wiki/Negative_binomial_distribution"">"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,43,* Negative binomial distribution (Wikipedia)</a>
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,44,"* @see <a href=""http://mathworld.wolfram.com/NegativeBinomialDistribution.html"">"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,45,* Negative binomial distribution (MathWorld)</a>
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,39, @since 1.2
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,47,* @since 1.2 (changed to concrete class in 3.0)
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,41,ublic interface PascalDistribution extends IntegerDistribution {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,49,public class PascalDistribution extends AbstractIntegerDistribution
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,50,implements Serializable {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,51,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,52,private static final long serialVersionUID = 6751309484392813623L;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,53,/** The number of successes. */
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,54,private final int numberOfSuccesses;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,55,/** The probability of success. */
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,56,private final double probabilityOfSuccess;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,59,* Create a Pascal distribution with the given number of trials and
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,60,* probability of success.
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,62,* @param r Number of successes.
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,63,* @param p Probability of success.
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,64,* @throws NotPositiveException if the number of successes is not positive
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,65,* @throws OutOfRangeException if the probability of success is not in the
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,66,"* range [0, 1]"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,68,"public PascalDistribution(int r, double p)"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,69,"throws NotPositiveException, OutOfRangeException {"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,70,if (r < 0) {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,71,"throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,72,r);
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,74,if (p < 0 || p > 1) {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,75,"throw new OutOfRangeException(p, 0, 1);"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,78,numberOfSuccesses = r;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,79,probabilityOfSuccess = p;
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,47,nt getNumberOfSuccesses();
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,87,public int getNumberOfSuccesses() {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,88,return numberOfSuccesses;
False,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,54,ouble getProbabilityOfSuccess();
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,96,public double getProbabilityOfSuccess() {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,97,return probabilityOfSuccess;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,100,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,101,@Override
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,102,protected int getDomainLowerBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,103,return -1;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,106,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,107,@Override
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,108,protected int getDomainUpperBound(double p) {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,109,// use MAX - 1 because MAX causes loop
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,110,return Integer.MAX_VALUE - 1;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,113,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,114,@Override
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,115,public double cumulativeProbability(int x) {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,116,double ret;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,117,if (x < 0) {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,118,ret = 0.0;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,119,} else {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,120,"ret = Beta.regularizedBeta(probabilityOfSuccess,"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,121,"numberOfSuccesses, x + 1);"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,123,return ret;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,126,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,127,public double probability(int x) {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,128,double ret;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,129,if (x < 0) {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,130,ret = 0.0;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,131,} else {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,132,ret = ArithmeticUtils.binomialCoefficientDouble(x +
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,133,"numberOfSuccesses - 1, numberOfSuccesses - 1) *"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,134,"FastMath.pow(probabilityOfSuccess, numberOfSuccesses) *"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,135,"FastMath.pow(1.0 - probabilityOfSuccess, x);"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,137,return ret;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,141,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,143,* Returns {@code -1} when {@code p == 0} and
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,144,* {@code Integer.MAX_VALUE} when {@code p == 1}.
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,146,@Override
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,147,public int inverseCumulativeProbability(final double p) {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,148,int ret;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,150,// handle extreme values explicitly
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,151,if (p == 0) {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,152,ret = -1;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,153,} else if (p == 1) {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,154,ret = Integer.MAX_VALUE;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,155,} else {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,156,ret = super.inverseCumulativeProbability(p);
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,159,return ret;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,163,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,165,* The lower bound of the support is always 0 no matter the parameters.
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,167,* @return lower bound of the support (always 0)
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,169,@Override
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,170,public int getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,171,return 0;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,175,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,177,* The upper bound of the support is always positive infinity no matter the
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,178,* parameters. Positive infinity is symbolised by {@code Integer.MAX_VALUE}
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,179,* together with {@link #isSupportUpperBoundInclusive()} being
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,180,* {@code false}.
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,182,* @return upper bound of the support (always {@code Integer.MAX_VALUE}
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,183,* for positive infinity)
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,185,@Override
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,186,public int getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,187,return Integer.MAX_VALUE;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,191,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,193,"* For number of successes {@code r} and probability of success {@code p},"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,194,* the mean is {@code (r * p) / (1 - p)}.
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,196,@Override
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,197,protected double calculateNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,198,final double p = getProbabilityOfSuccess();
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,199,final double r = getNumberOfSuccesses();
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,200,return (r * p) / (1 - p);
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,204,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,206,"* For number of successes {@code r} and probability of success {@code p},"
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,207,* the mean is {@code (r * p) / (1 - p)^2}.
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,209,@Override
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,210,protected double calculateNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,211,final double p = getProbabilityOfSuccess();
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,212,final double r = getNumberOfSuccesses();
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,213,final double pInv = 1 - p;
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,214,return (r * p) / (pInv * pInv);
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,218,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,220,* Always returns {@code false}.
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,222,* @see {@link PascalDistribution#getSupportUpperBound() getSupportUpperBound()}
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,224,@Override
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,225,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,src/main/java/org/apache/commons/math/distribution/PascalDistribution.java,226,return false;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,17,ackage org.apache.commons.math.distribution;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,19,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,21,mport org.apache.commons.math.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,22,mport org.apache.commons.math.exception.NotPositiveException;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,23,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,24,mport org.apache.commons.math.special.Beta;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,25,mport org.apache.commons.math.util.ArithmeticUtils;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,26,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,29, The default implementation of {@link PascalDistribution}.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,30, @version $Id$
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,31, @since 1.2
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,33,ublic class PascalDistributionImpl extends AbstractIntegerDistribution
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,34,"mplements PascalDistribution, Serializable {"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,35,** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,36,rivate static final long serialVersionUID = 6751309484392813623L;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,37,** The number of successes. */
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,38,rivate final int numberOfSuccesses;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,39,** The probability of success. */
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,40,rivate final double probabilityOfSuccess;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,43, Create a Pascal distribution with the given number of trials and
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,44, probability of success.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,46, @param r Number of successes.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,47, @param p Probability of success.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,49,"ublic PascalDistributionImpl(int r, double p) {"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,50,f (r < 0) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,51,"hrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,52,);
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,54,f (p < 0 || p > 1) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,55,"hrow new OutOfRangeException(p, 0, 1);"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,58,umberOfSuccesses = r;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,59,robabilityOfSuccess = p;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,63, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,65,ublic int getNumberOfSuccesses() {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,66,eturn numberOfSuccesses;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,70, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,72,ublic double getProbabilityOfSuccess() {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,73,eturn probabilityOfSuccess;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,77," Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,78, bracket a PDF root.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,80, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,81," @return the domain value lower bound, i.e. {@code P(X < 'lower bound') < p}."
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,83,Override
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,84,rotected int getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,85,eturn -1;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,89," Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,90, bracket a PDF root.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,92, @param p Desired probability for the critical value
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,93," @return the domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,95,Override
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,96,rotected int getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,97,/ use MAX - 1 because MAX causes loop
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,98,eturn Integer.MAX_VALUE - 1;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,102," For this distribution, {@code X}, this method returns {@code P(X <= x)}."
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,104, @param x Value at which the PDF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,105, @return PDF for this distribution.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,106, due to convergence or other numerical errors.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,108,Override
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,109,ublic double cumulativeProbability(int x) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,110,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,111,f (x < 0) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,112,et = 0.0;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,113, else {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,114,"et = Beta.regularizedBeta(probabilityOfSuccess,"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,115,"umberOfSuccesses, x + 1);"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,117,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,121," For this distribution, {@code X}, this method returns {@code P(X = x)}."
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,123, @param x Value at which the PMF is evaluated.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,124, @return PMF for this distribution.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,126,ublic double probability(int x) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,127,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,128,f (x < 0) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,129,et = 0.0;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,130, else {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,131,et = ArithmeticUtils.binomialCoefficientDouble(x +
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,132,"umberOfSuccesses - 1, numberOfSuccesses - 1) *"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,133,"astMath.pow(probabilityOfSuccess, numberOfSuccesses) *"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,134,"astMath.pow(1.0 - probabilityOfSuccess, x);"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,136,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,140," For this distribution, {@code X}, this method returns the largest"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,141," {@code x}, such that {@code P(X <= x) <= p}."
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,142, It will return -1 when p = 0 and {@code Integer.MAX_VALUE} when p = 1.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,144, @param p Desired probability.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,145, @return the largest {@code x} such that {@code P(X <= x) <= p}.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,146, @throws OutOfRangeException if {@code p < 0} or {@code p > 1}.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,148,Override
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,149,ublic int inverseCumulativeProbability(final double p) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,150,nt ret;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,152,/ handle extreme values explicitly
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,153,f (p == 0) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,154,et = -1;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,155, else if (p == 1) {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,156,et = Integer.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,157, else {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,158,et = super.inverseCumulativeProbability(p);
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,161,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,165, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,167, The lower bound of the support is always 0 no matter the parameters.
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,169, @return lower bound of the support (always 0)
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,171,Override
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,172,ublic int getSupportLowerBound() {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,173,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,177, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,179, The upper bound of the support is always positive infinity
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,180, no matter the parameters. Positive infinity is symbolised
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,181, by <code>Integer.MAX_VALUE</code> together with
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,182, {@link #isSupportUpperBoundInclusive()} being <code>false</code>
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,184, @return upper bound of the support (always <code>Integer.MAX_VALUE</code> for positive infinity)
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,186,Override
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,187,ublic int getSupportUpperBound() {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,188,eturn Integer.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,192, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,194, For number of successes <code>r</code> and
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,195," probability of success <code>p</code>, the mean is"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,196, <code>( r * p ) / ( 1 - p )</code>
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,198, @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,200,Override
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,201,rotected double calculateNumericalMean() {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,202,inal double p = getProbabilityOfSuccess();
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,203,inal double r = getNumberOfSuccesses();
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,204,eturn ( r * p ) / ( 1 - p );
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,208, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,210, For number of successes <code>r</code> and
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,211," probability of success <code>p</code>, the mean is"
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,212, <code>( r * p ) / ( 1 - p )^2</code>
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,214, @return {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,216,Override
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,217,rotected double calculateNumericalVariance() {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,218,inal double p = getProbabilityOfSuccess();
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,219,inal double r = getNumberOfSuccesses();
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,220,inal double pInv = 1 - p;
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,221,eturn ( r * p ) / (pInv * pInv);
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,225, {@inheritDoc}
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,227,Override
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,228,ublic boolean isSupportUpperBoundInclusive() {
False,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,229,eturn false;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,88,"ormal = new NormalDistributionImpl(p, FastMath.sqrt(p));"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,88,"normal = new NormalDistribution(p, FastMath.sqrt(p));"
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,35,mport org.apache.commons.math.distribution.PascalDistributionImpl;
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,35,import org.apache.commons.math.distribution.PascalDistribution;
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,773, Generates a random value from the {@link PascalDistributionImpl Pascal Distribution}.
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,773,* Generates a random value from the {@link PascalDistribution Pascal Distribution}.
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,783,"eturn nextInversionDeviate(new PascalDistributionImpl(r, p));"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,783,"return nextInversionDeviate(new PascalDistribution(r, p));"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,20,mport org.apache.commons.math.distribution.NormalDistributionImpl;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,20,import org.apache.commons.math.distribution.NormalDistribution;
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,162,inal NormalDistributionImpl standardNormal = new NormalDistributionImpl(
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,162,final NormalDistribution standardNormal = new NormalDistribution(
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,20,mport org.apache.commons.math.distribution.NormalDistributionImpl;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,20,import org.apache.commons.math.distribution.NormalDistribution;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,231,"inal NormalDistributionImpl standardNormal = new NormalDistributionImpl(0, 1);"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,231,"final NormalDistribution standardNormal = new NormalDistribution(0, 1);"
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,34,rotected double defaultTolerance = NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,34,protected double defaultTolerance = NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,38,"eturn new NormalDistributionImpl(2.1, 1.4);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,38,"return new NormalDistribution(2.1, 1.4);"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,64,rotected double defaultTolerance = NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,64,protected double defaultTolerance = NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,93,"etDistribution(new NormalDistributionImpl(0, 1));"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,93,"setDistribution(new NormalDistribution(0, 1));"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,99,"etDistribution(new NormalDistributionImpl(0, 0.1));"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,99,"setDistribution(new NormalDistribution(0, 0.1));"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,128,"ew NormalDistributionImpl(1, 0);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,128,"new NormalDistribution(1, 0);"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,141,"ormalDistribution d = new NormalDistributionImpl(mean, sd);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,141,"NormalDistribution d = new NormalDistribution(mean, sd);"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,153,"ormalDistribution distribution = new NormalDistributionImpl(0, 1);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,153,"NormalDistribution distribution = new NormalDistribution(0, 1);"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,157,f (i < 9) { // make sure not top-coded
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,157,if (i < 9) { // make sure not top-coded
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,178,"ormalDistribution normal = new NormalDistributionImpl(0,1);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,178,"NormalDistribution normal = new NormalDistribution(0,1);"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,194,"ist = new NormalDistributionImpl(0, 1);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,194,"dist = new NormalDistribution(0, 1);"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,196,"ssert.assertEquals(dist.getNumericalVariance(), 1, tol);"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,198,"ist = new NormalDistributionImpl(2.2, 1.4);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,196,"Assert.assertEquals(dist.getNumericalVariance(), 1, tol);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,198,"dist = new NormalDistribution(2.2, 1.4);"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,202,"ist = new NormalDistributionImpl(-2000.9, 10.4);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,202,"dist = new NormalDistribution(-2000.9, 10.4);"
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,32,rotected double defaultTolerance = NormalDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,32,protected double defaultTolerance = NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,44,"eturn new PascalDistributionImpl(10,0.70);"
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,44,"return new PascalDistribution(10,0.70);"
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,93,"etDistribution(new PascalDistributionImpl(5,0.0d));"
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,93,"setDistribution(new PascalDistribution(5,0.0d));"
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,108,"etDistribution(new PascalDistributionImpl(5,1.0d));"
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,108,"setDistribution(new PascalDistribution(5,1.0d));"
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,125,"ist = new PascalDistributionImpl(10, 0.5);"
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,125,"dist = new PascalDistribution(10, 0.5);"
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,127,"ssert.assertEquals(dist.getNumericalVariance(), ( 10d * 0.5d ) / (0.5d * 0.5d), tol);"
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,129,"ist = new PascalDistributionImpl(25, 0.3);"
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,127,"Assert.assertEquals(dist.getNumericalVariance(), ( 10d * 0.5d ) / (0.5d * 0.5d), tol);"
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,129,"dist = new PascalDistribution(25, 0.3);"
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,38,mport org.apache.commons.math.distribution.PascalDistributionImpl;
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,38,import org.apache.commons.math.distribution.PascalDistribution;
False,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,1018,ascalDistributionImpl distribution = (PascalDistributionImpl) testInstance.makeDistribution();
True,src/test/java/org/apache/commons/math/random/RandomDataTest.java,src/test/java/org/apache/commons/math/random/RandomDataTest.java,1018,PascalDistribution distribution = (PascalDistribution) testInstance.makeDistribution();

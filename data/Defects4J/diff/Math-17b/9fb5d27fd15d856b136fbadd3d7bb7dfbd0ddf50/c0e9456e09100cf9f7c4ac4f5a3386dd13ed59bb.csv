is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,104,// org.apache.commons.math.fraction.AbstractFormat
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,105,"{ ""denominator format can not be null"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,106,"""le format du d\u00e9nominateur ne doit pas \u00eatre nul"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,107,"{ ""numerator format can not be null"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,108,"""le format du num\u00e9rateur ne doit pas \u00eatre nul"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,110,// org.apache.commons.math.fraction.FractionFormat
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,111,"{ ""cannot convert given object to a fraction number: {0}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,112,"""impossible de convertir l''objet sous forme d''un nombre rationnel : {0}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,114,// org.apache.commons.math.fraction.FractionFormat
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,115,// org.apache.commons.math.fraction.BigFractionFormat
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,116,"{ ""unparseable fraction number: \""{0}\"""","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,117,"""\u00e9chec d''analyse du nombre rationnel \""{0}\"""" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,118,"{ ""cannot format given object as a fraction number"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,119,"""impossible de formater l''objet sous forme d''un nombre rationnel"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,121,// org.apache.commons.math.fraction.ProperFractionFormat
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,122,// org.apache.commons.math.fraction.ProperBigFractionFormat
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,123,"{ ""whole format can not be null"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,124,"""le format complet ne doit pas \u00eatre nul"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,318,/ org.apache.commons.math.fraction.FractionFormat
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,319," ""unparseable fraction number: \""{0}\"""","
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,320,"\u00e9chec d''analyse du nombre rationnel \""{0}\"""" },"
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,18,package org.apache.commons.math.fraction;
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,21,import java.text.FieldPosition;
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,22,import java.text.NumberFormat;
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,23,import java.text.ParsePosition;
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,24,import java.util.Locale;
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,26,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,28,public abstract class AbstractFormat extends NumberFormat implements Serializable {
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,30,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,31,private static final long serialVersionUID = -6981118387974191891L;
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,33,/** The format used for the denominator. */
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,34,protected NumberFormat denominatorFormat;
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,36,/** The format used for the numerator. */
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,37,protected NumberFormat numeratorFormat;
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,40,* Create an improper formatting instance with the default number format
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,41,* for the numerator and denominator.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,43,protected AbstractFormat() {
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,44,this(getDefaultNumberFormat());
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,48,* Create an improper formatting instance with a custom number format for
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,49,* both the numerator and denominator.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,50,* @param format the custom format for both the numerator and denominator.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,52,protected AbstractFormat(final NumberFormat format) {
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,53,"this(format, (NumberFormat) format.clone());"
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,57,* Create an improper formatting instance with a custom number format for
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,58,* the numerator and a custom number format for the denominator.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,59,* @param numeratorFormat the custom format for the numerator.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,60,* @param denominatorFormat the custom format for the denominator.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,62,"protected AbstractFormat(final NumberFormat numeratorFormat,"
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,63,final NumberFormat denominatorFormat) {
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,64,this.numeratorFormat   = numeratorFormat;
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,65,this.denominatorFormat = denominatorFormat;
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,69,* Create a default number format.  The default number format is based on
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,70,* {@link NumberFormat#getNumberInstance(java.util.Locale)} with the only
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,71,"* customizing is the maximum number of BigFraction digits, which is set to 0."
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,72,* @return the default number format.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,74,protected static NumberFormat getDefaultNumberFormat() {
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,75,return getDefaultNumberFormat(Locale.getDefault());
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,79,* Create a default number format.  The default number format is based on
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,80,* {@link NumberFormat#getNumberInstance(java.util.Locale)} with the only
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,81,"* customizing is the maximum number of BigFraction digits, which is set to 0."
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,82,* @param locale the specific locale used by the format.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,83,* @return the default number format specific to the given locale.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,85,protected static NumberFormat getDefaultNumberFormat(final Locale locale) {
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,86,final NumberFormat nf = NumberFormat.getNumberInstance(locale);
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,87,nf.setMaximumFractionDigits(0);
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,88,nf.setParseIntegerOnly(true);
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,89,return nf;
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,93,* Access the denominator format.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,94,* @return the denominator format.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,96,public NumberFormat getDenominatorFormat() {
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,97,return denominatorFormat;
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,101,* Access the numerator format.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,102,* @return the numerator format.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,104,public NumberFormat getNumeratorFormat() {
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,105,return numeratorFormat;
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,109,* Modify the denominator format.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,110,* @param format the new denominator format value.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,111,* @throws IllegalArgumentException if <code>format</code> is
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,112,*         <code>null</code>.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,114,public void setDenominatorFormat(final NumberFormat format) {
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,115,if (format == null) {
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,116,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,117,"""denominator format can not be null"");"
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,119,this.denominatorFormat = format;
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,123,* Modify the numerator format.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,124,* @param format the new numerator format value.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,125,* @throws IllegalArgumentException if <code>format</code> is
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,126,*         <code>null</code>.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,128,public void setNumeratorFormat(final NumberFormat format) {
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,129,if (format == null) {
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,130,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,131,"""numerator format can not be null"");"
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,133,this.numeratorFormat = format;
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,137,* Parses <code>source</code> until a non-whitespace character is found.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,138,* @param source the string to parse
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,139,"* @param pos input/ouput parsing parameter.  On output, <code>pos</code>"
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,140,*        holds the index of the next non-whitespace character.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,142,"protected static void parseAndIgnoreWhitespace(final String source,"
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,143,final ParsePosition pos) {
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,144,"parseNextCharacter(source, pos);"
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,145,pos.setIndex(pos.getIndex() - 1);
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,149,* Parses <code>source</code> until a non-whitespace character is found.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,150,* @param source the string to parse
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,151,* @param pos input/ouput parsing parameter.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,152,* @return the first non-whitespace character.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,154,"protected static char parseNextCharacter(final String source,"
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,155,final ParsePosition pos) {
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,156,int index = pos.getIndex();
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,157,final int n = source.length();
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,158,char ret = 0;
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,160,if (index < n) {
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,161,char c;
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,162,do {
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,163,c = source.charAt(index++);
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,164,} while (Character.isWhitespace(c) && index < n);
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,165,pos.setIndex(index);
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,167,if (index < n) {
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,168,ret = c;
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,172,return ret;
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,176,* Formats a double value as a fraction and appends the result to a StringBuffer.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,178,* @param value the double value to format
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,179,* @param buffer StringBuffer to append to
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,180,"* @param position On input: an alignment field, if desired. On output: the"
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,181,*            offsets of the alignment field
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,182,* @return a reference to the appended buffer
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,183,"* @see {@link #format(Object, StringBuffer, FieldPosition)}"
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,185,"public StringBuffer format(final double value,"
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,186,"final StringBuffer buffer, final FieldPosition position) {"
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,187,"return format(Double.valueOf(value), buffer, position);"
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,192,* Formats a long value as a fraction and appends the result to a StringBuffer.
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,194,* @param value the long value to format
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,195,* @param buffer StringBuffer to append to
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,196,"* @param position On input: an alignment field, if desired. On output: the"
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,197,*            offsets of the alignment field
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,198,* @return a reference to the appended buffer
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,199,"* @see {@link #format(Object, StringBuffer, FieldPosition)}"
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,201,"public StringBuffer format(final long value,"
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,202,"final StringBuffer buffer, final FieldPosition position) {"
True,src/java/org/apache/commons/math/fraction/AbstractFormat.java,src/java/org/apache/commons/math/fraction/AbstractFormat.java,203,"return format(Long.valueOf(value), buffer, position);"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,18,package org.apache.commons.math.fraction;
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,21,import java.math.BigInteger;
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,22,import java.text.FieldPosition;
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,23,import java.text.NumberFormat;
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,24,import java.text.ParseException;
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,25,import java.text.ParsePosition;
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,26,import java.util.Locale;
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,28,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,31,* Formats a BigFraction number in proper format or improper format.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,32,* <p>
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,33,"* The number format for each of the whole number, numerator and,"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,34,* denominator can be configured.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,35,* </p>
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,37,* @since 2.0
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,38,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,40,public class BigFractionFormat extends AbstractFormat implements Serializable {
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,42,/** Serializable version identifier */
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,43,private static final long serialVersionUID = -2932167925527338976L;
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,46,* Create an improper formatting instance with the default number format
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,47,* for the numerator and denominator.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,49,public BigFractionFormat() {
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,53,* Create an improper formatting instance with a custom number format for
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,54,* both the numerator and denominator.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,55,* @param format the custom format for both the numerator and denominator.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,57,public BigFractionFormat(final NumberFormat format) {
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,58,super(format);
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,62,* Create an improper formatting instance with a custom number format for
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,63,* the numerator and a custom number format for the denominator.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,64,* @param numeratorFormat the custom format for the numerator.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,65,* @param denominatorFormat the custom format for the denominator.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,67,"public BigFractionFormat(final NumberFormat numeratorFormat,"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,68,final NumberFormat denominatorFormat) {
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,69,"super(numeratorFormat, denominatorFormat);"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,73,* Get the set of locales for which complex formats are available.  This
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,74,* is the same set as the {@link NumberFormat} set.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,75,* @return available complex format locales.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,77,public static Locale[] getAvailableLocales() {
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,78,return NumberFormat.getAvailableLocales();
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,82,* This static method calls formatBigFraction() on a default instance of
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,83,* BigFractionFormat.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,85,* @param f BigFraction object to format
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,86,* @return A formatted BigFraction in proper form.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,88,public static String formatBigFraction(final BigFraction f) {
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,89,return getImproperInstance().format(f);
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,93,* Returns the default complex format for the current locale.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,94,* @return the default complex format.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,96,public static BigFractionFormat getImproperInstance() {
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,97,return getImproperInstance(Locale.getDefault());
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,101,* Returns the default complex format for the given locale.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,102,* @param locale the specific locale used by the format.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,103,* @return the complex format specific to the given locale.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,105,public static BigFractionFormat getImproperInstance(final Locale locale) {
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,106,return new BigFractionFormat(getDefaultNumberFormat(locale));
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,110,* Returns the default complex format for the current locale.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,111,* @return the default complex format.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,113,public static BigFractionFormat getProperInstance() {
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,114,return getProperInstance(Locale.getDefault());
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,118,* Returns the default complex format for the given locale.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,119,* @param locale the specific locale used by the format.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,120,* @return the complex format specific to the given locale.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,122,public static BigFractionFormat getProperInstance(final Locale locale) {
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,123,return new ProperBigFractionFormat(getDefaultNumberFormat(locale));
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,127,* Formats a {@link BigFraction} object to produce a string.  The BigFraction is
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,128,* output in improper format.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,130,* @param BigFraction the object to format.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,131,* @param toAppendTo where the text is to be appended
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,132,"* @param pos On input: an alignment field, if desired. On output: the"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,133,*            offsets of the alignment field
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,134,* @return the value passed in as toAppendTo.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,136,"public StringBuffer format(final BigFraction BigFraction,"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,137,"final StringBuffer toAppendTo, final FieldPosition pos) {"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,139,pos.setBeginIndex(0);
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,140,pos.setEndIndex(0);
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,142,"getNumeratorFormat().format(BigFraction.getNumerator(), toAppendTo, pos);"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,143,"toAppendTo.append("" / "");"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,144,"getDenominatorFormat().format(BigFraction.getDenominator(), toAppendTo, pos);"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,146,return toAppendTo;
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,150,* Formats an object and appends the result to a StringBuffer.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,151,* <code>obj</code> must be either a  {@link BigFraction} object or a
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,152,* {@link BigInteger} object or a {@link Number} object. Any other type of
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,153,* object will result in an {@link IllegalArgumentException} being thrown.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,155,* @param obj the object to format.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,156,* @param toAppendTo where the text is to be appended
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,157,"* @param pos On input: an alignment field, if desired. On output: the"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,158,*            offsets of the alignment field
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,159,* @return the value passed in as toAppendTo.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,160,"* @see java.text.Format#format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,161,* @throws IllegalArgumentException is <code>obj</code> is not a valid type.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,163,"public StringBuffer format(final Object obj,"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,164,"final StringBuffer toAppendTo, final FieldPosition pos) {"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,166,final StringBuffer ret;
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,167,if (obj instanceof BigFraction) {
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,168,"ret = format((BigFraction) obj, toAppendTo, pos);"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,169,} else if (obj instanceof BigInteger) {
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,170,"ret = format(new BigFraction((BigInteger) obj), toAppendTo, pos);"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,171,} else if (obj instanceof Number) {
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,172,"ret = format(new BigFraction(((Number) obj).doubleValue()),"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,173,"toAppendTo, pos);"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,174,} else {
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,175,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,176,"""cannot format given object as a fraction number"");"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,179,return ret;
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,183,* Parses a string to produce a {@link BigFraction} object.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,184,* @param source the string to parse
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,185,* @return the parsed {@link BigFraction} object.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,186,* @exception ParseException if the beginning of the specified string
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,187,*            cannot be parsed.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,189,public BigFraction parse(final String source) throws ParseException {
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,190,final ParsePosition parsePosition = new ParsePosition(0);
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,191,"final BigFraction result = parse(source, parsePosition);"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,192,if (parsePosition.getIndex() == 0) {
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,193,throw MathRuntimeException.createParseException(
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,194,"parsePosition.getErrorIndex(),"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,195,"""unparseable fraction number: \""{0}\"""", source);"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,197,return result;
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,201,* Parses a string to produce a {@link BigFraction} object.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,202,* This method expects the string to be formatted as an improper BigFraction.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,203,* @param source the string to parse
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,204,* @param pos input/ouput parsing parameter.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,205,* @return the parsed {@link BigFraction} object.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,207,"public BigFraction parse(final String source, final ParsePosition pos) {"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,208,final int initialIndex = pos.getIndex();
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,210,// parse whitespace
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,211,"parseAndIgnoreWhitespace(source, pos);"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,213,// parse numerator
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,214,"final BigInteger num = parseNextBigInteger(source, pos);"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,215,if (num == null) {
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,216,// invalid integer number
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,217,"// set index back to initial, error index should already be set"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,218,// character examined.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,219,pos.setIndex(initialIndex);
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,220,return null;
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,223,// parse '/'
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,224,final int startIndex = pos.getIndex();
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,225,"final char c = parseNextCharacter(source, pos);"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,226,switch (c) {
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,227,case 0 :
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,228,// no '/'
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,229,// return num as a BigFraction
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,230,return new BigFraction(num);
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,231,case '/' :
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,232,"// found '/', continue parsing denominator"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,233,break;
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,234,default :
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,235,// invalid '/'
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,236,"// set index back to initial, error index should be the last"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,237,// character examined.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,238,pos.setIndex(initialIndex);
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,239,pos.setErrorIndex(startIndex);
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,240,return null;
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,243,// parse whitespace
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,244,"parseAndIgnoreWhitespace(source, pos);"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,246,// parse denominator
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,247,"final BigInteger den = parseNextBigInteger(source, pos);"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,248,if (den == null) {
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,249,// invalid integer number
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,250,"// set index back to initial, error index should already be set"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,251,// character examined.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,252,pos.setIndex(initialIndex);
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,253,return null;
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,256,"return new BigFraction(num, den);"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,260,* Parses a string to produce a <code>BigInteger</code>.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,261,* @param source the string to parse
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,262,* @param pos input/ouput parsing parameter.
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,263,* @return a parsed <code>BigInteger</code> or null if string does not
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,264,* contain a BigInteger at the specified position
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,266,"protected BigInteger parseNextBigInteger(final String source,"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,267,final ParsePosition pos) {
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,269,final int start = pos.getIndex();
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,270,int end = (source.charAt(start) == '-') ? (start + 1) : start;
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,271,while((end < source.length()) &&
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,272,Character.isDigit(source.charAt(end))) {
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,273,++end;
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,276,try {
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,277,"BigInteger n = new BigInteger(source.substring(start, end));"
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,278,pos.setIndex(end);
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,279,return n;
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,280,} catch (NumberFormatException nfe) {
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,281,pos.setErrorIndex(start);
True,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/java/org/apache/commons/math/fraction/BigFractionFormat.java,282,return null;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,20,mport java.io.Serializable;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,38,ublic class FractionFormat extends NumberFormat implements Serializable {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,37,public class FractionFormat extends AbstractFormat {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,41,rivate static final long serialVersionUID = -6337346779577272306L;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,40,private static final long serialVersionUID = 3008655719530972611L;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,43,** The format used for the denominator. */
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,44,rivate NumberFormat denominatorFormat;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,46,** The format used for the numerator. */
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,47,rivate NumberFormat numeratorFormat;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,54,his(getDefaultNumberFormat());
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,62,ublic FractionFormat(NumberFormat format) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,63,"his(format, (NumberFormat)format.clone());"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,54,public FractionFormat(final NumberFormat format) {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,55,super(format);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,72,"ublic FractionFormat(NumberFormat numeratorFormat,"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,73,umberFormat denominatorFormat)
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,75,uper();
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,76,his.numeratorFormat = numeratorFormat;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,77,his.denominatorFormat = denominatorFormat;
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,64,"public FractionFormat(final NumberFormat numeratorFormat,"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,65,final NumberFormat denominatorFormat) {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,66,"super(numeratorFormat, denominatorFormat);"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,70,* Get the set of locales for which complex formats are available.  This
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,71,* is the same set as the {@link NumberFormat} set.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,72,* @return available complex format locales.
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,74,public static Locale[] getAvailableLocales() {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,75,return NumberFormat.getAvailableLocales();
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,92, Get the set of locales for which complex formats are available.  This
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,93, is the same set as the {@link NumberFormat} set.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,94, @return available complex format locales.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,96,ublic static Locale[] getAvailableLocales() {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,97,eturn NumberFormat.getAvailableLocales();
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,113,ublic static FractionFormat getImproperInstance(Locale locale) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,114,umberFormat f = getDefaultNumberFormat(locale);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,115,eturn new FractionFormat(f);
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,102,public static FractionFormat getImproperInstance(final Locale locale) {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,103,return new FractionFormat(getDefaultNumberFormat(locale));
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,131,ublic static FractionFormat getProperInstance(Locale locale) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,132,umberFormat f = getDefaultNumberFormat(locale);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,133,eturn new ProperFractionFormat(f);
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,119,public static FractionFormat getProperInstance(final Locale locale) {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,120,return new ProperFractionFormat(getDefaultNumberFormat(locale));
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,147, Create a default number format.  The default number format is based on
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,148, {@link NumberFormat#getNumberInstance(java.util.Locale)} with the only
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,149," customizing is the maximum number of fraction digits, which is set to 0."
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,150, @param locale the specific locale used by the format.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,151, @return the default number format specific to the given locale.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,153,rivate static NumberFormat getDefaultNumberFormat(Locale locale) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,154,umberFormat nf = NumberFormat.getNumberInstance(locale);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,155,f.setMaximumFractionDigits(0);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,156,f.setParseIntegerOnly(true);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,157,eturn nf;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,170,"ublic StringBuffer format(Fraction fraction, StringBuffer toAppendTo,"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,171,ieldPosition pos) {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,143,"public StringBuffer format(final Fraction fraction,"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,144,"final StringBuffer toAppendTo, final FieldPosition pos) {"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,197,"ublic StringBuffer format(Object obj, StringBuffer toAppendTo,"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,198,ieldPosition pos)
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,170,"public StringBuffer format(final Object obj,"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,171,"final StringBuffer toAppendTo, final FieldPosition pos) {"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,203,"et = format( (Fraction)obj, toAppendTo, pos);"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,175,"ret = format((Fraction) obj, toAppendTo, pos);"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,206,"et = format( new Fraction(((Number)obj).doubleValue()),"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,207,"oAppendTo, pos);"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,178,"ret = format(new Fraction(((Number) obj).doubleValue()),"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,179,"toAppendTo, pos);"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,209,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,210,"Cannot convert given object to a fraction."");"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,181,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,182,"""cannot convert given object to a fraction number: {0}"","
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,183,ex.getLocalizedMessage());
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,213,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,214,"Cannot format given object as a fraction"");"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,186,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,187,"""cannot format given object as a fraction number"");"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,221, Access the denominator format.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,222, @return the denominator format.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,224,ublic NumberFormat getDenominatorFormat() {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,225,eturn denominatorFormat;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,229, Access the numerator format.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,230, @return the numerator format.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,232,ublic NumberFormat getNumeratorFormat() {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,233,eturn numeratorFormat;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,243,ublic Fraction parse(String source) throws ParseException {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,244,arsePosition parsePosition = new ParsePosition(0);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,245,"raction result = parse(source, parsePosition);"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,200,public Fraction parse(final String source) throws ParseException {
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,201,final ParsePosition parsePosition = new ParsePosition(0);
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,202,"final Fraction result = parse(source, parsePosition);"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,261,"ublic Fraction parse(String source, ParsePosition pos) {"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,262,nt initialIndex = pos.getIndex();
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,218,"public Fraction parse(final String source, final ParsePosition pos) {"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,219,final int initialIndex = pos.getIndex();
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,268,"umber num = getNumeratorFormat().parse(source, pos);"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,225,"final Number num = getNumeratorFormat().parse(source, pos);"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,278,nt startIndex = pos.getIndex();
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,279,"har c = parseNextCharacter(source, pos);"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,235,final int startIndex = pos.getIndex();
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,236,"final char c = parseNextCharacter(source, pos);"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,301,"umber den = getDenominatorFormat().parse(source, pos);"
True,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,258,"final Number den = getDenominatorFormat().parse(source, pos);"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,314, Modify the denominator format.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,315, @param format the new denominator format value.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,316, @throws IllegalArgumentException if <code>format</code> is
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,317,         <code>null</code>.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,319,ublic void setDenominatorFormat(NumberFormat format) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,320,f (format == null) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,321,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,322,"denominator format can not be null."");"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,324,his.denominatorFormat = format;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,328, Modify the numerator format.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,329, @param format the new numerator format value.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,330, @throws IllegalArgumentException if <code>format</code> is
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,331,         <code>null</code>.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,333,ublic void setNumeratorFormat(NumberFormat format) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,334,f (format == null) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,335,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,336,"numerator format can not be null."");"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,338,his.numeratorFormat = format;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,342, Parses <code>source</code> until a non-whitespace character is found.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,343, @param source the string to parse
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,344," @param pos input/ouput parsing parameter.  On output, <code>pos</code>"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,345,        holds the index of the next non-whitespace character.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,347,rotected static void parseAndIgnoreWhitespace(
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,348,"tring source, ParsePosition pos)"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,350,"arseNextCharacter(source, pos);"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,351,os.setIndex(pos.getIndex() - 1);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,355, Parses <code>source</code> until a non-whitespace character is found.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,356, @param source the string to parse
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,357, @param pos input/ouput parsing parameter.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,358, @return the first non-whitespace character.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,360,"rotected static char parseNextCharacter(String source, ParsePosition pos) {"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,361,nt index = pos.getIndex();
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,362,nt n = source.length();
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,363,har ret = 0;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,365,f (index < n) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,366,har c;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,367,o {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,368, = source.charAt(index++);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,369, while (Character.isWhitespace(c) && index < n);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,370,os.setIndex(index);
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,372,f (index < n) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,373,et = c;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,377,eturn ret;
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,381, Formats a double value as a fraction and appends the result to a StringBuffer.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,383, @param value the double value to format
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,384, @param buffer StringBuffer to append to
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,385," @param position On input: an alignment field, if desired. On output: the"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,386,            offsets of the alignment field
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,387, @return a reference to the appended buffer
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,388," @see {@link #format(Object, StringBuffer, FieldPosition)}"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,390,"ublic StringBuffer format(double value, StringBuffer buffer,"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,391,ieldPosition position) {
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,392,"eturn format(Double.valueOf(value), buffer, position);"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,397, Formats a long value as a fraction and appends the result to a StringBuffer.
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,399, @param value the long value to format
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,400, @param buffer StringBuffer to append to
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,401," @param position On input: an alignment field, if desired. On output: the"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,402,            offsets of the alignment field
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,403, @return a reference to the appended buffer
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,404," @see {@link #format(Object, StringBuffer, FieldPosition)}"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,406,"ublic StringBuffer format(long value, StringBuffer buffer, FieldPosition position) {"
False,src/java/org/apache/commons/math/fraction/FractionFormat.java,src/java/org/apache/commons/math/fraction/FractionFormat.java,407,"eturn format(Long.valueOf(value), buffer, position);"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,17,package org.apache.commons.math.fraction;
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,19,import java.math.BigInteger;
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,20,import java.text.FieldPosition;
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,21,import java.text.NumberFormat;
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,22,import java.text.ParsePosition;
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,24,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,27,* Formats a BigFraction number in proper format.  The number format for each of
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,28,"* the whole number, numerator and, denominator can be configured."
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,29,* <p>
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,30,"* Minus signs are only allowed in the whole number part - i.e.,"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,31,"* ""-3 1/2"" is legitimate and denotes -7/2, but ""-3 -1/2"" is invalid and"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,32,* will result in a <code>ParseException</code>.</p>
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,34,* @since 1.1
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,35,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,37,public class ProperBigFractionFormat extends BigFractionFormat {
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,39,/** Serializable version identifier */
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,40,private static final long serialVersionUID = -6337346779577272307L;
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,42,/** The format used for the whole number. */
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,43,private NumberFormat wholeFormat;
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,46,* Create a proper formatting instance with the default number format for
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,47,"* the whole, numerator, and denominator."
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,49,public ProperBigFractionFormat() {
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,50,this(getDefaultNumberFormat());
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,54,* Create a proper formatting instance with a custom number format for the
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,55,"* whole, numerator, and denominator."
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,56,"* @param format the custom format for the whole, numerator, and"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,57,*        denominator.
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,59,public ProperBigFractionFormat(final NumberFormat format) {
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,60,"this(format, (NumberFormat)format.clone(), (NumberFormat)format.clone());"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,64,* Create a proper formatting instance with a custom number format for each
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,65,"* of the whole, numerator, and denominator."
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,66,* @param wholeFormat the custom format for the whole.
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,67,* @param numeratorFormat the custom format for the numerator.
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,68,* @param denominatorFormat the custom format for the denominator.
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,70,"public ProperBigFractionFormat(final NumberFormat wholeFormat,"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,71,"final NumberFormat numeratorFormat,"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,72,final NumberFormat denominatorFormat) {
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,73,"super(numeratorFormat, denominatorFormat);"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,74,setWholeFormat(wholeFormat);
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,78,* Formats a {@link BigFraction} object to produce a string.  The BigFraction
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,79,* is output in proper format.
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,81,* @param fraction the object to format.
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,82,* @param toAppendTo where the text is to be appended
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,83,"* @param pos On input: an alignment field, if desired. On output: the"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,84,*            offsets of the alignment field
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,85,* @return the value passed in as toAppendTo.
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,87,"public StringBuffer format(final BigFraction fraction,"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,88,"final StringBuffer toAppendTo, final FieldPosition pos) {"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,90,pos.setBeginIndex(0);
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,91,pos.setEndIndex(0);
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,93,BigInteger num = fraction.getNumerator();
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,94,BigInteger den = fraction.getDenominator();
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,95,BigInteger whole = num.divide(den);
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,96,num = num.remainder(den);
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,98,if (!BigInteger.ZERO.equals(whole)) {
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,99,"getWholeFormat().format(whole, toAppendTo, pos);"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,100,toAppendTo.append(' ');
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,101,if (num.compareTo(BigInteger.ZERO) < 0) {
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,102,num = num.negate();
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,105,"getNumeratorFormat().format(num, toAppendTo, pos);"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,106,"toAppendTo.append("" / "");"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,107,"getDenominatorFormat().format(den, toAppendTo, pos);"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,109,return toAppendTo;
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,113,* Access the whole format.
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,114,* @return the whole format.
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,116,public NumberFormat getWholeFormat() {
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,117,return wholeFormat;
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,121,* Parses a string to produce a {@link BigFraction} object.  This method
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,122,* expects the string to be formatted as a proper BigFraction.
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,123,* <p>
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,124,"* Minus signs are only allowed in the whole number part - i.e.,"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,125,"* ""-3 1/2"" is legitimate and denotes -7/2, but ""-3 -1/2"" is invalid and"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,126,* will result in a <code>ParseException</code>.</p>
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,128,* @param source the string to parse
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,129,* @param pos input/ouput parsing parameter.
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,130,* @return the parsed {@link BigFraction} object.
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,132,"public BigFraction parse(final String source, final ParsePosition pos) {"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,133,// try to parse improper BigFraction
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,134,"BigFraction ret = super.parse(source, pos);"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,135,if (ret != null) {
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,136,return ret;
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,139,final int initialIndex = pos.getIndex();
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,141,// parse whitespace
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,142,"parseAndIgnoreWhitespace(source, pos);"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,144,// parse whole
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,145,"BigInteger whole = parseNextBigInteger(source, pos);"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,146,if (whole == null) {
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,147,// invalid integer number
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,148,"// set index back to initial, error index should already be set"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,149,// character examined.
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,150,pos.setIndex(initialIndex);
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,151,return null;
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,154,// parse whitespace
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,155,"parseAndIgnoreWhitespace(source, pos);"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,157,// parse numerator
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,158,"BigInteger num = parseNextBigInteger(source, pos);"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,159,if (num == null) {
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,160,// invalid integer number
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,161,"// set index back to initial, error index should already be set"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,162,// character examined.
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,163,pos.setIndex(initialIndex);
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,164,return null;
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,167,if (num.compareTo(BigInteger.ZERO) < 0) {
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,168,"// minus signs should be leading, invalid expression"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,169,pos.setIndex(initialIndex);
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,170,return null;
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,173,// parse '/'
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,174,final int startIndex = pos.getIndex();
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,175,"final char c = parseNextCharacter(source, pos);"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,176,switch (c) {
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,177,case 0 :
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,178,// no '/'
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,179,// return num as a BigFraction
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,180,return new BigFraction(num);
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,181,case '/' :
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,182,"// found '/', continue parsing denominator"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,183,break;
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,184,default :
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,185,// invalid '/'
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,186,"// set index back to initial, error index should be the last"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,187,// character examined.
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,188,pos.setIndex(initialIndex);
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,189,pos.setErrorIndex(startIndex);
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,190,return null;
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,193,// parse whitespace
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,194,"parseAndIgnoreWhitespace(source, pos);"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,196,// parse denominator
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,197,"final BigInteger den = parseNextBigInteger(source, pos);"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,198,if (den == null) {
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,199,// invalid integer number
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,200,"// set index back to initial, error index should already be set"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,201,// character examined.
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,202,pos.setIndex(initialIndex);
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,203,return null;
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,206,if (den.compareTo(BigInteger.ZERO) < 0) {
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,207,"// minus signs must be leading, invalid"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,208,pos.setIndex(initialIndex);
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,209,return null;
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,212,boolean wholeIsNeg = whole.compareTo(BigInteger.ZERO) < 0;
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,213,if (wholeIsNeg) {
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,214,whole = whole.negate();
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,216,num = whole.multiply(den).add(num);
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,217,if (wholeIsNeg) {
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,218,num = num.negate();
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,221,"return new BigFraction(num, den);"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,226,* Modify the whole format.
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,227,* @param format The new whole format value.
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,228,* @throws IllegalArgumentException if <code>format</code> is
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,229,*         <code>null</code>.
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,231,public void setWholeFormat(final NumberFormat format) {
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,232,if (format == null) {
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,233,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,234,"""whole format can not be null"");"
True,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,236,this.wholeFormat = format;
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,23,import org.apache.commons.math.MathRuntimeException;
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,39,rivate static final long serialVersionUID = -6337346779577272307L;
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,40,private static final long serialVersionUID = 760934726031766749L;
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,225,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,226,"whole format can not be null."");"
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,226,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/java/org/apache/commons/math/fraction/ProperFractionFormat.java,227,"""whole format can not be null"");"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,18,package org.apache.commons.math.fraction;
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,20,import java.math.BigInteger;
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,21,import java.text.NumberFormat;
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,22,import java.text.ParseException;
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,23,import java.util.Locale;
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,25,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,27,public class BigFractionFormatTest extends TestCase {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,29,BigFractionFormat properFormat = null;
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,30,BigFractionFormat improperFormat = null;
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,32,protected Locale getLocale() {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,33,return Locale.getDefault();
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,36,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,37,properFormat = BigFractionFormat.getProperInstance(getLocale());
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,38,improperFormat = BigFractionFormat.getImproperInstance(getLocale());
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,41,public void testFormat() {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,42,"BigFraction c = new BigFraction(1, 2);"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,43,"String expected = ""1 / 2"";"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,45,String actual = properFormat.format(c);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,46,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,48,actual = improperFormat.format(c);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,49,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,52,public void testFormatNegative() {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,53,"BigFraction c = new BigFraction(-1, 2);"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,54,"String expected = ""-1 / 2"";"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,56,String actual = properFormat.format(c);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,57,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,59,actual = improperFormat.format(c);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,60,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,63,public void testFormatZero() {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,64,"BigFraction c = new BigFraction(0, 1);"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,65,"String expected = ""0 / 1"";"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,67,String actual = properFormat.format(c);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,68,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,70,actual = improperFormat.format(c);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,71,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,74,public void testFormatImproper() {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,75,"BigFraction c = new BigFraction(5, 3);"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,77,String actual = properFormat.format(c);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,78,"assertEquals(""1 2 / 3"", actual);"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,80,actual = improperFormat.format(c);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,81,"assertEquals(""5 / 3"", actual);"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,84,public void testFormatImproperNegative() {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,85,"BigFraction c = new BigFraction(-5, 3);"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,87,String actual = properFormat.format(c);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,88,"assertEquals(""-1 2 / 3"", actual);"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,90,actual = improperFormat.format(c);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,91,"assertEquals(""-5 / 3"", actual);"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,94,public void testParse() {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,95,"String source = ""1 / 2"";"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,97,try {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,98,BigFraction c = properFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,99,assertNotNull(c);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,100,"assertEquals(BigInteger.ONE, c.getNumerator());"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,101,"assertEquals(BigInteger.valueOf(2l), c.getDenominator());"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,103,c = improperFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,104,assertNotNull(c);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,105,"assertEquals(BigInteger.ONE, c.getNumerator());"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,106,"assertEquals(BigInteger.valueOf(2l), c.getDenominator());"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,107,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,108,fail(ex.getMessage());
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,112,public void testParseInteger() {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,113,"String source = ""10"";"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,114,try {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,115,BigFraction c = properFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,116,assertNotNull(c);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,117,"assertEquals(BigInteger.TEN, c.getNumerator());"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,118,"assertEquals(BigInteger.ONE, c.getDenominator());"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,119,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,120,fail(ex.getMessage());
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,122,try {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,123,BigFraction c = improperFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,124,assertNotNull(c);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,125,"assertEquals(BigInteger.TEN, c.getNumerator());"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,126,"assertEquals(BigInteger.ONE, c.getDenominator());"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,127,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,128,fail(ex.getMessage());
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,132,public void testParseInvalid() {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,133,"String source = ""a"";"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,134,"String msg = ""should not be able to parse '10 / a'."";"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,135,try {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,136,properFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,137,fail(msg);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,138,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,139,// success
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,141,try {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,142,improperFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,143,fail(msg);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,144,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,145,// success
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,149,public void testParseInvalidDenominator() {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,150,"String source = ""10 / a"";"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,151,"String msg = ""should not be able to parse '10 / a'."";"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,152,try {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,153,properFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,154,fail(msg);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,155,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,156,// success
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,158,try {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,159,improperFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,160,fail(msg);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,161,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,162,// success
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,166,public void testParseNegative() {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,168,try {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,169,"String source = ""-1 / 2"";"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,170,BigFraction c = properFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,171,assertNotNull(c);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,172,"assertEquals(-1, c.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,173,"assertEquals(2, c.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,175,c = improperFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,176,assertNotNull(c);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,177,"assertEquals(-1, c.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,178,"assertEquals(2, c.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,180,"source = ""1 / -2"";"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,181,c = properFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,182,assertNotNull(c);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,183,"assertEquals(-1, c.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,184,"assertEquals(2, c.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,186,c = improperFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,187,assertNotNull(c);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,188,"assertEquals(-1, c.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,189,"assertEquals(2, c.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,190,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,191,fail(ex.getMessage());
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,195,public void testParseProper() {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,196,"String source = ""1 2 / 3"";"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,198,try {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,199,BigFraction c = properFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,200,assertNotNull(c);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,201,"assertEquals(5, c.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,202,"assertEquals(3, c.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,203,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,204,fail(ex.getMessage());
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,207,try {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,208,improperFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,209,"fail(""invalid improper fraction."");"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,210,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,211,// success
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,215,public void testParseProperNegative() {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,216,"String source = ""-1 2 / 3"";"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,217,try {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,218,BigFraction c = properFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,219,assertNotNull(c);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,220,"assertEquals(-5, c.getNumeratorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,221,"assertEquals(3, c.getDenominatorAsInt());"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,222,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,223,fail(ex.getMessage());
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,226,try {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,227,improperFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,228,"fail(""invalid improper fraction."");"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,229,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,230,// success
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,234,public void testParseProperInvalidMinus() {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,235,"String source = ""2 -2 / 3"";"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,236,try {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,237,properFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,238,"fail(""invalid minus in improper fraction."");"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,239,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,240,// expected
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,242,"source = ""2 2 / -3"";"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,243,try {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,244,properFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,245,"fail(""invalid minus in improper fraction."");"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,246,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,247,// expected
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,251,public void testNumeratorFormat() {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,252,NumberFormat old = properFormat.getNumeratorFormat();
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,253,NumberFormat nf = NumberFormat.getInstance();
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,254,nf.setParseIntegerOnly(true);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,255,properFormat.setNumeratorFormat(nf);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,256,"assertEquals(nf, properFormat.getNumeratorFormat());"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,257,properFormat.setNumeratorFormat(old);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,259,old = improperFormat.getNumeratorFormat();
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,260,nf = NumberFormat.getInstance();
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,261,nf.setParseIntegerOnly(true);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,262,improperFormat.setNumeratorFormat(nf);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,263,"assertEquals(nf, improperFormat.getNumeratorFormat());"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,264,improperFormat.setNumeratorFormat(old);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,267,public void testDenominatorFormat() {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,268,NumberFormat old = properFormat.getDenominatorFormat();
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,269,NumberFormat nf = NumberFormat.getInstance();
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,270,nf.setParseIntegerOnly(true);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,271,properFormat.setDenominatorFormat(nf);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,272,"assertEquals(nf, properFormat.getDenominatorFormat());"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,273,properFormat.setDenominatorFormat(old);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,275,old = improperFormat.getDenominatorFormat();
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,276,nf = NumberFormat.getInstance();
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,277,nf.setParseIntegerOnly(true);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,278,improperFormat.setDenominatorFormat(nf);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,279,"assertEquals(nf, improperFormat.getDenominatorFormat());"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,280,improperFormat.setDenominatorFormat(old);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,283,public void testWholeFormat() {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,284,ProperBigFractionFormat format = (ProperBigFractionFormat)properFormat;
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,286,NumberFormat old = format.getWholeFormat();
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,287,NumberFormat nf = NumberFormat.getInstance();
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,288,nf.setParseIntegerOnly(true);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,289,format.setWholeFormat(nf);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,290,"assertEquals(nf, format.getWholeFormat());"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,291,format.setWholeFormat(old);
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,294,public void testLongFormat() {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,295,"assertEquals(""10 / 1"", improperFormat.format(10l));"
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,298,public void testDoubleFormat() {
True,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/org/apache/commons/math/fraction/BigFractionFormatTest.java,299,"assertEquals(""1 / 16"", improperFormat.format(0.0625));"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,17,package org.apache.commons.math.stat.inference;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,19,import org.apache.commons.math.MathException;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,22,* An interface for Mann-Whitney U test (also called Wilcoxon rank-sum test).
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,24,* @version $Revision: $ $Date: $
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,26,public interface MannWhitneyUTest {
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,29,* Computes the <a
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,30,"* href=""http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U""> Mann-Whitney"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,31,* U statistic</a> comparing mean for two independent samples possibly of
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,32,* different length.
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,33,* <p>
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,34,* This statistic can be used to perform a Mann-Whitney U test evaluating
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,35,* the null hypothesis that the two independent samples has equal mean.
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,36,* </p>
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,37,* <p>
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,38,* Let X<sub>i</sub> denote the i'th individual of the first sample and
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,39,* Y<sub>j</sub> the j'th individual in the second sample. Note that the
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,40,* samples would often have different length.
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,41,* </p>
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,42,* <p>
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,43,* <strong>Preconditions</strong>:
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,44,* <ul>
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,45,* <li>All observations in the two samples are independent.</li>
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,46,* <li>The observations are at least ordinal (continuous are also ordinal).</li>
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,47,* </ul>
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,48,* </p>
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,50,* @param x
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,51,*            the first sample
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,52,* @param y
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,53,*            the second sample
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,54,* @return mannWhitneyU statistic
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,55,* @throws IllegalArgumentException
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,56,*             if preconditions are not met
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,58,"double mannWhitneyU(final double[] x, final double[] y)"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,59,throws IllegalArgumentException;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,62,"* Returns the asymptotic <i>observed significance level</i>, or <a href="
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,63,"* ""http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"">"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,64,"* p-value</a>, associated with a <a"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,65,"* href=""http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U""> Mann-Whitney"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,66,* U statistic</a> comparing mean for two independent samples.
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,67,* <p>
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,68,* Let X<sub>i</sub> denote the i'th individual of the first sample and
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,69,* Y<sub>j</sub> the j'th individual in the second sample. Note that the
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,70,* samples would often have different length.
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,71,* </p>
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,72,* <p>
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,73,* <strong>Preconditions</strong>:
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,74,* <ul>
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,75,* <li>All observations in the two samples are independent.</li>
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,76,* <li>The observations are at least ordinal (continuous are also ordinal).</li>
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,77,* </ul>
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,78,* </p>
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,80,* @param x
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,81,*            the first sample
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,82,* @param y
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,83,*            the second sample
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,84,* @param exactPValue
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,85,"*            if the exact p-value is wanted (only works for x.length <= 30,"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,86,"*            if true and x.length > 30, this is ignored because"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,87,*            calculations may take too long)
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,88,* @return asymptotic p-value
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,89,* @throws IllegalArgumentException
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,90,*             if preconditions are not met
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,91,* @throws MathException
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,92,*             if an error occurs computing the p-value
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,94,"double mannWhitneyUTest(final double[] x, final double[] y)"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,95,"throws IllegalArgumentException, MathException;"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,17,package org.apache.commons.math.stat.inference;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,19,import org.apache.commons.math.MathException;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,20,import org.apache.commons.math.distribution.NormalDistributionImpl;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,21,import org.apache.commons.math.stat.ranking.NaNStrategy;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,22,import org.apache.commons.math.stat.ranking.NaturalRanking;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,23,import org.apache.commons.math.stat.ranking.TiesStrategy;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,24,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,27,* An implementation of the Mann-Whitney U test (also called Wilcoxon rank-sum
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,28,* test).
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,30,* @version $Revision: $ $Date: $
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,32,public class MannWhitneyUTestImpl implements MannWhitneyUTest {
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,33,private NaturalRanking naturalRanking;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,36,* Create a test instance using where NaN's are left in place and ties get
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,37,* the average of applicable ranks. Use this unless you are very sure of
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,38,* what you are doing.
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,40,public MannWhitneyUTestImpl() {
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,41,"naturalRanking = new NaturalRanking(NaNStrategy.FIXED,"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,42,TiesStrategy.AVERAGE);
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,46,* Create a test instance using the given strategies for NaN's and ties.
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,47,* Only use this if you are sure of what you are doing.
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,49,* @param nanStrategy
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,50,*            specifies the strategy that should be used for Double.NaN's
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,51,* @param tiesStrategy
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,52,*            specifies the strategy that should be used for ties
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,54,"public MannWhitneyUTestImpl(NaNStrategy nanStrategy,"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,55,TiesStrategy tiesStrategy) {
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,56,"naturalRanking = new NaturalRanking(nanStrategy, tiesStrategy);"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,60,* Ensures that the provided arrays fulfills the assumptions.
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,62,* @param x
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,63,* @param y
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,64,* @throws IllegalArgumentException
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,65,*             if assumptions are not met
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,67,"private void ensureDataConformance(final double[] x, final double[] y)"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,68,throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,69,if (x == null) {
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,70,"throw new IllegalArgumentException(""x must not be null"");"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,73,if (y == null) {
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,74,"throw new IllegalArgumentException(""y must not be null"");"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,77,if (x.length == 0) {
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,78,throw new IllegalArgumentException(
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,79,"""x must contain at least one element"");"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,82,if (y.length == 0) {
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,83,throw new IllegalArgumentException(
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,84,"""y must contain at least one element"");"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,88,"private double[] concatinateSamples(final double[] x, final double[] y) {"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,89,final double[] z = new double[x.length + y.length];
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,91,"System.arraycopy(x, 0, z, 0, x.length);"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,92,"System.arraycopy(y, 0, z, x.length, y.length);"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,94,return z;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,98,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,100,* @param x
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,101,*            the first sample
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,102,* @param y
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,103,*            the second sample
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,104,* @return mannWhitneyU statistic U (maximum of U<sup>x</sup> and U<sup>y</sup>)
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,105,* @throws IllegalArgumentException
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,106,*             if preconditions are not met
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,108,"public double mannWhitneyU(final double[] x, final double[] y)"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,109,throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,111,"ensureDataConformance(x, y);"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,113,"final double[] z = concatinateSamples(x, y);"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,114,final double[] ranks = naturalRanking.rank(z);
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,116,double sumRankX = 0;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,119,* The ranks for x is in the first x.length entries in ranks because x
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,120,* is in the first x.length entries in z
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,122,for (int i = 0; i < x.length; ++i) {
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,123,sumRankX += ranks[i];
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,127,"* U1 = R1 - (n1 * (n1 + 1)) / 2 where R1 is sum of ranks for sample 1,"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,128,"* e.g. x, n1 is the number of observations in sample 1."
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,130,final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,133,* It can be shown that U1 + U2 = n1 * n2
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,135,final double U2 = x.length * y.length - U1;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,137,"return FastMath.max(U1, U2);"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,141,* @param Umin
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,142,*            smallest Mann-Whitney U value
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,143,* @param N
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,144,*            number of subjects (corresponding to x.length)
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,145,* @return two-sided asymptotic p-value
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,146,* @throws MathException
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,147,*             if an error occurs computing the p-value
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,149,"private double calculateAsymptoticPValue(final double Umin, final int n1,"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,150,final int n2) throws MathException {
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,152,final int n1n2prod = n1 * n2;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,154,// http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,155,final double EU = (double) n1n2prod / 2.0;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,156,final double VarU = (double) (n1n2prod * (n1 + n2 + 1)) / 12.0;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,158,final double z = (Umin - EU) / FastMath.sqrt(VarU);
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,160,final NormalDistributionImpl standardNormal = new NormalDistributionImpl(
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,161,"0, 1);"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,163,return 2 * standardNormal.cumulativeProbability(z);
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,167,* Ties give rise to biased variance at the moment. See e.g. <a
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,168,"* href=""http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf"""
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,169,* >http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf</a>.
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,171,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,173,* @param x
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,174,*            the first sample
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,175,* @param y
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,176,*            the second sample
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,177,* @param exactPValue
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,178,*            if the exact p-value is wanted (only for x.length <= 50)
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,179,* @return asymptotic p-value (biased for samples with ties)
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,180,* @throws IllegalArgumentException
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,181,*             if preconditions are not met
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,182,* @throws MathException
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,183,*             if an error occurs computing the p-value
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,185,"public double mannWhitneyUTest(final double[] x, final double[] y)"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,186,"throws IllegalArgumentException, MathException {"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,188,"ensureDataConformance(x, y);"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,190,"final double Umax = mannWhitneyU(x, y);"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,193,* It can be shown that U1 + U2 = n1 * n2
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,195,final double Umin = x.length * y.length - Umax;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,197,"return calculateAsymptoticPValue(Umin, x.length, y.length);"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,17,package org.apache.commons.math.stat.inference;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,19,import org.apache.commons.math.MathException;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,22,* An interface for Wilcoxon signed-rank test.
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,24,* @version $Revision: $ $Date: $
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,26,public interface WilcoxonSignedRankTest {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,29,* Computes the <a
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,30,"* href=""http://en.wikipedia.org/wiki/Wilcoxon_signed-rank_test"">"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,31,* Wilcoxon signed ranked statistic</a> comparing mean for two related
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,32,* samples or repeated measurements on a single sample.
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,33,* <p>
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,34,* This statistic can be used to perform a Wilcoxon signed ranked test
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,35,* evaluating the null hypothesis that the two related samples or repeated
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,36,* measurements on a single sample has equal mean.
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,37,* </p>
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,38,* <p>
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,39,* Let X<sub>i</sub> denote the i'th individual of the first sample and
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,40,* Y<sub>i</sub> the related i'th individual in the second sample. Let
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,41,* Z<sub>i</sub> = Y<sub>i</sub> - X<sub>i</sub>.
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,42,* </p>
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,43,* <p>
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,44,* <strong>Preconditions</strong>:
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,45,* <ul>
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,46,* <li>The differences Z<sub>i</sub> must be independent.</li>
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,47,* <li>Each Z<sub>i</sub> comes from a continuous population (they must be
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,48,* identical) and is symmetric about a common median.</li>
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,49,* <li>The values that X<sub>i</sub> and Y<sub>i</sub> represent are
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,50,"* ordered, so the comparisons greater than, less than, and equal to are"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,51,* meaningful.</li>
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,52,* </ul>
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,53,* </p>
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,55,* @param x
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,56,*            the first sample
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,57,* @param y
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,58,*            the second sample
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,59,* @return wilcoxonSignedRank statistic
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,60,* @throws IllegalArgumentException
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,61,*             if preconditions are not met
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,63,"double wilcoxonSignedRank(final double[] x, final double[] y)"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,64,throws IllegalArgumentException;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,67,"* Returns the <i>observed significance level</i>, or <a href="
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,68,"* ""http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"">"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,69,"* p-value</a>, associated with a <a"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,70,"* href=""http://en.wikipedia.org/wiki/Wilcoxon_signed-rank_test"">"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,71,* Wilcoxon signed ranked statistic</a> comparing mean for two related
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,72,* samples or repeated measurements on a single sample.
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,73,* <p>
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,74,* Let X<sub>i</sub> denote the i'th individual of the first sample and
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,75,* Y<sub>i</sub> the related i'th individual in the second sample. Let
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,76,* Z<sub>i</sub> = Y<sub>i</sub> - X<sub>i</sub>.
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,77,* </p>
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,78,* <p>
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,79,* <strong>Preconditions</strong>:
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,80,* <ul>
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,81,* <li>The differences Z<sub>i</sub> must be independent.</li>
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,82,* <li>Each Z<sub>i</sub> comes from a continuous population (they must be
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,83,* identical) and is symmetric about a common median.</li>
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,84,* <li>The values that X<sub>i</sub> and Y<sub>i</sub> represent are
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,85,"* ordered, so the comparisons greater than, less than, and equal to are"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,86,* meaningful.</li>
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,87,* </ul>
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,88,* </p>
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,90,* @param x
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,91,*            the first sample
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,92,* @param y
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,93,*            the second sample
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,94,* @param exactPValue
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,95,"*            if the exact p-value is wanted (only works for x.length <= 30,"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,96,"*            if true and x.length > 30, this is ignored because"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,97,*            calculations may take too long)
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,98,* @return p-value
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,99,* @throws IllegalArgumentException
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,100,*             if preconditions are not met
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,101,* @throws MathException
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,102,*             if an error occurs computing the p-value
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,104,"double wilcoxonSignedRankTest(final double[] x, final double[] y,"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,105,"boolean exactPValue) throws IllegalArgumentException,"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,106,MathException;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,17,package org.apache.commons.math.stat.inference;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,19,import org.apache.commons.math.MathException;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,20,import org.apache.commons.math.distribution.NormalDistributionImpl;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,21,import org.apache.commons.math.stat.ranking.NaNStrategy;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,22,import org.apache.commons.math.stat.ranking.NaturalRanking;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,23,import org.apache.commons.math.stat.ranking.TiesStrategy;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,24,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,27,* An implementation of the Wilcoxon signed-rank test.
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,29,* @version $Revision: $ $Date: $
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,31,public class WilcoxonSignedRankTestImpl implements WilcoxonSignedRankTest {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,32,private NaturalRanking naturalRanking;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,35,* Create a test instance where NaN's are left in place and ties get
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,36,* the average of applicable ranks. Use this unless you are very sure
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,37,* of what you are doing.
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,39,public WilcoxonSignedRankTestImpl() {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,40,"naturalRanking = new NaturalRanking(NaNStrategy.FIXED,"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,41,TiesStrategy.AVERAGE);
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,45,* Create a test instance using the given strategies for NaN's and ties.
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,46,* Only use this if you are sure of what you are doing.
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,48,* @param nanStrategy
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,49,*            specifies the strategy that should be used for Double.NaN's
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,50,* @param tiesStrategy
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,51,*            specifies the strategy that should be used for ties
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,53,"public WilcoxonSignedRankTestImpl(NaNStrategy nanStrategy,"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,54,TiesStrategy tiesStrategy) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,55,"naturalRanking = new NaturalRanking(nanStrategy, tiesStrategy);"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,59,* Ensures that the provided arrays fulfills the assumptions.
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,61,* @param x
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,62,* @param y
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,63,* @throws IllegalArgumentException
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,64,*             if assumptions are not met
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,66,"private void ensureDataConformance(final double[] x, final double[] y)"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,67,throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,68,if (x == null) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,69,"throw new IllegalArgumentException(""x must not be null"");"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,72,if (y == null) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,73,"throw new IllegalArgumentException(""y must not be null"");"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,76,if (x.length != y.length) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,77,throw new IllegalArgumentException(
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,78,"""x and y must contain the same number of elements"");"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,81,if (x.length == 0) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,82,throw new IllegalArgumentException(
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,83,"""x and y must contain at least one element"");"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,88,* Calculates y[i] - x[i] for all i
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,90,* @param x
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,91,* @param y
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,92,* @throws IllegalArgumentException
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,93,*             if assumptions are not met
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,95,"private double[] calculateDifferences(final double[] x, final double[] y)"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,96,throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,98,final double[] z = new double[x.length];
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,100,for (int i = 0; i < x.length; ++i) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,101,z[i] = y[i] - x[i];
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,104,return z;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,108,* Calculates |z[i]| for all i
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,110,* @param z
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,111,* @throws IllegalArgumentException
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,112,*             if assumptions are not met
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,114,private double[] calculateAbsoluteDifferences(final double[] z)
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,115,throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,116,if (z == null) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,117,"throw new IllegalArgumentException(""z must not be null"");"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,120,if (z.length == 0) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,121,throw new IllegalArgumentException(
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,122,"""z must contain at least one element"");"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,125,final double[] zAbs = new double[z.length];
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,127,for (int i = 0; i < z.length; ++i) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,128,zAbs[i] = FastMath.abs(z[i]);
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,131,return zAbs;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,135,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,137,* @param x
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,138,*            the first sample
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,139,* @param y
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,140,*            the second sample
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,141,* @return wilcoxonSignedRank statistic (the larger of W+ and W-)
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,142,* @throws IllegalArgumentException
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,143,*             if preconditions are not met
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,145,"public double wilcoxonSignedRank(final double[] x, final double[] y)"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,146,throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,148,"ensureDataConformance(x, y);"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,150,// throws IllegalArgumentException if x and y are not correctly
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,151,// specified
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,152,"final double[] z = calculateDifferences(x, y);"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,153,final double[] zAbs = calculateAbsoluteDifferences(z);
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,155,final double[] ranks = naturalRanking.rank(zAbs);
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,157,double Wplus = 0;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,159,for (int i = 0; i < z.length; ++i) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,160,if (z[i] > 0) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,161,Wplus += ranks[i];
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,165,final int N = x.length;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,166,final double Wminus = (((double) (N * (N + 1))) / 2.0) - Wplus;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,168,"return FastMath.max(Wplus, Wminus);"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,172,* Algorithm inspired by
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,173,* http://www.fon.hum.uva.nl/Service/Statistics/Signed_Rank_Algorihms.html#C
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,174,"* by Rob van Son, Institute of Phonetic Sciences & IFOTT,"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,175,* University of Amsterdam
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,177,* @param Wmax largest Wilcoxon signed rank value
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,178,* @param N number of subjects (corresponding to x.length)
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,179,* @return two-sided exact p-value
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,181,"private double calculateExactPValue(final double Wmax, final int N) {"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,183,// Total number of outcomes (equal to 2^N but a lot faster)
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,184,final int m = 1 << N;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,186,int largerRankSums = 0;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,188,for (int i = 0; i < m; ++i) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,189,int rankSum = 0;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,191,// Generate all possible rank sums
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,192,for (int j = 0; j < N; ++j) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,194,// (i >> j) & 1 extract i's j-th bit from the right
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,195,if (((i >> j) & 1) == 1) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,196,rankSum += j + 1;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,200,if (rankSum >= Wmax) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,201,++largerRankSums;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,206,"* largerRankSums / m gives the one-sided p-value, so it's multiplied"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,207,* with 2 to get the two-sided p-value
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,209,return 2 * ((double) largerRankSums) / ((double) m);
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,213,* @param Wmin smallest Wilcoxon signed rank value
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,214,* @param N number of subjects (corresponding to x.length)
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,215,* @return two-sided asymptotic p-value
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,216,* @throws MathException if an error occurs computing the p-value
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,218,"private double calculateAsymptoticPValue(final double Wmin, final int N) throws MathException {"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,220,final double ES = (double) (N * (N + 1)) / 4.0;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,222,/* Same as (but saves computations):
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,223,* final double VarW = ((double) (N * (N + 1) * (2*N + 1))) / 24;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,225,final double VarS = ES * ((double) (2 * N + 1) / 6.0);
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,227,// - 0.5 is a continuity correction
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,228,final double z = (Wmin - ES - 0.5) / FastMath.sqrt(VarS);
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,230,"final NormalDistributionImpl standardNormal = new NormalDistributionImpl(0, 1);"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,232,return 2*standardNormal.cumulativeProbability(z);
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,236,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,238,* @param x
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,239,*            the first sample
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,240,* @param y
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,241,*            the second sample
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,242,* @param exactPValue
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,243,*            if the exact p-value is wanted (only for x.length <= 30)
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,244,* @return p-value
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,245,* @throws IllegalArgumentException
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,246,*             if preconditions are not met or exact p-value is wanted for
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,247,*             when x.length > 30
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,248,* @throws MathException
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,249,*             if an error occurs computing the p-value
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,251,"public double wilcoxonSignedRankTest(final double[] x, final double[] y,"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,252,"boolean exactPValue) throws IllegalArgumentException,"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,253,MathException {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,255,"ensureDataConformance(x, y);"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,257,final int N = x.length;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,258,"final double Wmax = wilcoxonSignedRank(x, y);"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,260,if (exactPValue && N > 30) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,261,"throw new IllegalArgumentException(""Exact test can only be made for N <= 30."");"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,264,if (exactPValue) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,265,"return calculateExactPValue(Wmax, N);"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,266,} else {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,267,final double Wmin = ( (double)(N*(N+1)) / 2.0 ) - Wmax;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,268,"return calculateAsymptoticPValue(Wmin, N);"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,17,package org.apache.commons.math.stat.inference;
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,19,import junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,22,* Test cases for the ChiSquareTestImpl class.
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,24,* @version $Revision: $ $Date: $
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,27,public class MannWhitneyUTestTest extends TestCase {
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,29,protected MannWhitneyUTest testStatistic = new MannWhitneyUTestImpl();
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,31,public MannWhitneyUTestTest(String name) {
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,32,super(name);
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,35,public void testMannWhitneyUSimple() throws Exception {
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,36,/* Target values computed using R version 2.11.1
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,37,"* x <- c(19, 22, 16, 29, 24)"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,38,"* y <- c(20, 11, 17, 12)"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,39,"* wilcox.test(x, y, alternative = ""two.sided"", mu = 0, paired = FALSE, exact = FALSE, correct = FALSE)"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,40,"* W = 17, p-value = 0.08641"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,42,"final double x[] = {19, 22, 16, 29, 24};"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,43,"final double y[] = {20, 11, 17, 12};"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,45,"assertEquals(17, testStatistic.mannWhitneyU(x, y), 1e-10);"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,46,"assertEquals(0.08641, testStatistic.mannWhitneyUTest(x, y), 1e-5);"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,50,public void testMannWhitneyUInputValidation() throws Exception {
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,51,"/* Samples must be present, i.e. length > 0"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,53,try {
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,54,"testStatistic.mannWhitneyUTest(new double[] { }, new double[] { 1.0 });"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,55,"fail(""x does not contain samples (exact), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,56,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,57,// expected
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,60,try {
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,61,"testStatistic.mannWhitneyUTest(new double[] { 1.0 }, new double[] { });"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,62,"fail(""y does not contain samples (exact), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,63,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,64,// expected
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,68,* x and y is null
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,70,try {
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,71,"testStatistic.mannWhitneyUTest(null, null);"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,72,"fail(""x and y is null (exact), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,73,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,74,// expected
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,77,try {
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,78,"testStatistic.mannWhitneyUTest(null, null);"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,79,"fail(""x and y is null (asymptotic), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,80,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,81,// expected
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,85,* x or y is null
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,87,try {
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,88,"testStatistic.mannWhitneyUTest(null, new double[] { 1.0 });"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,89,"fail(""x is null (exact), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,90,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,91,// expected
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,94,try {
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,95,"testStatistic.mannWhitneyUTest(new double[] { 1.0 }, null);"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,96,"fail(""y is null (exact), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,97,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,98,// expected
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,17,package org.apache.commons.math.stat.inference;
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,19,import junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,22,* Test cases for the ChiSquareTestImpl class.
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,24,* @version $Revision: $ $Date: $
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,27,public class WilcoxonSignedRankTestTest extends TestCase {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,29,protected WilcoxonSignedRankTest testStatistic = new WilcoxonSignedRankTestImpl();
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,31,public WilcoxonSignedRankTestTest(String name) {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,32,super(name);
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,35,public void testWilcoxonSignedRankSimple() throws Exception {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,36,/* Target values computed using R version 2.11.1
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,37,"* x <- c(1.83, 0.50, 1.62, 2.48, 1.68, 1.88, 1.55, 3.06, 1.30)"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,38,"* y <- c(0.878, 0.647, 0.598, 2.05, 1.06, 1.29, 1.06, 3.14, 1.29)"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,40,"final double x[] = {1.83, 0.50, 1.62, 2.48, 1.68, 1.88, 1.55, 3.06, 1.30};"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,41,"final double y[] = {0.878, 0.647, 0.598, 2.05, 1.06, 1.29, 1.06, 3.14, 1.29};"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,43,/* EXACT:
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,44,"* wilcox.test(x, y, alternative = ""two.sided"", mu = 0, paired = TRUE, exact = TRUE, correct = FALSE)"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,45,"* V = 40, p-value = 0.03906"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,47,* Corresponds to the value obtained in R.
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,49,"assertEquals(40, testStatistic.wilcoxonSignedRank(x, y), 1e-10);"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,50,"assertEquals(0.03906, testStatistic.wilcoxonSignedRankTest(x, y, true), 1e-5);"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,52,/* ASYMPTOTIC:
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,53,"* wilcox.test(x, y, alternative = ""two.sided"", mu = 0, paired = TRUE, exact = FALSE, correct = FALSE)"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,54,"* V = 40, p-value = 0.03815"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,56,"* This is not entirely the same due to different corrects,"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,57,* e.g. http://mlsc.lboro.ac.uk/resources/statistics/wsrt.pdf
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,58,* and src/library/stats/R/wilcox.test.R in the R source
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,60,"assertEquals(40, testStatistic.wilcoxonSignedRank(x, y), 1e-10);"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,61,"assertEquals(0.0329693812, testStatistic.wilcoxonSignedRankTest(x, y, false), 1e-10);"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,64,public void testWilcoxonSignedRankInputValidation() throws Exception {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,66,* Exact only for sample size <= 30
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,68,final double[] x1 = new double[30];
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,69,final double[] x2 = new double[31];
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,70,final double[] y1 = new double[30];
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,71,final double[] y2 = new double[31];
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,72,for (int i = 0; i < 30; ++i) {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,73,x1[i] = x2[i] = y1[i] = y2[i] = i;
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,76,// Exactly 30 is okay
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,77,"testStatistic.wilcoxonSignedRankTest(x1, y1, true);"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,79,try {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,80,"testStatistic.wilcoxonSignedRankTest(x2, y2, true);"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,81,"fail(""More than 30 samples and exact chosen, IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,82,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,83,// expected
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,86,"/* Samples must be present, i.e. length > 0"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,88,try {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,89,"testStatistic.wilcoxonSignedRankTest(new double[] { }, new double[] { 1.0 }, true);"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,90,"fail(""x does not contain samples (exact), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,91,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,92,// expected
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,95,try {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,96,"testStatistic.wilcoxonSignedRankTest(new double[] { }, new double[] { 1.0 }, false);"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,97,"fail(""x does not contain samples (asymptotic), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,98,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,99,// expected
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,102,try {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,103,"testStatistic.wilcoxonSignedRankTest(new double[] { 1.0 }, new double[] { }, true);"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,104,"fail(""y does not contain samples (exact), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,105,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,106,// expected
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,109,try {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,110,"testStatistic.wilcoxonSignedRankTest(new double[] { 1.0 }, new double[] { }, false);"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,111,"fail(""y does not contain samples (asymptotic), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,112,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,113,// expected
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,116,"/* Samples not same size, i.e. cannot be pairred"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,118,try {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,119,"testStatistic.wilcoxonSignedRankTest(new double[] { 1.0, 2.0 }, new double[] { 3.0 }, true);"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,120,"fail(""x and y not same size (exact), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,121,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,122,// expected
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,125,try {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,126,"testStatistic.wilcoxonSignedRankTest(new double[] { 1.0, 2.0 }, new double[] { 3.0 }, false);"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,127,"fail(""x and y not same size (asymptotic), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,128,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,129,// expected
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,133,* x and y is null
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,135,try {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,136,"testStatistic.wilcoxonSignedRankTest(null, null, true);"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,137,"fail(""x and y is null (exact), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,138,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,139,// expected
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,142,try {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,143,"testStatistic.wilcoxonSignedRankTest(null, null, false);"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,144,"fail(""x and y is null (asymptotic), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,145,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,146,// expected
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,150,* x or y is null
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,152,try {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,153,"testStatistic.wilcoxonSignedRankTest(null, new double[] { 1.0 }, true);"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,154,"fail(""x is null (exact), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,155,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,156,// expected
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,159,try {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,160,"testStatistic.wilcoxonSignedRankTest(null, new double[] { 1.0 }, false);"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,161,"fail(""x is null (asymptotic), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,162,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,163,// expected
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,166,try {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,167,"testStatistic.wilcoxonSignedRankTest(new double[] { 1.0 }, null, true);"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,168,"fail(""y is null (exact), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,169,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,170,// expected
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,173,try {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,174,"testStatistic.wilcoxonSignedRankTest(new double[] { 1.0 }, null, false);"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,175,"fail(""y is null (asymptotic), IllegalArgumentException expected"");"
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,176,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,177,// expected

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,19,mport org.apache.commons.math.MathException;
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,37,rivate Beta() {
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,38,uper();
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,35,private Beta() {}
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,46, @param x the value.
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,47, @param a the a parameter.
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,48, @param b the b parameter.
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,49," @return the regularized beta function I(x, a, b)"
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,42,* @param x Value.
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,43,* @param a Parameter {@code a}.
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,44,* @param b Parameter {@code b}.
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,45,"* @return the regularized beta function I(x, a, b)."
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,46,* @throws org.apache.commons.math.exception.MaxCountExceededException
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,47,* if the algorithm fails to converge.
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,52,"ublic static double regularizedBeta(double x, double a, double b)"
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,53,hrows MathException
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,50,"public static double regularizedBeta(double x, double a, double b) {"
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,63, @param x the value.
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,64, @param a the a parameter.
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,65, @param b the b parameter.
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,59,* @param x Value.
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,60,* @param a Parameter {@code a}.
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,61,* @param b Parameter {@code b}.
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,67,                series is less than epsilon the approximation ceases
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,68,                to calculate further elements in the series.
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,63,* series is less than epsilon the approximation ceases to calculate
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,64,* further elements in the series.
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,70, @throws MathException if the algorithm fails to converge.
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,66,* @throws org.apache.commons.math.exception.MaxCountExceededException
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,67,* if the algorithm fails to converge.
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,72,"ublic static double regularizedBeta(double x, double a, double b,"
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,73,ouble epsilon) throws MathException
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,69,"public static double regularizedBeta(double x,"
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,70,"double a, double b,"
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,71,double epsilon) {
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,82, @param a the a parameter.
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,83, @param b the b parameter.
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,79,* @param a Parameter {@code a}.
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,80,* @param b Parameter {@code b}.
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,86, @throws MathException if the algorithm fails to converge.
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,83,* @throws org.apache.commons.math.exception.MaxCountExceededException
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,84,* if the algorithm fails to converge.
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,88,"ublic static double regularizedBeta(double x, double a, double b,"
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,89,nt maxIterations) throws MathException
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,86,"public static double regularizedBeta(double x,"
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,87,"double a, double b,"
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,88,int maxIterations) {
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,108, @param a the a parameter.
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,109, @param b the b parameter.
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,106,* @param a Parameter {@code a}.
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,107,* @param b Parameter {@code b}.
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,111,                series is less than epsilon the approximation ceases
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,112,                to calculate further elements in the series.
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,109,* series is less than epsilon the approximation ceases to calculate
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,110,* further elements in the series.
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,115, @throws MathException if the algorithm fails to converge.
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,113,* @throws org.apache.commons.math.exception.MaxCountExceededException
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,114,* if the algorithm fails to converge.
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,117,"ublic static double regularizedBeta(double x, final double a,"
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,118,"inal double b, double epsilon, int maxIterations) throws MathException"
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,116,"public static double regularizedBeta(double x,"
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,117,"final double a, final double b,"
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,118,"double epsilon, int maxIterations) {"
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,122,f (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,123,x > 1) || (a <= 0.0) || (b <= 0.0))
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,121,if (Double.isNaN(x) ||
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,122,Double.isNaN(a) ||
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,123,Double.isNaN(b) ||
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,124,x < 0 ||
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,125,x > 1 ||
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,126,a <= 0.0 ||
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,127,b <= 0.0) {
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,163, @param a the a parameter.
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,164, @param b the b parameter.
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,165," @return log(B(a, b))"
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,166,* @param a Parameter {@code a}.
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,167,* @param b Parameter {@code b}.
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,168,"* @return log(B(a, b))."
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,180, @param a the a parameter.
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,181, @param b the b parameter.
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,183,* @param a Parameter {@code a}.
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,184,* @param b Parameter {@code b}.
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,183,                series is less than epsilon the approximation ceases
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,184,                to calculate further elements in the series.
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,186,* series is less than epsilon the approximation ceases to calculate
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,187,* further elements in the series.
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,186," @return log(B(a, b))"
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,189,"* @return log(B(a, b))."
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,188,"ublic static double logBeta(double a, double b, double epsilon,"
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,189,nt maxIterations) {
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,191,"public static double logBeta(double a, double b,"
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,192,"double epsilon,"
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,193,int maxIterations) {
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,193,f (Double.isNaN(a) || Double.isNaN(b) || (a <= 0.0) || (b <= 0.0)) {
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,196,if (Double.isNaN(a) ||
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,197,Double.isNaN(b) ||
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,198,a <= 0.0 ||
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,199,b <= 0.0) {
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,19,mport org.apache.commons.math.MathException;
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,33,rivate Erf() {
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,34,uper();
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,31,private Erf() {}
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,38, <p>Returns the error function</p>
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,34,* Returns the error function.
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,45," <p>The value returned is always between -1 and 1 (inclusive).  If {@code abs(x) > 40}, then"
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,46," {@code erf(x)} is indistinguishable from either 1 or -1 as a double, so the appropriate extreme"
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,47, value is returned.</p>
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,42,* <p>The value returned is always between -1 and 1 (inclusive).
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,43,"* If {@code abs(x) > 40}, then {@code erf(x)} is indistinguishable from"
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,44,"* either 1 or -1 as a double, so the appropriate extreme value is returned."
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,45,* </p>
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,51, @throws MathException if the algorithm fails to converge.
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,49,* @throws org.apache.commons.math.exception.MaxCountExceededException
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,50,* if the algorithm fails to converge.
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,54,ublic static double erf(double x) throws MathException {
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,53,public static double erf(double x) {
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,66, <p>Returns the complementary error function</p>
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,67, <p>erfc(x) = 2/&radic;&pi; <sub>x</sub>&int;<sup>&infin;</sup> e<sup>-t<sup>2</sup></sup>dt <br/>
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,65,* Returns the complementary error function.
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,67,* <p>erfc(x) = 2/&radic;&pi; <sub>x</sub>&int;<sup>&infin;</sup> e<sup>-t<sup>2</sup></sup>dt
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,68,* <br/>
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,74," <p>The value returned is always between 0 and 2 (inclusive).  If {@code abs(x) > 40}, then"
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,75," {@code erf(x)} is indistinguishable from either 0 or 2 as a double, so the appropriate extreme"
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,76, value is returned.</p>
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,75,* <p>The value returned is always between 0 and 2 (inclusive).
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,76,"* If {@code abs(x) > 40}, then {@code erf(x)} is indistinguishable from"
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,77,"* either 0 or 2 as a double, so the appropriate extreme value is returned."
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,78,* </p>
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,80, @throws MathException if the algorithm fails to converge
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,82,* @throws org.apache.commons.math.exception.MaxCountExceededException
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,83,* if the algorithm fails to converge.
False,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,84,ublic static double erfc(double x) throws MathException {
True,src/main/java/org/apache/commons/math/special/Erf.java,src/main/java/org/apache/commons/math/special/Erf.java,87,public static double erfc(double x) {
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,19,mport org.apache.commons.math.MathException;
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,42,rivate static final double[] LANCZOS =
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,38,private static final double[] LANCZOS = {
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,74,rivate Gamma() {
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,75,uper();
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,66,private Gamma() {}
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,92, @param x the value.
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,82,* @param x Value.
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,120, @param a the a parameter.
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,121, @param x the value.
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,122," @return the regularized gamma function P(a, x)"
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,123, @throws MathException if the algorithm fails to converge.
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,110,* @param a Parameter.
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,111,* @param x Value.
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,112,"* @return the regularized gamma function P(a, x)."
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,113,* @throws MaxCountExceededException if the algorithm fails to converge.
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,125,"ublic static double regularizedGammaP(double a, double x)"
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,126,hrows MathException
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,115,"public static double regularizedGammaP(double a, double x) {"
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,137, <li>
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,138," <a href=""http://mathworld.wolfram.com/RegularizedGammaFunction.html"">"
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,139," Regularized Gamma Function</a>, equation (1).</li>"
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,140, <li>
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,141," <a href=""http://mathworld.wolfram.com/IncompleteGammaFunction.html"">"
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,142," Incomplete Gamma Function</a>, equation (4).</li>"
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,143, <li>
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,144," <a href=""http://mathworld.wolfram.com/ConfluentHypergeometricFunctionoftheFirstKind.html"">"
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,145," Confluent Hypergeometric Function of the First Kind</a>, equation (1)."
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,146, </li>
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,124,*  <li>
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,125,"*   <a href=""http://mathworld.wolfram.com/RegularizedGammaFunction.html"">"
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,126,"*   Regularized Gamma Function</a>, equation (1)"
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,127,*  </li>
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,128,*  <li>
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,129,"*   <a href=""http://mathworld.wolfram.com/IncompleteGammaFunction.html"">"
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,130,"*   Incomplete Gamma Function</a>, equation (4)."
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,131,*  </li>
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,132,*  <li>
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,133,"*   <a href=""http://mathworld.wolfram.com/ConfluentHypergeometricFunctionoftheFirstKind.html"">"
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,134,"*   Confluent Hypergeometric Function of the First Kind</a>, equation (1)."
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,135,*  </li>
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,152,                series is less than epsilon the approximation ceases
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,153,                to calculate further elements in the series.
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,141,* series is less than epsilon the approximation ceases to calculate
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,142,* further elements in the series.
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,156, @throws MathException if the algorithm fails to converge.
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,145,* @throws MaxCountExceededException if the algorithm fails to converge.
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,161,nt maxIterations)
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,162,hrows MathException
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,150,int maxIterations) {
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,179,hile (FastMath.abs(an/sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,166,while (FastMath.abs(an/sum) > epsilon &&
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,167,n < maxIterations &&
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,168,sum < Double.POSITIVE_INFINITY) {
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,207,"ublic static double regularizedGammaQ(double a, double x)"
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,208,hrows MathException
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,196,"public static double regularizedGammaQ(double a, double x) {"
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,218, <li>
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,219," <a href=""http://mathworld.wolfram.com/RegularizedGammaFunction.html"">"
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,220," Regularized Gamma Function</a>, equation (1).</li>"
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,221, <li>
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,222," <a href=""http://functions.wolfram.com/GammaBetaErf/GammaRegularized/10/0003/"">"
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,223, Regularized incomplete gamma function: Continued fraction representations  (formula 06.08.10.0003)</a></li>
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,205,*  <li>
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,206,"*   <a href=""http://mathworld.wolfram.com/RegularizedGammaFunction.html"">"
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,207,"*   Regularized Gamma Function</a>, equation (1)."
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,208,*  </li>
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,209,*  <li>
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,210,"*   <a href=""http://functions.wolfram.com/GammaBetaErf/GammaRegularized/10/0003/"">"
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,211,*   Regularized incomplete gamma function: Continued fraction representations
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,212,*   (formula 06.08.10.0003)</a>
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,213,*  </li>
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,229,                series is less than epsilon the approximation ceases
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,230,                to calculate further elements in the series.
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,219,* series is less than epsilon the approximation ceases to calculate
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,220,* further elements in the series.
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,233, @throws MathException if the algorithm fails to converge.
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,223,* @throws MaxCountExceededException if the algorithm fails to converge.
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,238,nt maxIterations)
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,239,hrows MathException
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,228,int maxIterations) {
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,288, @param x  the argument
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,289, @return   digamma(x) to within 10-8 relative or absolute error whichever is smaller
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,290," @see <a href=""http://en.wikipedia.org/wiki/Digamma_function""> Digamma at wikipedia </a>"
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,291," @see <a href=""http://www.uv.es/~bernardo/1976AppStatist.pdf""> Bernardo&apos;s original article </a>"
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,276,* @param x Argument.
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,277,* @return digamma(x) to within 10-8 relative or absolute error whichever is smaller.
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,278,"* @see <a href=""http://en.wikipedia.org/wiki/Digamma_function"">Digamma</a>"
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,279,"* @see <a href=""http://www.uv.es/~bernardo/1976AppStatist.pdf"">Bernardo&apos;s original article </a>"
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,314, <p>Computes the trigamma function of x.  This function is derived by taking the derivative of
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,315, the implementation of digamma.</p>
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,302,* Computes the trigamma function of x.
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,303,* This function is derived by taking the derivative of the implementation
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,304,* of digamma.
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,317, @param x  the argument
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,318, @return   trigamma(x) to within 10-8 relative or absolute error whichever is smaller
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,319," @see <a href=""http://en.wikipedia.org/wiki/Trigamma_function""> Trigamma at wikipedia </a>"
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,306,* @param x Argument.
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,307,* @return trigamma(x) to within 10-8 relative or absolute error whichever is smaller
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,308,"* @see <a href=""http://en.wikipedia.org/wiki/Trigamma_function"">Trigamma</a>"
False,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,19,mport org.apache.commons.math.MathException;
False,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,22,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,21,import org.junit.Test;
True,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,22,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,27,ublic class BetaTest extends TestCase {
False,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,29, Constructor for BetaTest.
False,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,30, @param name
False,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,32,ublic BetaTest(String name) {
False,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,33,uper(name);
False,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,36,"rivate void testRegularizedBeta(double expected, double x, double a,"
False,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,37,ouble b)
False,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,39,ry {
False,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,40,"ouble actual = Beta.regularizedBeta(x, a, b);"
False,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,41,"estUtils.assertEquals(expected, actual, 10e-15);"
False,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,42, catch(MathException ex){
False,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,43,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,27,public class BetaTest {
True,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,28,"private void testRegularizedBeta(double expected, double x,"
True,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,29,"double a, double b) {"
True,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,30,"double actual = Beta.regularizedBeta(x, a, b);"
True,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,31,"TestUtils.assertEquals(expected, actual, 10e-15);"
True,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,39,@Test
True,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,44,@Test
True,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,49,@Test
True,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,54,@Test
True,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,59,@Test
True,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,64,@Test
True,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,69,@Test
True,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,74,@Test
True,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,79,@Test
True,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,84,@Test
True,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,89,@Test
True,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,94,@Test
True,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,99,@Test
True,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,104,@Test
True,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,109,@Test
True,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,114,@Test
True,src/test/java/org/apache/commons/math/special/BetaTest.java,src/test/java/org/apache/commons/math/special/BetaTest.java,119,@Test
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,20,mport org.apache.commons.math.MathException;
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,24,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,23,import org.junit.Test;
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,24,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,29,ublic class ErfTest extends TestCase {
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,31,ublic void testErf0() throws MathException {
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,29,public class ErfTest {
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,30,@Test
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,31,public void testErf0() {
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,34,"ssertEquals(expected, actual, 1.0e-15);"
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,35,"ssertEquals(1 - expected, Erf.erfc(0.0), 1.0e-15);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,34,"Assert.assertEquals(expected, actual, 1.0e-15);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,35,"Assert.assertEquals(1 - expected, Erf.erfc(0.0), 1.0e-15);"
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,38,ublic void testErf1960() throws MathException {
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,38,@Test
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,39,public void testErf1960() {
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,42,"ssertEquals(expected, actual, 1.0e-5);"
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,43,"ssertEquals(1 - actual, Erf.erfc(x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,43,"Assert.assertEquals(expected, actual, 1.0e-5);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,44,"Assert.assertEquals(1 - actual, Erf.erfc(x), 1.0e-15);"
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,47,"ssertEquals(expected, actual, 1.0e-5);"
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,48,"ssertEquals(1 - actual, Erf.erfc(-x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,48,"Assert.assertEquals(expected, actual, 1.0e-5);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,49,"Assert.assertEquals(1 - actual, Erf.erfc(-x), 1.0e-15);"
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,51,ublic void testErf2576() throws MathException {
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,52,@Test
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,53,public void testErf2576() {
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,55,"ssertEquals(expected, actual, 1.0e-5);"
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,56,"ssertEquals(1 - actual, Erf.erfc(x), 1e-15);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,57,"Assert.assertEquals(expected, actual, 1.0e-5);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,58,"Assert.assertEquals(1 - actual, Erf.erfc(x), 1e-15);"
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,60,"ssertEquals(expected, actual, 1.0e-5);"
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,61,"ssertEquals(1 - actual, Erf.erfc(-x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,62,"Assert.assertEquals(expected, actual, 1.0e-5);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,63,"Assert.assertEquals(1 - actual, Erf.erfc(-x), 1.0e-15);"
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,64,ublic void testErf2807() throws MathException {
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,66,@Test
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,67,public void testErf2807() {
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,68,"ssertEquals(expected, actual, 1.0e-5);"
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,69,"ssertEquals(1 - actual, Erf.erfc(x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,71,"Assert.assertEquals(expected, actual, 1.0e-5);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,72,"Assert.assertEquals(1 - actual, Erf.erfc(x), 1.0e-15);"
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,73,"ssertEquals(expected, actual, 1.0e-5);"
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,74,"ssertEquals(1 - actual, Erf.erfc(-x), 1.0e-15);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,76,"Assert.assertEquals(expected, actual, 1.0e-5);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,77,"Assert.assertEquals(1 - actual, Erf.erfc(-x), 1.0e-15);"
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,77,ublic void testErf3291() throws MathException {
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,80,@Test
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,81,public void testErf3291() {
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,81,"ssertEquals(expected, actual, 1.0e-5);"
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,82,"ssertEquals(1 - expected, Erf.erfc(x), 1.0e-5);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,85,"Assert.assertEquals(expected, actual, 1.0e-5);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,86,"Assert.assertEquals(1 - expected, Erf.erfc(x), 1.0e-5);"
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,86,"ssertEquals(expected, actual, 1.0e-5);"
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,87,"ssertEquals(1 - expected, Erf.erfc(-x), 1.0e-5);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,90,"Assert.assertEquals(expected, actual, 1.0e-5);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,91,"Assert.assertEquals(1 - expected, Erf.erfc(-x), 1.0e-5);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,97,@Test
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,96,ssertFalse(Double.isNaN(result));
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,97,ssertTrue(result > 0 && result <= 1);
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,101,Assert.assertFalse(Double.isNaN(result));
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,102,Assert.assertTrue(result > 0 && result <= 1);
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,99,ssertFalse(Double.isNaN(result));
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,100,ssertTrue(result >= -1 && result < 0);
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,104,Assert.assertFalse(Double.isNaN(result));
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,105,Assert.assertTrue(result >= -1 && result < 0);
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,102,ssertFalse(Double.isNaN(result));
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,103,ssertTrue(result >= 0 && result < 1);
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,107,Assert.assertFalse(Double.isNaN(result));
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,108,Assert.assertTrue(result >= 0 && result < 1);
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,105,ssertFalse(Double.isNaN(result));
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,106,ssertTrue(result >= 1 && result <= 2);
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,110,Assert.assertFalse(Double.isNaN(result));
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,111,Assert.assertTrue(result >= 1 && result <= 2);
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,108,"ssertEquals(-1, Erf.erf(Double.NEGATIVE_INFINITY), 0);"
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,109,"ssertEquals(1, Erf.erf(Double.POSITIVE_INFINITY), 0);"
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,110,"ssertEquals(2, Erf.erfc(Double.NEGATIVE_INFINITY), 0);"
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,111,"ssertEquals(0, Erf.erfc(Double.POSITIVE_INFINITY), 0);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,113,"Assert.assertEquals(-1, Erf.erf(Double.NEGATIVE_INFINITY), 0);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,114,"Assert.assertEquals(1, Erf.erf(Double.POSITIVE_INFINITY), 0);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,115,"Assert.assertEquals(2, Erf.erfc(Double.NEGATIVE_INFINITY), 0);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,116,"Assert.assertEquals(0, Erf.erfc(Double.POSITIVE_INFINITY), 0);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,123,@Test
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,132,"ssertEquals(gnuValues[i], Erf.erf(x), tol);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,138,"Assert.assertEquals(gnuValues[i], Erf.erf(x), tol);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,147,@Test
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,155,"ssertEquals(gnuValues[i], Erf.erfc(x), tol);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,162,"Assert.assertEquals(gnuValues[i], Erf.erfc(x), tol);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,172,@Test
False,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,186,"ssertEquals(ref[i][1], result, 1E-15);"
True,src/test/java/org/apache/commons/math/special/ErfTest.java,src/test/java/org/apache/commons/math/special/ErfTest.java,194,"Assert.assertEquals(ref[i][1], result, 1E-15);"
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,19,mport org.apache.commons.math.MathException;
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,23,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,22,import org.junit.Test;
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,23,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,28,ublic class GammaTest extends TestCase {
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,30,ublic GammaTest(String name) {
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,31,uper(name);
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,28,public class GammaTest {
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,35,ry {
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,36,"ouble actualP = Gamma.regularizedGammaP(a, x);"
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,37,"ouble actualQ = Gamma.regularizedGammaQ(a, x);"
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,38,"estUtils.assertEquals(expected, actualP, 10e-15);"
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,39,"estUtils.assertEquals(actualP, 1.0 - actualQ, 10e-15);"
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,40, catch(MathException ex){
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,41,ail(ex.getMessage());
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,30,"double actualP = Gamma.regularizedGammaP(a, x);"
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,31,"double actualQ = Gamma.regularizedGammaQ(a, x);"
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,32,"TestUtils.assertEquals(expected, actualP, 10e-15);"
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,33,"TestUtils.assertEquals(actualP, 1.0 - actualQ, 10e-15);"
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,41,@Test
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,46,@Test
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,51,@Test
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,56,@Test
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,61,@Test
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,66,@Test
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,71,@Test
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,76,@Test
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,81,@Test
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,86,@Test
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,91,@Test
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,96,@Test
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,96,"ssertEquals(4.6001618527380874002, Gamma.digamma(100), eps);"
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,97,"ssertEquals(3.9019896734278921970, Gamma.digamma(50), eps);"
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,98,"ssertEquals(2.9705239922421490509, Gamma.digamma(20), eps);"
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,99,"ssertEquals(2.9958363947076465821, Gamma.digamma(20.5), eps);"
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,100,"ssertEquals(2.2622143570941481605, Gamma.digamma(10.1), eps);"
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,101,"ssertEquals(2.1168588189004379233, Gamma.digamma(8.8), eps);"
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,102,"ssertEquals(1.8727843350984671394, Gamma.digamma(7), eps);"
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,103,"ssertEquals(0.42278433509846713939, Gamma.digamma(2), eps);"
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,104,"ssertEquals(-100.56088545786867450, Gamma.digamma(0.01), eps);"
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,105,"ssertEquals(-4.0390398965921882955, Gamma.digamma(-0.8), eps);"
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,106,"ssertEquals(4.2003210041401844726, Gamma.digamma(-6.3), eps);"
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,99,"Assert.assertEquals(4.6001618527380874002, Gamma.digamma(100), eps);"
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,100,"Assert.assertEquals(3.9019896734278921970, Gamma.digamma(50), eps);"
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,101,"Assert.assertEquals(2.9705239922421490509, Gamma.digamma(20), eps);"
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,102,"Assert.assertEquals(2.9958363947076465821, Gamma.digamma(20.5), eps);"
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,103,"Assert.assertEquals(2.2622143570941481605, Gamma.digamma(10.1), eps);"
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,104,"Assert.assertEquals(2.1168588189004379233, Gamma.digamma(8.8), eps);"
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,105,"Assert.assertEquals(1.8727843350984671394, Gamma.digamma(7), eps);"
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,106,"Assert.assertEquals(0.42278433509846713939, Gamma.digamma(2), eps);"
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,107,"Assert.assertEquals(-100.56088545786867450, Gamma.digamma(0.01), eps);"
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,108,"Assert.assertEquals(-4.0390398965921882955, Gamma.digamma(-0.8), eps);"
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,109,"Assert.assertEquals(4.2003210041401844726, Gamma.digamma(-6.3), eps);"
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,112,@Test
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,127,@Test
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,144,"ssertEquals(String.format(""trigamma %.0f"", data[i]), data[i + 1], Gamma.trigamma(data[i]), eps);"
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,149,"Assert.assertEquals(String.format(""trigamma %.0f"", data[i]), data[i + 1], Gamma.trigamma(data[i]), eps);"
False,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,149,"ssertEquals(msg, expected, actual, FastMath.abs(tolerance * actual));"
True,src/test/java/org/apache/commons/math/special/GammaTest.java,src/test/java/org/apache/commons/math/special/GammaTest.java,154,"Assert.assertEquals(msg, expected, actual, FastMath.abs(tolerance * actual));"

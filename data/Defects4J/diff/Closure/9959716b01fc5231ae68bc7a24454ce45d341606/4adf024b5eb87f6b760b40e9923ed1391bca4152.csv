is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,330,"/ All assignments evaluate to true, so make sure that the"
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,331,/ expr statement evaluates to true in case it matters.
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,332,odes.add(new Node(Token.TRUE));
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,334,"/ Join these using COMMA.  A COMMA node must have 2 children, so we"
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,335,/ create a tree. In the tree the first child be the COMMA to match
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,336,"/ the parser, otherwise tree equality tests fail."
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,337,odes = Lists.reverse(nodes);
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,338,ode replacement = new Node(Token.COMMA);
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,339,ode cur = replacement;
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,340,nt i;
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,341,or (i = 0; i < nodes.size() - 2; i++) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,330,Node replacement;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,331,if (nodes.isEmpty()) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,332,replacement = new Node(Token.TRUE);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,333,} else {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,334,"// All assignments evaluate to true, so make sure that the"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,335,// expr statement evaluates to true in case it matters.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,336,nodes.add(new Node(Token.TRUE));
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,338,"// Join these using COMMA.  A COMMA node must have 2 children, so we"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,339,// create a tree. In the tree the first child be the COMMA to match
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,340,"// the parser, otherwise tree equality tests fail."
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,341,nodes = Lists.reverse(nodes);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,342,replacement = new Node(Token.COMMA);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,343,Node cur = replacement;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,344,int i;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,345,for (i = 0; i < nodes.size() - 2; i++) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,346,cur.addChildToFront(nodes.get(i));
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,347,Node t = new Node(Token.COMMA);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,348,cur.addChildToFront(t);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,349,cur = t;
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,343,ode t = new Node(Token.COMMA);
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,344,ur.addChildToFront(t);
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,345,ur = t;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,352,cur.addChildToFront(nodes.get(i + 1));
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,347,ur.addChildToFront(nodes.get(i));
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,348,ur.addChildToFront(nodes.get(i + 1));
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,359,public void testBug545() {
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,360,"testLocal(""var a = {}"", """");"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,361,"testLocal(""var a; a = {}"", ""true"");"

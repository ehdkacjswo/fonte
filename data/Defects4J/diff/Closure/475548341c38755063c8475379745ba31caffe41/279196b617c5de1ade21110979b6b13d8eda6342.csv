is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/CompilationLevel.java,src/com/google/javascript/jscomp/CompilationLevel.java,111,options.flowSensitiveInlineVariables = true;
True,src/com/google/javascript/jscomp/CompilationLevel.java,src/com/google/javascript/jscomp/CompilationLevel.java,140,options.flowSensitiveInlineVariables = true;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,22,mport com.google.common.collect.ImmutableList;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,27,mport com.google.javascript.jscomp.deps.SortedDependencies;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,38,mport java.util.ArrayList;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,40,mport java.util.Iterator;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,76,/ The graph of the JS source modules
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,72,// The graph of the JS source modules. Must be null if there are less than
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,73,"// 2 modules, because we use this as a signal for which passes to run."
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1053,ortedDependencies<CompilerInput> sorter =
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1054,ew SortedDependencies<CompilerInput>(inputs);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1055,nputs = Lists.newArrayList(
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1056,orter.getSortedDependenciesOf(
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1057,orter.getInputsWithoutProvides()));
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1050,inputs =
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1051,(moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1052,.manageDependencies(inputs);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1540,arserConfig = ParserRunner.createConfig(
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1541,"etTypeRegistry(), isIdeMode());"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1535,parserConfig = ParserRunner.createConfig(isIdeMode());
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,19,mport com.google.common.base.Function;
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,90,tatic interface JoinOp<L extends LatticeElement>
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,91,"xtends Function<List<L>, L> {"
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,95, An implementation of {@code JoinOp} that makes it easy to join to
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,96, lattice elements at a time.
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,98,tatic abstract class BinaryJoinOp<L extends LatticeElement>
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,99,mplements JoinOp<L> {
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,100,Override
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,101,ublic final L apply(List<L> values) {
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,102,reconditions.checkArgument(!values.isEmpty());
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,103,nt size = values.size();
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,104,f (size == 1) {
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,105,eturn values.get(0);
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,106, else if (size == 2) {
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,107,"eturn apply(values.get(0), values.get(1));"
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,108, else {
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,109,nt mid = computeMidPoint(size);
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,110,eturn apply(
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,111,"pply(values.subList(0, mid)),"
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,112,"pply(values.subList(mid, size)));"
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,117, Creates a new lattice that will be the join of two input lattices.
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,119, @return The join of {@code latticeA} and {@code latticeB}.
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,121,"bstract L apply(L latticeA, L latticeB);"
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,124, Finds the midpoint of a list. The function will favor two lists of
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,125, even length instead of two lists of the same odd length. The list
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,126, must be at least length two.
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,128, @param size Size of the list.
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,130,tatic int computeMidPoint(int size) {
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,131,nt midpoint = size >>> 1;
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,132,f (size > 4) {
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,133,* Any list longer than 4 should prefer an even split point
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,134," over the true midpoint, so that [0,6] splits at 2, not 3. */"
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,135,idpoint &= -2; // (0xfffffffe) clears low bit so midpoint is even
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,137,eturn midpoint;
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,19,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,22,import com.google.common.collect.LinkedListMultimap;
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,23,import com.google.common.collect.ListMultimap;
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,27,import com.google.javascript.jscomp.deps.SortedDependencies;
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,31,import java.util.Collections;
False,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,28,mport java.util.HashMap;
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,117,* Gets all the modules in dependency order.
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,119,private Iterable<JSModule> getAllModulesInDependencyOrder() {
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,120,List<JSModule> modules = Lists.newArrayList(getAllModules());
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,121,"Collections.sort(modules, new DepthComparator());"
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,122,return modules;
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,285,* Sort the sources of modules in dependency-order.
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,287,"* If a source file provides a symbol that is not required, then that"
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,288,* file will be removed from the compilation. If a source file provides
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,289,"* a symbol that is not required until a later module, then that"
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,290,* file will be moved to the later module.
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,292,* @param The original list of sources. Used to ensure that the sort
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,293,*     is stable.
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,294,* @return The sorted list of sources.
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,296,List<CompilerInput> manageDependencies(List<CompilerInput> inputs) {
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,297,SortedDependencies<CompilerInput> sorter =
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,298,new SortedDependencies<CompilerInput>(inputs);
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,299,List<CompilerInput> inputsWithoutProvides =
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,300,sorter.getInputsWithoutProvides();
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,302,"// The order of inputs, sorted independently of modules."
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,303,List<CompilerInput> absoluteOrder = sorter.getSortedDependenciesOf(inputs);
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,305,// Figure out which sources *must* be in each module.
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,306,"ListMultimap<JSModule, CompilerInput> inputsWithoutProvidesPerModule ="
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,307,LinkedListMultimap.create();
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,308,for (CompilerInput input : inputsWithoutProvides) {
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,309,JSModule module = input.getModule();
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,310,Preconditions.checkNotNull(module);
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,311,"inputsWithoutProvidesPerModule.put(module, input);"
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,314,// Clear the modules of their inputs. This also nulls out
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,315,// the input's reference to its module.
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,316,for (JSModule module : getAllModules()) {
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,317,module.removeAll();
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,320,"// Figure out which sources *must* be in each module, or in one"
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,321,// of that module's dependencies.
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,322,for (JSModule module : inputsWithoutProvidesPerModule.keySet()) {
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,323,List<CompilerInput> transitiveClosure =
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,324,sorter.getSortedDependenciesOf(
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,325,inputsWithoutProvidesPerModule.get(module));
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,326,for (CompilerInput input : transitiveClosure) {
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,327,JSModule oldModule = input.getModule();
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,328,input.setModule(
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,329,oldModule == null ?
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,330,module :
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,331,"getDeepestCommonDependencyInclusive(oldModule, module));"
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,335,// All the inputs are pointing to the modules that own them. Yeah!
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,336,// Update the modules to reflect this.
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,337,for (CompilerInput input : absoluteOrder) {
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,338,JSModule module = input.getModule();
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,339,if (module != null) {
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,340,module.add(input);
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,344,"// Now, generate the sorted result."
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,345,List<CompilerInput> result = Lists.newArrayList();
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,346,for (JSModule module : getAllModulesInDependencyOrder()) {
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,347,result.addAll(module.getInputs());
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,350,return result;
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,354,* A module depth comparator that considers a deeper module to be
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,355,"* ""greater than"" a shallower module. Uses module names to"
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,356,* consistently break ties.
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,358,private class DepthComparator implements Comparator<JSModule> {
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,359,"public int compare(JSModule m1, JSModule m2) {"
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,360,"return depthCompare(m1, m2);"
False,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,277,f (m1 == m2) {
False,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,278,eturn 0;
False,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,280,nt d1 = getDepth(m1);
False,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,281,nt d2 = getDepth(m2);
False,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,282,eturn d2 < d1 ? -1 : d2 == d1 ? m2.getName().compareTo(m1.getName()) : 1;
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,370,"return depthCompare(m2, m1);"
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,374,"private int depthCompare(JSModule m1, JSModule m2) {"
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,375,if (m1 == m2) {
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,376,return 0;
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,378,int d1 = getDepth(m1);
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,379,int d2 = getDepth(m2);
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,380,return d1 < d2 ? -1 : d2 == d1 ? m1.getName().compareTo(m2.getName()) : 1;
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,2,* Copyright 2010 Google Inc.
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,19,import com.google.common.base.Function;
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,20,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,22,import java.util.List;
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,25,* Defines a way join a list of LatticeElements.
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,27,"interface JoinOp<L extends LatticeElement> extends Function<List<L>, L> {"
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,30,* An implementation of {@code JoinOp} that makes it easy to join to
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,31,* lattice elements at a time.
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,33,static abstract class BinaryJoinOp<L extends LatticeElement>
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,34,implements JoinOp<L> {
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,35,@Override
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,36,public final L apply(List<L> values) {
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,37,Preconditions.checkArgument(!values.isEmpty());
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,38,int size = values.size();
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,39,if (size == 1) {
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,40,return values.get(0);
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,41,} else if (size == 2) {
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,42,"return apply(values.get(0), values.get(1));"
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,43,} else {
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,44,int mid = computeMidPoint(size);
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,45,return apply(
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,46,"apply(values.subList(0, mid)),"
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,47,"apply(values.subList(mid, size)));"
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,52,* Creates a new lattice that will be the join of two input lattices.
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,54,* @return The join of {@code latticeA} and {@code latticeB}.
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,56,"abstract L apply(L latticeA, L latticeB);"
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,59,* Finds the midpoint of a list. The function will favor two lists of
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,60,* even length instead of two lists of the same odd length. The list
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,61,* must be at least length two.
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,63,* @param size Size of the list.
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,65,static int computeMidPoint(int size) {
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,66,int midpoint = size >>> 1;
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,67,if (size > 4) {
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,68,/* Any list longer than 4 should prefer an even split point
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,69,"* over the true midpoint, so that [0,6] splits at 2, not 3. */"
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,70,midpoint &= -2; // (0xfffffffe) clears low bit so midpoint is even
True,src/com/google/javascript/jscomp/JoinOp.java,src/com/google/javascript/jscomp/JoinOp.java,72,return midpoint;
False,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,23,mport com.google.javascript.jscomp.DataFlowAnalysis.BinaryJoinOp;
False,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,238,tatic class FlowScopeJoinOp extends BinaryJoinOp<FlowScope> {
True,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,237,static class FlowScopeJoinOp extends JoinOp.BinaryJoinOp<FlowScope> {
False,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,54,"uper(cfg, new JoinOp());"
True,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,54,"super(cfg, new MustDefJoin());"
False,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,144,rivate static class JoinOp extends DataFlowAnalysis.BinaryJoinOp<MustDef> {
True,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,144,private static class MustDefJoin extends JoinOp.BinaryJoinOp<MustDef> {
True,src/com/google/javascript/jscomp/parsing/Config.java,src/com/google/javascript/jscomp/parsing/Config.java,49,* Recognized names in a {@code @suppress} tag.
True,src/com/google/javascript/jscomp/parsing/Config.java,src/com/google/javascript/jscomp/parsing/Config.java,51,final Set<String> suppressionNames;
False,src/com/google/javascript/jscomp/parsing/Config.java,src/com/google/javascript/jscomp/parsing/Config.java,52,"onfig(Set<String> annotationWhitelist, boolean isIdeMode) {"
True,src/com/google/javascript/jscomp/parsing/Config.java,src/com/google/javascript/jscomp/parsing/Config.java,57,"Config(Set<String> annotationWhitelist, Set<String> suppressionNames,"
True,src/com/google/javascript/jscomp/parsing/Config.java,src/com/google/javascript/jscomp/parsing/Config.java,58,boolean isIdeMode) {
True,src/com/google/javascript/jscomp/parsing/Config.java,src/com/google/javascript/jscomp/parsing/Config.java,61,this.suppressionNames = suppressionNames;
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,67,private final Set<String> suppressionNames;
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,105,this.suppressionNames = config.suppressionNames;
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,116,"Sets.<String>newHashSet(),"
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,799,String name = stream.getString();
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,800,if (!suppressionNames.contains(name)) {
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,801,"parser.addWarning(""msg.jsdoc.suppress.unknown"", name,"
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,802,"stream.getLineno(), stream.getCharno());"
True,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,42,private static Set<String> suppressionNames = null;
False,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,45,ublic static Config createConfig(
False,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,46,"STypeRegistry typeRegistry, boolean isIdeMode) {"
False,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,47,"eturn new Config(getAnnotationNames(), isIdeMode);"
False,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,51," Gets a list of extra annotations that are OK, even if the parser"
False,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,52, doesn't have handlers for them built-in.
False,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,54,tatic Set<String> getAnnotationNames() {
False,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,55,nitAnnotationNames();
False,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,56,eturn annotationNames;
True,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,47,public static Config createConfig(boolean isIdeMode) {
True,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,48,initResourceConfig();
True,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,49,"return new Config(annotationNames, suppressionNames, isIdeMode);"
False,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,59,rivate static synchronized void initAnnotationNames() {
True,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,52,private static synchronized void initResourceConfig() {
False,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,64,et<String> trimmedNames = Sets.newHashSet();
False,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,66,"tring[] names = config.getString(""jsdoc.annotations"").split("","");"
True,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,58,"annotationNames = extractList(config.getString(""jsdoc.annotations""));"
True,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,59,"suppressionNames = extractList(config.getString(""jsdoc.suppressions""));"
True,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,62,private static Set<String> extractList(String configProp) {
True,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,63,"String[] names = configProp.split("","");"
True,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,64,Set<String> trimmedNames = Sets.newHashSet();
False,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,70,nnotationNames = ImmutableSet.copyOf(trimmedNames);
True,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,68,return ImmutableSet.copyOf(trimmedNames);
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,152,AST_PROP          = 49;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,152,"SUPPRESSIONS       = 50,    // Used by the compiler to associate"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,153,// @suppress directly with functions
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,154,// and scripts.
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,155,LAST_PROP          = 50;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2001,* Sets the warning suppressions on this node.
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2003,public void setSuppressions(Set<String> val) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2004,Preconditions.checkState(type == Token.FUNCTION || type == Token.SCRIPT);
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2005,"putProp(SUPPRESSIONS, val);"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2009,* Returns the set of supressions for this node.
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2011,"@SuppressWarnings(""unchecked"")"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2012,public Set<String> getSuppressions() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2013,return (Set<String>) getProp(SUPPRESSIONS);
False,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,22,mport com.google.javascript.jscomp.DataFlowAnalysis.BinaryJoinOp;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,26,import com.google.javascript.jscomp.JoinOp.BinaryJoinOp;
False,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,627,"ssertEquals(6, DataFlowAnalysis.BinaryJoinOp.computeMidPoint(12));"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,627,"assertEquals(6, JoinOp.BinaryJoinOp.computeMidPoint(12));"
False,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,631,"ssertEquals(8, DataFlowAnalysis.BinaryJoinOp.computeMidPoint(18));"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,631,"assertEquals(8, JoinOp.BinaryJoinOp.computeMidPoint(18));"
False,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,635,"ssertEquals(1, DataFlowAnalysis.BinaryJoinOp.computeMidPoint(2));"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,635,"assertEquals(1, JoinOp.BinaryJoinOp.computeMidPoint(2));"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,20,import com.google.common.collect.Lists;
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,41,// For resolving dependencies only.
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,42,private Compiler compiler;
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,56,compiler = new Compiler();
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,149,public void testManageDependencies() {
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,150,List<CompilerInput> inputs = Lists.newArrayList();
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,152,"A.add(code(""a1"", provides(""a1""), requires()));"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,153,"A.add(code(""a2"", provides(""a2""), requires(""a1"")));"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,154,"A.add(code(""a3"", provides(), requires(""a1"")));"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,156,"B.add(code(""b1"", provides(""b1""), requires(""a2"")));"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,157,"B.add(code(""b2"", provides(), requires(""a1"", ""a2"")));"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,159,"C.add(code(""c1"", provides(""c1""), requires(""a1"")));"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,160,"C.add(code(""c2"", provides(""c2""), requires(""c1"")));"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,162,"E.add(code(""e1"", provides(), requires(""c1"")));"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,163,"E.add(code(""e2"", provides(), requires(""c1"")));"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,165,inputs.addAll(A.getInputs());
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,166,inputs.addAll(B.getInputs());
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,167,inputs.addAll(C.getInputs());
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,168,inputs.addAll(E.getInputs());
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,170,for (CompilerInput input : inputs) {
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,171,input.setCompiler(compiler);
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,174,List<CompilerInput> results = graph.manageDependencies(inputs);
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,176,"assertInputs(A, ""a1"", ""a3"");"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,177,"assertInputs(B, ""a2"", ""b2"");"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,178,assertInputs(C); // no inputs
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,179,"assertInputs(E, ""c1"", ""e1"", ""e2"");"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,181,assertEquals(
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,182,"Lists.newArrayList(""a1"", ""a3"", ""a2"", ""b2"", ""c1"", ""e1"", ""e2""),"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,183,sourceNames(results));
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,186,"private void assertInputs(JSModule module, String ... sourceNames) {"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,187,List<CompilerInput> actualInputs = module.getInputs();
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,189,assertEquals(
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,190,"Lists.newArrayList(sourceNames),"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,191,sourceNames(module.getInputs()));
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,194,private List<String> sourceNames(List<CompilerInput> inputs) {
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,195,List<String> inputNames = Lists.newArrayList();
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,196,for (CompilerInput input : inputs) {
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,197,inputNames.add(input.getName());
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,199,return inputNames;
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,202,private JSSourceFile code(
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,203,"String sourceName, List<String> provides, List<String> requires) {"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,204,"String text = """";"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,205,for (String p : provides) {
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,206,"text += ""goog.provide('"" + p + ""');\n"";"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,208,for (String r : requires) {
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,209,"text += ""goog.require('"" + r + ""');\n"";"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,211,"return JSSourceFile.fromCode(sourceName, text);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,214,private List<String> provides(String ... strings) {
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,215,return Lists.newArrayList(strings);
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,218,private List<String> requires(String ... strings) {
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,219,return Lists.newArrayList(strings);
False,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,989,"onfig config = new Config(ParserRunner.getAnnotationNames(), true);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,989,Config config = ParserRunner.createConfig(true);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,41,private Set<String> extraSuppressions;
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,46,xtraAnnotations = Sets.newHashSet(ParserRunner.getAnnotationNames());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,47,extraAnnotations =
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,48,Sets.newHashSet(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,49,ParserRunner.createConfig(true).annotationNames.keySet());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,50,extraSuppressions =
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,51,Sets.newHashSet(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,52,ParserRunner.createConfig(true).suppressionNames);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,54,"extraSuppressions.add(""x"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,55,"extraSuppressions.add(""y"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,56,"extraSuppressions.add(""z"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1774,public void testBadSuppress7() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1775,"parse(""@suppress {impossible} */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1776,"""unknown @suppress parameter: impossible"");"
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2297,"onfig config = new Config(extraAnnotations, true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2312,Config config =
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2313,"new Config(extraAnnotations, extraSuppressions, true);"
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2336,"onfig config = new Config(extraAnnotations, parseDocumentation);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2352,"Config config = new Config(extraAnnotations, extraSuppressions,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2353,parseDocumentation);
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,732,"input"", string, ParserRunner.createConfig(registry, true),"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,732,"""input"", string, ParserRunner.createConfig(true),"
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,748,"input"", string, ParserRunner.createConfig(registry, true),"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,748,"""input"", string, ParserRunner.createConfig(true),"

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,28,** A class that represents a minimized conditional expression.
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,29,"  Depending on the context, a leading NOT node in front of the conditional"
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,30,"  may or may not be counted as a cost, so this class provides ways to"
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,31,  access minimized versions of both of those ASTs.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,29,* A class that represents a minimized conditional expression.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,30,* This is a conditional expression that has been massaged according to
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,31,* DeMorgan's laws in order to minimize the length of the source
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,32,* representation.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,33,* <p>
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,34,"* Depending on the context, a leading NOT node in front of the conditional"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,35,"* may or may not be counted as a cost, so this class provides ways to"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,36,* access minimized versions of both of those abstract syntax trees (ASTs).
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,33,  @author blickly@google.com (Ben Lickly)
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,38,* @author blickly@google.com (Ben Lickly)
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,71,"** Remove the passed condition node from the AST, and then return a"
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,72,  MinimizedCondition that represents the condition node after
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,73,  minimization.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,77,"* Remove the passed condition node from the AST, and then return a"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,78,* MinimizedCondition that represents the condition node after
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,79,* minimization.
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,76,inimizedCondition minCond;
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,90,** Return the shorter representation of the original condition node.
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,92, @param style Whether to count a leading NOT in doing the minimization.
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,93,  i.e. Prefer the right side in cases such as:
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,96,* Return the shorter representation of the original condition node.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,97,* <p>
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,98,"* Depending on the context, this may require to either penalize or"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,99,* not the existance of a leading NOT node.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,100,"* <ul><li>When {@code style} is {@code PREFER_UNNEGATED}, simply try to"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,101,* minimize the total length of the conditional.</li>
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,102,"* <li>When {@code style} is {@code ALLOW_LEADING_NOT}, prefer the right side"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,103,* in cases such as:
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,104,* <br><code>
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,95,  This is useful in contexts such as IFs or HOOKs where subsequent
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,96,  optimizations can efficiently deal with leading NOTs.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,106,* </code><br>
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,107,* This is useful in contexts such as IFs or HOOKs where subsequent
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,108,* optimizations can efficiently deal with leading NOTs.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,109,* </li></ul>
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,98,"  @return The minimized condition MeasuredNode, with equivalent semantics"
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,99,    to that passed to #fromConditionNode().
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,111,"* @return the minimized condition MeasuredNode, with equivalent semantics"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,112,*   to that passed to {@link #fromConditionNode}.
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,111,"** Return a MeasuredNode of the given condition node, without minimizing"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,125,"* Return a MeasuredNode of the given condition node, without minimizing"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,127,* <p>
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,128,"* Since a MinimizedCondition necessarily must contain two trees, this"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,129,* method sets the negative side to a {@link Token#SCRIPT} node (never valid
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,130,* inside an expression) with an unreasonably high length so that it will
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,131,* never be chosen by {@link #getMinimized}.
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,114,  @param n The conditional expression tree to minimize.
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,115,   This must be removed from the tree before being passed in connected.
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,116,  @return A MinimizedCondition object representing that tree.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,133,* @param n the conditional expression tree to minimize.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,134,"*  This must be connected to the AST, and will be swapped"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,135,*  with a placeholder node during minimization.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,136,* @return a MinimizedCondition object representing that tree.
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,122,"/ In the unoptimized case, we want to always return the positive side,"
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,123,/ so we set the negative side to a SCRIPT node (never valid inside an
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,124,/ expression) with an unreasonably high length so that it's never chosen.
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,129,"** Remove the given node from the AST, and replace it with a placeholder"
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,130,  SCRIPT node.
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,131,  @return The new placeholder node.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,147,"* Remove the given node from the AST, and replace it with a placeholder"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,148,* SCRIPT node.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,149,* @return the new placeholder node.
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,140,** Minimize the condition at the given node.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,159,* Minimize the condition at the given node.
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,142,  @param n The conditional expression tree to minimize.
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,143,   This must be removed from the tree before being passed in connected.
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,144,  @return A MinimizedCondition object representing that tree.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,161,* @param n the conditional expression tree to minimize.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,162,"*  This must be connected to the AST, and will be swapped"
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,163,*  with a placeholder node during minimization.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,164,* @return a MinimizedCondition object representing that tree.
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,256,nt complementOperator;
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,258,efault:
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,259,eturn this.addNot();
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,260,/ Otherwise a binary operator with a complement.
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,262,omplementOperator = Token.NE;
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,263,reak;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,278,node.setType(Token.NE);
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,279,return this;
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,265,omplementOperator = Token.EQ;
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,266,reak;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,281,node.setType(Token.EQ);
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,282,return this;
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,268,omplementOperator = Token.SHNE;
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,269,reak;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,284,node.setType(Token.SHNE);
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,285,return this;
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,271,omplementOperator = Token.SHEQ;
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,272,reak;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,287,node.setType(Token.SHEQ);
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,288,return this;
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,289,default:
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,290,return this.addNot();
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,274,/ Clone entire tree and just change operator.
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,275,ode.setType(complementOperator);
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,276,eturn this;
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,290,** Estimate the number of characters in the textual representation of
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,306,*  Estimate the number of characters in the textual representation of
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,297,  @param n The node to be checked.
False,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,298,  @return The number of negations and parentheses in the node.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,313,*  @param n the node to be checked.
True,src/com/google/javascript/jscomp/MinimizedCondition.java,src/com/google/javascript/jscomp/MinimizedCondition.java,314,*  @return the number of negations and parentheses in the node.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,40,rivate static final boolean DEFAULT_AGGRESSIVE_MINIMIZE_CONDITIONS = true;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,43,rivate final boolean aggressiveMinimization;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,45,tatic final Predicate<Node> DONT_TRAVERSE_FUNCTIONS_PREDICATE
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,46, new Predicate<Node>() {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,47,Override
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,48,ublic boolean apply(Node input) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,49,eturn !input.isFunction();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,61,"his(late, DEFAULT_AGGRESSIVE_MINIMIZE_CONDITIONS);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,64,"eepholeMinimizeConditions(boolean late, boolean aggressive) {"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,66,his.aggressiveMinimization = aggressive;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,70, Tries apply our various peephole minimizations on the passed in node.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,55,* Tries to apply our various peephole minimizations on the passed in node.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,454,inimizedCondition minCond = (aggressiveMinimization) ?
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,455,inimizedCondition.fromConditionNode(n.getFirstChild()) :
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,456,inimizedCondition.unoptimized(n.getFirstChild());
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,439,MinimizedCondition minCond =
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,440,MinimizedCondition.fromConditionNode(n.getFirstChild());
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,477,inimizedCondition minCond = (aggressiveMinimization) ?
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,478,inimizedCondition.fromConditionNode(n.getFirstChild()) :
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,479,inimizedCondition.unoptimized(n.getFirstChild());
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,461,MinimizedCondition minCond =
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,462,MinimizedCondition.fromConditionNode(n.getFirstChild());
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,518,inimizedCondition minCond = (aggressiveMinimization) ?
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,519,inimizedCondition.fromConditionNode(originalCond) :
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,520,inimizedCondition.unoptimized(originalCond);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,501,MinimizedCondition minCond =
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,502,MinimizedCondition.fromConditionNode(originalCond);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,987,ONT_TRAVERSE_FUNCTIONS_PREDICATE);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,969,NodeUtil.MATCH_NOT_FUNCTION);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,999,f (aggressiveMinimization) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1000,inimizedCondition minCond = MinimizedCondition.fromConditionNode(n);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1001,eturn replaceNode(
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1002,"inCond.getPlaceholder(),"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1003,inCond.getMinimized(MinimizationStyle.PREFER_UNNEGATED));
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1004, else {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1005,eturn n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,981,MinimizedCondition minCond = MinimizedCondition.fromConditionNode(n);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,982,return replaceNode(
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,983,"minCond.getPlaceholder(),"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,984,minCond.getMinimized(MinimizationStyle.PREFER_UNNEGATED));
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1030,f (!aggressiveMinimization && n.isNot()) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1031,eturn simpleDemorgan(n);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1140,"  Perform a heuristic-based application of De Morgan's Laws, trying to"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1141,  push NOT nodes further down the AST toward the leaves.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1143,rivate Node simpleDemorgan(Node n) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1144,ode parent = n.getParent();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1145,ode first = n.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1146,witch (first.getType()) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1147,ase Token.NOT: {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1148,ode newRoot = first.removeFirstChild();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1149,"arent.replaceChild(n, newRoot);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1150,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1151,"/ No need to traverse, tryMinimizeCondition is called on the"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1152,/ NOT children are handled below.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1153,eturn newRoot;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1155,ase Token.AND:
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1156,ase Token.OR: {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1157,/ !(!x && !y) --> x || y
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1158,/ !(!x || !y) --> x && y
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1159,/ !(!x && y) --> x || !y
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1160,/ !(!x || y) --> x && !y
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1161,/ !(x && !y) --> !x || y
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1162,/ !(x || !y) --> !x && y
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1163,/ !(x && y) --> !x || !y
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1164,/ !(x || y) --> !x && !y
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1165,ode leftParent = first.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1166,ode rightParent = first.getLastChild();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1167,"ode left, right;"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1169,/ Check special case when such transformation cannot reduce
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1170,/ due to the added ()
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1171,/ It only occurs when both of expressions are not NOT expressions
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1172,f (!leftParent.isNot()
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1173,& !rightParent.isNot()) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1174,"/ If an expression has higher precedence than && or ||,"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1175,"/ but lower precedence than NOT, an additional () is needed"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1176,/ Thus we do not preceed
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1177,nt opPrecedence = NodeUtil.precedence(first.getType());
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1178,"f ((isLowerPrecedence(leftParent, NOT_PRECEDENCE)"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1179,"& isHigherPrecedence(leftParent, opPrecedence))"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1180,"| (isLowerPrecedence(rightParent, NOT_PRECEDENCE)"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1181,"& isHigherPrecedence(rightParent, opPrecedence))) {"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1182,eturn n;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1186,f (leftParent.isNot()) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1187,eft = leftParent.removeFirstChild();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1188, else {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1189,eftParent.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1190,eft = IR.not(leftParent).srcref(leftParent);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1192,f (rightParent.isNot()) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1193,ight = rightParent.removeFirstChild();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1194, else {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1195,ightParent.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1196,ight = IR.not(rightParent).srcref(rightParent);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1199,nt newOp = (first.isAnd()) ? Token.OR : Token.AND;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1200,"ode newRoot = new Node(newOp, left, right);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1201,"arent.replaceChild(n, newRoot);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1202,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1203,"/ No need to traverse, tryMinimizeCondition is called on the"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1204,/ AND and OR children below.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1205,eturn newRoot;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1208,efault:
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1209,ernaryValue nVal = NodeUtil.getPureBooleanValue(first);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1210,f (nVal != TernaryValue.UNKNOWN) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1211,oolean result = nVal.not().toBoolean(true);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1212,nt equivalentResult = result ? 1 : 0;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1213,"eturn maybeReplaceChildWithNumber(n, parent, equivalentResult);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1216,"/ No need to traverse, tryMinimizeCondition is called on the NOT"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1217,/ children in the general case in the main post-order traversal.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1218,eturn n;
False,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,31, PeepholeMinimizeConditionsTest.
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,31,* {@link PeepholeMinimizeConditionsTest}.
False,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,81,ublic void testMinimizeDemorgan() {
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,81,public void testMinimizeDemorganSimple() {
False,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,89,ublic void testMinimizeDemorgan2() {
False,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,93,ublic void testMinimizeDemorgan3() {
False,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,97,ublic void testMinimizeDemorgan4() {
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,91,public void testMinimizeBug8494751() {
False,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,104,ublic void testMinimizeDemorgan5() {
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,98,public void testMinimizeComplementableOperator() {
False,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,111,ublic void testMinimizeDemorgan6() {
False,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,112,"inCond(""!((x,y)&&z)"", ""(x,!y)||!z"", ""!((x,y)&&z)"");"
True,test/com/google/javascript/jscomp/MinimizedConditionTest.java,test/com/google/javascript/jscomp/MinimizedConditionTest.java,111,"minCond(""!((x,y)&&z)"", ""(x,!y)||!z"", ""!((x,y)&&z)"");"
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,27,rivate boolean aggressive = true;
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,41,ggressive = true;
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,50,"ompiler, new PeepholeMinimizeConditions(late, aggressive));"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,48,"compiler, new PeepholeMinimizeConditions(late));"

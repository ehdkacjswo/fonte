is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,326,pecializationState.reportRemovedFunction(functionNode);
True,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,326,"specializationState.reportRemovedFunction(functionNode, block);"
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,794,pecializationState.reportRemovedFunction(fn.getFunctionNode());
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,794,specializationState.reportRemovedFunction(
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,795,"fn.getFunctionNode(), fn.getDeclaringBlock());"
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,980,public Node getDeclaringBlock();
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,1003,@Override
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,1004,public Node getDeclaringBlock() {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,1005,return fn.getParent();
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,1029,@Override
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,1030,public Node getDeclaringBlock() {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,1031,return var.getParent();
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,1059,@Override
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,1060,public Node getDeclaringBlock() {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,1061,return null;
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,96,pecializationState.reportRemovedFunction(specializableFunction);
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,96,specializationState.reportRemovedFunction(
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,97,"specializableFunction, null);"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,162,// We must always add dummy variables before replacing the orginal module.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,163,addDummyVarDeclarationsToInitialModule(module);
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,163,ddDummyVarDeclarationsToInitialModule(module);
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,289,rivate void addDummyVarDeclarationsToInitialModule(JSModule module) {
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,290,ompilerInput lastInputInFirstModule =
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,291,odule.getInputs().get(module.getInputs().size() - 1);
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,293,ode dummyVarParent = lastInputInFirstModule.getAstRoot(compiler);
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,295,or (Node modifiedFunction : functionInfoBySpecializedFunctionNode.keySet())
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,290,private void addDummyVarDeclarationsToInitialModule(JSModule module) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,291,for (Node modifiedFunction :
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,292,functionInfoBySpecializedFunctionNode.keySet()) {
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,302,ummyVarParent.addChildToBack(originalInfo.generateDummyDeclaration());
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,298,Node block = specializationState.removedFunctionToBlock.get(
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,299,modifiedFunction);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,301,// Declaring block might be null if no fix-up declarations is needed.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,302,"// For example, InlineFunction can inline an anonymous function call or"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,303,// anything with prototype property requires no dummy declaration
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,304,// fix-ups afterward.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,305,if (block != null) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,306,Node originalRoot = specializedInputRootsByOriginal.get(block);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,307,block.addChildrenToBack(originalInfo.generateDummyDeclaration());
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,579,"private Map<Node, Node> removedFunctionToBlock;"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,595,removedFunctionToBlock = Maps.newLinkedHashMap();
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,614,asChanged = specializedFunctions.add(functionNode);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,623,if (specializedFunctions.add(functionNode)) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,624,hasChanged = true;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,650,* @param declaringBlock If the function declaration puts a variable in the
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,651,"*    scope, we need to have a VAR statement in the scope where the"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,652,*    function is declared. Null if the function does not put a name
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,653,*    in the scope.
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,640,ublic void reportRemovedFunction(Node functionNode) {
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,641,asChanged = removedFunctions.add(functionNode);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,655,"public void reportRemovedFunction(Node functionNode, Node declaringBlock) {"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,656,"// Depends when we were notified, functionNode.getParent might or might"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,657,// not be null. We are going to force the user to tell us the parent
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,658,// instead.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,659,if (removedFunctions.add(functionNode)) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,660,hasChanged = true;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,661,"removedFunctionToBlock.put(functionNode, declaringBlock);"
False,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,443,astState.reportRemovedFunction(functionF);
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,443,"lastState.reportRemovedFunction(functionF, functionF.getParent());"
False,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,448,astState.reportRemovedFunction(functionG);
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,448,"lastState.reportRemovedFunction(functionG, functionF.getParent());"

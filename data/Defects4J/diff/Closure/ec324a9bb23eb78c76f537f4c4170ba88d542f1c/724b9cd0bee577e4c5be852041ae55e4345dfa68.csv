is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,148,f (parent.getType() == Token.SCRIPT) {
True,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,148,if (parent.isScript()) {
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,213,reconditions.checkState(defaultRoot.getType() == Token.SCRIPT);
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,213,Preconditions.checkState(defaultRoot.isScript());
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,480,f (dest.getType() == Token.STRING &&
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,480,if (dest.isString() &&
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,496,f (n.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,496,if (n.isGetProp()) {
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,526,oolean isCallTarget = (parent.getType() == Token.CALL)
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,526,boolean isCallTarget = (parent.isCall())
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,530,oolean isIncOrDec = (parent.getType() == Token.INC) ||
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,531,parent.getType() == Token.DEC);
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,532,eturn (propNameNode.getType() == Token.STRING) && !isAssignTarget
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,530,boolean isIncOrDec = (parent.isInc()) ||
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,531,(parent.isDec());
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,532,return (propNameNode.isString()) && !isAssignTarget
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,549,oolean isAssignTarget = (parent.getType() == Token.ASSIGN)
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,549,boolean isAssignTarget = (parent.isAssign())
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,551,eturn (propNameNode.getType() == Token.STRING) && isAssignTarget
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,551,return (propNameNode.isString()) && isAssignTarget
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,610,f (dest.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,610,if (dest.isName()) {
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,652,f (n.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,652,if (n.isName()) {
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,666,f (n.getParent().getType() == Token.VAR ||
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,667,.getParent().getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,666,if (n.getParent().isVar() ||
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,667,n.getParent().isFunction()) {
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,678,parent.getType() == Token.NEW && isFirst) ||
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,679,arent.getType() == Token.INC ||
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,680,arent.getType() == Token.DEC) {
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,678,(parent.isNew() && isFirst) ||
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,679,parent.isInc() ||
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,680,parent.isDec()) {
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,266,f (value.getType() == Token.NUMBER && value.getDouble() == 0) {
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,266,if (value.isNumber() && value.getDouble() == 0) {
False,src/com/google/javascript/jscomp/AliasStrings.java,src/com/google/javascript/jscomp/AliasStrings.java,130,f (n.getType() == Token.STRING &&
True,src/com/google/javascript/jscomp/AliasStrings.java,src/com/google/javascript/jscomp/AliasStrings.java,130,if (n.isString() &&
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,485,f (child.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,485,if (child.isString()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,212,tring name = parent.getType() == Token.NAME ?
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,212,String name = parent.isName() ?
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,224,f (n.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,224,if (n.isGetProp()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,233, else if (n.getType() == Token.OBJECTLIT &&
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,233,} else if (n.isObjectLit() &&
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,237,(parent.getType() == Token.ASSIGN &&
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,238,arent.getFirstChild().getType() == Token.GETPROP &&
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,237,!(parent.isAssign() &&
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,238,parent.getFirstChild().isGetProp() &&
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,250, else if (n.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,250,} else if (n.isName()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,258,ar.getInitialValue().getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,258,var.getInitialValue().isFunction()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,313,.getType() == Token.FUNCTION &&
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,314,.getParent().getType() == Token.NAME);
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,313,n.isFunction() &&
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,314,n.getParent().isName());
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,320,& n.getType() == Token.GETPROP
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,321,& assign.getParent().getType() == Token.EXPR_RESULT) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,320,&& n.isGetProp()
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,321,&& assign.getParent().isExprResult()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,324,.getFirstChild().getType() == Token.GETPROP;
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,324,n.getFirstChild().isGetProp();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,329,f (child.getType() == Token.STRING &&
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,329,if (child.isString() &&
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,381,f (dest.getType() == Token.STRING &&
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,381,if (dest.isString() &&
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,393,f (map.getType() == Token.OBJECTLIT) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,393,if (map.isObjectLit()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,416,f (n.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,416,if (n.isGetProp()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,473,arent.getType() == Token.VAR ||
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,473,parent.isVar() ||
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,482,f (parent.getType() == Token.FUNCTION || parent.hasOneChild()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,482,if (parent.isFunction() || parent.hasOneChild()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,485,reconditions.checkState(parent.getType() == Token.VAR);
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,485,Preconditions.checkState(parent.isVar());
False,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,80,f (parent.getType() == Token.ASSIGN) {
True,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,80,if (parent.isAssign()) {
False,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,88, else if (parent.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,88,} else if (parent.isName()) {
False,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,104,f (rhs.getType() == Token.OBJECTLIT) {
True,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,104,if (rhs.isObjectLit()) {
False,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,118,f (keyNode.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,118,if (keyNode.isString()) {
False,src/com/google/javascript/jscomp/AstParallelizer.java,src/com/google/javascript/jscomp/AstParallelizer.java,134,eturn n.getType() == Token.BLOCK;
True,src/com/google/javascript/jscomp/AstParallelizer.java,src/com/google/javascript/jscomp/AstParallelizer.java,134,return n.isBlock();
False,src/com/google/javascript/jscomp/AstValidator.java,src/com/google/javascript/jscomp/AstValidator.java,424,f (n.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/AstValidator.java,src/com/google/javascript/jscomp/AstValidator.java,424,if (n.isVar()) {
False,src/com/google/javascript/jscomp/AstValidator.java,src/com/google/javascript/jscomp/AstValidator.java,432,f (n.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/AstValidator.java,src/com/google/javascript/jscomp/AstValidator.java,432,if (n.isVar()) {
False,src/com/google/javascript/jscomp/AstValidator.java,src/com/google/javascript/jscomp/AstValidator.java,551,f (c.getType() == Token.DEFAULT) {
True,src/com/google/javascript/jscomp/AstValidator.java,src/com/google/javascript/jscomp/AstValidator.java,551,if (c.isDefault()) {
False,src/com/google/javascript/jscomp/AstValidator.java,src/com/google/javascript/jscomp/AstValidator.java,589,f (n.getType() == Token.EMPTY) {
True,src/com/google/javascript/jscomp/AstValidator.java,src/com/google/javascript/jscomp/AstValidator.java,589,if (n.isEmpty()) {
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,219,reconditions.checkArgument(callsiteNode.getType() == Token.CALL ||
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,220,allsiteNode.getType() == Token.NEW);
True,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,219,Preconditions.checkArgument(callsiteNode.isCall() ||
True,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,220,callsiteNode.isNew());
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,577,reconditions.checkArgument(callsite.getType() == Token.CALL
False,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,578,| callsite.getType() == Token.NEW);
True,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,577,Preconditions.checkArgument(callsite.isCall()
True,src/com/google/javascript/jscomp/CallGraph.java,src/com/google/javascript/jscomp/CallGraph.java,578,|| callsite.isNew());
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,170,f (parent.getType() == Token.ASSIGN) {
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,170,if (parent.isAssign()) {
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,190,arent.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,190,parent.isName()) {
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,268,f (parent.getType() == Token.FUNCTION || parent.getType() == Token.VAR ||
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,269,arent.getType() == Token.NEW) {
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,268,if (parent.isFunction() || parent.isVar() ||
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,269,parent.isNew()) {
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,296,f (parent.getType() == Token.NEW) {
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,296,if (parent.isNew()) {
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,434,arent.getType() == Token.ASSIGN &&
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,434,parent.isAssign() &&
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,553,f (!((parent.getType() == Token.CALL && parent.getFirstChild() == n) ||
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,554,.getType() == Token.NEW)) {
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,553,if (!((parent.isCall() && parent.getFirstChild() == n) ||
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,554,n.isNew())) {
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,560,f (n.getType() == Token.GETPROP && n == parent.getFirstChild() &&
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,560,if (n.isGetProp() && n == parent.getFirstChild() &&
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,587,scopeRootParent != null && scopeRootParent.getType() == Token.ASSIGN &&
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,587,(scopeRootParent != null && scopeRootParent.isAssign() &&
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,596,f (n.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,596,if (n.isFunction()) {
False,src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java,src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java,64,f ((child.getType() == Token.BLOCK) && (!child.hasChildren())) {
True,src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java,src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java,64,if ((child.isBlock()) && (!child.hasChildren())) {
False,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,24,mport com.google.javascript.rhino.Token;
False,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,147,f (parent.getType() == Token.EXPR_RESULT) {
True,src/com/google/javascript/jscomp/CheckGlobalNames.java,src/com/google/javascript/jscomp/CheckGlobalNames.java,146,if (parent.isExprResult()) {
False,src/com/google/javascript/jscomp/CheckGlobalThis.java,src/com/google/javascript/jscomp/CheckGlobalThis.java,82,f (n.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/CheckGlobalThis.java,src/com/google/javascript/jscomp/CheckGlobalThis.java,82,if (n.isFunction()) {
False,src/com/google/javascript/jscomp/CheckGlobalThis.java,src/com/google/javascript/jscomp/CheckGlobalThis.java,123,f (parent != null && parent.getType() == Token.ASSIGN) {
True,src/com/google/javascript/jscomp/CheckGlobalThis.java,src/com/google/javascript/jscomp/CheckGlobalThis.java,123,if (parent != null && parent.isAssign()) {
False,src/com/google/javascript/jscomp/CheckGlobalThis.java,src/com/google/javascript/jscomp/CheckGlobalThis.java,138,f (lhs.getType() == Token.GETPROP &&
True,src/com/google/javascript/jscomp/CheckGlobalThis.java,src/com/google/javascript/jscomp/CheckGlobalThis.java,138,if (lhs.isGetProp() &&
False,src/com/google/javascript/jscomp/CheckGlobalThis.java,src/com/google/javascript/jscomp/CheckGlobalThis.java,143,f (llhs.getType() == Token.GETPROP &&
True,src/com/google/javascript/jscomp/CheckGlobalThis.java,src/com/google/javascript/jscomp/CheckGlobalThis.java,143,if (llhs.isGetProp() &&
False,src/com/google/javascript/jscomp/CheckGlobalThis.java,src/com/google/javascript/jscomp/CheckGlobalThis.java,156,"f (n.getType() == Token.THIS && shouldReportThis(n, parent)) {"
True,src/com/google/javascript/jscomp/CheckGlobalThis.java,src/com/google/javascript/jscomp/CheckGlobalThis.java,156,"if (n.isThis() && shouldReportThis(n, parent)) {"
False,src/com/google/javascript/jscomp/CheckGlobalThis.java,src/com/google/javascript/jscomp/CheckGlobalThis.java,193,f (gramps.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/CheckGlobalThis.java,src/com/google/javascript/jscomp/CheckGlobalThis.java,193,if (gramps.isVar()) {
False,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,60,f (n.getType() == Token.STRING &&
True,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,60,if (n.isString() &&
False,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,84,eturn parent.getType() == Token.CALL &&
True,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,84,return parent.isCall() &&
False,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,95,tring name = parent.getType() == Token.CALL ?
True,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,95,String name = parent.isCall() ?
False,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,106,f (parent.getType() == Token.ASSIGN) {
True,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,106,if (parent.isAssign()) {
False,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,109, else if (parent.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,109,} else if (parent.isName()) {
False,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,111,f (grandParent != null && grandParent.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,src/com/google/javascript/jscomp/CheckMissingGetCssName.java,111,if (grandParent != null && grandParent.isVar()) {
False,src/com/google/javascript/jscomp/CheckMissingReturn.java,src/com/google/javascript/jscomp/CheckMissingReturn.java,51,eturn input != null && input.getType() == Token.RETURN;
True,src/com/google/javascript/jscomp/CheckMissingReturn.java,src/com/google/javascript/jscomp/CheckMissingReturn.java,51,return input != null && input.isReturn();
False,src/com/google/javascript/jscomp/CheckPropertyOrder.java,src/com/google/javascript/jscomp/CheckPropertyOrder.java,332,f (lhs.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/CheckPropertyOrder.java,src/com/google/javascript/jscomp/CheckPropertyOrder.java,332,if (lhs.isGetProp()) {
False,src/com/google/javascript/jscomp/CheckPropertyOrder.java,src/com/google/javascript/jscomp/CheckPropertyOrder.java,334,f ((llhs.getType() == Token.THIS)
False,src/com/google/javascript/jscomp/CheckPropertyOrder.java,src/com/google/javascript/jscomp/CheckPropertyOrder.java,335,& (lrhs.getType() == Token.STRING)
True,src/com/google/javascript/jscomp/CheckPropertyOrder.java,src/com/google/javascript/jscomp/CheckPropertyOrder.java,334,if ((llhs.isThis())
True,src/com/google/javascript/jscomp/CheckPropertyOrder.java,src/com/google/javascript/jscomp/CheckPropertyOrder.java,335,&& (lrhs.isString())
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,122,f (parent.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,122,if (parent.isName()) {
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,130,ramps != null && gramps.getType() == Token.VAR);
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,130,gramps != null && gramps.isVar());
False,src/com/google/javascript/jscomp/CheckSideEffects.java,src/com/google/javascript/jscomp/CheckSideEffects.java,53,f (n.getType() == Token.EMPTY ||
False,src/com/google/javascript/jscomp/CheckSideEffects.java,src/com/google/javascript/jscomp/CheckSideEffects.java,54,.getType() == Token.COMMA) {
True,src/com/google/javascript/jscomp/CheckSideEffects.java,src/com/google/javascript/jscomp/CheckSideEffects.java,53,if (n.isEmpty() ||
True,src/com/google/javascript/jscomp/CheckSideEffects.java,src/com/google/javascript/jscomp/CheckSideEffects.java,54,n.isComma()) {
False,src/com/google/javascript/jscomp/CheckSideEffects.java,src/com/google/javascript/jscomp/CheckSideEffects.java,64,f (gramps.getType() == Token.CALL &&
True,src/com/google/javascript/jscomp/CheckSideEffects.java,src/com/google/javascript/jscomp/CheckSideEffects.java,64,if (gramps.isCall() &&
False,src/com/google/javascript/jscomp/CheckSideEffects.java,src/com/google/javascript/jscomp/CheckSideEffects.java,72,.getNext().getType() == Token.NAME &&
True,src/com/google/javascript/jscomp/CheckSideEffects.java,src/com/google/javascript/jscomp/CheckSideEffects.java,72,n.getNext().isName() &&
False,src/com/google/javascript/jscomp/CheckSideEffects.java,src/com/google/javascript/jscomp/CheckSideEffects.java,114,f (n.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/CheckSideEffects.java,src/com/google/javascript/jscomp/CheckSideEffects.java,114,if (n.isString()) {
False,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,25,mport com.google.javascript.rhino.Token;
False,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,113, while (ancestor.getType() == Token.ASSIGN &&
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,111,} while (ancestor.isAssign() &&
False,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,143,f (n.getType() == Token.ASSIGN) {
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,141,if (n.isAssign()) {
False,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,174,f (n.getType() == Token.CALL) {
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,172,if (n.isCall()) {
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,91,allName.getType() == Token.GETPROP;
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,91,callName.isGetProp();
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,140,f (callName.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,140,if (callName.isGetProp()) {
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,142, else if (callName.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,142,} else if (callName.isName()) {
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,172,eturn qualifiedName.getType() == Token.GETPROP &&
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,172,return qualifiedName.isGetProp() &&
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,201,f (callee != null && callee.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,201,if (callee != null && callee.isGetProp()) {
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,205,f (target != null && target.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,205,if (target != null && target.isString()) {
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,242,f (name.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,242,if (name.isString()) {
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,293,reconditions.checkArgument(call.getType() == Token.CALL);
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,293,Preconditions.checkArgument(call.isCall());
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,301,reconditions.checkArgument(callNode.getType() == Token.CALL);
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,301,Preconditions.checkArgument(callNode.isCall());
False,src/com/google/javascript/jscomp/ClosureOptimizePrimitives.java,src/com/google/javascript/jscomp/ClosureOptimizePrimitives.java,46,f (n.getType() == Token.CALL) {
True,src/com/google/javascript/jscomp/ClosureOptimizePrimitives.java,src/com/google/javascript/jscomp/ClosureOptimizePrimitives.java,46,if (n.isCall()) {
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,19,mport static com.google.javascript.rhino.Token.CALL;
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,20,mport static com.google.javascript.rhino.Token.GETPROP;
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,21,mport static com.google.javascript.rhino.Token.NAME;
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,22,mport static com.google.javascript.rhino.Token.STRING;
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,211,f (condition.getType() == CALL && condition.getChildCount() == 2) {
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,207,if (condition.isCall() && condition.getChildCount() == 2) {
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,214,f (callee.getType() == GETPROP && param.isQualifiedName()) {
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,210,if (callee.isGetProp() && param.isQualifiedName()) {
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,218,"f (left.getType() == NAME && ""goog"".equals(left.getString()) &&"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,219,ight.getType() == STRING) {
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,214,"if (left.isName() && ""goog"".equals(left.getString()) &&"
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,215,right.isString()) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,256,f (v1.getParentNode().getType() == Token.LP &&
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,257,2.getParentNode().getType() == Token.LP) {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,256,if (v1.getParentNode().isLP() &&
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,257,v2.getParentNode().isLP()) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,422,f (parent.getType() == Token.LP) {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,422,if (parent.isLP()) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,129,reconditions.checkState(first.getNext().getType() == Token.BLOCK &&
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,129,Preconditions.checkState(first.getNext().isBlock() &&
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,191,f (first == null || first.getType() == Token.EMPTY) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,191,if (first == null || first.isEmpty()) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,197,f (first.getType() == Token.COMMA) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,197,if (first.isComma()) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,247,f (n.getFirstChild().getType() == Token.NUMBER) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,247,if (n.getFirstChild().isNumber()) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,309,reconditions.checkState(n.getParent().getType() == Token.OBJECTLIT);
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,309,Preconditions.checkState(n.getParent().isObjectLit());
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,311,reconditions.checkState(first.getType() == Token.FUNCTION);
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,311,Preconditions.checkState(first.isFunction());
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,367,.getParent().getType() == Token.SCRIPT);
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,367,n.getParent().isScript());
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,372,f (c.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,372,if (c.isVar()) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,376,f (c.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,376,if (c.isFunction()) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,395,f (first.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,395,if (first.isVar()) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,447,"ast.getType() == Token.STRING,"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,447,"last.isString(),"
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,449,oolean needsParens = (first.getType() == Token.NUMBER);
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,449,boolean needsParens = (first.isNumber());
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,620,.getParent().getType() == Token.OBJECTLIT) ? 1 : 0)) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,620,n.getParent().isObjectLit()) ? 1 : 0)) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,644,f (c.getType() == Token.GET || c.getType() == Token.SET) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,644,if (c.isGet() || c.isSet()) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,647,reconditions.checkState(c.getType() == Token.STRING);
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,647,Preconditions.checkState(c.isString());
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,747,"eturn n.getType() == Token.NAME && ""eval"".equals(n.getString()) &&"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,747,"return n.isName() && ""eval"".equals(n.getString()) &&"
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,768,f (n.getType() == Token.BLOCK) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,768,if (n.isBlock()) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,803,f (nodeToProcess.getType() == Token.EMPTY) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,803,if (nodeToProcess.isEmpty()) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,810,f (nodeToProcess.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,810,if (nodeToProcess.isVar()) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,821,f (n.getType() == Token.LABEL) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,821,if (n.isLabel()) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,838,eturn (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,838,return (n.isFunction() || n.isDo());
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,907,astWasEmpty = n.getType() == Token.EMPTY;
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,907,lastWasEmpty = n.isEmpty();
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,1088,f (c.getType() == Token.BLOCK) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,1088,if (c.isBlock()) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,1100,f (c.getType() == Token.BLOCK) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,1100,if (c.isBlock()) {
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,347,reconditions.checkState(n.getType() == Token.BLOCK);
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,347,Preconditions.checkState(n.isBlock());
False,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,411,f (callTarget.getType() == Token.GETPROP
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,411,if (callTarget.isGetProp()
False,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,413,& callTarget.getFirstChild().getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,413,&& callTarget.getFirstChild().isFunction()) {
False,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,66,f (!(parent.getType() == Token.SCRIPT ||
True,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,66,if (!(parent.isScript() ||
False,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,68,randparent.getType() == Token.FUNCTION &&
False,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,69,arent.getType() == Token.BLOCK)) {
True,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,68,grandparent.isFunction() &&
True,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,69,parent.isBlock())) {
False,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,79,alue.getType() == Token.FUNCTION &&
True,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,79,value.isFunction() &&
False,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,108,f (n.getType() == Token.NAME && n.getString().equals(name)) {
True,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java,108,if (n.isName() && n.getString().equals(name)) {
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,204,f (aliasParent.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,204,if (aliasParent.isName()) {
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,340,ef.node.getParent().getType() == Token.EXPR_RESULT);
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,340,ref.node.getParent().isExprResult());
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,401,ecl.node.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,401,decl.node.isGetProp()) {
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,474,f (parent.getType() == Token.CALL && n == parent.getFirstChild()) {
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,474,if (parent.isCall() && n == parent.getFirstChild()) {
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,515,.getDeclaration().node.getParent().getType() == Token.ASSIGN) {
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,515,p.getDeclaration().node.getParent().isAssign()) {
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,541,f (rvalue != null && rvalue.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,541,if (rvalue != null && rvalue.isFunction()) {
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,551,f (gramps.getType() == Token.EXPR_RESULT) {
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,551,if (gramps.isExprResult()) {
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,669,oolean isObjLit = rvalue.getType() == Token.OBJECTLIT;
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,669,boolean isObjLit = rvalue.isObjectLit();
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,680,f (rvalue.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,680,if (rvalue.isFunction()) {
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,737,f (n.getType() == Token.THIS) {
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,737,if (n.isThis()) {
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,766,oolean isObjLit = rvalue.getType() == Token.OBJECTLIT;
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,766,boolean isObjLit = rvalue.isObjectLit();
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,839,f (key.getType() == Token.GET || key.getType() == Token.SET) {
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,839,if (key.isGet() || key.isSet()) {
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,904,f (value.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,904,if (value.isFunction()) {
False,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,138,f (n.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,138,if (n.isVar()) {
False,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,150,f (parent.getType() == Token.IF) return;
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,150,if (parent.isIf()) return;
False,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,154,oolean hasVar = n.getType() == Token.VAR;
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,154,boolean hasVar = n.isVar();
False,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,162,"n.getType() == Token.VAR || canBeRedeclared(n, t.getScope()))) {"
True,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,src/com/google/javascript/jscomp/CollapseVariableDeclarations.java,162,"(n.isVar() || canBeRedeclared(n, t.getScope()))) {"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1471,reconditions.checkState(root.getType() == Token.SCRIPT);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1471,Preconditions.checkState(root.isScript());
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2089,reconditions.checkState(collectionRoot.getType() == Token.SCRIPT
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2090,| collectionRoot.getType() == Token.BLOCK);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2089,Preconditions.checkState(collectionRoot.isScript()
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2090,|| collectionRoot.isBlock());
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,124,reconditions.checkState(root.getType() == Token.SCRIPT);
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,124,Preconditions.checkState(root.isScript());
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,250,f (n.getType() == Token.CALL) {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,250,if (n.isCall()) {
False,src/com/google/javascript/jscomp/ConcreteType.java,src/com/google/javascript/jscomp/ConcreteType.java,23,mport com.google.javascript.rhino.Token;
False,src/com/google/javascript/jscomp/ConcreteType.java,src/com/google/javascript/jscomp/ConcreteType.java,309,reconditions.checkArgument(declaration.getType() == Token.FUNCTION);
True,src/com/google/javascript/jscomp/ConcreteType.java,src/com/google/javascript/jscomp/ConcreteType.java,308,Preconditions.checkArgument(declaration.isFunction());
False,src/com/google/javascript/jscomp/ConstCheck.java,src/com/google/javascript/jscomp/ConstCheck.java,63,arent.getType() == Token.VAR &&
True,src/com/google/javascript/jscomp/ConstCheck.java,src/com/google/javascript/jscomp/ConstCheck.java,63,parent.isVar() &&
False,src/com/google/javascript/jscomp/ConstCheck.java,src/com/google/javascript/jscomp/ConstCheck.java,90,f (lhs.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/ConstCheck.java,src/com/google/javascript/jscomp/ConstCheck.java,90,if (lhs.isName()) {
False,src/com/google/javascript/jscomp/ConstCheck.java,src/com/google/javascript/jscomp/ConstCheck.java,107,f (lhs.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/ConstCheck.java,src/com/google/javascript/jscomp/ConstCheck.java,107,if (lhs.isName()) {
False,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,170,f (value != null && value.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,170,if (value != null && value.isFunction()) {
False,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,456,reconditions.checkState(next.getType() == Token.CASE);
True,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,456,Preconditions.checkState(next.isCase());
False,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,485,f (node.getType() == Token.BLOCK && parent != null &&
False,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,486,arent.getType() == Token.TRY &&
True,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,485,if (node.isBlock() && parent != null &&
True,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,486,parent.isTry() &&
False,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,497,hile (child != null && child.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,497,while (child != null && child.isFunction()) {
False,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,515,f (node.getType() == Token.BLOCK && node.isSyntheticBlock()) {
True,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,515,if (node.isBlock() && node.isSyntheticBlock()) {
False,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,571,f (cur.getType() == Token.TRY && NodeUtil.hasFinally(cur)
True,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,571,if (cur.isTry() && NodeUtil.hasFinally(cur)
False,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,605,f (cur.getType() == Token.TRY && NodeUtil.hasFinally(cur)
True,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,605,if (cur.isTry() && NodeUtil.hasFinally(cur)
False,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,703,f (parent == null || parent.getType() == Token.FUNCTION ||
True,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,703,if (parent == null || parent.isFunction() ||
False,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,718,f (parent.getNext().getType() == Token.CASE) {
True,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,718,if (parent.getNext().isCase()) {
False,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,720, else if (parent.getNext().getType() == Token.DEFAULT) {
True,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,720,} else if (parent.getNext().isDefault()) {
False,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,769,hile (nextSibling != null && nextSibling.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,769,while (nextSibling != null && nextSibling.isFunction()) {
False,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,827,reconditions.checkState(handler.getType() == Token.TRY);
True,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,827,Preconditions.checkState(handler.isTry());
False,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,888,hile (target.getType() == Token.LABEL) {
True,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,888,while (target.isLabel()) {
False,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,978,f (block.getType() == Token.BLOCK &&
False,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,979,lock.getParent().getType() == Token.TRY &&
True,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,978,if (block.isBlock() &&
True,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,979,block.getParent().isTry() &&
False,src/com/google/javascript/jscomp/ConvertToDottedProperties.java,src/com/google/javascript/jscomp/ConvertToDottedProperties.java,58,f (right.getType() == Token.STRING &&
True,src/com/google/javascript/jscomp/ConvertToDottedProperties.java,src/com/google/javascript/jscomp/ConvertToDottedProperties.java,58,if (right.isString() &&
False,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,241,f (rootNode.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,241,if (rootNode.isFunction()) {
False,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,248, else if (scopeFuncParent.getType() == Token.NAME &&
True,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,248,} else if (scopeFuncParent.isName() &&
False,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,258,f (curRoot.getParent().getType() == Token.ASSIGN) {
True,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,258,if (curRoot.getParent().isAssign()) {
False,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,260,hile (owner.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,260,while (owner.isGetProp()) {
False,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,263,f (owner.getType() == Token.NAME &&
True,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,263,if (owner.isName() &&
False,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,356,f (current.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,356,if (current.isGetProp()) {
False,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,358, else if (current.getType() == Token.ASSIGN &&
True,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,358,} else if (current.isAssign() &&
False,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,404,.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,404,n.isFunction()) {
False,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,406, else if (n.getType() == Token.CALL) {
True,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,406,} else if (n.isCall()) {
False,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,408,eturn functionName.getType() == Token.NAME &&
True,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,408,return functionName.isName() &&
False,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,414,.getType() == Token.OBJECTLIT) {
False,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,415,oolean isObjectLit = n.getType() == Token.OBJECTLIT;
True,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,414,n.isObjectLit()) {
True,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,src/com/google/javascript/jscomp/CrossModuleCodeMotion.java,415,boolean isObjectLit = n.isObjectLit();
False,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,143,alue.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,143,value.isFunction()) {
False,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,145,f (valueParent.getType() == Token.GET
False,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,146,| valueParent.getType() == Token.SET) {
True,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,145,if (valueParent.isGet()
True,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,src/com/google/javascript/jscomp/CrossModuleMethodMotion.java,146,|| valueParent.isSet()) {
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,29,mport com.google.javascript.rhino.Token;
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,573,f (var.getParentNode().getType() == Token.CATCH ||
True,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,571,if (var.getParentNode().isCatch() ||
False,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,53,.getFirstChild().getType() == Token.NAME) ||
False,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,54,.getType() == Token.INC || n.getType() == Token.DEC;
True,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,53,n.getFirstChild().isName()) ||
True,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,54,n.isInc() || n.isDec();
False,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,180,.getType() == Token.INC || n.getType() == Token.DEC) {
True,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,180,n.isInc() || n.isDec()) {
False,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,246, else if (n.getType() == Token.INC || n.getType() == Token.DEC) {
True,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,246,} else if (n.isInc() || n.isDec()) {
False,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,250, else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {
True,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,250,} else if(n.isComma() && n != parent.getLastChild()) {
False,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,252, else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&
True,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,252,} else if (parent.isFor() && !NodeUtil.isForIn(parent) &&
False,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,365,reconditions.checkState(n.getParent().getType() == Token.ASSIGN);
True,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,src/com/google/javascript/jscomp/DeadAssignmentsElimination.java,365,Preconditions.checkState(n.getParent().isAssign());
False,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,59, else if (parent.getType() == Token.LP) {
True,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,59,} else if (parent.isLP()) {
False,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,88, else if (parent.getType() == Token.LP) {
True,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,88,} else if (parent.isLP()) {
False,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,96, else if (nextSibling.getType() == Token.FOR
False,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,97,& nextSibling.getFirstChild().getType() == Token.EMPTY) {
True,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,96,} else if (nextSibling.isFor()
True,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,97,&& nextSibling.getFirstChild().isEmpty()) {
False,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,146,f (node.getType() == Token.NAME || node.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,146,if (node.isName() || node.isString()) {
False,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,304,reconditions.checkState(parent.getType() == Token.CALL);
True,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,304,Preconditions.checkState(parent.isCall());
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,36,mport com.google.javascript.rhino.Token;
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,404,f (n.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,403,if (n.isGetProp()) {
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,432,f (n.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,431,if (n.isGetProp()) {
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,434, else if (n.getType() == Token.OBJECTLIT) {
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,433,} else if (n.isObjectLit()) {
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,455,f (n.getFirstChild().getType() == Token.THIS) {
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,454,if (n.getFirstChild().isThis()) {
False,src/com/google/javascript/jscomp/ExploitAssigns.java,src/com/google/javascript/jscomp/ExploitAssigns.java,56, else if (rightValue.getType() == Token.ASSIGN) {
True,src/com/google/javascript/jscomp/ExploitAssigns.java,src/com/google/javascript/jscomp/ExploitAssigns.java,56,} else if (rightValue.isAssign()) {
False,src/com/google/javascript/jscomp/ExploitAssigns.java,src/com/google/javascript/jscomp/ExploitAssigns.java,83,eturn !isLValue || value.getFirstChild().getType() == Token.THIS;
True,src/com/google/javascript/jscomp/ExploitAssigns.java,src/com/google/javascript/jscomp/ExploitAssigns.java,83,return !isLValue || value.getFirstChild().isThis();
False,src/com/google/javascript/jscomp/ExploitAssigns.java,src/com/google/javascript/jscomp/ExploitAssigns.java,171,f (leftSide.getType() == Token.NAME ||
False,src/com/google/javascript/jscomp/ExploitAssigns.java,src/com/google/javascript/jscomp/ExploitAssigns.java,172,eftSide.getType() == Token.GETPROP &&
False,src/com/google/javascript/jscomp/ExploitAssigns.java,src/com/google/javascript/jscomp/ExploitAssigns.java,173,eftSide.getFirstChild().getType() == Token.THIS) {
True,src/com/google/javascript/jscomp/ExploitAssigns.java,src/com/google/javascript/jscomp/ExploitAssigns.java,171,if (leftSide.isName() ||
True,src/com/google/javascript/jscomp/ExploitAssigns.java,src/com/google/javascript/jscomp/ExploitAssigns.java,172,leftSide.isGetProp() &&
True,src/com/google/javascript/jscomp/ExploitAssigns.java,src/com/google/javascript/jscomp/ExploitAssigns.java,173,leftSide.getFirstChild().isThis()) {
False,src/com/google/javascript/jscomp/ExploitAssigns.java,src/com/google/javascript/jscomp/ExploitAssigns.java,208,f (node.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/ExploitAssigns.java,src/com/google/javascript/jscomp/ExploitAssigns.java,208,if (node.isName()) {
False,src/com/google/javascript/jscomp/ExploitAssigns.java,src/com/google/javascript/jscomp/ExploitAssigns.java,211,reconditions.checkArgument(node.getType() == Token.GETPROP);
True,src/com/google/javascript/jscomp/ExploitAssigns.java,src/com/google/javascript/jscomp/ExploitAssigns.java,211,Preconditions.checkArgument(node.isGetProp());
False,src/com/google/javascript/jscomp/ExploitAssigns.java,src/com/google/javascript/jscomp/ExploitAssigns.java,214,f (name.getType() == Token.NAME
True,src/com/google/javascript/jscomp/ExploitAssigns.java,src/com/google/javascript/jscomp/ExploitAssigns.java,214,if (name.isName()
False,src/com/google/javascript/jscomp/ExploitAssigns.java,src/com/google/javascript/jscomp/ExploitAssigns.java,233,f (node.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/ExploitAssigns.java,src/com/google/javascript/jscomp/ExploitAssigns.java,233,if (node.isName()) {
False,src/com/google/javascript/jscomp/ExploitAssigns.java,src/com/google/javascript/jscomp/ExploitAssigns.java,235,f (parent.getType() == Token.ASSIGN && parent.getFirstChild() == node) {
True,src/com/google/javascript/jscomp/ExploitAssigns.java,src/com/google/javascript/jscomp/ExploitAssigns.java,235,if (parent.isAssign() && parent.getFirstChild() == node) {
False,src/com/google/javascript/jscomp/ExportTestFunctions.java,src/com/google/javascript/jscomp/ExportTestFunctions.java,65,f (parent.getType() == Token.SCRIPT) {
True,src/com/google/javascript/jscomp/ExportTestFunctions.java,src/com/google/javascript/jscomp/ExportTestFunctions.java,65,if (parent.isScript()) {
False,src/com/google/javascript/jscomp/ExportTestFunctions.java,src/com/google/javascript/jscomp/ExportTestFunctions.java,84,f (grandparent != null && grandparent.getType() == Token.SCRIPT) {
True,src/com/google/javascript/jscomp/ExportTestFunctions.java,src/com/google/javascript/jscomp/ExportTestFunctions.java,84,if (grandparent != null && grandparent.isScript()) {
False,src/com/google/javascript/jscomp/ExportTestFunctions.java,src/com/google/javascript/jscomp/ExportTestFunctions.java,109,eturn grandchild != null && grandchild.getType() == Token.FUNCTION;
True,src/com/google/javascript/jscomp/ExportTestFunctions.java,src/com/google/javascript/jscomp/ExportTestFunctions.java,109,return grandchild != null && grandchild.isFunction();
False,src/com/google/javascript/jscomp/ExportTestFunctions.java,src/com/google/javascript/jscomp/ExportTestFunctions.java,126,f (exportCallTarget.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/ExportTestFunctions.java,src/com/google/javascript/jscomp/ExportTestFunctions.java,126,if (exportCallTarget.isName()) {
False,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,400,reconditions.checkArgument(parent.getType() == Token.EXPR_RESULT);
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,400,Preconditions.checkArgument(parent.isExprResult());
False,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,522,reconditions.checkArgument(call.getType() == Token.CALL);
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,522,Preconditions.checkArgument(call.isCall());
False,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,612,hile (parent.getType() == Token.LABEL) {
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,612,while (parent.isLabel()) {
False,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,805,& parent.getType() == Token.CALL
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,805,&& parent.isCall()
False,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,845,f (n.getType() == Token.ASSIGN) {
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,845,if (n.isAssign()) {
False,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,456,f (parent.getType() == Token.ASSIGN || parent.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,456,if (parent.isAssign() || parent.isVar()) {
False,src/com/google/javascript/jscomp/FindExportableNodes.java,src/com/google/javascript/jscomp/FindExportableNodes.java,73,f (parent.getType() == Token.SCRIPT) {
True,src/com/google/javascript/jscomp/FindExportableNodes.java,src/com/google/javascript/jscomp/FindExportableNodes.java,73,if (parent.isScript()) {
False,src/com/google/javascript/jscomp/FindExportableNodes.java,src/com/google/javascript/jscomp/FindExportableNodes.java,80,f (grandparent != null && grandparent.getType() == Token.SCRIPT &&
False,src/com/google/javascript/jscomp/FindExportableNodes.java,src/com/google/javascript/jscomp/FindExportableNodes.java,81,arent.getType() == Token.EXPR_RESULT &&
True,src/com/google/javascript/jscomp/FindExportableNodes.java,src/com/google/javascript/jscomp/FindExportableNodes.java,80,if (grandparent != null && grandparent.isScript() &&
True,src/com/google/javascript/jscomp/FindExportableNodes.java,src/com/google/javascript/jscomp/FindExportableNodes.java,81,parent.isExprResult() &&
False,src/com/google/javascript/jscomp/FindExportableNodes.java,src/com/google/javascript/jscomp/FindExportableNodes.java,88,f (parent.getType() == Token.SCRIPT) {
True,src/com/google/javascript/jscomp/FindExportableNodes.java,src/com/google/javascript/jscomp/FindExportableNodes.java,88,if (parent.isScript()) {
False,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,196,| parent.isVar() || parent.getType() == Token.INC ||
False,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,197,arent.getType() == Token.DEC || parent.getType() == Token.LP ||
False,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,198,arent.getType() == Token.CATCH) {
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,196,|| parent.isVar() || parent.isInc() ||
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,197,parent.isDec() || parent.isLP() ||
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,198,parent.isCatch()) {
False,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,381,hile (defParent.getParent().getType() == Token.LABEL) {
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,381,while (defParent.getParent().isLabel()) {
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,63,f (node.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,63,if (node.isName()) {
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,76, else if (replaceThis && node.getType() == Token.THIS) {
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,76,} else if (replaceThis && node.isThis()) {
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,94, else if (node.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,94,} else if (node.isFunction()) {
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,199,f (n.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,199,if (n.isName()) {
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,205, else if (n.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,205,} else if (n.isFunction()) {
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,253,reconditions.checkArgument(fnNode.getType() == Token.FUNCTION);
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,253,Preconditions.checkArgument(fnNode.isFunction());
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,419,f (n.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,419,if (n.isName()) {
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,424, else if (n.getType() == Token.THIS) {
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,424,} else if (n.isThis()) {
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,473,f (n.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,473,if (n.isFunction()) {
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,479, else if (n.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,479,} else if (n.isName()) {
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,142,f (n.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,142,if (n.isName()) {
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,272,reconditions.checkArgument(returnNode.getType() == Token.RETURN);
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,272,Preconditions.checkArgument(returnNode.isReturn());
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,361,& parent.getFirstChild().getType() == Token.NAME
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,361,&& parent.getFirstChild().isName()
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,365, else if (parent.getType() == Token.NAME
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,365,} else if (parent.isName()
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,367,& grandParent.getType() == Token.VAR
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,367,&& grandParent.isVar()
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,524,f (block.getFirstChild().getType() == Token.RETURN
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,524,if (block.getFirstChild().isReturn()
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,608,f (n.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,608,if (n.isName()) {
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,611,f (!assumeMinimumCapture && n.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,611,if (!assumeMinimumCapture && n.isFunction()) {
False,src/com/google/javascript/jscomp/FunctionNames.java,src/com/google/javascript/jscomp/FunctionNames.java,22,mport com.google.javascript.rhino.Token;
False,src/com/google/javascript/jscomp/FunctionNames.java,src/com/google/javascript/jscomp/FunctionNames.java,135,f (n.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/FunctionNames.java,src/com/google/javascript/jscomp/FunctionNames.java,133,if (n.isFunction()) {
False,src/com/google/javascript/jscomp/FunctionRewriter.java,src/com/google/javascript/jscomp/FunctionRewriter.java,277,f (statement.getType() == Token.RETURN) {
True,src/com/google/javascript/jscomp/FunctionRewriter.java,src/com/google/javascript/jscomp/FunctionRewriter.java,277,if (statement.isReturn()) {
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,121,f (n.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,121,if (n.isFunction()) {
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,383,reconditions.checkArgument(node.getType() == Token.BLOCK);
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,383,Preconditions.checkArgument(node.isBlock());
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,405,reconditions.checkArgument(ret.getType() == Token.RETURN);
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,405,Preconditions.checkArgument(ret.isReturn());
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,471,eturn (block.getLastChild().getType() == Token.RETURN);
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,471,return (block.getLastChild().isReturn());
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,483,f (current.getType() == Token.FUNCTION
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,484,| current.getType() == Token.EXPR_RESULT) {
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,483,if (current.isFunction()
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,484,|| current.isExprResult()) {
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,490,f (current.getType() == Token.RETURN) {
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,490,if (current.isReturn()) {
False,src/com/google/javascript/jscomp/GatherRawExports.java,src/com/google/javascript/jscomp/GatherRawExports.java,23,mport com.google.javascript.rhino.Token;
False,src/com/google/javascript/jscomp/GatherRawExports.java,src/com/google/javascript/jscomp/GatherRawExports.java,56,& sibling.getType() == Token.STRING
True,src/com/google/javascript/jscomp/GatherRawExports.java,src/com/google/javascript/jscomp/GatherRawExports.java,54,&& sibling.isString()
False,src/com/google/javascript/jscomp/GatherRawExports.java,src/com/google/javascript/jscomp/GatherRawExports.java,67,f (n.getType() == Token.THIS) {
True,src/com/google/javascript/jscomp/GatherRawExports.java,src/com/google/javascript/jscomp/GatherRawExports.java,65,if (n.isThis()) {
False,src/com/google/javascript/jscomp/GatherRawExports.java,src/com/google/javascript/jscomp/GatherRawExports.java,69, else if (n.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/GatherRawExports.java,src/com/google/javascript/jscomp/GatherRawExports.java,67,} else if (n.isName()) {
False,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,115,"original.getType() == Token.AND) || (original.getType() == Token.OR),"
True,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,115,"(original.isAnd()) || (original.isOr()),"
False,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,131,"reconditions.checkArgument(hook.getType() == Token.HOOK,"
True,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,131,"Preconditions.checkArgument(hook.isHook(),"
False,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,230,f (node.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,230,if (node.isFunction()) {
False,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,235,f (node.getType() == Token.HOOK) {
True,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,235,if (node.isHook()) {
False,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,240,f ((node.getType() == Token.AND) || (node.getType() == Token.OR)) {
True,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,240,if ((node.isAnd()) || (node.isOr())) {
False,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,250,f (node.getType() == Token.CALL) {
True,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,250,if (node.isCall()) {
False,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,252, else if (node.getType() == Token.NEW) {
True,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,252,} else if (node.isNew()) {
False,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,268,"node.getType() == Token.AND) || (node.getType() == Token.OR),"
True,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,268,"(node.isAnd()) || (node.isOr()),"
False,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,289,"reconditions.checkArgument(node.getType() == Token.HOOK,"
True,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,289,"Preconditions.checkArgument(node.isHook(),"
False,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,312,"reconditions.checkArgument(node.getType() == Token.CALL,"
True,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,312,"Preconditions.checkArgument(node.isCall(),"
False,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,339,"reconditions.checkArgument(node.getType() == Token.NEW,"
True,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,339,"Preconditions.checkArgument(node.isNew(),"
False,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,77,f (node.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,77,if (node.isGetProp()) {
False,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,79,f (node.getFirstChild().getType() == Token.GETPROP &&
True,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,79,if (node.getFirstChild().isGetProp() &&
False,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,156,reconditions.checkArgument(node.getType() == Token.GETPROP);
True,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,156,Preconditions.checkArgument(node.isGetProp());
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,196,urrent.getType() == Token.GETPROP;
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,196,current.isGetProp();
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,203,eturn current.getType() == Token.NAME && newNodes.contains(current);
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,203,return current.isName() && newNodes.contains(current);
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,324,f (parent != null && parent.getType() == Token.OBJECTLIT) {
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,324,if (parent != null && parent.isObjectLit()) {
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,450,reconditions.checkState(parent.getType() == Token.OBJECTLIT);
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,450,Preconditions.checkState(parent.isObjectLit());
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,485,reatGramps.getType() == Token.OBJECTLIT) {
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,485,greatGramps.isObjectLit()) {
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,831,eturn parent.getType() == Token.ASSIGN &&
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,831,return parent.isAssign() &&
False,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1050,ef.node.getParent().getType() == Token.EXPR_RESULT) {
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1050,ref.node.getParent().isExprResult()) {
False,src/com/google/javascript/jscomp/GroupVariableDeclarations.java,src/com/google/javascript/jscomp/GroupVariableDeclarations.java,82,f (parentNode.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/GroupVariableDeclarations.java,src/com/google/javascript/jscomp/GroupVariableDeclarations.java,82,if (parentNode.isVar()) {
False,src/com/google/javascript/jscomp/GroupVariableDeclarations.java,src/com/google/javascript/jscomp/GroupVariableDeclarations.java,160,f (groupVarParent.getType() == Token.FOR) {
True,src/com/google/javascript/jscomp/GroupVariableDeclarations.java,src/com/google/javascript/jscomp/GroupVariableDeclarations.java,160,if (groupVarParent.isFor()) {
False,src/com/google/javascript/jscomp/GroupVariableDeclarations.java,src/com/google/javascript/jscomp/GroupVariableDeclarations.java,171,f (groupVarParent.getType() == Token.FOR) {
True,src/com/google/javascript/jscomp/GroupVariableDeclarations.java,src/com/google/javascript/jscomp/GroupVariableDeclarations.java,171,if (groupVarParent.isFor()) {
False,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,57,f (n.getType() == Token.FOR && n.getChildCount() == 3) {
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,57,if (n.isFor() && n.getChildCount() == 3) {
False,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,69,f (key.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,69,if (key.isVar()) {
False,src/com/google/javascript/jscomp/InferJSDocInfo.java,src/com/google/javascript/jscomp/InferJSDocInfo.java,87,reconditions.checkState(root.getType() == Token.SCRIPT);
True,src/com/google/javascript/jscomp/InferJSDocInfo.java,src/com/google/javascript/jscomp/InferJSDocInfo.java,87,Preconditions.checkState(root.isScript());
False,src/com/google/javascript/jscomp/InferJSDocInfo.java,src/com/google/javascript/jscomp/InferJSDocInfo.java,106,(parent.getType() == Token.ASSIGN &&
True,src/com/google/javascript/jscomp/InferJSDocInfo.java,src/com/google/javascript/jscomp/InferJSDocInfo.java,106,!(parent.isAssign() &&
False,src/com/google/javascript/jscomp/InferJSDocInfo.java,src/com/google/javascript/jscomp/InferJSDocInfo.java,122,(parent.getType() == Token.VAR &&
True,src/com/google/javascript/jscomp/InferJSDocInfo.java,src/com/google/javascript/jscomp/InferJSDocInfo.java,122,!(parent.isVar() &&
False,src/com/google/javascript/jscomp/InferJSDocInfo.java,src/com/google/javascript/jscomp/InferJSDocInfo.java,129,f (varType == null && parent.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/InferJSDocInfo.java,src/com/google/javascript/jscomp/InferJSDocInfo.java,129,if (varType == null && parent.isFunction()) {
False,src/com/google/javascript/jscomp/InferJSDocInfo.java,src/com/google/javascript/jscomp/InferJSDocInfo.java,161,parent.getType() == Token.ASSIGN &&
True,src/com/google/javascript/jscomp/InferJSDocInfo.java,src/com/google/javascript/jscomp/InferJSDocInfo.java,161,(parent.isAssign() &&
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,187,f (nameNode.getType() == Token.NAME && nameNode.hasChildren()
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,188,& nameNode.getFirstChild().getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,187,if (nameNode.isName() && nameNode.hasChildren()
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,188,&& nameNode.getFirstChild().isFunction()) {
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,197,| parent.getType() == Token.LABEL);
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,197,|| parent.isLabel());
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,218,f (n.getFirstChild().getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,218,if (n.getFirstChild().isFunction()) {
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,222,f (fnIdentifingNode.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,222,if (fnIdentifingNode.isFunction()) {
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,397,f (child.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,397,if (child.isName()) {
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,399, else if (child.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,399,} else if (child.isFunction()) {
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,404,f (fnIdentifingNode.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,404,if (fnIdentifingNode.isName()) {
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,406, else if (fnIdentifingNode.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,406,} else if (fnIdentifingNode.isFunction()) {
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,429,reconditions.checkState(name.getType() == Token.NAME);
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,430,f (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,429,Preconditions.checkState(name.isName());
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,430,if (parent.isVar() || parent.isFunction()) {
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,436,f (parent.getType() == Token.CALL && parent.getFirstChild() == name) {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,436,if (parent.isCall() && parent.getFirstChild() == name) {
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,451,& name.getNext().getType() == Token.STRING
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,451,&& name.getNext().isString()
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,454,f (gramps.getType() == Token.CALL
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,454,if (gramps.isCall()
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,479,f (n.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,479,if (n.isName()) {
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,550,reconditions.checkState(n.getType() == Token.NAME);
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,550,Preconditions.checkState(n.isName());
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,567,f (parent.getType() == Token.NEW) {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,567,if (parent.isNew()) {
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,569,f (target.getType() == Token.NAME && target.getString().equals(
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,569,if (target.isName() && target.getString().equals(
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,577,f (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,577,if (parent.isAssign() && parent.getFirstChild() == n) {
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,788,f (node.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,788,if (node.isName()) {
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,118,f (node.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,118,if (node.isName()) {
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,164,f (parent.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,164,if (parent.isGetProp()) {
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,167,f (gramps.getType() == Token.CALL
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,167,if (gramps.isCall()
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,200,f (child.getType() == Token.GET ||
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,201,hild.getType() == Token.SET) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,200,if (child.isGet() ||
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,201,child.isSet()) {
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,232,eturn parent.getType() == Token.VAR ||
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,233,parent.getType() == Token.ASSIGN
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,232,return parent.isVar() ||
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,233,(parent.isAssign()
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,235,& parent.getParent().getType() == Token.EXPR_RESULT);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,235,&& parent.getParent().isExprResult());
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,251,reconditions.checkState(val.getType() == Token.OBJECTLIT);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,251,Preconditions.checkState(val.isObjectLit());
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,264, else if (ref.getParent().getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,264,} else if (ref.getParent().isVar()) {
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,268,reconditions.checkState(getprop.getType() == Token.GETPROP);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,268,Preconditions.checkState(getprop.isGetProp());
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,291,reconditions.checkState(object.getType() == Token.OBJECTLIT);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,291,Preconditions.checkState(object.isObjectLit());
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,309,reconditions.checkState(val.getType() == Token.OBJECTLIT);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,309,Preconditions.checkState(val.isObjectLit());
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,358,f (replace.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,358,if (replace.isVar()) {
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,383,nit.getParent().getType() == Token.VAR;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,383,init.getParent().isVar();
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,417, else if (ref.getParent().getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,417,} else if (ref.getParent().isVar()) {
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,424,reconditions.checkState(getprop.getType() == Token.GETPROP);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,424,Preconditions.checkState(getprop.isGetProp());
False,src/com/google/javascript/jscomp/InlineSimpleMethods.java,src/com/google/javascript/jscomp/InlineSimpleMethods.java,145,f (leftChild.getType() == Token.THIS) {
True,src/com/google/javascript/jscomp/InlineSimpleMethods.java,src/com/google/javascript/jscomp/InlineSimpleMethods.java,145,if (leftChild.isThis()) {
False,src/com/google/javascript/jscomp/InlineSimpleMethods.java,src/com/google/javascript/jscomp/InlineSimpleMethods.java,198,eturn  expectedBlock.getType() == Token.BLOCK ?
True,src/com/google/javascript/jscomp/InlineSimpleMethods.java,src/com/google/javascript/jscomp/InlineSimpleMethods.java,198,return  expectedBlock.isBlock() ?
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,184,f (value != null && value.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,184,if (value != null && value.isName()) {
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,250,eturn (parent.getType() == Token.INC
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,251,| parent.getType() == Token.DEC
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,250,return (parent.isInc()
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,251,|| parent.isDec()
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,336,f (root.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,336,if (root.isName()) {
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,371,reconditions.checkState(expressRoot.getType() == Token.EXPR_RESULT);
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,371,Preconditions.checkState(expressRoot.isExprResult());
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,425,reconditions.checkState(varNode.getType() == Token.VAR);
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,425,Preconditions.checkState(varNode.isVar());
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,557,f (value.getType() == Token.GETPROP
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,558,& reference.getParent().getType() == Token.CALL
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,557,if (value.isGetProp()
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,558,&& reference.getParent().isCall()
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,565,f (value.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,565,if (value.isFunction()) {
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,567,f (reference.getParent().getType() == Token.CALL) {
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,567,if (reference.getParent().isCall()) {
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,587,| value.getType() == Token.FUNCTION;
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,587,|| value.isFunction();
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,601,f (initialization.getParent().getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,601,if (initialization.getParent().isVar()) {
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,606, else if (initialization.getParent().getType() == Token.ASSIGN) {
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,606,} else if (initialization.getParent().isAssign()) {
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,608,nitialization.getGrandparent().getType() == Token.EXPR_RESULT);
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,608,initialization.getGrandparent().isExprResult());
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,633,eturn (declaration.getParent().getType() == Token.VAR
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,633,return (declaration.getParent().isVar()
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,652,arent.getType() == Token.ASSIGN
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,652,parent.isAssign()
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,705,alue.getType() == Token.THIS &&
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,705,value.isThis() &&
False,src/com/google/javascript/jscomp/JsMessageVisitor.java,src/com/google/javascript/jscomp/JsMessageVisitor.java,172,f ((parent != null) && (parent.getType() == Token.VAR)) {
True,src/com/google/javascript/jscomp/JsMessageVisitor.java,src/com/google/javascript/jscomp/JsMessageVisitor.java,172,if ((parent != null) && (parent.isVar())) {
False,src/com/google/javascript/jscomp/JsMessageVisitor.java,src/com/google/javascript/jscomp/JsMessageVisitor.java,209,sgNode != null && msgNode.getType() == Token.CALL;
True,src/com/google/javascript/jscomp/JsMessageVisitor.java,src/com/google/javascript/jscomp/JsMessageVisitor.java,209,msgNode != null && msgNode.isCall();
False,src/com/google/javascript/jscomp/JsMessageVisitor.java,src/com/google/javascript/jscomp/JsMessageVisitor.java,398,f ((sibling != null) && (sibling.getType() == Token.VAR)) {
True,src/com/google/javascript/jscomp/JsMessageVisitor.java,src/com/google/javascript/jscomp/JsMessageVisitor.java,398,if ((sibling != null) && (sibling.isVar())) {
False,src/com/google/javascript/jscomp/JsMessageVisitor.java,src/com/google/javascript/jscomp/JsMessageVisitor.java,507,f (argumentNode.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/JsMessageVisitor.java,src/com/google/javascript/jscomp/JsMessageVisitor.java,507,if (argumentNode.isName()) {
False,src/com/google/javascript/jscomp/LineNumberCheck.java,src/com/google/javascript/jscomp/LineNumberCheck.java,21,mport com.google.javascript.rhino.Token;
False,src/com/google/javascript/jscomp/LineNumberCheck.java,src/com/google/javascript/jscomp/LineNumberCheck.java,62,f (n.getType() == Token.SCRIPT) {
True,src/com/google/javascript/jscomp/LineNumberCheck.java,src/com/google/javascript/jscomp/LineNumberCheck.java,61,if (n.isScript()) {
False,src/com/google/javascript/jscomp/LineNumberCheck.java,src/com/google/javascript/jscomp/LineNumberCheck.java,70,f (n.getType() == Token.SCRIPT) {
True,src/com/google/javascript/jscomp/LineNumberCheck.java,src/com/google/javascript/jscomp/LineNumberCheck.java,69,if (n.isScript()) {
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,352,reconditions.checkState(n.getType() == Token.NAME);
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,352,Preconditions.checkState(n.isName());
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,104,f (node.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,104,if (node.isFunction()) {
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,147,f (parent.getType() == Token.ASSIGN &&
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,147,if (parent.isAssign() &&
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,149,.getNext().getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,149,n.getNext().isFunction()) {
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,163,f (key.getType() == Token.STRING
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,164,& value.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,163,if (key.isString()
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,164,&& value.isFunction()) {
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,189,f (dest.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,189,if (dest.isString()) {
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,201,f (parent.getType() == Token.ASSIGN &&
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,201,if (parent.isAssign() &&
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,250,f (dest.getType() == Token.STRING &&
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,251,arent.getType() == Token.ASSIGN) {
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,250,if (dest.isString() &&
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,251,parent.isAssign()) {
False,src/com/google/javascript/jscomp/MinimizeExitPoints.java,src/com/google/javascript/jscomp/MinimizeExitPoints.java,123,f (n.getType() == Token.IF) {
True,src/com/google/javascript/jscomp/MinimizeExitPoints.java,src/com/google/javascript/jscomp/MinimizeExitPoints.java,123,if (n.isIf()) {
False,src/com/google/javascript/jscomp/MinimizeExitPoints.java,src/com/google/javascript/jscomp/MinimizeExitPoints.java,134,f (n.getType() == Token.TRY) {
True,src/com/google/javascript/jscomp/MinimizeExitPoints.java,src/com/google/javascript/jscomp/MinimizeExitPoints.java,134,if (n.isTry()) {
False,src/com/google/javascript/jscomp/MinimizeExitPoints.java,src/com/google/javascript/jscomp/MinimizeExitPoints.java,151,f (n.getType() == Token.LABEL) {
True,src/com/google/javascript/jscomp/MinimizeExitPoints.java,src/com/google/javascript/jscomp/MinimizeExitPoints.java,151,if (n.isLabel()) {
False,src/com/google/javascript/jscomp/MinimizeExitPoints.java,src/com/google/javascript/jscomp/MinimizeExitPoints.java,170,f (c.getType() == Token.IF) {
True,src/com/google/javascript/jscomp/MinimizeExitPoints.java,src/com/google/javascript/jscomp/MinimizeExitPoints.java,170,if (c.isIf()) {
False,src/com/google/javascript/jscomp/MinimizeExitPoints.java,src/com/google/javascript/jscomp/MinimizeExitPoints.java,225,f (srcBlock.getType() == Token.BLOCK) {
True,src/com/google/javascript/jscomp/MinimizeExitPoints.java,src/com/google/javascript/jscomp/MinimizeExitPoints.java,225,if (srcBlock.isBlock()) {
False,src/com/google/javascript/jscomp/MinimizeExitPoints.java,src/com/google/javascript/jscomp/MinimizeExitPoints.java,250, else if (destBlock.getType() == Token.EMPTY) {
True,src/com/google/javascript/jscomp/MinimizeExitPoints.java,src/com/google/javascript/jscomp/MinimizeExitPoints.java,250,} else if (destBlock.isEmpty()) {
False,src/com/google/javascript/jscomp/MinimizeExitPoints.java,src/com/google/javascript/jscomp/MinimizeExitPoints.java,253, else if (destBlock.getType() == Token.BLOCK) {
True,src/com/google/javascript/jscomp/MinimizeExitPoints.java,src/com/google/javascript/jscomp/MinimizeExitPoints.java,253,} else if (destBlock.isBlock()) {
False,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,302,f (n.getType() == Token.DEC || n.getType() == Token.INC) {
True,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,302,if (n.isDec() || n.isInc()) {
False,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,382,eturn v.getParentNode().getType() == Token.LP;
True,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,382,return v.getParentNode().isLP();
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,352,reconditions.checkState(parent.getType() == Token.ASSIGN);
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,352,Preconditions.checkState(parent.isAssign());
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,424,reconditions.checkState(node.getType() == Token.CALL);
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,424,Preconditions.checkState(node.isCall());
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,429,reconditions.checkState(node.getType() == Token.CALL);
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,429,Preconditions.checkState(node.isCall());
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,514,f (n.getType() == Token.ASSIGN) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,514,if (n.isAssign()) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,518,f (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent)) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,518,if (parent.isFor() && !NodeUtil.isForIn(parent)) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,620,f (n.getType() == Token.ASSIGN) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,620,if (n.isAssign()) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,631, else if (n.getType() == Token.CALL) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,631,} else if (n.isCall()) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,658,f (node.getType() == Token.GETELEM) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,658,if (node.isGetElem()) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,707,f (input.getType() == Token.CALL) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,707,if (input.isCall()) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,748,f (parent.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,748,if (parent.isVar()) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,753, else if (n.getType() == Token.ASSIGN &&
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,754,parent.getType() == Token.EXPR_RESULT ||
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,755,arent.getType() == Token.FOR ||
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,756,arent.getType() == Token.RETURN)) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,753,} else if (n.isAssign() &&
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,754,(parent.isExprResult() ||
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,755,parent.isFor() ||
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,756,parent.isReturn())) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,760, else if (n.getType() == Token.CALL &&
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,761,arent.getType() == Token.EXPR_RESULT) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,760,} else if (n.isCall() &&
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,761,parent.isExprResult()) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,778,f (n.getType() == Token.FOR) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,778,if (n.isFor()) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,794,f (parent.getType() == Token.VAR ||
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,795,arent.getType() == Token.EXPR_RESULT ||
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,796,arent.getType() == Token.RETURN ||
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,797,arent.getType() == Token.THROW) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,794,if (parent.isVar() ||
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,795,parent.isExprResult() ||
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,796,parent.isReturn() ||
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,797,parent.isThrow()) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,801,f ((parent.getType() == Token.IF ||
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,801,if ((parent.isIf() ||
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,804,arent.getType() == Token.SWITCH ||
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,805,arent.getType() == Token.CASE) &&
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,804,parent.isSwitch() ||
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,805,parent.isCase()) &&
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,810,f (parent.getType() == Token.DO && parent.getLastChild() == n) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,810,if (parent.isDo() && parent.getLastChild() == n) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,937,ode rhs = (parent.getType() == Token.VAR)
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,937,Node rhs = (parent.isVar())
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,951,f ((parent.getType() == Token.NAME ||
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,952,arent.getType() == Token.ASSIGN) &&
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,951,if ((parent.isName() ||
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,952,parent.isAssign()) &&
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1330,f (rootNameNode.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1330,if (rootNameNode.isGetProp()) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1345,f (objLitParent.getType() == Token.ASSIGN) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1345,if (objLitParent.isAssign()) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1348, else if (objLitParent.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1348,} else if (objLitParent.isName()) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1351, else if (objLitParent.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1351,} else if (objLitParent.isString()) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1390,.getType() == Token.GETPROP &&
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1391,arent.getType() == Token.ASSIGN &&
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1390,n.isGetProp() &&
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1391,parent.isAssign() &&
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1521,hile (parent.getType() == Token.HOOK) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1521,while (parent.isHook()) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1525,f (parent.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1525,if (parent.isName()) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1529,f (parent.getType() == Token.ASSIGN) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1529,if (parent.isAssign()) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1634, else if (n.getType() == Token.ASSIGN && parent.getType() != Token.FOR) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1634,} else if (n.isAssign() && parent.getType() != Token.FOR) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1672,"reconditions.checkArgument(parent.getType() == Token.FOR,"
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1672,"Preconditions.checkArgument(parent.isFor(),"
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1687,f (parent.getType() == Token.FOR) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1687,if (parent.isFor()) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1748,f (rep.getType() == Token.EXPR_RESULT) {
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1748,if (rep.isExprResult()) {
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,55,f (n.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,55,if (n.isFunction()) {
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,76,f (current.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,76,if (current.isFunction()) {
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,84,f (current.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,84,if (current.isFunction()) {
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,93,f (current.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,93,if (current.isFunction()) {
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,165,reconditions.checkArgument(var.getType() == Token.VAR);
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,165,Preconditions.checkArgument(var.isVar());
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,181,reconditions.checkArgument(assign.getType() == Token.ASSIGN);
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,182,reconditions.checkArgument(expr.getType() == Token.EXPR_RESULT);
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,181,Preconditions.checkArgument(assign.isAssign());
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,182,Preconditions.checkArgument(expr.isExprResult());
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,194,reconditions.checkArgument(nameNode.getType() == Token.NAME);
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,194,Preconditions.checkArgument(nameNode.isName());
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,229,f (curNode.getType() == Token.NAME &&
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,229,if (curNode.isName() &&
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,254,oolean assignsName = (nextParent.getType() == Token.ASSIGN
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,254,boolean assignsName = (nextParent.isAssign()
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,256,oolean isVarDeclaration = (nextParent.getType() == Token.VAR);
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,256,boolean isVarDeclaration = (nextParent.isVar());
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,277,| type == Token.NAME && nextParent.getType() == Token.CATCH) {
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,277,|| type == Token.NAME && nextParent.isCatch()) {
False,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,352,f (n.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,352,if (n.isFunction()) {
False,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,506,reconditions.checkState(n.getType() == Token.FUNCTION);
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,506,Preconditions.checkState(n.isFunction());
False,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,535,ody.getType() == Token.BLOCK);
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,535,body.isBlock());
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,174,f (n.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,174,if (n.isName()) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,233,f (n.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,233,if (n.isName()) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,351,.getType() == Token.NAME
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,352,| n.getType() == Token.STRING
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,353,| n.getType() == Token.GET
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,354,| n.getType() == Token.SET);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,351,n.isName()
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,352,|| n.isString()
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,353,|| n.isGet()
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,354,|| n.isSet());
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,361,parent.getType() == Token.GETPROP &&
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,361,(parent.isGetProp() &&
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,363,f (n.getType() == Token.NAME || isProperty) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,363,if (n.isName() || isProperty) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,389,reconditions.checkState(n.getType() == Token.FUNCTION);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,389,Preconditions.checkState(n.isFunction());
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,435,f (n.getType() == Token.LABEL) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,435,if (n.isLabel()) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,441,f (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,441,if (NodeUtil.isStatementBlock(n) || n.isLabel()) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,451,f (n.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,451,if (n.isFunction()) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,464,reconditions.checkArgument(n.getType() == Token.LABEL);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,464,Preconditions.checkArgument(n.isLabel());
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,509,f (first.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,509,if (first.isVar()) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,530,f (init.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,530,if (init.isVar()) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,555,f (c.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,555,if (c.isVar()) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,578,unctionBody.getParent().getType() == Token.FUNCTION);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,578,functionBody.getParent().isFunction());
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,651,reconditions.checkState(n.getType() == Token.NAME);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,651,Preconditions.checkState(n.isName());
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,668,f (v != null && v.getParentNode().getType() == Token.CATCH) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,668,if (v != null && v.getParentNode().isCatch()) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,690, else if (v != null && parent.getType() == Token.FUNCTION) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,691,f (v.getParentNode().getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,690,} else if (v != null && parent.isFunction()) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,691,if (v.getParentNode().isVar()) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,697, else if (parent.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,697,} else if (parent.isVar()) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,734, else if (gramps.getType() == Token.FOR) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,734,} else if (gramps.isFor()) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,741,reconditions.checkState(gramps.getType() == Token.LABEL);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,741,Preconditions.checkState(gramps.isLabel());
False,src/com/google/javascript/jscomp/OptimizeArgumentsArray.java,src/com/google/javascript/jscomp/OptimizeArgumentsArray.java,181,reconditions.checkState(parametersList.getType() == Token.LP);
True,src/com/google/javascript/jscomp/OptimizeArgumentsArray.java,src/com/google/javascript/jscomp/OptimizeArgumentsArray.java,181,Preconditions.checkState(parametersList.isLP());
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,366,.nameNode.getParent().getType() == Token.CATCH)) {
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,366,v.nameNode.getParent().isCatch())) {
False,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,459,"reconditions.checkArgument(block.getType() == Token.BLOCK,"
True,src/com/google/javascript/jscomp/OptimizeParameters.java,src/com/google/javascript/jscomp/OptimizeParameters.java,459,"Preconditions.checkArgument(block.isBlock(),"
False,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,105,reconditions.checkState(callNode.getType() == Token.CALL);
True,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,105,Preconditions.checkState(callNode.isCall());
False,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,167,f (node.getType() == Token.RETURN && node.hasOneChild()) {
True,src/com/google/javascript/jscomp/OptimizeReturns.java,src/com/google/javascript/jscomp/OptimizeReturns.java,167,if (node.isReturn() && node.hasOneChild()) {
False,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,85,f (n.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,85,if (n.isVar()) {
False,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,94,f (n.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,94,if (n.isVar()) {
False,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,103,eturn n.getType() == Token.OBJECTLIT || n.getType() == Token.ARRAYLIT;
True,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,103,return n.isObjectLit() || n.getType() == Token.ARRAYLIT;
False,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,236,f (lhs.getType() == Token.GETELEM
True,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,236,if (lhs.isGetElem()
False,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,243,f (property.getType() == Token.NUMBER) {
True,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,243,if (property.isNumber()) {
False,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,252,f (lhs.getType() == Token.GETELEM) {
True,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,252,if (lhs.isGetElem()) {
False,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,266,f (node.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,266,if (node.isName()) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,358,f (late && left.getType() == Token.NUMBER) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,358,if (late && left.isNumber()) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,379,f (left.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,379,if (left.isName()) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,450, else if (right.getType() == Token.NAME
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,450,} else if (right.isName()
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,466,reconditions.checkArgument(n.getType() == Token.ASSIGN);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,466,Preconditions.checkArgument(n.isAssign());
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,621,eft.getType() == Token.ADD) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,621,left.isAdd()) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,629,f (lr.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,629,if (lr.isString()) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,644,ight.getType() == Token.ADD) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,644,right.isAdd()) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,652,f (rl.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,652,if (rl.isString()) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,673,f (left.getType() == Token.STRING ||
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,674,ight.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,673,if (left.isString() ||
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,674,right.isString()) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,803,| n.getType() == Token.ADD);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,803,|| n.isAdd());
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,840,reconditions.checkArgument(node.getType() == Token.ADD);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,840,Preconditions.checkArgument(node.isAdd());
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,865,f (left.getType() == Token.NUMBER &&
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,866,ight.getType() == Token.NUMBER) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,865,if (left.isNumber() &&
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,866,right.isNumber()) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1198,eft.getType() == Token.NUMBER && right.getType() == Token.NUMBER);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1198,left.isNumber() && right.isNumber());
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1204,eft.getType() == Token.NUMBER && right.getType() == Token.NUMBER);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1204,left.isNumber() && right.isNumber());
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1287,reconditions.checkArgument(n.getType() == Token.NEW);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1287,Preconditions.checkArgument(n.isNew());
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1298,f (n.getParent().getType() == Token.GETELEM &&
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1298,if (n.getParent().isGetElem() &&
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1304,f (n.getParent().getType() == Token.ADD) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1304,if (n.getParent().isAdd()) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1312,reconditions.checkArgument(n.getType() == Token.NEW);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1312,Preconditions.checkArgument(n.isNew());
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1352,reconditions.checkArgument(n.getType() == Token.GETELEM);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1352,Preconditions.checkArgument(n.isGetElem());
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1354,f (left.getType() == Token.OBJECTLIT) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1354,if (left.isObjectLit()) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1368,reconditions.checkArgument(n.getType() == Token.GETPROP);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1368,Preconditions.checkArgument(n.isGetProp());
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1370,f (left.getType() == Token.OBJECTLIT) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1370,if (left.isObjectLit()) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1374,f (right.getType() == Token.STRING &&
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1374,if (right.isString() &&
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1407,| parent.getType() == Token.INC
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1408,| parent.getType() == Token.DEC) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1407,|| parent.isInc()
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1408,|| parent.isDec()) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1454,f (elem.getType() == Token.EMPTY) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1454,if (elem.isEmpty()) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1513,f (value.getType() == Token.FUNCTION && NodeUtil.referencesThis(value)) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1513,if (value.isFunction() && NodeUtil.referencesThis(value)) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1519,f (key.getType() == Token.GET){
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1519,if (key.isGet()){
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,83,reconditions.checkState(n.getType() == Token.TRY);
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,83,Preconditions.checkState(n.isTry());
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,118,reconditions.checkState(subtree.getType() == Token.ASSIGN);
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,118,Preconditions.checkState(subtree.isAssign());
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,122,f (left.getType() == Token.NAME
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,123,& right.getType() == Token.NAME
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,122,if (left.isName()
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,123,&& right.isName()
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,141,f (parent.getType() == Token.LABEL) {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,141,if (parent.isLabel()) {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,285,reconditions.checkState(n.getType() == Token.SWITCH);
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,285,Preconditions.checkState(n.isSwitch());
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,323,reconditions.checkState(n.getType() == Token.SWITCH);
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,323,Preconditions.checkState(n.isSwitch());
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,329,f (c.getType() == Token.DEFAULT) {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,329,if (c.isDefault()) {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,348,reconditions.checkState(c.getType() == Token.CASE);
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,348,Preconditions.checkState(c.isCase());
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,390,reconditions.checkState(executingCase.getType() == Token.DEFAULT
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,391,| executingCase.getType() == Token.CASE);
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,390,Preconditions.checkState(executingCase.isDefault()
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,391,|| executingCase.isCase());
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,398,reconditions.checkState(block.getType() == Token.BLOCK);
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,398,Preconditions.checkState(block.isBlock());
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,547, else if (n.getType() == Token.VAR && n.hasOneChild() &&
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,547,} else if (n.isVar() && n.hasOneChild() &&
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,582,eturn n != null && (n.getType() == Token.IF || isExprConditional(n));
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,582,return n != null && (n.isIf() || isExprConditional(n));
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,589,f (n.getType() == Token.EXPR_RESULT) {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,589,if (n.isExprResult()) {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,604,f (n.getType() == Token.IF) {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,604,if (n.isIf()) {
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,617,reconditions.checkState(n.getType() == Token.IF);
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,617,Preconditions.checkState(n.isIf());
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,723,reconditions.checkState(n.getType() == Token.HOOK);
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,723,Preconditions.checkState(n.isHook());
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,772,reconditions.checkArgument(n.getType() == Token.FOR);
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,772,Preconditions.checkArgument(n.isFor());
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,817,reconditions.checkArgument(n.getType() == Token.DO);
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,817,Preconditions.checkArgument(n.isDo());
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,51,f (subtree.getType() == Token.CALL) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,51,if (subtree.isCall()) {
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,72,reconditions.checkArgument(subtree.getType() == Token.CALL);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,72,Preconditions.checkArgument(subtree.isCall());
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,126,reconditions.checkArgument(subtree.getType() == Token.CALL);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,126,Preconditions.checkArgument(subtree.isCall());
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,140,firstArgument.getType() == Token.STRING ||
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,141,irstArgument.getType() == Token.NUMBER)) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,140,(firstArgument.isString() ||
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,141,firstArgument.isNumber())) {
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,207,reconditions.checkArgument(n.getType() == Token.CALL);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,207,Preconditions.checkArgument(n.isCall());
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,237,f (firstArg.getType() == Token.NUMBER) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,237,if (firstArg.isNumber()) {
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,333,reconditions.checkArgument(n.getType() == Token.CALL);
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,334,reconditions.checkArgument(lstringNode.getType() == Token.STRING);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,333,Preconditions.checkArgument(n.isCall());
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,334,Preconditions.checkArgument(lstringNode.isString());
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,389,f (right != null && right.getType() == Token.STRING
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,389,if (right != null && right.isString()
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,404,f (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,404,if (NodeUtil.isImmutableValue(elem) || elem.isEmpty()) {
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,487,reconditions.checkArgument(n.getType() == Token.CALL);
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,488,reconditions.checkArgument(stringNode.getType() == Token.STRING);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,487,Preconditions.checkArgument(n.isCall());
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,488,Preconditions.checkArgument(stringNode.isString());
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,495,f (arg1 != null && arg1.getType() == Token.NUMBER) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,495,if (arg1 != null && arg1.isNumber()) {
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,503,f (arg2.getType() == Token.NUMBER) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,503,if (arg2.isNumber()) {
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,541,reconditions.checkArgument(n.getType() == Token.CALL);
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,542,reconditions.checkArgument(stringNode.getType() == Token.STRING);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,541,Preconditions.checkArgument(n.isCall());
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,542,Preconditions.checkArgument(stringNode.isString());
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,547,f (arg1 != null && arg1.getType() == Token.NUMBER) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,547,if (arg1 != null && arg1.isNumber()) {
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,555,f (arg2.getType() == Token.NUMBER) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,555,if (arg2.isNumber()) {
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,594,reconditions.checkArgument(n.getType() == Token.CALL);
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,595,reconditions.checkArgument(stringNode.getType() == Token.STRING);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,594,Preconditions.checkArgument(n.isCall());
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,595,Preconditions.checkArgument(stringNode.isString());
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,600,f (arg1 != null && arg1.getType() == Token.NUMBER
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,600,if (arg1 != null && arg1.isNumber()
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,625,reconditions.checkArgument(n.getType() == Token.CALL);
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,626,reconditions.checkArgument(stringNode.getType() == Token.STRING);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,625,Preconditions.checkArgument(n.isCall());
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,626,Preconditions.checkArgument(stringNode.isString());
False,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,631,f (arg1 != null && arg1.getType() == Token.NUMBER
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,631,if (arg1 != null && arg1.isNumber()
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,208,reconditions.checkState(n.getType() == Token.CALL);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,208,Preconditions.checkState(n.isCall());
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,210,f (callTarget != null && callTarget.getType() == Token.NAME &&
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,210,if (callTarget != null && callTarget.isName() &&
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,229,reconditions.checkState(n.getType() == Token.CALL);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,229,Preconditions.checkState(n.isCall());
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,274,f (parent.getType() == Token.EXPR_RESULT
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,274,if (parent.isExprResult()
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,301,f (child.getType() == Token.IF){
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,301,if (child.isIf()){
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,451,f (follow == null && (n.getType() == Token.THROW || result != null)) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,451,if (follow == null && (n.isThrow() || result != null)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,495,f (follow == null && (n.getType() == Token.THROW || exitExpr != null)) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,495,if (follow == null && (n.isThrow() || exitExpr != null)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,545,reconditions.checkState(n.getType() == Token.RETURN
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,546,| n.getType() == Token.THROW);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,547,eturn n.getType() == Token.THROW
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,545,Preconditions.checkState(n.isReturn()
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,546,|| n.isThrow());
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,547,return n.isThrow()
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,622,f (cond.getType() == Token.NOT) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,622,if (cond.isNot()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,666,f (innerIf.getType() == Token.IF) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,666,if (innerIf.isIf()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,697,f (cond.getType() == Token.NOT && !consumesDanglingElse(elseBranch)) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,697,if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,785,& maybeName2.getType() == Token.NAME
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,785,&& maybeName2.isName()
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,810,& maybeName1.getType() == Token.NAME
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,810,&& maybeName1.isName()
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,852,reconditions.checkState(n.getType() == Token.IF);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,852,Preconditions.checkState(n.isIf());
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,886,f (n.getType() == Token.BLOCK) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,886,if (n.isBlock()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,889,f (maybeExpr.getType() == Token.EXPR_RESULT) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,889,if (maybeExpr.isExprResult()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,896,f (maybeExpr.getFirstChild().getType() == Token.CALL) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,896,if (maybeExpr.getFirstChild().isCall()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,901,f (calledFn.getType() == Token.GETELEM) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,901,if (calledFn.isGetElem()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,903, else if (calledFn.getType() == Token.GETPROP &&
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,903,} else if (calledFn.isGetProp() &&
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,931,f (n.getType() == Token.BLOCK) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,931,if (n.isBlock()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,934,eturn first.getType() == Token.RETURN;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,934,return first.isReturn();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,946,f (n.getType() == Token.BLOCK) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,946,if (n.isBlock()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,949,f (first.getType() == Token.RETURN) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,949,if (first.isReturn()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,962,f (n.getType() == Token.RETURN) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,962,if (n.isReturn()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,981,f (n.getType() == Token.BLOCK) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,981,if (n.isBlock()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,984,f (first.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,984,if (first.isVar()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1065,eturn (input.getType() == Token.GETPROP &&
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1066,nput.getParent().getType() == Token.ASSIGN);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1065,return (input.isGetProp() &&
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1066,input.getParent().isAssign());
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1134,f (leftParent.getType() == Token.NOT) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1134,if (leftParent.isNot()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1141,f (rightParent.getType() == Token.NOT) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1141,if (rightParent.isNot()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1149,nt newOp = (first.getType() == Token.AND) ? Token.OR : Token.AND;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1149,int newOp = (first.isAnd()) ? Token.OR : Token.AND;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1305,reconditions.checkState(n.getType() == Token.NEW);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1305,Preconditions.checkState(n.isNew());
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1311,f (n.getFirstChild().getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1311,if (n.getFirstChild().isName()) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1329,reconditions.checkArgument(n.getType() == Token.CALL
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1330,| n.getType() == Token.NEW);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1329,Preconditions.checkArgument(n.isCall()
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1330,|| n.isNew());
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1428,attern.getType() == Token.STRING
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1428,pattern.isString()
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1436,& (null == flags || flags.getType() == Token.STRING)
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1436,&& (null == flags || flags.isString())
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1476,ode.newNumber(n.getType() == Token.TRUE ? 0 : 1));
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,1476,Node.newNumber(n.isTrue() ? 0 : 1));
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,131,f (n.getType() == Token.OBJECTLIT) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,131,if (n.isObjectLit()) {
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,152,reconditions.checkState(objlit.getType() == Token.OBJECTLIT);
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,152,Preconditions.checkState(objlit.isObjectLit());
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,165,reconditions.checkState(n.getType() == Token.CALL);
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,165,Preconditions.checkState(n.isCall());
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,176,f (first.getType() == Token.NAME &&
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,176,if (first.isName() &&
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,186,reconditions.checkState(n.getType() == Token.FUNCTION);
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,186,Preconditions.checkState(n.isFunction());
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,189,f (parent.getType() == Token.ASSIGN) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,189,if (parent.isAssign()) {
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,213,reconditions.checkState(objlit.getType() == Token.OBJECTLIT);
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,213,Preconditions.checkState(objlit.isObjectLit());
False,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,215,alue.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/PrepareAst.java,src/com/google/javascript/jscomp/PrepareAst.java,215,value.isFunction()) {
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,178,oolean isExpr = parent.getType() == Token.EXPR_RESULT;
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,178,boolean isExpr = parent.isExprResult();
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,180,f (left.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,180,if (left.isGetProp()) {
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,182,f (name.getType() == Token.NAME &&
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,182,if (name.isName() &&
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,199,f (arg.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,199,if (arg.isString()) {
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,257,f (n.getFirstChild().getType() == Token.NAME &&
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,257,if (n.getFirstChild().isName() &&
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,364,f (n.getType() == Token.NAME && parent.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,364,if (n.isName() && parent.isVar()) {
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,366, else if (n.getType() == Token.ASSIGN &&
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,367,arent.getType() == Token.EXPR_RESULT) {
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,366,} else if (n.isAssign() &&
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,367,parent.isExprResult()) {
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,432,ode maybeInheritsExpr = (enclosingParent.getType() == Token.ASSIGN ?
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,432,Node maybeInheritsExpr = (enclosingParent.isAssign() ?
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,436,aybeInheritsExpr.getType() == Token.EXPR_RESULT &&
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,437,aybeInheritsExpr.getFirstChild().getType() == Token.CALL) {
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,436,maybeInheritsExpr.isExprResult() &&
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,437,maybeInheritsExpr.getFirstChild().isCall()) {
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,504,f (parent.getType() == Token.ASSIGN ||
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,504,if (parent.isAssign() ||
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,509, else if (parent.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,509,} else if (parent.isName()) {
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,663,reconditions.checkArgument(n.getType() == Token.NEW);
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,663,Preconditions.checkArgument(n.isNew());
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,908,f (nameNode.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,908,if (nameNode.isName()) {
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,1077,f (n.getType() == Token.EXPR_RESULT) {
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,1077,if (n.isExprResult()) {
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,1080, else if (n.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,1080,} else if (n.isVar()) {
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,1086,& value.getType() == Token.OBJECTLIT
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,1086,&& value.isObjectLit()
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,1112,urrent.getType() == Token.GETPROP;
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,1112,current.isGetProp();
False,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,200,arent.getType() == Token.VAR && parent.hasOneChild()) {
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,200,parent.isVar() && parent.hasOneChild()) {
False,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,298,f (valParent.getType() == Token.ASSIGN && name.isSimpleName() &&
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,298,if (valParent.isAssign() && name.isSimpleName() &&
False,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,339,f (n.getType() == Token.ASSIGN) {
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,339,if (n.isAssign()) {
False,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,344,reconditions.checkState(n.getType() == Token.NAME);
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,344,Preconditions.checkState(n.isName());
False,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,350,f (n.getType() == Token.CALL) {
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,350,if (n.isCall()) {
False,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,456,ef.node.getParent().getType() == Token.VAR ?
True,src/com/google/javascript/jscomp/ProcessDefines.java,src/com/google/javascript/jscomp/ProcessDefines.java,456,ref.node.getParent().isVar() ?
False,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,210, else if (name.getType() == Token.OR || name.getType() == Token.HOOK) {
True,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,210,} else if (name.isOr() || name.isHook()) {
False,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,212,f (name.getType() == Token.HOOK) {
True,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,212,if (name.isHook()) {
False,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,493,f (v.getParentNode().getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,493,if (v.getParentNode().isVar()) {
False,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,782,reconditions.checkArgument(callSite.getType() == Token.CALL ||
False,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,783,allSite.getType() == Token.NEW);
True,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,782,Preconditions.checkArgument(callSite.isCall() ||
True,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,783,callSite.isNew());
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,149,f (n.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,149,if (n.isName()) {
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,236,eturn n.getType() == Token.CASE;
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,236,return n.isCase();
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,560,arent.getType() == Token.LP &&
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,561,randparent.getType() == Token.FUNCTION;
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,560,parent.isLP() &&
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,561,grandparent.isFunction();
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,565,eturn getParent().getType() == Token.VAR;
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,565,return getParent().isVar();
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,589,eturn (parent.getType() == Token.FUNCTION)
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,589,return (parent.isFunction())
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,608,f (parent.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,608,if (parent.isVar()) {
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,616,eturn parent.getType() == Token.ASSIGN
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,616,return parent.isAssign()
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,671,his.isFunction = root.getType() == Token.FUNCTION;
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,671,this.isFunction = root.isFunction();
False,src/com/google/javascript/jscomp/RemoveTryCatch.java,src/com/google/javascript/jscomp/RemoveTryCatch.java,104,f (anc.getType() == Token.TRY) {
True,src/com/google/javascript/jscomp/RemoveTryCatch.java,src/com/google/javascript/jscomp/RemoveTryCatch.java,104,if (anc.isTry()) {
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,253,f (parent.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,253,if (parent.isVar()) {
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,326,reconditions.checkState(n.getType() == Token.FUNCTION);
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,326,Preconditions.checkState(n.isFunction());
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,330,ody.getType() == Token.BLOCK);
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,330,body.isBlock());
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,364,reconditions.checkState(function.getType() == Token.FUNCTION);
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,364,Preconditions.checkState(function.isFunction());
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,413,reconditions.checkState(function.getType() == Token.FUNCTION);
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,413,Preconditions.checkState(function.isFunction());
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,720,f (var.getParentNode().getType() == Token.VAR &&
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,720,if (var.getParentNode().isVar() &&
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,803,oRemove.getType() == Token.VAR ||
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,804,oRemove.getType() == Token.FUNCTION ||
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,805,oRemove.getType() == Token.LP &&
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,806,"arent.getType() == Token.FUNCTION,"
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,803,toRemove.isVar() ||
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,804,toRemove.isFunction() ||
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,805,toRemove.isLP() &&
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,806,"parent.isFunction(),"
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,809,f (toRemove.getType() == Token.LP &&
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,810,arent.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,809,if (toRemove.isLP() &&
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,810,parent.isFunction()) {
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,820,arent.getType() == Token.FOR &&
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,820,parent.isFor() &&
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,823, else if (toRemove.getType() == Token.VAR &&
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,823,} else if (toRemove.isVar() &&
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,834, else if (toRemove.getType() == Token.VAR &&
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,834,} else if (toRemove.isVar() &&
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,924,f (current.getType() == Token.GETPROP &&
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,924,if (current.isGetProp() &&
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,932,f (current.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,932,if (current.isName()) {
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,950,f (current.getType() == Token.GETELEM) {
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,950,if (current.isGetElem()) {
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,960,f (parent.getType() == Token.EXPR_RESULT) {
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,960,if (parent.isExprResult()) {
False,src/com/google/javascript/jscomp/RenameLabels.java,src/com/google/javascript/jscomp/RenameLabels.java,139,f (node.getType() == Token.LABEL) {
True,src/com/google/javascript/jscomp/RenameLabels.java,src/com/google/javascript/jscomp/RenameLabels.java,139,if (node.isLabel()) {
False,src/com/google/javascript/jscomp/RenameLabels.java,src/com/google/javascript/jscomp/RenameLabels.java,229,f (newChild.getType() == Token.BLOCK) {
True,src/com/google/javascript/jscomp/RenameLabels.java,src/com/google/javascript/jscomp/RenameLabels.java,229,if (newChild.isBlock()) {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,378,f (dest.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,378,if (dest.isString()) {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,410,f (propNode.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,410,if (propNode.isString()) {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,430,f (child != null && child.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,430,if (child != null && child.isString()) {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,438,f (fnName.getType() == Token.NAME &&
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,438,if (fnName.isName() &&
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,457, else if (parent.getType() == Token.NAME &&
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,457,} else if (parent.isName() &&
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,460,f (varNode.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,460,if (varNode.isVar()) {
False,src/com/google/javascript/jscomp/RenamePrototypes.java,src/com/google/javascript/jscomp/RenamePrototypes.java,300,f (dest.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/RenamePrototypes.java,src/com/google/javascript/jscomp/RenamePrototypes.java,300,if (dest.isString()) {
False,src/com/google/javascript/jscomp/RenamePrototypes.java,src/com/google/javascript/jscomp/RenamePrototypes.java,322,f (dest.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/RenamePrototypes.java,src/com/google/javascript/jscomp/RenamePrototypes.java,322,if (dest.isString()) {
False,src/com/google/javascript/jscomp/RenamePrototypes.java,src/com/google/javascript/jscomp/RenamePrototypes.java,360,f (dest.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/RenamePrototypes.java,src/com/google/javascript/jscomp/RenamePrototypes.java,360,if (dest.isString()) {
False,src/com/google/javascript/jscomp/RenamePrototypes.java,src/com/google/javascript/jscomp/RenamePrototypes.java,369,f (n.getType() == Token.ASSIGN) {
True,src/com/google/javascript/jscomp/RenamePrototypes.java,src/com/google/javascript/jscomp/RenamePrototypes.java,369,if (n.isAssign()) {
False,src/com/google/javascript/jscomp/RenamePrototypes.java,src/com/google/javascript/jscomp/RenamePrototypes.java,374,f (map.getType() == Token.OBJECTLIT) {
True,src/com/google/javascript/jscomp/RenamePrototypes.java,src/com/google/javascript/jscomp/RenamePrototypes.java,374,if (map.isObjectLit()) {
False,src/com/google/javascript/jscomp/ReplaceCssNames.java,src/com/google/javascript/jscomp/ReplaceCssNames.java,141,f (n.getType() == Token.CALL &&
True,src/com/google/javascript/jscomp/ReplaceCssNames.java,src/com/google/javascript/jscomp/ReplaceCssNames.java,141,if (n.isCall() &&
False,src/com/google/javascript/jscomp/ReplaceCssNames.java,src/com/google/javascript/jscomp/ReplaceCssNames.java,148,f (first.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/ReplaceCssNames.java,src/com/google/javascript/jscomp/ReplaceCssNames.java,148,if (first.isString()) {
False,src/com/google/javascript/jscomp/ReplaceCssNames.java,src/com/google/javascript/jscomp/ReplaceCssNames.java,168, else if (first.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/ReplaceCssNames.java,src/com/google/javascript/jscomp/ReplaceCssNames.java,168,} else if (first.isString()) {
False,src/com/google/javascript/jscomp/ReplaceMessages.java,src/com/google/javascript/jscomp/ReplaceMessages.java,189,f (node.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/ReplaceMessages.java,src/com/google/javascript/jscomp/ReplaceMessages.java,189,if (node.isName()) {
False,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,192,f (rhs.getType() == Token.NAME || rhs.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,192,if (rhs.isName() || rhs.isString()) {
False,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,249,.getType() == Token.NEW || n.getType() == Token.CALL);
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,249,n.isNew() || n.isCall());
False,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,298,f (value != null && value.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,298,if (value != null && value.isString()) {
False,src/com/google/javascript/jscomp/RescopeGlobalSymbols.java,src/com/google/javascript/jscomp/RescopeGlobalSymbols.java,151,f (parent.getType() == Token.FUNCTION && name.length() == 0) {
True,src/com/google/javascript/jscomp/RescopeGlobalSymbols.java,src/com/google/javascript/jscomp/RescopeGlobalSymbols.java,151,if (parent.isFunction() && name.length() == 0) {
False,src/com/google/javascript/jscomp/RescopeGlobalSymbols.java,src/com/google/javascript/jscomp/RescopeGlobalSymbols.java,162,ameNode.getParent().getType() == Token.CATCH) {
True,src/com/google/javascript/jscomp/RescopeGlobalSymbols.java,src/com/google/javascript/jscomp/RescopeGlobalSymbols.java,162,nameNode.getParent().isCatch()) {
False,src/com/google/javascript/jscomp/RescopeGlobalSymbols.java,src/com/google/javascript/jscomp/RescopeGlobalSymbols.java,217,f (c.getType() == Token.ASSIGN ||
False,src/com/google/javascript/jscomp/RescopeGlobalSymbols.java,src/com/google/javascript/jscomp/RescopeGlobalSymbols.java,218,arent.getType() == Token.FOR) {
True,src/com/google/javascript/jscomp/RescopeGlobalSymbols.java,src/com/google/javascript/jscomp/RescopeGlobalSymbols.java,217,if (c.isAssign() ||
True,src/com/google/javascript/jscomp/RescopeGlobalSymbols.java,src/com/google/javascript/jscomp/RescopeGlobalSymbols.java,218,parent.isFor()) {
False,src/com/google/javascript/jscomp/RescopeGlobalSymbols.java,src/com/google/javascript/jscomp/RescopeGlobalSymbols.java,223,f (parent.getType() == Token.FOR && parent.getFirstChild() == n) {
True,src/com/google/javascript/jscomp/RescopeGlobalSymbols.java,src/com/google/javascript/jscomp/RescopeGlobalSymbols.java,223,if (parent.isFor() && parent.getFirstChild() == n) {
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,228, else if (n.getType() == Token.RETURN) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,228,} else if (n.isReturn()) {
False,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,77,ar.getParentNode().getType() == Token.VAR &&
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,77,var.getParentNode().isVar() &&
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,117,f (aliasDefinition.getParent().getType() == Token.VAR &&
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,117,if (aliasDefinition.getParent().isVar() &&
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,216,eturn n.getType() == Token.CALL &&
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,216,return n.isCall() &&
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,240,f (n.getType() == Token.FUNCTION && t.inGlobalScope()) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,240,if (n.isFunction() && t.inGlobalScope()) {
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,252,or (; next != null || testNode.getType() == Token.SCRIPT;) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,252,for (; next != null || testNode.isScript();) {
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,278,f (parent.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,278,if (parent.isVar()) {
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,387,f (typeNode.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,387,if (typeNode.isString()) {
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,146,f (left.getType() == Token.TYPEOF && right.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,146,if (left.getType() == Token.TYPEOF && right.isString()) {
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,150,eft.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,150,left.isString()) {
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,245,f (outcome && condition.getFirstChild().getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,245,if (outcome && condition.getFirstChild().isString()) {
False,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,274,f (node2DeepestControlDependentBlock.getType() == Token.CASE) {
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,274,if (node2DeepestControlDependentBlock.isCase()) {
False,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,873,| parent.getType() == Token.DEC
False,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,874,| parent.getType() == Token.INC);
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,873,|| parent.isDec()
True,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,src/com/google/javascript/jscomp/SideEffectsAnalysis.java,874,|| parent.isInc());
False,src/com/google/javascript/jscomp/SimpleDefinitionFinder.java,src/com/google/javascript/jscomp/SimpleDefinitionFinder.java,30,mport com.google.javascript.rhino.Token;
False,src/com/google/javascript/jscomp/SimpleDefinitionFinder.java,src/com/google/javascript/jscomp/SimpleDefinitionFinder.java,163,f (inExterns && node.isName() && parent.getType() == Token.LP) {
True,src/com/google/javascript/jscomp/SimpleDefinitionFinder.java,src/com/google/javascript/jscomp/SimpleDefinitionFinder.java,161,if (inExterns && node.isName() && parent.isLP()) {
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,129,f (exp2.getType() == Token.COMMA) {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,129,if (exp2.isComma()) {
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,131,hile(leftMostChild.getType() == Token.COMMA) {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,131,while(leftMostChild.isComma()) {
False,src/com/google/javascript/jscomp/StrictModeCheck.java,src/com/google/javascript/jscomp/StrictModeCheck.java,97,f (n.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/StrictModeCheck.java,src/com/google/javascript/jscomp/StrictModeCheck.java,97,if (n.isName()) {
False,src/com/google/javascript/jscomp/StrictModeCheck.java,src/com/google/javascript/jscomp/StrictModeCheck.java,101, else if (n.getType() == Token.ASSIGN) {
True,src/com/google/javascript/jscomp/StrictModeCheck.java,src/com/google/javascript/jscomp/StrictModeCheck.java,101,} else if (n.isAssign()) {
False,src/com/google/javascript/jscomp/StrictModeCheck.java,src/com/google/javascript/jscomp/StrictModeCheck.java,105, else if (n.getType() == Token.OBJECTLIT) {
True,src/com/google/javascript/jscomp/StrictModeCheck.java,src/com/google/javascript/jscomp/StrictModeCheck.java,105,} else if (n.isObjectLit()) {
False,src/com/google/javascript/jscomp/StrictModeCheck.java,src/com/google/javascript/jscomp/StrictModeCheck.java,107, else if (n.getType() == Token.LABEL) {
True,src/com/google/javascript/jscomp/StrictModeCheck.java,src/com/google/javascript/jscomp/StrictModeCheck.java,107,} else if (n.isLabel()) {
False,src/com/google/javascript/jscomp/StrictModeCheck.java,src/com/google/javascript/jscomp/StrictModeCheck.java,124,eturn n.getParent().getParent().getType() == Token.FUNCTION;
True,src/com/google/javascript/jscomp/StrictModeCheck.java,src/com/google/javascript/jscomp/StrictModeCheck.java,124,return n.getParent().getParent().isFunction();
False,src/com/google/javascript/jscomp/StrictModeCheck.java,src/com/google/javascript/jscomp/StrictModeCheck.java,153,f (n.getFirstChild().getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/StrictModeCheck.java,src/com/google/javascript/jscomp/StrictModeCheck.java,153,if (n.getFirstChild().isName()) {
False,src/com/google/javascript/jscomp/StrictModeCheck.java,src/com/google/javascript/jscomp/StrictModeCheck.java,168,f (n.getFirstChild().getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/StrictModeCheck.java,src/com/google/javascript/jscomp/StrictModeCheck.java,168,if (n.getFirstChild().isName()) {
False,src/com/google/javascript/jscomp/StrictModeCheck.java,src/com/google/javascript/jscomp/StrictModeCheck.java,217,f ((n.getType() == Token.NAME) && isDeclaration(n)) {
True,src/com/google/javascript/jscomp/StrictModeCheck.java,src/com/google/javascript/jscomp/StrictModeCheck.java,217,if ((n.isName()) && isDeclaration(n)) {
False,src/com/google/javascript/jscomp/StrictModeCheck.java,src/com/google/javascript/jscomp/StrictModeCheck.java,219, else if (n.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/StrictModeCheck.java,src/com/google/javascript/jscomp/StrictModeCheck.java,219,} else if (n.isGetProp()) {
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,394,n.getType() == Token.CALL ||
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,395,.getType() == Token.NEW) &&
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,394,(n.isCall() ||
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,395,n.isNew()) &&
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,485,f (parent != null && parent.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,485,if (parent != null && parent.isName()) {
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,487,f (gramps != null && gramps.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,487,if (gramps != null && gramps.isVar()) {
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,513,f (n != null && n.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,513,if (n != null && n.isGetProp()) {
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,515,eturn propNode != null && propNode.getType() == Token.STRING &&
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,515,return propNode != null && propNode.isString() &&
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,195,f (n.getType() == Token.NAME &&
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,196,.getParent().getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,195,if (n.isName() &&
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,196,n.getParent().isFunction()) {
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,653,hile (currentNode.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,653,while (currentNode.isGetProp()) {
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1140,f (n.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1140,if (n.isGetProp()) {
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1294,f (n.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1294,if (n.isString()) {
False,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,85,f (n.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,85,if (n.isFunction()) {
False,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,105,reconditions.checkState(args.getType() == Token.LP);
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,105,Preconditions.checkState(args.isLP());
False,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,108,reconditions.checkState(a.getType() == Token.NAME);
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,108,Preconditions.checkState(a.isName());
False,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,151,reconditions.checkState(n.getFirstChild().getType() == Token.NAME);
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,151,Preconditions.checkState(n.getFirstChild().isName());
False,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,201,f (origParent.getType() == Token.CATCH &&
False,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,202,arent.getType() == Token.CATCH) {
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,201,if (origParent.isCatch() &&
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,202,parent.isCatch()) {
False,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,234,reconditions.checkState(n.getType() == Token.NAME);
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,234,Preconditions.checkState(n.isName());
False,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,255,reconditions.checkState(n.getType() == Token.NAME);
True,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,src/com/google/javascript/jscomp/SyntacticScopeCreator.java,255,Preconditions.checkState(n.isName());
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,239,f (decl.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,239,if (decl.isFunction()) {
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,242,reconditions.checkArgument(decl.getType() == Token.BLOCK);
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,242,Preconditions.checkArgument(decl.isBlock());
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,250,reconditions.checkArgument(decl.getType() == Token.BLOCK);
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,250,Preconditions.checkArgument(decl.isBlock());
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,664,f (lhs.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,664,if (lhs.isGetProp()) {
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,705,f (receiver.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,705,if (receiver.isGetProp()) {
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,709,f (first.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,709,if (first.isGetProp()) {
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,730,setIsNewCall(n.getType() == Token.NEW)
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,730,.setIsNewCall(n.isNew())
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,736,f (parent.getType() == Token.CATCH && parent.getFirstChild() == n) {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,736,if (parent.isCatch() && parent.getFirstChild() == n) {
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,843,f (!inExterns && receiver.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,843,if (!inExterns && receiver.isGetProp()) {
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,852,f (!inExterns && lhs.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,852,if (!inExterns && lhs.isGetProp()) {
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,979,reconditions.checkArgument(name.getType() == Token.NAME);
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,979,Preconditions.checkArgument(name.isName());
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,986,& (name.getFirstChild().getType() == Token.FUNCTION)) {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,986,&& (name.getFirstChild().isFunction())) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,529,ypeable = !(parent.getType() == Token.ASSIGN &&
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,529,typeable = !(parent.isAssign() &&
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,776,f ((n.getType() == Token.OBJECTLIT)
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,776,if ((n.isObjectLit())
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,783,f (n.getType() == Token.OBJECTLIT) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,783,if (n.isObjectLit()) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,831, (<code>assign.getType() == Token.ASSIGN</code> is an implicit invariant)
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,831,* (<code>assign.isAssign()</code> is an implicit invariant)
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,838,f (lvalue.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,838,if (lvalue.isGetProp()) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,845,f (object.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,845,if (object.isGetProp()) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,879,f (object.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,879,if (object.isGetProp()) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,911, else if (lvalue.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,911,} else if (lvalue.isName()) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1181,f (assign.getLastChild().getType() == Token.FUNCTION
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1181,if (assign.getLastChild().isFunction()
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1255,f (n.getJSType() != null && parent.getType() == Token.ASSIGN) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1255,if (n.getJSType() != null && parent.isAssign()) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1354,eturn parent.getParent().getType() == Token.OR &&
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1354,return parent.getParent().isOr() &&
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1582,(child.getType() == Token.GETELEM ||
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1583,hild.getType() == Token.GETPROP)) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1582,!(child.isGetElem() ||
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1583,child.isGetProp())) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1848,tring propName = n.getType() == Token.GETPROP ?
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1848,String propName = n.isGetProp() ?
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,163,f (item.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,163,if (item.isVar()) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,166,f (item.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,166,if (item.isName()) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,189,f (condition == null && source.getType() == Token.CASE) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,189,if (condition == null && source.isCase()) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,202,f (condition.getType() == Token.AND ||
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,203,ondition.getType() == Token.OR) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,202,if (condition.isAnd() ||
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,203,condition.isOr()) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,219,onditionOutcomes = condition.getType() == Token.AND ?
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,219,conditionOutcomes = condition.isAnd() ?
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,372,f (n.getFirstChild().getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,372,if (n.getFirstChild().isGetProp()) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,400,.getParent().getType() == Token.EXPR_RESULT) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,400,n.getParent().isExprResult()) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,523,f (getprop.getFirstChild().getType() == Token.THIS &&
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,523,if (getprop.getFirstChild().isThis() &&
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,784, else if (assertedNode.getType() == Token.AND ||
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,785,ssertedNode.getType() == Token.OR) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,784,} else if (assertedNode.isAnd() ||
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,785,assertedNode.isOr()) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,806,f (node.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,806,if (node.isGetProp()) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,836,f (iArgument.getType() == Token.FUNCTION &&
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,836,if (iArgument.isFunction() &&
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,899,f (jArgument.getType() == Token.FUNCTION &&
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,899,if (jArgument.isFunction() &&
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1278,reconditions.checkState(nameNode.getType() == Token.NAME);
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1278,Preconditions.checkState(nameNode.isName());
False,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,36,mport com.google.javascript.rhino.Token;
False,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,258,f (n.getType() == Token.GETPROP &&
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,257,if (n.isGetProp() &&
False,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,311,reconditions.checkState(n.getType() == Token.GETELEM);
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,310,Preconditions.checkState(n.isGetElem());
False,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,502,f (n.getType() == Token.GETPROP ||
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,501,if (n.isGetProp() ||
False,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,532,f (parent.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,531,if (parent.isVar()) {
False,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,537,reconditions.checkState(parent.getType() == Token.FUNCTION);
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,536,Preconditions.checkState(parent.isFunction());
False,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,547,ar.getParentNode().getType() == Token.EXPR_RESULT) ||
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,546,var.getParentNode().isExprResult()) ||
False,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,684,f (n.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,683,if (n.isGetProp()) {
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,22,mport com.google.javascript.rhino.Token;
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,44,& (parent.getType() == Token.BLOCK
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,45,| parent.getType() == Token.SCRIPT)) {
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,46,f (n.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,43,&& (parent.isBlock()
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,44,|| parent.isScript())) {
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,45,if (n.isFunction()) {
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,48, else if (n.getType() == Token.EXPR_RESULT
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,49,& n.getFirstChild().getType() == Token.ASSIGN) {
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,47,} else if (n.isExprResult()
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,48,&& n.getFirstChild().isAssign()) {
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,52, else if (n.getType() == Token.VAR
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,51,} else if (n.isVar()
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,54,& n.getFirstChild().getFirstChild().getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,53,&& n.getFirstChild().getFirstChild().isFunction()) {
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,81,reconditions.checkState(fnNode.getType() == Token.FUNCTION);
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,80,Preconditions.checkState(fnNode.isFunction());
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,251,reconditions.checkState(scriptRoot.getType() == Token.SCRIPT);
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,251,Preconditions.checkState(scriptRoot.isScript());
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,363,f (firstChild.getType() == Token.ASSIGN) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,363,if (firstChild.isAssign()) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,457,f (n.getType() == Token.FUNCTION ||
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,458,.getType() == Token.SCRIPT) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,457,if (n.isFunction() ||
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,458,n.isScript()) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,510,f (firstChild.getType() == Token.GETPROP &&
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,510,if (firstChild.isGetProp() &&
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,527,f (parent.getType() == Token.EXPR_RESULT &&
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,527,if (parent.isExprResult() &&
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,671,ode.getType() == Token.GETPROP ? node.getFirstChild() :
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,671,node.isGetProp() ? node.getFirstChild() :
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,841,Value != null && rValue.getType() == Token.FUNCTION;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,841,rValue != null && rValue.isFunction();
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,897, else if (ownerNode != null && ownerNode.getType() == Token.THIS) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,897,} else if (ownerNode != null && ownerNode.isThis()) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,977,f (rValue != null && rValue.getType() == Token.OBJECTLIT) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,977,if (rValue != null && rValue.isObjectLit()) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1033,f (n.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1033,if (n.isName()) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1035,arent.getType() == Token.FUNCTION ||
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1036,arent.getType() == Token.VAR ||
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1037,arent.getType() == Token.LP ||
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1038,arent.getType() == Token.CATCH);
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1035,parent.isFunction() ||
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1036,parent.isVar() ||
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1037,parent.isLP() ||
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1038,parent.isCatch());
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1041,.getType() == Token.GETPROP &&
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1042,parent.getType() == Token.ASSIGN ||
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1043,arent.getType() == Token.EXPR_RESULT));
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1041,n.isGetProp() &&
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1042,(parent.isAssign() ||
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1043,parent.isExprResult()));
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1063,oolean isGlobalVar = n.getType() == Token.NAME && scope.isGlobal();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1063,boolean isGlobalVar = n.isName() && scope.isGlobal();
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1066,parent.getType() == Token.VAR ||
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1067,arent.getType() == Token.FUNCTION);
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1066,(parent.isVar() ||
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1067,parent.isFunction());
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1073,f (n.getType() == Token.GETPROP && !scope.isGlobal() &&
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1073,if (n.isGetProp() && !scope.isGlobal() &&
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1103,initialValue.getType() == Token.OBJECTLIT ||
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1103,(initialValue.isObjectLit() ||
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1197,f (root.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1197,if (root.isName()) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1219, else if (rValue != null && rValue.getType() == Token.FUNCTION &&
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1219,} else if (rValue != null && rValue.isFunction() &&
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1225,f (rValue != null && rValue.getType() == Token.OBJECTLIT) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1225,if (rValue != null && rValue.isObjectLit()) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1242, else if (rValue.getType() == Token.OR) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1242,} else if (rValue.isOr()) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1249,oolean namesMatch = firstClause.getType() == Token.NAME
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1250,& lValue.getType() == Token.NAME
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1249,boolean namesMatch = firstClause.isName()
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1250,&& lValue.isName()
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1448,hsValue.getType() == Token.OBJECTLIT) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1448,rhsValue.isObjectLit()) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1466,f (parent.getType() == Token.EXPR_RESULT) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1466,if (parent.isExprResult()) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1489,hsValue.getType() == Token.FUNCTION &&
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1489,rhsValue.isFunction() &&
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1512,hsValue.getType() == Token.TRUE) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1512,rhsValue.isTrue()) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1594,f (n.getType() == Token.EXPR_RESULT) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1594,if (n.isExprResult()) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1625,name.getType() == Token.NAME || name.getType() == Token.STRING)) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1625,(name.isName() || name.isString())) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1720,f (candidate.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1720,if (candidate.isGetProp()) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1767,f (n.getType() == Token.LP && parent == scope.getRootNode()) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1767,if (n.isLP() && parent == scope.getRootNode()) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1859,f (n.getType() == Token.RETURN && n.getFirstChild() != null) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1859,if (n.isReturn() && n.getFirstChild() != null) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1861, else if (n.getType() == Token.NAME && NodeUtil.isLValue(n)) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1861,} else if (n.isName() && NodeUtil.isLValue(n)) {
False,src/com/google/javascript/jscomp/UnfoldCompoundAssignments.java,src/com/google/javascript/jscomp/UnfoldCompoundAssignments.java,63,"nfoldIncrDecr(node, node.getType() == Token.INC);"
True,src/com/google/javascript/jscomp/UnfoldCompoundAssignments.java,src/com/google/javascript/jscomp/UnfoldCompoundAssignments.java,63,"unfoldIncrDecr(node, node.isInc());"
False,src/com/google/javascript/jscomp/UnfoldCompoundAssignments.java,src/com/google/javascript/jscomp/UnfoldCompoundAssignments.java,143,"ode.getType() == Token.INC || node.getType() == Token.DEC,"
True,src/com/google/javascript/jscomp/UnfoldCompoundAssignments.java,src/com/google/javascript/jscomp/UnfoldCompoundAssignments.java,143,"node.isInc() || node.isDec(),"
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,95,f (n.getType() == Token.FUNCTION || n.getType() == Token.SCRIPT) {
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,95,if (n.isFunction() || n.isScript()) {
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,167,n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,167,(n.getNext() == null || n.getNext().isFunction())) {
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,183,hile (next != null && next.getType() == Token.BLOCK) {
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,183,while (next != null && next.isBlock()) {
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,195,f (n.getType() == Token.EMPTY ||
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,196,n.getType() == Token.BLOCK && !n.hasChildren())) {
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,195,if (n.isEmpty() ||
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,196,(n.isBlock() && !n.hasChildren())) {
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,211,f (parent.getType() == Token.TRY) {
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,211,if (parent.isTry()) {
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,117,reconditions.checkState(scriptRoot.getType() == Token.SCRIPT);
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,117,Preconditions.checkState(scriptRoot.isScript());
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,148,f ((parent.getType() == Token.VAR ||
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,148,if ((parent.isVar() ||
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,245,f (n.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,245,if (n.isName()) {
False,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,26,mport com.google.javascript.rhino.Token;
False,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,176,f (grandparent.getType() == Token.NAME
True,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,174,if (grandparent.isName()
False,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,24,mport com.google.javascript.rhino.Token;
False,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,103,| parent.getType() == Token.LP);
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,101,|| parent.isLP());
False,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,150,eturn variableParent != null && variableParent.getType() == Token.LP;
True,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java,148,return variableParent != null && variableParent.isLP();
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,210,f (irNode.getType() != Token.BLOCK) {
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,211,f (irNode.getType() == Token.EMPTY) {
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,210,if (!irNode.isBlock()) {
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,211,if (irNode.isEmpty()) {
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,407,reconditions.checkState(ret.getType() == Token.STRING);
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,407,Preconditions.checkState(ret.isString());
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,479,.getFirstChild().getType() == Token.STRING &&
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,479,n.getFirstChild().isString() &&
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,775,reconditions.checkState(value.getType() == Token.FUNCTION);
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,775,Preconditions.checkState(value.isFunction());
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,781,reconditions.checkState(value.getType() == Token.FUNCTION);
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,781,Preconditions.checkState(value.isFunction());
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,798,reconditions.checkArgument(fnNode.getType() == Token.FUNCTION);
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,798,Preconditions.checkArgument(fnNode.isFunction());
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,938,f (type == Token.NEG && operand.getType() == Token.NUMBER) {
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,938,if (type == Token.NEG && operand.isNumber()) {
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,943,(operand.getType() == Token.GETPROP ||
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,944,perand.getType() == Token.GETELEM ||
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,945,perand.getType() == Token.NAME)) {
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,943,!(operand.isGetProp() ||
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,944,operand.isGetElem() ||
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,945,operand.isName())) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2213,public boolean isAdd() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2214,return this.getType() == Token.ADD;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2217,public boolean isAnd() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2218,return this.getType() == Token.AND;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2245,public boolean isComma() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2246,return this.getType() == Token.COMMA;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2269,public boolean isFalse() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2270,return this.getType() == Token.FALSE;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2293,public boolean isHook() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2294,return this.getType() == Token.HOOK;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2325,public boolean isNot() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2326,return this.getType() == Token.NOT;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2333,public boolean isNumber() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2334,return this.getType() == Token.NUMBER;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2341,public boolean isOr() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2342,return this.getType() == Token.OR;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2349,public boolean isReturn() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2350,return this.getType() == Token.RETURN;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2365,public boolean isSwitch() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2366,return this.getType() == Token.SWITCH;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2373,public boolean isThrow() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2374,return this.getType() == Token.THROW;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2377,public boolean isTrue() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2378,return this.getType() == Token.TRUE;
False,test/com/google/javascript/jscomp/CallGraphTest.java,test/com/google/javascript/jscomp/CallGraphTest.java,667,ssertTrue(mainFunction.getBodyNode().getType() == Token.BLOCK);
True,test/com/google/javascript/jscomp/CallGraphTest.java,test/com/google/javascript/jscomp/CallGraphTest.java,667,assertTrue(mainFunction.getBodyNode().isBlock());
False,test/com/google/javascript/jscomp/CallGraphTest.java,test/com/google/javascript/jscomp/CallGraphTest.java,684,ssertTrue(mainFunction.getAstNode().getType() == Token.BLOCK);
True,test/com/google/javascript/jscomp/CallGraphTest.java,test/com/google/javascript/jscomp/CallGraphTest.java,684,assertTrue(mainFunction.getAstNode().isBlock());
False,test/com/google/javascript/jscomp/CallGraphTest.java,test/com/google/javascript/jscomp/CallGraphTest.java,689,ssertTrue(functionA.getAstNode().getType() == Token.FUNCTION);
True,test/com/google/javascript/jscomp/CallGraphTest.java,test/com/google/javascript/jscomp/CallGraphTest.java,689,assertTrue(functionA.getAstNode().isFunction());
False,test/com/google/javascript/jscomp/CallGraphTest.java,test/com/google/javascript/jscomp/CallGraphTest.java,708,ssertTrue(functionA.getBodyNode().getType() == Token.BLOCK);
True,test/com/google/javascript/jscomp/CallGraphTest.java,test/com/google/javascript/jscomp/CallGraphTest.java,708,assertTrue(functionA.getBodyNode().isBlock());
False,test/com/google/javascript/jscomp/CallGraphTest.java,test/com/google/javascript/jscomp/CallGraphTest.java,959,ssertTrue(callToB.getAstNode().getType() == Token.CALL);
True,test/com/google/javascript/jscomp/CallGraphTest.java,test/com/google/javascript/jscomp/CallGraphTest.java,959,assertTrue(callToB.getAstNode().isCall());
False,test/com/google/javascript/jscomp/CallGraphTest.java,test/com/google/javascript/jscomp/CallGraphTest.java,1120,f (targetExpressionNode.getType() == Token.NAME) {
True,test/com/google/javascript/jscomp/CallGraphTest.java,test/com/google/javascript/jscomp/CallGraphTest.java,1120,if (targetExpressionNode.isName()) {
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1114,ssertTrue(call.getType() == Token.CALL);
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1114,assertTrue(call.isCall());
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1123,ssertTrue(call.getType() == Token.CALL);
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1123,assertTrue(call.isCall());
False,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,643,f (n.getType() == Token.CALL) {
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,643,if (n.isCall()) {
False,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,645,f (name == null || (callee.getType() == Token.NAME
True,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,test/com/google/javascript/jscomp/ExpressionDecomposerTest.java,645,if (name == null || (callee.isName()
False,test/com/google/javascript/jscomp/FunctionArgumentInjectorTest.java,test/com/google/javascript/jscomp/FunctionArgumentInjectorTest.java,23,mport com.google.javascript.rhino.Token;
False,test/com/google/javascript/jscomp/FunctionArgumentInjectorTest.java,test/com/google/javascript/jscomp/FunctionArgumentInjectorTest.java,440,f (n.getType() == Token.CALL) {
True,test/com/google/javascript/jscomp/FunctionArgumentInjectorTest.java,test/com/google/javascript/jscomp/FunctionArgumentInjectorTest.java,438,if (n.isCall()) {
False,test/com/google/javascript/jscomp/FunctionArgumentInjectorTest.java,test/com/google/javascript/jscomp/FunctionArgumentInjectorTest.java,446,reconditions.checkArgument(prop.getType() == Token.STRING &&
True,test/com/google/javascript/jscomp/FunctionArgumentInjectorTest.java,test/com/google/javascript/jscomp/FunctionArgumentInjectorTest.java,444,Preconditions.checkArgument(prop.isString() &&
False,test/com/google/javascript/jscomp/FunctionArgumentInjectorTest.java,test/com/google/javascript/jscomp/FunctionArgumentInjectorTest.java,452,f (callee.getType() == Token.NAME
True,test/com/google/javascript/jscomp/FunctionArgumentInjectorTest.java,test/com/google/javascript/jscomp/FunctionArgumentInjectorTest.java,450,if (callee.isName()
False,test/com/google/javascript/jscomp/FunctionArgumentInjectorTest.java,test/com/google/javascript/jscomp/FunctionArgumentInjectorTest.java,469,f (n.getType() == Token.FUNCTION) {
True,test/com/google/javascript/jscomp/FunctionArgumentInjectorTest.java,test/com/google/javascript/jscomp/FunctionArgumentInjectorTest.java,467,if (n.isFunction()) {
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1514,f (n.getType() == Token.CALL) {
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1514,if (n.isCall()) {
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1522,f (callee.getType() == Token.NAME &&
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1522,if (callee.isName() &&
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1535,f (n.getType() == Token.FUNCTION) {
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1535,if (n.isFunction()) {
False,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,275,f (n.getType() == Token.CALL) {
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,275,if (n.isCall()) {
False,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,277,f (first.getType() == Token.NAME &&
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,277,if (first.isName() &&
False,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,290,f (n.getType() == Token.FUNCTION) {
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,290,if (n.isFunction()) {
False,test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java,test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java,319,f (node.getType() == Token.LABEL) {
True,test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java,test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java,319,if (node.isLabel()) {
False,test/com/google/javascript/jscomp/MarkNoSideEffectCallsTest.java,test/com/google/javascript/jscomp/MarkNoSideEffectCallsTest.java,24,mport com.google.javascript.rhino.Token;
False,test/com/google/javascript/jscomp/MarkNoSideEffectCallsTest.java,test/com/google/javascript/jscomp/MarkNoSideEffectCallsTest.java,295,f (n.getType() == Token.NEW) {
True,test/com/google/javascript/jscomp/MarkNoSideEffectCallsTest.java,test/com/google/javascript/jscomp/MarkNoSideEffectCallsTest.java,293,if (n.isNew()) {
False,test/com/google/javascript/jscomp/MarkNoSideEffectCallsTest.java,test/com/google/javascript/jscomp/MarkNoSideEffectCallsTest.java,299, else if (n.getType() == Token.CALL) {
True,test/com/google/javascript/jscomp/MarkNoSideEffectCallsTest.java,test/com/google/javascript/jscomp/MarkNoSideEffectCallsTest.java,297,} else if (n.isCall()) {
False,test/com/google/javascript/jscomp/MaybeReachingVariableUseTest.java,test/com/google/javascript/jscomp/MaybeReachingVariableUseTest.java,22,mport com.google.javascript.rhino.Token;
False,test/com/google/javascript/jscomp/MaybeReachingVariableUseTest.java,test/com/google/javascript/jscomp/MaybeReachingVariableUseTest.java,158,f (n.getType() == Token.LABEL) {
True,test/com/google/javascript/jscomp/MaybeReachingVariableUseTest.java,test/com/google/javascript/jscomp/MaybeReachingVariableUseTest.java,156,if (n.isLabel()) {
False,test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java,test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java,21,mport com.google.javascript.rhino.Token;
False,test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java,test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java,196,f (n.getType() == Token.LABEL) {
True,test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java,test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java,194,if (n.isLabel()) {
False,test/com/google/javascript/jscomp/NodeIteratorsTest.java,test/com/google/javascript/jscomp/NodeIteratorsTest.java,157,f (n.getType() == Token.NAME &&
False,test/com/google/javascript/jscomp/NodeIteratorsTest.java,test/com/google/javascript/jscomp/NodeIteratorsTest.java,158,earchIt.currentParent().getType() == Token.VAR &&
True,test/com/google/javascript/jscomp/NodeIteratorsTest.java,test/com/google/javascript/jscomp/NodeIteratorsTest.java,157,if (n.isName() &&
True,test/com/google/javascript/jscomp/NodeIteratorsTest.java,test/com/google/javascript/jscomp/NodeIteratorsTest.java,158,searchIt.currentParent().isVar() &&
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,583,f (c.getType() == Token.FUNCTION) {
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,583,if (c.isFunction()) {
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,596,f (c.getType() == Token.FUNCTION) {
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,596,if (c.isFunction()) {
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1154,reconditions.checkState(newExpr.getType() == Token.NEW);
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1154,Preconditions.checkState(newExpr.isNew());
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1198,reconditions.checkState(newExpr.getType() == Token.NEW);
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1198,Preconditions.checkState(newExpr.isNew());
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1614,f (n.getType() == Token.FUNCTION) {
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,1614,if (n.isFunction()) {
False,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,90,f (node.getType() == Token.NAME) {
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,90,if (node.isName()) {
False,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,102,f (node.getType() == Token.NAME) {
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,102,if (node.isName()) {
False,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,137,f (node.getType() == Token.VAR) {
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,137,if (node.isVar()) {
False,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,164,"f (node.getType() == Token.NAME && ""x"".equals(node.getString())) {"
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,164,"if (node.isName() && ""x"".equals(node.getString())) {"
False,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,183,"f (node.getType() == Token.NAME && ""x"".equals(node.getString())) {"
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,183,"if (node.isName() && ""x"".equals(node.getString())) {"
False,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,185,f (parent.getType() == Token.VAR) {
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,185,if (parent.isVar()) {
False,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,202,"f (node.getType() == Token.NAME && ""y"".equals(node.getString())) {"
True,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java,202,"if (node.isName() && ""y"".equals(node.getString())) {"
False,test/com/google/javascript/jscomp/PrepareAstTest.java,test/com/google/javascript/jscomp/PrepareAstTest.java,61,reconditions.checkState(script.getType() == Token.SCRIPT);
True,test/com/google/javascript/jscomp/PrepareAstTest.java,test/com/google/javascript/jscomp/PrepareAstTest.java,61,Preconditions.checkState(script.isScript());
False,test/com/google/javascript/jscomp/PrepareAstTest.java,test/com/google/javascript/jscomp/PrepareAstTest.java,64,reconditions.checkState(call.getType() == Token.CALL);
True,test/com/google/javascript/jscomp/PrepareAstTest.java,test/com/google/javascript/jscomp/PrepareAstTest.java,64,Preconditions.checkState(call.isCall());
False,test/com/google/javascript/jscomp/PrepareAstTest.java,test/com/google/javascript/jscomp/PrepareAstTest.java,72,reconditions.checkState(script.getType() == Token.SCRIPT);
True,test/com/google/javascript/jscomp/PrepareAstTest.java,test/com/google/javascript/jscomp/PrepareAstTest.java,72,Preconditions.checkState(script.isScript());
False,test/com/google/javascript/jscomp/PrepareAstTest.java,test/com/google/javascript/jscomp/PrepareAstTest.java,75,reconditions.checkState(call.getType() == Token.CALL);
True,test/com/google/javascript/jscomp/PrepareAstTest.java,test/com/google/javascript/jscomp/PrepareAstTest.java,75,Preconditions.checkState(call.isCall());
False,test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,25,mport com.google.javascript.rhino.Token;
False,test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,1243,f (n.getType() == Token.NEW) {
True,test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,1241,if (n.isNew()) {
False,test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,1247, else if (n.getType() == Token.CALL) {
True,test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,1245,} else if (n.isCall()) {
False,test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,1258,f (node.getType() == Token.OR) {
True,test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,1256,if (node.isOr()) {
False,test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,1261, else if (node.getType() == Token.HOOK) {
True,test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,1259,} else if (node.isHook()) {
False,test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,1267,f (node.getType() == Token.FUNCTION) {
True,test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,1265,if (node.isFunction()) {
False,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,23,mport com.google.javascript.rhino.Token;
False,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,619,f (n.getType() == Token.LABEL &&
True,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,test/com/google/javascript/jscomp/SideEffectsAnalysisTest.java,618,if (n.isLabel() &&
False,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,179,f (n.getType() == Token.NAME
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,179,if (n.isName()
False,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,181,& n.getParent().getType() == Token.FUNCTION) {
True,test/com/google/javascript/jscomp/VarCheckTest.java,test/com/google/javascript/jscomp/VarCheckTest.java,181,&& n.getParent().isFunction()) {
False,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,23,mport com.google.javascript.rhino.Token;
False,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,171,f (n.getParent().getType() == Token.LP
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,170,if (n.getParent().isLP()
False,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,238,f (n.getType() == Token.LABEL &&
True,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,test/com/google/javascript/jscomp/VariableVisibilityAnalysisTest.java,237,if (n.isLabel() &&
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2536,ssertTrue(marker.getType().getItem().getType() == Token.STRING);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2536,assertTrue(marker.getType().getItem().isString());

is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,28,import java.text.ParseException;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,659,// A previous map of replacements to strings.
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,660,VariableMap replaceStringsInputMap;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1874,public void setReplaceStringsInputMapSerialized(byte[] serializedMap)
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1875,throws ParseException {
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1876,this.replaceStringsInputMap = VariableMap.fromBytes(serializedMap);
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1443,ptions.replaceStringsReservedStrings);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1443,"options.replaceStringsReservedStrings,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1444,options.replaceStringsInputMap);
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,20,import com.google.common.base.Predicate;
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,24,import com.google.common.collect.Iterables;
False,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,126, @param reservedNames A set of names that should not be used as replacement
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,128,* @param blacklisted A set of names that should not be used as replacement
False,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,134,et<String> reservedNames) {
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,136,"Set<String> blacklisted,"
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,137,VariableMap previousMappings) {
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,143,Iterable<String> reservedNames = blacklisted;
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,144,if (previousMappings != null) {
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,145,Set<String> previous =
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,146,previousMappings.getOriginalNameToNewNameMap().keySet();
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,147,"reservedNames = Iterables.concat(blacklisted, previous);"
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,148,"initMapping(previousMappings, blacklisted);"
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,156,private void initMapping(
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,157,"VariableMap previousVarMap, Set<String> reservedNames) {"
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,158,"Map<String,String> previous = previousVarMap.getOriginalNameToNewNameMap();"
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,159,"for (Map.Entry<String,String> entry : previous.entrySet()) {"
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,160,String key = entry.getKey();
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,161,if (!reservedNames.contains(key)) {
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,162,String value = entry.getValue();
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,163,"results.put(value, new Result(value, key));"
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,168,static final Predicate<Result> USED_RESULTS = new Predicate<Result>() {
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,169,@Override
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,170,public boolean apply(Result result) {
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,171,// The list of locations may be empty if the map
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,172,// was pre-populated from a previous map.
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,173,return !result.replacementLocations.isEmpty();
False,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,147,eturn ImmutableList.copyOf(results.values());
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,179,return ImmutableList.copyOf(
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,180,"Iterables.filter(results.values(), USED_RESULTS));"
False,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,153,or (Result result : results.values()) {
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,186,"for (Result result : Iterables.filter(results.values(), USED_RESULTS)) {"
False,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,459,rivate static NameGenerator createNameGenerator(Set<String> reservedNames) {
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,492,private static NameGenerator createNameGenerator(Iterable<String> reserved) {
False,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,463,"mmutableSet.copyOf(reservedNames), namePrefix, reservedChars);"
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,496,"ImmutableSet.copyOf(reserved), namePrefix, reservedChars);"
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,19,import com.google.common.collect.ImmutableMap;
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,36,private VariableMap previous;
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,72,previous = null;
False,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,80,"ass = new ReplaceStrings(compiler, ""`"", names, reserved);"
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,83,"pass = new ReplaceStrings(compiler, ""`"", names, reserved, previous);"
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,101,public void testStable1() {
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,102,"previous = VariableMap.fromMap(ImmutableMap.of(""previous"",""xyz""));"
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,103,testDebugStrings(
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,104,"""Error('xyz');"","
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,105,"""Error('previous');"","
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,106,"(new String[] { ""previous"", ""xyz"" }));"
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,107,"reserved = ImmutableSet.of(""a"", ""b"", ""previous"");"
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,108,testDebugStrings(
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,109,"""Error('xyz');"","
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,110,"""Error('c');"","
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,111,"(new String[] { ""c"", ""xyz"" }));"
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,114,public void testStable2() {
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,115,// Two things happen here:
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,116,"// 1) a previously used name ""a"" is not used for another string, ""b"" is"
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,117,// chosen instead.
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,118,"// 2) a previously used name ""a"" is dropped from the output map if"
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,119,// it isn't used.
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,120,"previous = VariableMap.fromMap(ImmutableMap.of(""a"",""unused""));"
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,121,testDebugStrings(
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,122,"""Error('xyz');"","
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,123,"""Error('b');"","
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,124,"(new String[] { ""b"", ""xyz"" }));"
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,132,"previous = VariableMap.fromMap(ImmutableMap.of(""previous"",""xyz""));"
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,133,testDebugStrings(
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,134,"""throw Error('xyz');"","
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,135,"""throw Error('previous');"","
True,test/com/google/javascript/jscomp/ReplaceStringsTest.java,test/com/google/javascript/jscomp/ReplaceStringsTest.java,136,"(new String[] { ""previous"", ""xyz"" }));"

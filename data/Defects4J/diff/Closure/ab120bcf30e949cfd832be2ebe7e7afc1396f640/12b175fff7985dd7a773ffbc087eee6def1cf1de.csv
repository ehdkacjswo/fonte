is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,43,import com.google.javascript.rhino.jstype.TemplateTypeMap;
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,44,import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1254,TemplateTypeMap ctorTypeMap =
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1255,ctorType.getTypeOfThis().getTemplateTypeMap();
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1256,if (!ctorTypeMap.isEmpty()) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1257,superClassPropType = superClassPropType.visit(
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1258,"new TemplateTypeMapReplacer(typeRegistry, ctorTypeMap));"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,77,import com.google.javascript.rhino.jstype.TemplateTypeMap;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,78,import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,934,ObjectType prototypeOwner = getPrototypeOwnerType(ownerType);
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,935,TemplateTypeMap prototypeOwnerTypeMap = null;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,936,if (prototypeOwner != null &&
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,937,prototypeOwner.getTypeOfThis() != null) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,938,prototypeOwnerTypeMap =
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,939,prototypeOwner.getTypeOfThis().getTemplateTypeMap();
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,934,"verriddenType = findOverriddenFunction(ownerType, propName);"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,944,overriddenType = findOverriddenFunction(
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,945,"ownerType, propName, prototypeOwnerTypeMap);"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,937,bjectType prototypeOwner = getPrototypeOwnerType(ownerType);
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,993,"bjectType ownerType, String propName) {"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1002,"ObjectType ownerType, String propName, TemplateTypeMap typeMap) {"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1003,FunctionType result = null;
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,998,eturn propType.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1009,result =  propType.toMaybeFunctionType();
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1006,eturn propType.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1017,result = propType.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1018,break;
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1011,eturn null;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1023,if (result != null && typeMap != null && !typeMap.isEmpty()) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1024,result = result.visit(
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1025,"new TemplateTypeMapReplacer(typeRegistry, typeMap))"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1026,.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1029,return result;
True,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,533,if (current.isTemplatizedType()) {
True,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,534,current = current.toMaybeTemplatizedType().getReferencedType();
False,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,70,f (hasVisitedType(type)) {
True,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,70,if (hasVisitedType(type) || !replacements.hasTemplateType(type)) {
False,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,72,"/ (i.e. there is a reference loop), return the type itself."
True,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,72,"// (i.e. there is a reference loop), or there is no JSType substitution"
True,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,73,"// for the TemplateType, return the TemplateType type itself."
True,src/com/google/javascript/rhino/jstype/TemplatizedType.java,src/com/google/javascript/rhino/jstype/TemplatizedType.java,55,final TemplateTypeMapReplacer replacer;
True,src/com/google/javascript/rhino/jstype/TemplatizedType.java,src/com/google/javascript/rhino/jstype/TemplatizedType.java,73,"replacer = new TemplateTypeMapReplacer(registry, getTemplateTypeMap());"
True,src/com/google/javascript/rhino/jstype/TemplatizedType.java,src/com/google/javascript/rhino/jstype/TemplatizedType.java,106,@Override
True,src/com/google/javascript/rhino/jstype/TemplatizedType.java,src/com/google/javascript/rhino/jstype/TemplatizedType.java,107,public JSType getPropertyType(String propertyName) {
True,src/com/google/javascript/rhino/jstype/TemplatizedType.java,src/com/google/javascript/rhino/jstype/TemplatizedType.java,108,JSType result = super.getPropertyType(propertyName);
True,src/com/google/javascript/rhino/jstype/TemplatizedType.java,src/com/google/javascript/rhino/jstype/TemplatizedType.java,109,return result == null ? null : result.visit(replacer);
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5424,public void testOverriddenParams7() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5425,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5426,"""/** @constructor\n * @template T */ function Foo() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5427,"""/** @param {T} x */"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5428,"""Foo.prototype.bar = function(x) { };"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5429,"""/**\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5430,""" * @constructor\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5431,""" * @extends {Foo.<string>}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5432,""" */ function SubFoo() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5433,"""/**\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5434,""" * @param {number} x\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5435,""" * @override\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5437,"""SubFoo.prototype.bar = function(x) {};"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5438,"""mismatch of the bar property type and the type of the "" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5439,"""property it overrides from superclass Foo\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5440,"""original: function (this:Foo, string): undefined\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5441,"""override: function (this:SubFoo, number): undefined"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5471,public void testOverriddenReturn3() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5472,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5473,"""/** @constructor \n * @template T */ function Foo() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5474,"""/** @return {T} */ Foo.prototype.bar = "" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5475,"""    function() { return null; };"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5476,"""/** @constructor \n * @extends {Foo.<string>} */ function SubFoo() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5477,"""/** @override */ SubFoo.prototype.bar = "" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5478,"""    function() { return 3; }"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5479,"""inconsistent return type\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5480,"""found   : number\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5481,"""required: string"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5484,public void testOverriddenReturn4() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5485,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5486,"""/** @constructor \n * @template T */ function Foo() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5487,"""/** @return {T} */ Foo.prototype.bar = "" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5488,"""    function() { return null; };"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5489,"""/** @constructor \n * @extends {Foo.<string>} */ function SubFoo() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5490,"""/** @return {number}\n * @override */ SubFoo.prototype.bar = "" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5491,"""    function() { return 3; }"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5492,"""mismatch of the bar property type and the type of the "" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5493,"""property it overrides from superclass Foo\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5494,"""original: function (this:Foo): string\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5495,"""override: function (this:SubFoo): number"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7580,public void testFunctionCall9() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7581,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7582,"""/** @constructor\n * @template T\n **/ function Foo() {}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7583,"""/** @param {T} x */ Foo.prototype.bar = function(x) {}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7584,"""var foo = /** @type {Foo.<string>} */ (new Foo());\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7585,"""foo.bar(3);"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7586,"""actual parameter 1 of Foo.prototype.bar does not match formal parameter\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7587,"""found   : number\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7588,"""required: string"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9040,* Verify that using @override to declare the signature for an implementing
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9041,* class works correctly when the interface is generic.
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9043,public void testInterfaceInheritanceCheck16() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9044,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9045,"""/** @interface\n @template T */function A() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9046,"""/** @desc description\n @return {T} */A.prototype.foo = function() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9047,"""/** @desc description\n @return {T} */A.prototype.bar = function() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9048,"""/** @constructor\n @implements {A.<string>} */function B() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9049,"""/** @override */B.prototype.foo = function() { return 'string'};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9050,"""/** @override */B.prototype.bar = function() { return 3 };"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9051,"""inconsistent return type\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9052,"""found   : number\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9053,"""required: string"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11538,public void testExtendedInterfacePropertiesCompatibility9() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11539,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11540,"""/** @interface\n * @template T */function Int0() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11541,"""/** @interface\n * @template T */function Int1() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11542,"""/** @type {T} */"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11543,"""Int0.prototype.foo;"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11544,"""/** @type {T} */"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11545,"""Int1.prototype.foo;"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11546,"""/** @interface \n @extends {Int0.<number>} \n @extends {Int1.<string>} */"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11547,"""function Int2() {};"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11548,"""Interface Int2 has a property foo with incompatible types in its "" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11549,"""super interfaces Int0.<number> and Int1.<string>"");"

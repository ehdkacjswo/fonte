is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,2,* Copyright 2011 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,19,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,20,import com.google.common.base.Predicates;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,21,import com.google.common.base.Supplier;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,22,import com.google.common.collect.Lists;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,23,import com.google.common.collect.Maps;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,24,import com.google.common.collect.Sets;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,25,import com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,26,import com.google.javascript.jscomp.ReferenceCollectingCallback.Reference;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,27,import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,28,import com.google.javascript.jscomp.Scope.Var;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,29,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,30,import com.google.javascript.rhino.Token;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,32,import java.util.Iterator;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,33,import java.util.List;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,34,import java.util.Map;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,35,import java.util.Set;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,39,"* Using the infrastructure provided by {@link ReferenceCollectingCallback},"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,40,* identify variables that are only ever assigned to object literals
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,41,"* and that are never used in entirety, and expand the objects into"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,42,* individual variables.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,44,* Based on the InlineVariables pass
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,47,class InlineObjectLiterals implements CompilerPass {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,49,"public static final String VAR_PREFIX = ""JSCompiler_object_inline_"";"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,51,private final AbstractCompiler compiler;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,53,private final Supplier<String> safeNameIdSupplier;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,55,InlineObjectLiterals(
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,56,"AbstractCompiler compiler,"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,57,Supplier<String> safeNameIdSupplier) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,58,this.compiler = compiler;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,59,this.safeNameIdSupplier = safeNameIdSupplier;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,62,@Override
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,63,"public void process(Node externs, Node root) {"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,64,ReferenceCollectingCallback callback = new ReferenceCollectingCallback(
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,65,"compiler, new InliningBehavior(), Predicates.<Var>alwaysTrue());"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,66,"callback.process(externs, root);"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,70,* Builds up information about nodes in each scope. When exiting the
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,71,"* scope, inspects all variables in that scope, and inlines any"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,72,* that we can.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,74,private class InliningBehavior implements Behavior {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,77,"* A list of variables that should not be inlined, because their"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,78,* reference information is out of sync with the state of the AST.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,80,private final Set<Var> staleVars = Sets.newHashSet();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,82,@Override
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,83,"public void afterExitScope(NodeTraversal t,"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,84,"Map<Var, ReferenceCollection> referenceMap) {"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,85,for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,86,Var v = it.next();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,88,if (isVarInlineForbidden(v)) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,89,continue;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,92,ReferenceCollection referenceInfo = referenceMap.get(v);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,94,if (isInlinableObject(referenceInfo.references)) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,95,"// Blacklist the object itself, as well as any other values"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,96,"// that it refers to, since they will have been moved around."
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,97,staleVars.add(v);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,99,Reference declaration = referenceInfo.references.get(0);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,100,Reference init = referenceInfo.getInitializingReference();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,102,// Split up the object into individual variables if the object
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,103,// is never referenced directly in full.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,104,"splitObject(v, declaration, init, referenceInfo);"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,110,"* If there are any variable references in the given node tree,"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,111,* blacklist them to prevent the pass from trying to inline the
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,112,* variable. Any code modifications will have potentially made the
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,113,* ReferenceCollection invalid.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,115,"private void blacklistVarReferencesInTree(Node root, Scope scope) {"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,116,for (Node c = root.getFirstChild(); c != null; c = c.getNext()) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,117,"blacklistVarReferencesInTree(c, scope);"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,120,if (root.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,121,staleVars.add(scope.getVar(root.getString()));
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,126,* Whether the given variable is forbidden from being inlined.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,128,private boolean isVarInlineForbidden(Var var) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,129,// A variable may not be inlined if:
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,130,"// 1) The variable is exported,"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,131,// 2) Don't inline the special RENAME_PROPERTY_FUNCTION_NAME
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,132,// 3) A reference to the variable has been inlined. We're downstream
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,133,"//    of the mechanism that creates variable references, so we don't"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,134,//    have a good way to update the reference. Just punt on it.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,135,return compiler.getCodingConvention().isExported(var.name)
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,136,|| RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,137,|| staleVars.contains(var);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,141,* Counts the number of direct (full) references to an object.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,142,* Specifically we check for references of the following type:
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,143,* <pre>
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,144,*   x;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,145,*   x.fn();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,146,* </pre>
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,148,private boolean isInlinableObject(List<Reference> refs) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,149,boolean ret = false;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,150,for (Reference ref : refs) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,151,Node name = ref.getNameNode();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,152,Node parent = ref.getParent();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,153,Node gramps = ref.getGrandparent();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,155,"// Ignore indirect references, like x.y (except x.y(), since"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,156,// the function referenced by y might reference 'this').
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,158,"// TODO: If a function is called, figure out if it references"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,159,"// 'this', and if not, then inlining the object should be OK."
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,160,if (parent.getType() == Token.GETPROP &&
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,161,(gramps.getType() != Token.CALL ||
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,162,gramps.getFirstChild() != parent) &&
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,163,parent.getFirstChild().isEquivalentTo(name)) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,164,continue;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,167,// Full references mean that we can't inline the object.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,168,if (!ref.isLvalue() && !ref.isInitializingDeclaration()) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,169,if (parent.getType() != Token.VAR) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,170,"// This is a full reference to the object, we can't inline."
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,171,return false;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,174,// var x; We can ignore safely.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,175,continue;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,178,Node val = ref.getAssignedValue();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,179,if (val == null) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,180,// Var with no assignment. Keep going.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,181,continue;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,184,// We're looking for object literal assignments only.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,185,if (val.getType() != Token.OBJECTLIT) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,186,return false;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,189,"// Make sure that the value is not self-refential. IOW,"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,190,// disallow things like x = {b: x.a}.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,192,// TODO: Only exclude unorderable self-referential
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,193,"// assignments. i.e. x = {a: x.b, b: x.a} is not orderable,"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,194,"// but x = {a: 1, b: x.a} is."
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,196,"// Also, ES5 getters/setters aren't handled by this pass."
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,197,for (Node child = val.getFirstChild(); child != null;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,198,child = child.getNext()) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,199,if (child.getType() == Token.GET ||
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,200,child.getType() == Token.SET) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,201,// ES5 get/set not supported.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,202,return false;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,204,Node childVal = child.getFirstChild();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,205,// Check if childVal is the parent of any of the passed in
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,206,"// references, as that is how self-referential assignments"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,207,// will happen.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,208,for (Reference t : refs) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,209,Node refNode = t.getParent();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,210,while (!NodeUtil.isStatementBlock(refNode)) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,211,if (refNode == childVal) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,212,// There's a self-referential assignment
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,213,return false;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,215,refNode = refNode.getParent();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,220,// This is an assignment to an object literal. Make sure that
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,221,"// this isn't inside some giant GETPROP thing, e.g."
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,222,// (x = {}).c = 5 (even though technically we could work out the
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,223,"// (x = {}).c case without the assignment, that's a sufficiently odd"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,224,// case to not worry about it.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,225,Node p = parent;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,226,while ((p = p.getParent()) != null) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,227,if (p.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,228,return false;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,232,// We have found an acceptable object literal assignment. As
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,233,"// long as there are no other assignments that mess things up,"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,234,// we can inline.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,235,ret = true;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,237,return ret;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,241,* Computes a list of ever-referenced keys in the object being
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,242,"* inlined, and returns a mapping of key name -> generated"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,243,* variable name.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,245,"private Map<String, String> computeVarList("
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,246,"Var v, ReferenceCollection referenceInfo) {"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,247,"Map<String, String> varmap = Maps.newHashMap();"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,249,for (Reference ref : referenceInfo.references) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,250,if (ref.isLvalue() || ref.isInitializingDeclaration()) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,251,Node val = ref.getAssignedValue();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,252,if (val != null) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,253,for (Node child = val.getFirstChild(); child != null;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,254,child = child.getNext()) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,255,String varname = child.getString();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,256,if (varmap.containsKey(varname)) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,257,continue;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,260,"String var = VAR_PREFIX + varname + ""_"" +"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,261,safeNameIdSupplier.get();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,262,"varmap.put(varname, var);"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,265,} else if (ref.getParent().getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,266,// This is the var. There is no value.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,267,} else {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,268,Node getprop = ref.getParent();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,269,Preconditions.checkState(
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,270,"getprop.getType() == Token.GETPROP,"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,271,"""Unexpected reference type: "" + Token.name(getprop.getType()));"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,272,Preconditions.checkState(
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,273,"getprop.getFirstChild().getString().equals(v.getName()),"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,274,"""Unexpected variable name: "" + getprop.getFirstChild().getString() +"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,275,""", expecting: "" + v.getName());"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,277,// The key being looked up in the original map.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,278,String varname = getprop.getLastChild().getString();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,279,if (varmap.containsKey(varname)) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,280,continue;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,283,"String var = VAR_PREFIX + varname + ""_"" + safeNameIdSupplier.get();"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,284,"varmap.put(varname, var);"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,288,return varmap;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,292,* Populates a map of key names -> initial assigned values. The
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,293,* object literal these are being pulled from is invalidated as
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,294,* a result.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,296,"private void fillInitialValues(Reference init, Map<String, Node> initvals) {"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,297,Node object = init.getAssignedValue();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,298,Preconditions.checkState(object.getType() == Token.OBJECTLIT);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,299,for (Node key = object.getFirstChild(); key != null;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,300,key = key.getNext()) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,301,"initvals.put(key.getString(), key.removeFirstChild());"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,306,"* Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true."
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,307,* Note that the resulting expression will always evaluate to
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,308,"* true, as would the x = {...} expression."
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,310,"private void replaceAssignmentExpression(Var v, Reference ref,"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,311,"Map<String, String> varmap) {"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,312,// Compute all of the assignments necessary
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,313,List<Node> nodes = Lists.newArrayList();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,314,Node val = ref.getAssignedValue();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,315,"blacklistVarReferencesInTree(val, v.scope);"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,316,Preconditions.checkState(val.getType() == Token.OBJECTLIT);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,317,Set<String> all = Sets.newHashSet(varmap.keySet());
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,318,for (Node key = val.getFirstChild(); key != null;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,319,key = key.getNext()) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,320,String var = key.getString();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,321,Node value = key.removeFirstChild();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,322,// TODO(user): Copy type information.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,323,nodes.add(
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,324,"new Node(Token.ASSIGN,"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,325,"Node.newString(Token.NAME, varmap.get(var)), value));"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,326,all.remove(var);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,329,// TODO(user): Better source information.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,330,for (String var : all) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,331,nodes.add(
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,332,"new Node(Token.ASSIGN,"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,333,"Node.newString(Token.NAME, varmap.get(var)),"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,334,NodeUtil.newUndefinedNode(null)));
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,337,"// All assignments evaluate to true, so make sure that the"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,338,// expr statement evaluates to true in case it matters.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,339,nodes.add(new Node(Token.TRUE));
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,341,"// Join these using COMMA.  A COMMA node must have 2 children, so we"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,342,// create a tree. In the tree the first child be the COMMA to match
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,343,"// the parser, otherwise tree equality tests fail."
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,344,nodes = Lists.reverse(nodes);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,345,Node replacement = new Node(Token.COMMA);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,346,Node cur = replacement;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,347,int i;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,348,for (i = 0; i < nodes.size() - 2; i++) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,349,cur.addChildToFront(nodes.get(i));
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,350,Node t = new Node(Token.COMMA);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,351,cur.addChildToFront(t);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,352,cur = t;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,354,cur.addChildToFront(nodes.get(i));
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,355,cur.addChildToFront(nodes.get(i + 1));
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,357,Node replace = ref.getParent();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,358,replacement.copyInformationFromForTree(replace);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,360,if (replace.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,361,replace.getParent().replaceChild(
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,362,"replace, NodeUtil.newExpr(replacement));"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,363,} else {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,364,"replace.getParent().replaceChild(replace, replacement);"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,369,"* Splits up the object literal into individual variables, and"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,370,* updates all uses.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,372,"private void splitObject(Var v, Reference declaration,"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,373,"Reference init,"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,374,ReferenceCollection referenceInfo) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,375,"// First figure out the FULL set of possible keys, so that they"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,376,// can all be properly set as necessary.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,377,"Map<String, String> varmap = computeVarList(v, referenceInfo);"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,379,"Map<String, Node> initvals = Maps.newHashMap();"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,380,// Figure out the top-level of the var assign node. If it's a plain
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,381,"// ASSIGN, then there's an EXPR_STATEMENT above it, if it's a"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,382,// VAR then it should be directly replaced.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,383,Node vnode;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,384,boolean defined = referenceInfo.isWellDefined() &&
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,385,init.getParent().getType() == Token.VAR;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,386,if (defined) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,387,vnode = init.getParent();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,388,"fillInitialValues(init, initvals);"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,389,} else {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,390,// TODO(user): More test / rewrite this part.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,391,// Find the beginning of the function / script.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,392,vnode = v.getScope().getRootNode().getLastChild().getFirstChild();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,395,"for (Map.Entry<String, String> entry : varmap.entrySet()) {"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,396,Node val = initvals.get(entry.getKey());
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,397,"Node varnode = NodeUtil.newVarNode(entry.getValue(), val);"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,398,if (val == null) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,399,// is this right?
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,400,varnode.copyInformationFromForTree(vnode);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,402,"vnode.getParent().addChildBefore(varnode, vnode);"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,405,if (defined) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,406,vnode.getParent().removeChild(vnode);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,409,for (Reference ref : referenceInfo.references) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,410,// The init/decl have already been converted.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,411,if (defined && ref == init) continue;
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,413,if (ref.isLvalue()) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,414,"// Assignments have to be handled specially, since they"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,415,// expand out into multiple assignments.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,416,"replaceAssignmentExpression(v, ref, varmap);"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,417,} else if (ref.getParent().getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,418,// The old variable declaration. It didn't have a
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,419,// value. Remove it entirely as it should now be unused.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,420,ref.getGrandparent().removeChild(ref.getParent());
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,421,} else {
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,422,// Make sure that the reference is a GETPROP as we expect it to be.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,423,Node getprop = ref.getParent();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,424,Preconditions.checkState(
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,425,"getprop.getType() == Token.GETPROP,"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,426,"""Unexpected reference type: "" + Token.name(getprop.getType()));"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,427,Preconditions.checkState(
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,428,"getprop.getFirstChild().getString().equals(v.getName()),"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,429,"""Unexpected variable name: "" + getprop.getFirstChild().getString() +"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,430,""", expecting: "" + v.getName());"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,432,// The key being looked up in the original map.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,433,String var = getprop.getChildAtIndex(1).getString();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,435,"// If the variable hasn't already been declared, add an empty"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,436,// declaration near all the other declarations.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,437,Preconditions.checkState(varmap.containsKey(var));
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,439,// Replace the GETPROP node with a NAME.
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,440,"Node replacement = Node.newString(Token.NAME, varmap.get(var));"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,441,replacement.copyInformationFrom(getprop);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,442,"ref.getGrandparent().replaceChild(ref.getParent(), replacement);"
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,446,compiler.reportCodeChange();
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,2,* Copyright 2011 The Closure Compiler Authors.
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,20,* Verifies that valid candidates for object literals are inlined as
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,21,"* expected, and invalid candidates are not touched."
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,24,public class InlineObjectLiteralsTest extends CompilerTestCase {
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,26,public InlineObjectLiteralsTest() {
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,27,enableNormalize();
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,30,@Override
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,31,public void setUp() {
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,32,super.enableLineNumberCheck(true);
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,35,@Override
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,36,protected CompilerPass getProcessor(final Compiler compiler) {
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,37,return new InlineObjectLiterals(
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,38,"compiler,"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,39,compiler.getUniqueNameIdSupplier());
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,42,// Test object literal -> variable inlining
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,43,public void testObject1() {
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,44,"test(""var a = {x:x, y:y}; f(a.x, a.y);"","
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,45,"""var JSCompiler_object_inline_y_1=y;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,46,"""var JSCompiler_object_inline_x_0=x;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,47,"""f(JSCompiler_object_inline_x_0, JSCompiler_object_inline_y_1);"");"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,50,public void testObject2() {
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,51,"test(""var a = {y:y}; a.x = z; f(a.x, a.y);"","
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,52,"""var JSCompiler_object_inline_y_0 = y;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,53,"""var JSCompiler_object_inline_x_1;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,54,"""JSCompiler_object_inline_x_1=z;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,55,"""f(JSCompiler_object_inline_x_1, JSCompiler_object_inline_y_0);"");"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,58,public void testObject3() {
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,59,// Inlining the 'y' would cause the 'this' to be different in the
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,60,// target function.
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,61,"testSame(""var a = {y:y,x:x}; a.y(); f(a.x);"");"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,64,public void testObject4() {
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,65,// Object literal is escaped.
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,66,"testSame(""var a = {y:y}; a.x = z; f(a.x, a.y); g(a);"");"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,69,public void testObject5() {
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,70,"test(""var a = {x:x, y:y}; var b = {a:a}; f(b.a.x, b.a.y);"","
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,71,"""var a = {x:x, y:y};"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,72,"""var JSCompiler_object_inline_a_0=a;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,73,"""f(JSCompiler_object_inline_a_0.x, JSCompiler_object_inline_a_0.y);"");"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,76,public void testObject6() {
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,77,"test(""for (var i = 0; i < 5; i++) { var a = {i:i,x:x}; f(a.i, a.x); }"","
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,78,"""for (var i = 0; i < 5; i++) {"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,79,"""  var JSCompiler_object_inline_x_1=x;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,80,"""  var JSCompiler_object_inline_i_0=i;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,81,"""  f(JSCompiler_object_inline_i_0,JSCompiler_object_inline_x_1)"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,83,"test(""if (c) { var a = {i:i,x:x}; f(a.i, a.x); }"","
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,84,"""if (c) {"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,85,"""  var JSCompiler_object_inline_x_1=x;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,86,"""  var JSCompiler_object_inline_i_0=i;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,87,"""  f(JSCompiler_object_inline_i_0,JSCompiler_object_inline_x_1)"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,91,public void testObject7() {
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,92,"test(""var a = {x:x, y:f()}; g(a.x);"","
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,93,"""var JSCompiler_object_inline_y_1=f();"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,94,"""var JSCompiler_object_inline_x_0=x;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,95,"""g(JSCompiler_object_inline_x_0)"");"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,98,public void testObject8() {
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,99,"testSame(""var a = {x:x,y:y}; var b = {x:y}; f((c?a:b).x);"");"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,101,"test(""var a; if(c) { a={x:x, y:y}; } else { a={x:y}; } f(a.x);"","
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,102,"""var JSCompiler_object_inline_y_1;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,103,"""var JSCompiler_object_inline_x_0;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,104,"""if(c) JSCompiler_object_inline_x_0=x,"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,105,"""      JSCompiler_object_inline_y_1=y,"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,106,"""      true;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,107,"""else JSCompiler_object_inline_x_0=y,"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,108,"""     JSCompiler_object_inline_y_1=void 0,"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,109,"""     true;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,110,"""f(JSCompiler_object_inline_x_0)"");"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,111,"test(""var a = {x:x,y:y}; var b = {x:y}; c ? f(a.x) : f(b.x);"","
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,112,"""var JSCompiler_object_inline_y_1 = y; "" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,113,"""var JSCompiler_object_inline_x_0 = x; "" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,114,"""var JSCompiler_object_inline_x_2 = y; "" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,115,"""c ? f(JSCompiler_object_inline_x_0):f(JSCompiler_object_inline_x_2)"");"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,118,public void testObject9() {
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,119,"// There is a call, so no inlining"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,120,"testSame(""function f(a,b) {"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,121,"""  var x = {a:a,b:b}; x.a(); return x.b;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,124,"test(""function f(a,b) {"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,125,"""  var x = {a:a,b:b}; g(x.a); x = {a:a,b:2}; return x.b;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,127,"""function f(a,b) {"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,128,"""  var JSCompiler_object_inline_b_1 = b;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,129,"""  var JSCompiler_object_inline_a_0 = a;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,130,"""  g(JSCompiler_object_inline_a_0);"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,131,"""  JSCompiler_object_inline_a_0 = a,"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,132,"""  JSCompiler_object_inline_b_1=2,"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,133,"""  true;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,134,"""  return JSCompiler_object_inline_b_1"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,137,"test(""function f(a,b) { "" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,138,"""  var x = {a:a,b:b}; g(x.a); x.b = x.c = 2; return x.b; "" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,140,"""function f(a,b) { "" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,141,"""  var JSCompiler_object_inline_b_1=b; "" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,142,"""  var JSCompiler_object_inline_c_2;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,143,"""  var JSCompiler_object_inline_a_0=a;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,144,"""  g(JSCompiler_object_inline_a_0);"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,145,"""  JSCompiler_object_inline_b_1=JSCompiler_object_inline_c_2=2;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,146,"""  return JSCompiler_object_inline_b_1"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,150,public void testObject10() {
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,151,"test(""var x; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b);"","
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,152,"""var JSCompiler_object_inline_b_1;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,153,"""var JSCompiler_object_inline_a_0;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,154,"""var b = f();"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,155,"""JSCompiler_object_inline_a_0=a,JSCompiler_object_inline_b_1=b,true;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,156,"""if(JSCompiler_object_inline_a_0) g(JSCompiler_object_inline_b_1)"");"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,157,"test(""var x = {}; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b) + x.c"","
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,158,"""var JSCompiler_object_inline_b_1;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,159,"""var JSCompiler_object_inline_c_2;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,160,"""var JSCompiler_object_inline_a_0;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,161,"""var b=f();"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,162,"""JSCompiler_object_inline_a_0=a,JSCompiler_object_inline_b_1=b,"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,163,"""  JSCompiler_object_inline_c_2=void 0,true;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,164,"""if(JSCompiler_object_inline_a_0) "" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,165,"""  g(JSCompiler_object_inline_b_1) + JSCompiler_object_inline_c_2"");"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,166,"test(""var x; var b = f(); x = {a:a, b:b}; x.c = c; if(x.a) g(x.b) + x.c"","
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,167,"""var JSCompiler_object_inline_b_1;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,168,"""var JSCompiler_object_inline_c_2;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,169,"""var JSCompiler_object_inline_a_0;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,170,"""var b = f();"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,171,"""JSCompiler_object_inline_a_0 = a,JSCompiler_object_inline_b_1 = b, "" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,172,"""  JSCompiler_object_inline_c_2=void 0,true;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,173,"""JSCompiler_object_inline_c_2 = c;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,174,"""if (JSCompiler_object_inline_a_0)"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,175,"""  g(JSCompiler_object_inline_b_1) + JSCompiler_object_inline_c_2;"");"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,176,"test(""var x = {a:a}; if (b) x={b:b}; f(x.a||x.b);"","
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,177,"""var JSCompiler_object_inline_b_1;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,178,"""var JSCompiler_object_inline_a_0 = a;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,179,"""if(b) JSCompiler_object_inline_b_1 = b,"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,180,"""      JSCompiler_object_inline_a_0 = void 0,"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,181,"""      true;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,182,"""f(JSCompiler_object_inline_a_0 || JSCompiler_object_inline_b_1)"");"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,183,"test(""var x; var y = 5; x = {a:a, b:b, c:c}; if (b) x={b:b}; f(x.a||x.b);"","
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,184,"""var JSCompiler_object_inline_b_1;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,185,"""var JSCompiler_object_inline_c_2;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,186,"""var JSCompiler_object_inline_a_0;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,187,"""var y=5;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,188,"""JSCompiler_object_inline_a_0=a,"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,189,"""JSCompiler_object_inline_b_1=b,"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,190,"""JSCompiler_object_inline_c_2=c,"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,191,"""true;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,192,"""if (b) JSCompiler_object_inline_b_1=b,"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,193,"""       JSCompiler_object_inline_c_2=void 0,"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,194,"""       JSCompiler_object_inline_a_0=void 0,"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,195,"""       true;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,196,"""f(JSCompiler_object_inline_a_0||JSCompiler_object_inline_b_1)"");"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,199,public void testObject11() {
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,200,"testSame(""var x = {a:b}; (x = {a:a}).c = 5; f(x.a);"");"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,201,"testSame(""var x = {a:a}; f(x[a]); g(x[a]);"");"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,204,public void testObject12() {
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,205,"test(""var a; a = {x:1, y:2}; f(a.x, a.y2);"","
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,206,"""var JSCompiler_object_inline_y2_2;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,207,"""var JSCompiler_object_inline_y_1;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,208,"""var JSCompiler_object_inline_x_0;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,209,"""JSCompiler_object_inline_x_0=1,"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,210,"""JSCompiler_object_inline_y_1=2,"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,211,"""JSCompiler_object_inline_y2_2=void 0,"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,212,"""true;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,213,"""f(JSCompiler_object_inline_x_0, JSCompiler_object_inline_y2_2);"");"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,216,public void testObject13() {
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,217,"testSame(""var x = {a:1, b:2}; x = {a:3, b:x.a};"");"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,220,public void testObject14() {
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,221,"testSame(""var x = {a:1}; if ('a' in x) { f(); }"");"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,222,"testSame(""var x = {a:1}; for (var y in x) { f(y); }"");"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,225,public void testObject15() {
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,226,"testSame(""x = x || {}; f(x.a);"");"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,229,public void testObject16() {
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,230,"test(""function f(e) { bar(); x = {a: foo()}; var x; print(x.a); }"","
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,231,"""function f(e) { "" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,232,"""  var JSCompiler_object_inline_a_0;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,233,"""  bar();"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,234,"""  JSCompiler_object_inline_a_0 = foo(), true;"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,235,"""  print(JSCompiler_object_inline_a_0);"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,239,public void testObject17() {
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,240,"// Note: Some day, with careful analysis, these two uses could be"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,241,"// disambiguated, and the second assignment could be inlined."
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,242,testSame(
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,243,"""var a = {a: function(){}};"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,244,"""a.a();"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,245,"""a = {a1: 100};"" +"
True,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,246,"""print(a.a1);"");"

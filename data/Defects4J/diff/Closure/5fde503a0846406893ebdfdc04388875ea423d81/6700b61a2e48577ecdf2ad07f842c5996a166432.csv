is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,190, @param iterator The to use while inspecting the node
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,190,* @param iterator The iterator to use while inspecting the node
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,246,"/ Reject anything that might read state, i.e. any NAME that is not"
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,247,/ newly redeclared or an assignment to a simple name.
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,249,f (type == Token.NAME && !varName.equals(nextNode.getString())) {
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,250,oolean blocked = false;
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,251,f (nextParent == null) {
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,252,locked = true;
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,253, else {
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,254,oolean assignsName = (nextParent.isAssign()
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,255,& nextNode == nextParent.getFirstChild());
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,256,oolean isVarDeclaration = (nextParent.isVar());
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,258,f (!assignsName && !isVarDeclaration) {
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,259,locked = true;
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,246,// Reject anything that might read state
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,247,boolean readsState = false;
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,249,if (// Any read of a different variable.
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,250,(nextNode.isName() && !varName.equals(nextNode.getString())) ||
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,251,// Any read of a property.
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,252,(nextNode.isGetProp() || nextNode.isGetElem())) {
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,254,"// If this is a simple assign, we'll be ok."
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,255,if (nextParent == null ||
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,256,"!NodeUtil.isVarOrSimpleAssignLhs(nextNode, nextParent)) {"
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,257,readsState = true;
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,263,f (blocked) {
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,264,ookAhead = null;
False,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,265,eturn;
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,260,} else if (nextNode.isCall() || nextNode.isNew()) {
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,261,// This isn't really an important case. In most cases when we use
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,262,"// CALL or NEW, we're invoking it on a NAME or a GETPROP. And in the"
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,263,"// few cases where we're not, it's because we have an anonymous"
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,264,// function that escapes the variable we're worried about. But we
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,265,// include this for completeness.
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,266,readsState = true;
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,269,if (readsState) {
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,270,lookAhead = null;
True,src/com/google/javascript/jscomp/NodeIterators.java,src/com/google/javascript/jscomp/NodeIterators.java,271,return;
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,193,public void testInlineVariables() {
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,194,"args.add(""--compilation_level=ADVANCED_OPTIMIZATIONS"");"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,195,test(
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,196,"""/** @constructor */ function F() { this.a = 0; }"" +"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,197,"""F.prototype.inc = function() { this.a++; return 10; };"" +"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,198,"""F.prototype.bar = function() { "" +"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,199,"""  var c = 3; var val = inc(); this.a += val + c;"" +"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,201,"""window['f'] = new F();"" +"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,202,"""window['f']['bar'] = window['f'].bar;"","
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,203,"""function a(){ this.a = 0; }"" +"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,204,"""a.prototype.b = function(){ var b=inc(); this.a += b + 3; };"" +"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,205,"""window.f = new a;"" +"
True,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,test/com/google/javascript/jscomp/CommandLineRunnerTest.java,206,"""window.f.bar = window.f.b"");"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,1061,public void testBug6598844() {
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,1062,testSame(
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,1063,"""function F() { this.a = 0; }"" +"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,1064,"""F.prototype.inc = function() { this.a++; return 10; };"" +"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,1065,"""F.prototype.bar = function() { var val = inc(); this.a += val; };"");"

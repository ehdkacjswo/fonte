is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,68,"arentCtor.getPrototype(), parentCtor.getSource());"
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,68,"parentCtor.getPrototype(), childCtor.getSource());"
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,70,"hildCtor, parentCtor.getSource());"
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,70,"childCtor, childCtor.getSource());"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,51,import java.util.logging.Logger;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,96,private static final Logger logger =
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,97,Logger.getLogger(SymbolTable.class.getName());
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,545,"ymbols.put(declNode, name, symbol);"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,549,"Symbol replacedSymbol = symbols.put(declNode, name, symbol);"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,550,Preconditions.checkState(replacedSymbol == null);
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,547,"ymbol replacedSymbol = scope.ownSymbols.put(name, symbol);"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,552,"replacedSymbol = scope.ownSymbols.put(name, symbol);"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,611,"// Create a property scope for each named type and each anonymous object,"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,612,// and populate it with that object's properties.
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,614,// We notably don't want to create a property scope for 'x' in
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,615,// var x = new Foo();
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,616,// where x is just an instance of another type.
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,606,SType type = sym.getType();
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,607,bjectType dereferenced = type == null ? null : type.dereference();
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,608,f (dereferenced != null) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,618,ObjectType type = ObjectType.cast(sym.getType());
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,619,if (type != null &&
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,620,(type.getReferenceName() == null ||
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,621,sym.getName().equals(type.getReferenceName()))) {
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,613,"/ Create a property scope for each symbol, and populate"
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,614,/ it with that symbol's properties.
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,748,"ymbol oldProp = getScope(s).getSlot(s.getName() + ""."" + propName);"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,758,"Symbol oldProp = symbols.get(newProp.getDeclaration().getNode(),"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,759,"s.getName() + ""."" + propName);"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,764,"// If we've already have an entry in the table for this symbol,"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,765,"// then skip it. This should only happen if we screwed up,"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,766,// and declared multiple distinct properties with the same name
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,767,// at the same node. We bail out here to be safe.
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,768,"if (symbols.get(newProp.getDeclaration().getNode(),"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,769,newProp.getName()) != null) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,770,"logger.warning(""Found duplicate symbol "" + newProp);"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,771,continue;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1016,@Override
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1017,public String toString() {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1018,Node n = getRootNode();
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1019,if (n != null) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1020,"return ""Scope@"" + n.getSourceFileName() + "":"" + n.getLineno();"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1021,} else {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,1022,"return ""PropertyScope@"" + getSymbolForScope();"
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,20,import com.google.javascript.jscomp.CodingConvention.SubclassType;
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,23,import com.google.javascript.rhino.jstype.FunctionType;
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,24,import com.google.javascript.rhino.jstype.JSTypeRegistry;
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,204,public void testApplySubclassRelationship() {
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,205,JSTypeRegistry registry = new JSTypeRegistry(null);
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,207,Node nodeA = new Node(Token.FUNCTION);
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,208,"FunctionType ctorA = registry.createConstructorType(""A"", nodeA,"
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,209,"new Node(Token.LP), null);"
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,211,Node nodeB = new Node(Token.FUNCTION);
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,212,"FunctionType ctorB = registry.createConstructorType(""B"", nodeB,"
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,213,"new Node(Token.LP), null);"
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,215,"conv.applySubclassRelationship(ctorA, ctorB, SubclassType.INHERITS);"
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,217,"assertTrue(ctorB.getPrototype().hasOwnProperty(""constructor""));"
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,218,"assertEquals(nodeB, ctorB.getPrototype().getPropertyNode(""constructor""));"
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,220,"assertTrue(ctorB.hasOwnProperty(""superClass_""));"
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,221,"assertEquals(nodeB, ctorB.getPropertyNode(""superClass_""));"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,511,public void testMultipleExtends() {
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,512,SymbolTable table = createSymbolTable(
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,513,"""/** @const */ var goog = goog || {};\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,514,"""goog.inherits = function(x, y) {};\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,515,"""/** @constructor */\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,516,"""goog.A = function() { this.fieldA = this.constructor; };\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,517,"""/** @constructor */ goog.A.FooA = function() {};\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,518,"""/** @return {void} */ goog.A.prototype.methodA = function() {};\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,519,"""/**\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,520,""" * @constructor\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,521,""" * @extends {goog.A}\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,522,""" */\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,523,"""goog.B = function() { this.fieldB = this.constructor; };\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,524,"""goog.inherits(goog.B, goog.A);\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,525,"""/** @return {void} */ goog.B.prototype.methodB = function() {};\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,526,"""/**\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,527,""" * @constructor\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,528,""" * @extends {goog.A}\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,529,""" */\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,530,"""goog.B2 = function() { this.fieldB = this.constructor; };\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,531,"""goog.inherits(goog.B2, goog.A);\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,532,"""/** @constructor */ goog.B2.FooB = function() {};\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,533,"""/** @return {void} */ goog.B2.prototype.methodB = function() {};\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,534,"""/**\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,535,""" * @constructor\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,536,""" * @extends {goog.B}\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,537,""" */\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,538,"""goog.C = function() { this.fieldC = this.constructor; };\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,539,"""goog.inherits(goog.C, goog.B);\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,540,"""/** @constructor */ goog.C.FooC = function() {};\n"" +"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,541,"""/** @return {void} */ goog.C.prototype.methodC = function() {};\n"");"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,543,"Symbol bCtor = getGlobalVar(table, ""goog.B.prototype.constructor"");"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,544,assertNotNull(bCtor);
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,546,List<Reference> bRefs = table.getReferenceList(bCtor);
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,547,"assertEquals(2, bRefs.size());"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,548,"assertEquals(11, bCtor.getDeclaration().getNode().getLineno());"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,550,"Symbol cCtor = getGlobalVar(table, ""goog.C.prototype.constructor"");"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,551,assertNotNull(cCtor);
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,553,List<Reference> cRefs = table.getReferenceList(cCtor);
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,554,"assertEquals(2, cRefs.size());"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,555,"assertEquals(26, cCtor.getDeclaration().getNode().getLineno());"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,598,options.setCodingConvention(new ClosureCodingConvention());

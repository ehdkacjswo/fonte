is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,142, else if (objectType.isUnknownType() &&
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,143,"/ If this has a supertype that hasn't been resolved yet,"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,144,/ then we can assume this type will be ok once the super
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,145,/ type resolves.
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,146,objectType.getImplicitPrototype() == null ||
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,147,bjectType.getImplicitPrototype().isResolved())) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,142,} else if (
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,143,objectType.isEmptyType() ||
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,144,(objectType.isUnknownType() &&
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,145,"// If this has a supertype that hasn't been resolved yet,"
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,146,// then we can assume this type will be ok once the super
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,147,// type resolves.
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,148,(objectType.getImplicitPrototype() == null ||
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,149,objectType.getImplicitPrototype().isResolved()))) {
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,162, else if (objectType.isUnknownType() &&
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,163,"/ If this has a supertype that hasn't been resolved yet,"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,164,/ then we can assume this type will be ok once the super
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,165,/ type resolves.
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,166,objectType.getImplicitPrototype() == null ||
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,167,bjectType.getImplicitPrototype().isResolved())) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,164,} else if (
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,165,objectType.isEmptyType() ||
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,166,(objectType.isUnknownType() &&
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,167,"// If this has a supertype that hasn't been resolved yet,"
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,168,// then we can assume this type will be ok once the super
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,169,// type resolves.
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,170,(objectType.getImplicitPrototype() == null ||
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,171,objectType.getImplicitPrototype().isResolved()))) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,952,"/ TODO(user): We're not 100% confident that type-checking works,"
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,953,/ so we return quietly if the unknown type is a superclass of this type.
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,954,/ Remove this check as we become more confident. We should flag a warning
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,955,"/ when the unknown type is on the inheritance chain, as it is likely"
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,956,/ because of a programmer error.
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,957,f (ctorType.hasUnknownSupertype()) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,952,"// If the supertype doesn't resolve correctly, we've warned about this"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,953,// already.
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,954,if (hasUnknownOrEmptySupertype(ctorType)) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,969,f (implementedInterface.isUnknownType()) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,966,if (implementedInterface.isUnknownType() ||
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,967,implementedInterface.isEmptyType()) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,972,Preconditions.checkNotNull(interfaceType);
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1037,"* Given a constructor or an interface type, find out whether the unknown"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1038,* type is a supertype of the current type.
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1040,private static boolean hasUnknownOrEmptySupertype(FunctionType ctor) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1041,Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1042,Preconditions.checkArgument(!ctor.isUnknownType());
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1044,// The type system should notice inheritance cycles on its own
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1045,// and break the cycle.
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1046,while (true) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1047,ObjectType maybeSuperInstanceType =
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1048,ctor.getPrototype().getImplicitPrototype();
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1049,if (maybeSuperInstanceType == null) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1050,return false;
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1052,if (maybeSuperInstanceType.isUnknownType() ||
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1053,maybeSuperInstanceType.isEmptyType()) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1054,return true;
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1056,ctor = maybeSuperInstanceType.getConstructor();
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1057,if (ctor == null) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1058,return false;
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1060,Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,42,import com.google.javascript.rhino.jstype.UnionType;
False,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,175,f (!anyObjectType.isSubtype(type)) {
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,176,if (!anyObjectType.isSubtype(type) && !type.isEmptyType()) {
False,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,235,ype.isSubtype(nullOrUndefined)) {
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,236,type.isSubtype(nullOrUndefined) &&
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,237,!containsForwardDeclaredUnresolvedName(type)) {
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,261,private boolean containsForwardDeclaredUnresolvedName(JSType type) {
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,262,if (type instanceof UnionType) {
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,263,for (JSType alt : ((UnionType) type).getAlternates()) {
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,264,if (containsForwardDeclaredUnresolvedName(alt)) {
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,265,return true;
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,269,return type.isNoResolvedType();
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,612," Given a constructor or an interface type, find out whether the unknown"
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,613, type is a supertype of the current type.
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,615,ublic boolean hasUnknownSupertype() {
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,616,reconditions.checkArgument(isConstructor() || isInterface());
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,617,reconditions.checkArgument(!this.isUnknownType());
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,618,/ Potential infinite loop if our type system messes up or someone defines
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,619,/ a bad type. Otherwise the loop should always end.
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,620,unctionType ctor = this;
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,621,hile (true) {
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,622,bjectType maybeSuperInstanceType =
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,623,tor.getPrototype().getImplicitPrototype();
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,624,f (maybeSuperInstanceType == null) {
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,625,eturn false;
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,627,f (maybeSuperInstanceType.isUnknownType()) {
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,628,eturn true;
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,630,tor = maybeSuperInstanceType.getConstructor();
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,631,f (ctor == null) {
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,632,eturn false;
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,634,reconditions.checkState(ctor.isConstructor() || ctor.isInterface());
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,154,public boolean isNoResolvedType() {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,155,return false;
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,159,eturn isNoType() || isNoObjectType();
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,163,return isNoType() || isNoObjectType() || isNoResolvedType();
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,513,f (bType.isAllType() || bType.isEmptyType() || bType.isUnknownType() ||
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,514,Type.isAllType() || aType.isEmptyType() || aType.isUnknownType()) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,517,if (bType.isAllType() || bType.isUnknownType() ||
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,518,bType.isNoResolvedType() ||
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,519,aType.isAllType() || aType.isUnknownType() ||
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,520,aType.isNoResolvedType()) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,524,boolean aIsEmpty = aType.isEmptyType();
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,525,boolean bIsEmpty = bType.isEmptyType();
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,526,if (aIsEmpty || bIsEmpty) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,527,if (aIsEmpty && bIsEmpty) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,528,return TernaryValue.TRUE;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,529,} else {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,530,return UNKNOWN;
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,581,f (thatType.isEmptyType() || thatType.isAllType()) {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,582,/ Defer to the implementations of the end lattice elements when
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,583,/ possible.
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,598,if (thatType.isAllType() ||
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,599,(thatType.isEmptyType() && !thatType.isNamedType())) {
True,src/com/google/javascript/rhino/jstype/JSTypeNative.java,src/com/google/javascript/rhino/jstype/JSTypeNative.java,138,"NO_RESOLVED_TYPE,"
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,303,NoObjectType NO_RESOLVED_TYPE = new NoResolvedType(this);
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,304,"registerNativeType(JSTypeNative.NO_RESOLVED_TYPE, NO_RESOLVED_TYPE);"
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,334,etReferencedType(
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,335,egistry.getNativeObjectType(
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,336,STypeNative.CHECKED_UNKNOWN_TYPE));
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,334,if (isForwardDeclared) {
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,335,setReferencedType(
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,336,registry.getNativeObjectType(
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,337,JSTypeNative.NO_RESOLVED_TYPE));
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,338,} else {
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,339,setReferencedType(
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,340,registry.getNativeObjectType(
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,341,JSTypeNative.CHECKED_UNKNOWN_TYPE));
False,src/com/google/javascript/rhino/jstype/NoObjectType.java,src/com/google/javascript/rhino/jstype/NoObjectType.java,217,Override
False,src/com/google/javascript/rhino/jstype/NoObjectType.java,src/com/google/javascript/rhino/jstype/NoObjectType.java,218,ublic TernaryValue testForEquality(JSType that) {
False,src/com/google/javascript/rhino/jstype/NoObjectType.java,src/com/google/javascript/rhino/jstype/NoObjectType.java,219,eturn that.isEmptyType() ? TernaryValue.TRUE : TernaryValue.UNKNOWN;
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,3,* ***** BEGIN LICENSE BLOCK *****
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,4,* Version: MPL 1.1/GPL 2.0
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,6,* The contents of this file are subject to the Mozilla Public License Version
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,7,"* 1.1 (the ""License""); you may not use this file except in compliance with"
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,8,* the License. You may obtain a copy of the License at
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,9,* http://www.mozilla.org/MPL/
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,11,"* Software distributed under the License is distributed on an ""AS IS"" basis,"
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,12,"* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License"
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,13,* for the specific language governing rights and limitations under the
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,14,* License.
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,16,"* The Original Code is Rhino code, released"
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,17,"* May 6, 1999."
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,19,* The Initial Developer of the Original Code is
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,20,* Netscape Communications Corporation.
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,21,* Portions created by the Initial Developer are Copyright (C) 1997-1999
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,22,* the Initial Developer. All Rights Reserved.
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,24,* Contributor(s):
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,25,*   Bob Jervis
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,26,*   Google Inc.
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,28,"* Alternatively, the contents of this file may be used under the terms of"
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,29,"* the GNU General Public License Version 2 or later (the ""GPL""), in which"
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,30,* case the provisions of the GPL are applicable instead of those above. If
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,31,* you wish to allow use of your version of this file only under the terms of
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,32,* the GPL and not to allow others to use your version of this file under the
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,33,"* MPL, indicate your decision by deleting the provisions above and replacing"
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,34,* them with the notice and other provisions required by the GPL. If you do
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,35,"* not delete the provisions above, a recipient may use your version of this"
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,36,* file under either the MPL or the GPL.
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,38,* ***** END LICENSE BLOCK ***** */
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,40,package com.google.javascript.rhino.jstype;
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,44,"* An unresolved type that was forward declared. So we know it exists,"
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,45,* but that it wasn't pulled into this binary.
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,47,"* In most cases, it behaves like a bottom type in the type lattice:"
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,48,"* no real type should be assigned to a NoResolvedType, but the"
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,49,"* NoResolvedType is a subtype of everything. In a few cases, it behaves"
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,50,"* like the unknown type: properties of this type are also NoResolved types,"
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,51,* and comparisons to other types always have an unknown result.
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,53,* @author nicksantos@google.com (Nick Santos)
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,55,class NoResolvedType extends NoType {
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,56,private static final long serialVersionUID = 1L;
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,58,NoResolvedType(JSTypeRegistry registry) {
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,59,super(registry);
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,62,@Override
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,63,public boolean isNoResolvedType() {
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,64,return true;
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,67,@Override
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,68,public boolean isNoType() {
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,69,return false;
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,72,@Override
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,73,public JSType getLeastSupertype(JSType that) {
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,74,return that.isNoType() ? this : super.getLeastSupertype(that);
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,77,@Override
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,78,public JSType getGreatestSubtype(JSType that) {
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,79,return that.isNoType() ? that :
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,80,that.isNoObjectType() ? getNativeType(JSTypeNative.NO_TYPE) :
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,81,super.getGreatestSubtype(that);
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,84,@Override
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,85,public JSType getPropertyType(String propertyName) {
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,86,return getNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE);
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,89,@Override
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,90,public String toString() {
True,src/com/google/javascript/rhino/jstype/NoResolvedType.java,src/com/google/javascript/rhino/jstype/NoResolvedType.java,91,"return ""NoResolvedType"";"
False,src/com/google/javascript/rhino/jstype/NoType.java,src/com/google/javascript/rhino/jstype/NoType.java,61,ublic final class NoType extends NoObjectType {
True,src/com/google/javascript/rhino/jstype/NoType.java,src/com/google/javascript/rhino/jstype/NoType.java,61,public class NoType extends NoObjectType {
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,111,@Override
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,112,public boolean isNoType() {
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,113,return referencedType.isNoType();
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,116,@Override
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,117,public boolean isNoObjectType() {
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,118,return referencedType.isNoObjectType();
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,121,@Override
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,122,public boolean isNoResolvedType() {
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,123,return referencedType.isNoResolvedType();
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,46,import com.google.common.base.Predicate;
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,546,@Override
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,547,public boolean setValidator(Predicate<JSType> validator) {
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,548,for (JSType a : alternates) {
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,549,a.setValidator(validator);
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,551,return true;
False,src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java,src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java,128,urrent.isUnknownType()) {
True,src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java,src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java,128,current.isUnknownType() ||
True,src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java,src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java,129,alternate.isNoResolvedType() ||
True,src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java,src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java,130,current.isNoResolvedType()) {
True,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,61,protected ObjectType NO_RESOLVED_TYPE;
True,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,127,NO_RESOLVED_TYPE =
True,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,128,registry.getNativeObjectType(JSTypeNative.NO_RESOLVED_TYPE);
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6415,estClosureTypes(
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6416,"goog.addDependency('zzz.js', ['MyType'], []);"" +"
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6417,"/** @param {MyType} x */ function f(x) { }"" +"
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6418,"f(3);"", null);"
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6415,"String f = ""goog.addDependency('zzz.js', ['MyType'], []);"" +"
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6416,"""/** @param {MyType} x */ function f(x) { }"";"
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6417,"testClosureTypes(f, null);"
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6418,"testClosureTypes(f + ""f(3);"","
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6419,"""actual parameter 1 of f does not match formal parameter\n"" +"
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6420,"""found   : number\n"" +"
True,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6421,"""required: (MyType|null|undefined)"");"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7141,estClosureTypes(
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7142,"goog.addDependency('zzz.js', ['MyType'], []);"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7143,"/** @param {MyType} x */ function f(x) { }"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7144,"f(3);"", null);"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7141,"String f = ""goog.addDependency('zzz.js', ['MyType'], []);"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7142,"""/** @param {MyType} x */ function f(x) { }"";"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7143,"testClosureTypes(f, null);"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7144,"testClosureTypes(f + ""f(3);"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7145,"""actual parameter 1 of f does not match formal parameter\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7146,"""found   : number\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7147,"""required: (MyType|null)"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7194,public void testForwardTypeDeclaration7() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7195,testClosureTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7196,"""goog.addDependency('zzz.js', ['MyType'], []);"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7197,"""/** @param {MyType=} x */"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7198,"""function f(x) { return x == undefined; }"", null);"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7201,public void testForwardTypeDeclaration8() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7202,testClosureTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7203,"""goog.addDependency('zzz.js', ['MyType'], []);"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7204,"""/** @param {MyType} x */"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7205,"""function f(x) { return x.name == undefined; }"", null);"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7208,public void testForwardTypeDeclaration9() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7209,testClosureTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7210,"""goog.addDependency('zzz.js', ['MyType'], []);"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7211,"""/** @param {MyType} x */"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7212,"""function f(x) { x.name = 'Bob'; }"", null);"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7215,public void testForwardTypeDeclaration10() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7216,"String f = ""goog.addDependency('zzz.js', ['MyType'], []);"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7217,"""/** @param {MyType|number} x */ function f(x) { }"";"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7218,"testClosureTypes(f, null);"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7219,"testClosureTypes(f + ""f(3);"", null);"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7220,"testClosureTypes(f + ""f('3');"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7221,"""actual parameter 1 of f does not match formal parameter\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7222,"""found   : string\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7223,"""required: (MyType|null|number)"");"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,51,import com.google.javascript.rhino.SimpleErrorReporter;
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,83,private NamedType forwardDeclaredNamedType;
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,166,forwardDeclaredNamedType =
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,167,"new NamedType(registry, ""forwardDeclared"", ""source"", 1, 0);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,168,"registry.forwardDeclareType(""typeA"");"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,169,forwardDeclaredNamedType.resolve(
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,170,"new SimpleErrorReporter(), EMPTY_SCOPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,174,"NO_RESOLVED_TYPE,"
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,194,oogSubBar);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,202,"googSubBar,"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,203,forwardDeclaredNamedType);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,661,* Tests the behavior of the unresolved Bottom type.
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,663,public void testNoResolvedType() throws Exception {
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,664,// isXxx
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,665,assertFalse(NO_RESOLVED_TYPE.isNoObjectType());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,666,assertFalse(NO_RESOLVED_TYPE.isNoType());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,667,assertTrue(NO_RESOLVED_TYPE.isNoResolvedType());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,668,assertFalse(NO_RESOLVED_TYPE.isArrayType());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,669,assertFalse(NO_RESOLVED_TYPE.isBooleanValueType());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,670,assertFalse(NO_RESOLVED_TYPE.isDateType());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,671,assertFalse(NO_RESOLVED_TYPE.isEnumElementType());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,672,assertFalse(NO_RESOLVED_TYPE.isNullType());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,673,assertFalse(NO_RESOLVED_TYPE.isNamedType());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,674,assertTrue(NO_RESOLVED_TYPE.isNumber());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,675,assertFalse(NO_RESOLVED_TYPE.isNumberObjectType());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,676,assertFalse(NO_RESOLVED_TYPE.isNumberValueType());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,677,assertTrue(NO_RESOLVED_TYPE.isObject());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,678,assertFalse(NO_RESOLVED_TYPE.isFunctionPrototypeType());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,679,assertFalse(NO_RESOLVED_TYPE.isRegexpType());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,680,assertTrue(NO_RESOLVED_TYPE.isString());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,681,assertFalse(NO_RESOLVED_TYPE.isStringObjectType());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,682,assertFalse(NO_RESOLVED_TYPE.isStringValueType());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,683,assertFalse(NO_RESOLVED_TYPE.isEnumType());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,684,assertFalse(NO_RESOLVED_TYPE.isUnionType());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,685,assertFalse(NO_RESOLVED_TYPE.isAllType());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,686,assertFalse(NO_RESOLVED_TYPE.isVoidType());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,687,assertTrue(NO_RESOLVED_TYPE.isConstructor());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,688,assertFalse(NO_RESOLVED_TYPE.isInstanceType());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,690,// canAssignTo
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,691,assertTrue(NO_RESOLVED_TYPE.canAssignTo(NO_RESOLVED_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,692,assertTrue(NO_RESOLVED_TYPE.canAssignTo(NO_OBJECT_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,693,assertTrue(NO_RESOLVED_TYPE.canAssignTo(ARRAY_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,694,assertTrue(NO_RESOLVED_TYPE.canAssignTo(BOOLEAN_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,695,assertTrue(NO_RESOLVED_TYPE.canAssignTo(BOOLEAN_OBJECT_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,696,assertTrue(NO_RESOLVED_TYPE.canAssignTo(DATE_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,697,assertTrue(NO_RESOLVED_TYPE.canAssignTo(ERROR_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,698,assertTrue(NO_RESOLVED_TYPE.canAssignTo(EVAL_ERROR_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,699,assertTrue(NO_RESOLVED_TYPE.canAssignTo(functionType));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,700,assertTrue(NO_RESOLVED_TYPE.canAssignTo(NULL_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,701,assertTrue(NO_RESOLVED_TYPE.canAssignTo(NUMBER_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,702,assertTrue(NO_RESOLVED_TYPE.canAssignTo(NUMBER_OBJECT_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,703,assertTrue(NO_RESOLVED_TYPE.canAssignTo(OBJECT_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,704,assertTrue(NO_RESOLVED_TYPE.canAssignTo(URI_ERROR_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,705,assertTrue(NO_RESOLVED_TYPE.canAssignTo(RANGE_ERROR_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,706,assertTrue(NO_RESOLVED_TYPE.canAssignTo(REFERENCE_ERROR_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,707,assertTrue(NO_RESOLVED_TYPE.canAssignTo(REGEXP_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,708,assertTrue(NO_RESOLVED_TYPE.canAssignTo(STRING_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,709,assertTrue(NO_RESOLVED_TYPE.canAssignTo(STRING_OBJECT_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,710,assertTrue(NO_RESOLVED_TYPE.canAssignTo(SYNTAX_ERROR_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,711,assertTrue(NO_RESOLVED_TYPE.canAssignTo(TYPE_ERROR_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,712,assertTrue(NO_RESOLVED_TYPE.canAssignTo(ALL_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,713,assertTrue(NO_RESOLVED_TYPE.canAssignTo(VOID_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,715,// canTestForEqualityWith
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,716,"assertCanTestForEqualityWith(NO_RESOLVED_TYPE, NO_RESOLVED_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,717,"assertCanTestForEqualityWith(NO_RESOLVED_TYPE, NO_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,718,"assertCanTestForEqualityWith(NO_RESOLVED_TYPE, NO_OBJECT_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,719,"assertCanTestForEqualityWith(NO_RESOLVED_TYPE, ARRAY_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,720,"assertCanTestForEqualityWith(NO_RESOLVED_TYPE, BOOLEAN_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,721,"assertCanTestForEqualityWith(NO_RESOLVED_TYPE, BOOLEAN_OBJECT_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,722,"assertCanTestForEqualityWith(NO_RESOLVED_TYPE, DATE_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,723,"assertCanTestForEqualityWith(NO_RESOLVED_TYPE, ERROR_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,724,"assertCanTestForEqualityWith(NO_RESOLVED_TYPE, EVAL_ERROR_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,725,"assertCanTestForEqualityWith(NO_RESOLVED_TYPE, functionType);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,726,"assertCanTestForEqualityWith(NO_RESOLVED_TYPE, NULL_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,727,"assertCanTestForEqualityWith(NO_RESOLVED_TYPE, NUMBER_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,728,"assertCanTestForEqualityWith(NO_RESOLVED_TYPE, NUMBER_OBJECT_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,729,"assertCanTestForEqualityWith(NO_RESOLVED_TYPE, OBJECT_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,730,"assertCanTestForEqualityWith(NO_RESOLVED_TYPE, URI_ERROR_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,731,"assertCanTestForEqualityWith(NO_RESOLVED_TYPE, RANGE_ERROR_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,732,"assertCanTestForEqualityWith(NO_RESOLVED_TYPE, REFERENCE_ERROR_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,733,"assertCanTestForEqualityWith(NO_RESOLVED_TYPE, REGEXP_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,734,"assertCanTestForEqualityWith(NO_RESOLVED_TYPE, STRING_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,735,"assertCanTestForEqualityWith(NO_RESOLVED_TYPE, STRING_OBJECT_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,736,"assertCanTestForEqualityWith(NO_RESOLVED_TYPE, SYNTAX_ERROR_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,737,"assertCanTestForEqualityWith(NO_RESOLVED_TYPE, TYPE_ERROR_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,738,"assertCanTestForEqualityWith(NO_RESOLVED_TYPE, ALL_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,739,"assertCanTestForEqualityWith(NO_RESOLVED_TYPE, VOID_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,741,// canTestForShallowEqualityWith
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,742,assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(NO_RESOLVED_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,743,assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,744,assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,745,assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,746,assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,747,assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(DATE_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,748,assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,749,assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,750,assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(functionType));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,751,assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(NULL_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,752,assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,753,assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,754,assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,755,assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,756,assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,757,assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,758,assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,759,assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(STRING_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,760,assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,761,assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,762,assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,763,assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(ALL_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,764,assertTrue(NO_RESOLVED_TYPE.canTestForShallowEqualityWith(VOID_TYPE));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,766,// isNullable
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,767,assertTrue(NO_RESOLVED_TYPE.isNullable());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,769,// isObject
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,770,assertTrue(NO_RESOLVED_TYPE.isObject());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,772,// matchesXxx
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,773,assertTrue(NO_RESOLVED_TYPE.matchesInt32Context());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,774,assertTrue(NO_RESOLVED_TYPE.matchesNumberContext());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,775,assertTrue(NO_RESOLVED_TYPE.matchesObjectContext());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,776,assertTrue(NO_RESOLVED_TYPE.matchesStringContext());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,777,assertTrue(NO_RESOLVED_TYPE.matchesUint32Context());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,779,// toString
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,780,"assertEquals(""NoResolvedType"", NO_RESOLVED_TYPE.toString());"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,781,"assertEquals(null, NO_RESOLVED_TYPE.getDisplayName());"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,782,assertFalse(NO_RESOLVED_TYPE.hasDisplayName());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,784,// getPropertyType
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,785,"assertTypeEquals(CHECKED_UNKNOWN_TYPE,"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,786,"NO_RESOLVED_TYPE.getPropertyType(""anyProperty""));"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,788,Asserts.assertResolvesToSame(NO_RESOLVED_TYPE);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,3957,"compare(UNKNOWN, NO_RESOLVED_TYPE, NO_RESOLVED_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4011,"compare(UNKNOWN, NULL_TYPE, NO_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4012,"compare(UNKNOWN, VOID_TYPE, NO_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4013,"compare(UNKNOWN, NULL_TYPE, unresolvedNamedType);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4014,"compare(UNKNOWN, VOID_TYPE, unresolvedNamedType);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4015,"compare(TRUE, NO_TYPE, NO_TYPE);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4480,"NO_RESOLVED_TYPE,"
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4349,ecordType
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4497,"recordType,"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4498,forwardDeclaredNamedType);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4713,assertTrue(a.isEmptyType());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4714,assertFalse(a.isNoType());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4715,assertTrue(a.isNoResolvedType());

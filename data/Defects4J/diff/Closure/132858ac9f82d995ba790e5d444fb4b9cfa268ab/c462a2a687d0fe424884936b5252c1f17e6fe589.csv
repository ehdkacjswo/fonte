is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/rhino/jstype/ParameterizedType.java,src/com/google/javascript/rhino/jstype/ParameterizedType.java,103,/ no way to determine if the type parameters are in anyway related so
False,src/com/google/javascript/rhino/jstype/ParameterizedType.java,src/com/google/javascript/rhino/jstype/ParameterizedType.java,104,/ we disallow any subtype relationship between parameterized types.
False,src/com/google/javascript/rhino/jstype/ParameterizedType.java,src/com/google/javascript/rhino/jstype/ParameterizedType.java,105,"/ This seems appropriate for ""Array.<X>"" and ""Object.<X>"" which are the"
False,src/com/google/javascript/rhino/jstype/ParameterizedType.java,src/com/google/javascript/rhino/jstype/ParameterizedType.java,106,/ two parameterized types we recognize without a formal declaration.
False,src/com/google/javascript/rhino/jstype/ParameterizedType.java,src/com/google/javascript/rhino/jstype/ParameterizedType.java,107,eturn this.wrapsSameRawType(thatType)
False,src/com/google/javascript/rhino/jstype/ParameterizedType.java,src/com/google/javascript/rhino/jstype/ParameterizedType.java,108,& (thisParameter.isSubtype(thatParameter)
False,src/com/google/javascript/rhino/jstype/ParameterizedType.java,src/com/google/javascript/rhino/jstype/ParameterizedType.java,109,| thatParameter.isSubtype(thisParameter));
False,src/com/google/javascript/rhino/jstype/ParameterizedType.java,src/com/google/javascript/rhino/jstype/ParameterizedType.java,110, else {
False,src/com/google/javascript/rhino/jstype/ParameterizedType.java,src/com/google/javascript/rhino/jstype/ParameterizedType.java,111,eturn this.getReferencedTypeInternal().isSubtype(thatType);
True,src/com/google/javascript/rhino/jstype/ParameterizedType.java,src/com/google/javascript/rhino/jstype/ParameterizedType.java,103,// no way to determine if the type parameters are in anyway related.
True,src/com/google/javascript/rhino/jstype/ParameterizedType.java,src/com/google/javascript/rhino/jstype/ParameterizedType.java,105,// Right now we fallback to the raw type relationship if the raw types
True,src/com/google/javascript/rhino/jstype/ParameterizedType.java,src/com/google/javascript/rhino/jstype/ParameterizedType.java,106,"// are different. This is not great, and we'll figure out a better"
True,src/com/google/javascript/rhino/jstype/ParameterizedType.java,src/com/google/javascript/rhino/jstype/ParameterizedType.java,107,// solution later.
True,src/com/google/javascript/rhino/jstype/ParameterizedType.java,src/com/google/javascript/rhino/jstype/ParameterizedType.java,108,if (this.wrapsSameRawType(thatType)) {
True,src/com/google/javascript/rhino/jstype/ParameterizedType.java,src/com/google/javascript/rhino/jstype/ParameterizedType.java,109,return (thisParameter.isSubtype(thatParameter)
True,src/com/google/javascript/rhino/jstype/ParameterizedType.java,src/com/google/javascript/rhino/jstype/ParameterizedType.java,110,|| thatParameter.isSubtype(thisParameter));
True,src/com/google/javascript/rhino/jstype/ParameterizedType.java,src/com/google/javascript/rhino/jstype/ParameterizedType.java,114,return this.getReferencedTypeInternal().isSubtype(thatType);
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11329,public void testParameterized5() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11330,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11331,"""/**\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11332,""" * @param {Object.<T>} obj\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11333,""" * @return {boolean|undefined}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11334,""" * @template T\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11335,""" */\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11336,"""var some = function(obj) {"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11337,"""  for (var key in obj) if (obj[key]) return true;"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11339,"""/** @return {!Array} */ function f() { return []; }"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11340,"""/** @return {!Array.<string>} */ function g() { return []; }"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11341,"""some(f());\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11342,"""some(g());\n"");"
True,test/com/google/javascript/rhino/jstype/ParameterizedTypeTest.java,test/com/google/javascript/rhino/jstype/ParameterizedTypeTest.java,106,public void testDifferentRawTypes() throws Exception {
True,test/com/google/javascript/rhino/jstype/ParameterizedTypeTest.java,test/com/google/javascript/rhino/jstype/ParameterizedTypeTest.java,107,ParameterizedType arrOfNumber = createParameterizedType(
True,test/com/google/javascript/rhino/jstype/ParameterizedTypeTest.java,test/com/google/javascript/rhino/jstype/ParameterizedTypeTest.java,108,"ARRAY_TYPE, NUMBER_TYPE);"
True,test/com/google/javascript/rhino/jstype/ParameterizedTypeTest.java,test/com/google/javascript/rhino/jstype/ParameterizedTypeTest.java,109,ParameterizedType objType = createParameterizedType(
True,test/com/google/javascript/rhino/jstype/ParameterizedTypeTest.java,test/com/google/javascript/rhino/jstype/ParameterizedTypeTest.java,110,"OBJECT_TYPE, UNKNOWN_TYPE);"
True,test/com/google/javascript/rhino/jstype/ParameterizedTypeTest.java,test/com/google/javascript/rhino/jstype/ParameterizedTypeTest.java,111,assertTrue(arrOfNumber.isSubtype(objType));
True,test/com/google/javascript/rhino/jstype/ParameterizedTypeTest.java,test/com/google/javascript/rhino/jstype/ParameterizedTypeTest.java,112,assertFalse(objType.isSubtype(arrOfNumber));

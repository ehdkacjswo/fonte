is_addition,old_file_path,new_file_path,line_num,content
True,gen/com/google/javascript/jscomp/FunctionInformationMap.java,gen/com/google/javascript/jscomp/FunctionInformationMap.java,187,@Override
True,gen/com/google/javascript/jscomp/FunctionInformationMap.java,gen/com/google/javascript/jscomp/FunctionInformationMap.java,188,protected Object writeReplace() throws java.io.ObjectStreamException {
True,gen/com/google/javascript/jscomp/FunctionInformationMap.java,gen/com/google/javascript/jscomp/FunctionInformationMap.java,189,return super.writeReplace();
True,gen/com/google/javascript/jscomp/FunctionInformationMap.java,gen/com/google/javascript/jscomp/FunctionInformationMap.java,654,@Override
True,gen/com/google/javascript/jscomp/FunctionInformationMap.java,gen/com/google/javascript/jscomp/FunctionInformationMap.java,655,protected Object writeReplace() throws java.io.ObjectStreamException {
True,gen/com/google/javascript/jscomp/FunctionInformationMap.java,gen/com/google/javascript/jscomp/FunctionInformationMap.java,656,return super.writeReplace();
True,gen/com/google/javascript/jscomp/FunctionInformationMap.java,gen/com/google/javascript/jscomp/FunctionInformationMap.java,977,@Override
True,gen/com/google/javascript/jscomp/FunctionInformationMap.java,gen/com/google/javascript/jscomp/FunctionInformationMap.java,978,protected Object writeReplace() throws java.io.ObjectStreamException {
True,gen/com/google/javascript/jscomp/FunctionInformationMap.java,gen/com/google/javascript/jscomp/FunctionInformationMap.java,979,return super.writeReplace();
True,gen/com/google/javascript/jscomp/Instrumentation.java,gen/com/google/javascript/jscomp/Instrumentation.java,159,@Override
True,gen/com/google/javascript/jscomp/Instrumentation.java,gen/com/google/javascript/jscomp/Instrumentation.java,160,protected Object writeReplace() throws java.io.ObjectStreamException {
True,gen/com/google/javascript/jscomp/Instrumentation.java,gen/com/google/javascript/jscomp/Instrumentation.java,161,return super.writeReplace();
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,403,/** Inserts runtime type assertions for debugging. */
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,404,boolean runtimeTypeCheck;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,407,* A JS function to be used for logging runtime type assertion
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,408,* failures. It will be passed the warning as a string and the
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,409,* faulty expression as arguments.
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,411,String runtimeTypeCheckLogFunction;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,645,runtimeTypeCheck = false;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,646,runtimeTypeCheckLogFunction = null;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,854,"* Enable runtime type checking, which adds JS type assertions for debugging."
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,856,* @param logFunction A JS function to be used for logging runtime type
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,857,*     assertion failures.
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,859,public void enableRuntimeTypeCheck(String logFunction) {
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,860,this.runtimeTypeCheck = true;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,861,this.runtimeTypeCheckLogFunction = logFunction;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,864,public void disableRuntimeTypeCheck() {
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,865,this.runtimeTypeCheck = false;
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,26,mport com.google.javascript.jscomp.CheckLevel;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,299,if (options.runtimeTypeCheck) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,300,passes.add(runtimeTypeCheck);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1049,/** Inserts runtime type assertions for debugging. */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1050,private final PassFactory runtimeTypeCheck =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1051,"new PassFactory(""runtimeTypeCheck"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1052,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1053,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1054,"return new RuntimeTypeCheck(compiler,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1055,options.runtimeTypeCheckLogFunction);
False,src/com/google/javascript/jscomp/RhinoErrorReporter.java,src/com/google/javascript/jscomp/RhinoErrorReporter.java,44,"iagnosticType.error(""JSC_TRAILING_COMMA"", ""Parse error. {0}"");"
True,src/com/google/javascript/jscomp/RhinoErrorReporter.java,src/com/google/javascript/jscomp/RhinoErrorReporter.java,44,"DiagnosticType.error(""JSC_TRAILING_COMMA"","
True,src/com/google/javascript/jscomp/RhinoErrorReporter.java,src/com/google/javascript/jscomp/RhinoErrorReporter.java,45,"""Parse error. Internet Explorer has a non-standard "" +"
True,src/com/google/javascript/jscomp/RhinoErrorReporter.java,src/com/google/javascript/jscomp/RhinoErrorReporter.java,46,"""intepretation of trailing commas. Arrays will have the wrong "" +"
True,src/com/google/javascript/jscomp/RhinoErrorReporter.java,src/com/google/javascript/jscomp/RhinoErrorReporter.java,47,"""length and objects will not parse at all."");"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,2,* Copyright 2010 Google Inc.
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,19,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,20,import com.google.javascript.rhino.Token;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,21,import com.google.javascript.rhino.jstype.JSType;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,22,import com.google.javascript.rhino.jstype.FunctionType;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,23,import com.google.javascript.rhino.jstype.ObjectType;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,24,import com.google.javascript.rhino.jstype.UnionType;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,25,import com.google.common.annotations.VisibleForTesting;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,26,import com.google.common.base.Charsets;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,27,import com.google.common.collect.ImmutableList;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,28,import com.google.common.collect.Sets;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,29,import com.google.common.io.CharStreams;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,31,import java.io.IOException;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,32,import java.io.InputStreamReader;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,33,import java.util.Comparator;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,35,import javax.annotation.Nullable;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,38,* Inserts runtime type assertions.
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,40,* <p>We add markers to user-defined interfaces and classes in order to check if
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,41,* an object conforms to that type.
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,43,"* <p>For each function, we insert a runtime type assertion for each parameter"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,44,* and return value for which the compiler has a type.
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,46,* <p>The JavaScript code which implements the type assertions is in
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,47,* js/runtime-type-check.js.
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,52,class RuntimeTypeCheck implements CompilerPass {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,54,private static final Comparator<JSType> ALPHA = new Comparator<JSType>() {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,55,"public int compare(JSType t1, JSType t2) {"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,56,return getName(t1).compareTo(getName(t2));
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,59,private String getName(JSType type) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,60,if (type.isInstanceType()) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,61,return ((ObjectType) type).getReferenceName();
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,62,} else if (type.isNullType()
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,63,|| type.isBooleanValueType()
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,64,|| type.isNumberValueType()
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,65,|| type.isStringValueType()
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,66,|| type.isVoidType()) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,67,return type.toString();
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,68,} else {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,69,"// Type unchecked at runtime, so we don't care about the sorting order."
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,70,"return """";"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,75,private final AbstractCompiler compiler;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,76,private final String logFunction;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,78,"RuntimeTypeCheck(AbstractCompiler compiler, @Nullable String logFunction) {"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,79,this.compiler = compiler;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,80,this.logFunction = logFunction;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,83,@Override
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,84,"public void process(Node externs, Node root) {"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,85,"NodeTraversal.traverse(compiler, root, new AddMarkers(compiler));"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,86,"NodeTraversal.traverse(compiler, root, new AddChecks(compiler));"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,87,addBoilerplateCode();
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,91,* Inserts marker properties for user-defined interfaces and classes.
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,93,"* <p>For example, for a class C, we add"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,94,"* {@code C.prototype['instance_of__C']}, and for each interface I it"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,95,"* implements , we add {@code C.prototype['implements__I']}."
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,97,"* <p>Since interfaces are not a runtime JS concept, we use these markers to"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,98,* recognize an interface implementation at runtime. We also use markers for
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,99,"* user-defined classes, so that we can easily recognize them independently of"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,100,* which module they are defined in and whether the module is loaded.
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,102,private static class AddMarkers
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,103,extends NodeTraversal.AbstractPostOrderCallback {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,105,private final AbstractCompiler compiler;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,107,private AddMarkers(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,108,this.compiler = compiler;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,111,@Override
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,112,"public void visit(NodeTraversal t, Node n, Node parent) {"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,113,if (NodeUtil.isFunction(n)) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,114,"visitFunction(t, n);"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,118,"private void visitFunction(NodeTraversal t, Node n) {"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,119,FunctionType funType = (FunctionType) n.getJSType();
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,120,if (!funType.isConstructor()) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,121,return;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,124,Node nodeToInsertAfter = findNodeToInsertAfter(n);
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,126,"nodeToInsertAfter = addMarker(funType, nodeToInsertAfter, null);"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,128,for (ObjectType interfaceType :
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,129,"Sets.newTreeSet(ALPHA, funType.getAllImplementedInterfaces())) {"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,130,nodeToInsertAfter =
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,131,"addMarker(funType, nodeToInsertAfter, interfaceType);"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,135,private Node addMarker(
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,136,"FunctionType funType,"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,137,"Node nodeToInsertAfter,"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,138,@Nullable ObjectType interfaceType) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,140,String className = funType.getInstanceType().getReferenceName();
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,142,// This can happen with anonymous classes declared with the type
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,143,// {@code Function}.
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,144,if (className == null) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,145,return nodeToInsertAfter;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,148,"Node classNode = NodeUtil.newQualifiedNameNode(className, -1, -1);"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,150,Node marker = Node.newString(
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,151,interfaceType == null ?
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,152,"""instance_of__"" + className :"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,153,"""implements__"" + interfaceType.getReferenceName());"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,155,"Node assign = new Node(Token.EXPR_RESULT, new Node(Token.ASSIGN,"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,156,"new Node(Token.GETELEM,"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,157,"new Node(Token.GETPROP,"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,158,"classNode,"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,159,"Node.newString(""prototype"")), marker),"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,160,new Node(Token.TRUE)));
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,162,"nodeToInsertAfter.getParent().addChildAfter(assign, nodeToInsertAfter);"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,163,compiler.reportCodeChange();
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,164,nodeToInsertAfter = assign;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,165,return nodeToInsertAfter;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,169,"* Find the node to insert the markers after. Typically, this node"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,170,"* corresponds to the constructor declaration, but we want to skip any of"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,171,* the white-listed function calls.
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,173,* @param n the constructor function node
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,174,* @return the node to insert after
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,176,private Node findNodeToInsertAfter(Node n) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,177,Node nodeToInsertAfter = findEnclosingConstructorDeclaration(n);
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,179,Node next = nodeToInsertAfter.getNext();
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,180,while (next != null && isClassDefiningCall(next)) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,181,nodeToInsertAfter = next;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,182,next = nodeToInsertAfter.getNext();
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,185,return nodeToInsertAfter;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,188,private Node findEnclosingConstructorDeclaration(Node n) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,189,while (n.getParent().getType() != Token.SCRIPT &&
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,190,n.getParent().getType() != Token.BLOCK) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,191,n = n.getParent();
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,193,return n;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,196,private boolean isClassDefiningCall(Node next) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,197,return NodeUtil.isExprCall(next) &&
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,198,compiler.getCodingConvention().getClassesDefinedByCall(
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,199,next.getFirstChild()) != null;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,204,"* Insert calls to the runtime type checking function {@code checkType}, which"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,205,* takes an expression to check and a list of checkers (one of which must
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,206,* match). It returns the expression back to facilitate checking of return
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,207,"* values. We have checkers for value types, class types (user-defined and"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,208,"* externed), and interface types."
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,210,private static class AddChecks
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,211,extends NodeTraversal.AbstractPostOrderCallback {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,213,private final AbstractCompiler compiler;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,215,private AddChecks(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,216,this.compiler = compiler;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,219,@Override
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,220,"public void visit(NodeTraversal t, Node n, Node parent) {"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,221,if (NodeUtil.isFunction(n)) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,222,"visitFunction(t, n);"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,223,} else if (n.getType() == Token.RETURN) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,224,"visitReturn(t, n);"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,229,* Insert checks for the parameters of the function.
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,231,"private void visitFunction(NodeTraversal t, Node n) {"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,232,FunctionType funType = (FunctionType) n.getJSType();
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,233,Node block = n.getLastChild();
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,234,Node paramName = NodeUtil.getFnParameters(n).getFirstChild();
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,235,Node prev = null;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,236,for (Node paramType : funType.getParameters()) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,237,// Can this ever happen?
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,238,if (paramName == null) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,239,return;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,242,Node checkNode = createCheckTypeCallNode(
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,243,"paramType.getJSType(), paramName.getString());"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,245,if (checkNode == null) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,246,// We don't know how to check this parameter type.
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,247,paramName = paramName.getNext();
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,248,continue;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,251,"checkNode = new Node(Token.EXPR_RESULT, checkNode);"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,252,if (prev == null) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,253,block.addChildToFront(checkNode);
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,254,} else {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,255,"block.addChildAfter(checkNode, prev);"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,258,compiler.reportCodeChange();
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,259,paramName = paramName.getNext();
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,260,prev = checkNode;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,264,"private void visitReturn(NodeTraversal t, Node n) {"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,265,Node function = t.getEnclosingFunction();
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,266,FunctionType funType = (FunctionType) function.getJSType();
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,268,Node retValue = n.getFirstChild();
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,269,if (retValue == null) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,270,return;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,273,Node checkNode = createCheckTypeCallNode(
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,274,"funType.getReturnType(), retValue.cloneTree());"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,276,if (checkNode == null) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,277,return;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,280,"n.replaceChild(retValue, checkNode);"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,281,compiler.reportCodeChange();
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,284,"private Node createCheckTypeCallNode(JSType type, String varName) {"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,285,"return createCheckTypeCallNode(type, Node.newString(Token.NAME, varName));"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,289,* Creates a function call to check that the given expression matches the
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,290,* given type at runtime.
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,292,"* <p>For example, if the type is {@code (string|Foo)}, the function call is"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,293,"* {@code checkType(expr, [valueChecker('string'), classChecker('Foo')])}."
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,295,* @return the function call node or {@code null} if the type is not checked
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,297,"private Node createCheckTypeCallNode(JSType type, Node expr) {"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,298,Node arrayNode = new Node(Token.ARRAYLIT);
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,299,Iterable<JSType> alternates = type.isUnionType()
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,300,"? Sets.newTreeSet(ALPHA, ((UnionType) type).getAlternates())"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,301,: ImmutableList.of(type);
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,302,for (JSType alternate : alternates) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,303,Node checkerNode = createCheckerNode(alternate);
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,304,if (checkerNode == null) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,305,return null;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,307,arrayNode.addChildToBack(checkerNode);
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,309,"return new Node(Token.CALL, jsCode(""checkType""), expr, arrayNode);"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,313,* Creates a node which evaluates to a checker for the given type (which
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,314,"* must not be a union). We have checkers for value types, classes and"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,315,* interfaces.
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,317,* @return the checker node or {@code null} if the type is not checked
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,319,private Node createCheckerNode(JSType type) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,320,if (type.isNullType()) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,321,"return jsCode(""nullChecker"");"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,323,} else if (type.isBooleanValueType()
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,324,|| type.isNumberValueType()
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,325,|| type.isStringValueType()
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,326,|| type.isVoidType()) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,327,"return new Node(Token.CALL,"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,328,"jsCode(""valueChecker""),"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,329,Node.newString(type.toString()));
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,331,} else if (type.isInstanceType()) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,332,ObjectType objType = (ObjectType) type;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,334,String refName = objType.getReferenceName();
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,336,String sourceName =
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,337,NodeUtil.getSourceName(objType.getConstructor().getSource());
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,338,CompilerInput sourceInput = compiler.getInput(sourceName);
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,339,if (sourceInput == null || sourceInput.isExtern()) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,340,"return new Node(Token.CALL,"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,341,"jsCode(""externClassChecker""),"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,342,Node.newString(refName));
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,345,"return new Node(Token.CALL,"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,346,jsCode(objType.getConstructor().isInterface() ?
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,347,"""interfaceChecker"" : ""classChecker""),"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,348,Node.newString(refName));
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,350,} else {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,351,// We don't check this type (e.g. unknown & all types).
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,352,return null;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,357,private void addBoilerplateCode() {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,358,String boilerplateCode = getBoilerplateCode(logFunction);
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,360,Node js = compiler.parseSyntheticCode(boilerplateCode);
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,362,compiler.getNodeForCodeInsertion(null).addChildrenToFront(
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,363,js.removeChildren());
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,365,compiler.reportCodeChange();
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,368,private static Node jsCode(String prop) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,369,"return NodeUtil.newQualifiedNameNode(""jscomp.typecheck."" + prop, -1, -1);"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,372,@VisibleForTesting
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,373,static String getBoilerplateCode(@Nullable String logFunction) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,374,String boilerplateCode;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,375,try {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,376,boilerplateCode = CharStreams.toString(new InputStreamReader(
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,377,RuntimeTypeCheck.class.getResourceAsStream(
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,378,"""js/runtime_type_check.js""), Charsets.UTF_8));"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,379,} catch (IOException e) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,380,throw new RuntimeException(e);
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,383,"boilerplateCode = boilerplateCode.replace(""%%LOG%%"","
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,384,"logFunction == null ? ""function(warning, expr) {}"" : logFunction);"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,386,return boilerplateCode;
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,2,* Copyright 2010 Google Inc.
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,19,import com.google.common.collect.Iterables;
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,20,import com.google.common.collect.Lists;
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,21,import com.google.javascript.rhino.Node;
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,23,import junit.framework.TestCase;
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,26,* Tests for error message filtering.
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,29,public class RhinoErrorReporterTest extends TestCase {
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,31,public CompilerPass getProcessor(Compiler compiler) {
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,32,return new CompilerPass() {
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,33,"public void process(Node externs, Node root) {}"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,37,public void testTrailingComma() throws Exception {
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,38,String message =
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,39,"""Parse error. Internet Explorer has a non-standard "" +"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,40,"""intepretation of trailing commas. Arrays will have the wrong "" +"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,41,"""length and objects will not parse at all."";"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,42,assertError(
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,43,"""var x = [1,];"","
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,44,"RhinoErrorReporter.TRAILING_COMMA,"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,45,message);
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,46,assertError(
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,47,"""var x = {1: 2,};"","
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,48,"RhinoErrorReporter.TRAILING_COMMA,"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,49,message);
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,54,* Verifies that the compiler emits an error for the given code.
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,56,private void assertError(
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,57,"String code, DiagnosticType type, String description) {"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,58,Compiler compiler = new Compiler();
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,59,JSSourceFile[] externs = new JSSourceFile[] {};
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,60,JSSourceFile[] inputs =  new JSSourceFile[] {
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,61,"JSSourceFile.fromCode(""input"", code)"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,63,"compiler.init(externs, inputs, new CompilerOptions());"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,64,compiler.parseInputs();
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,65,"assertEquals(""Expected error"", 1, compiler.getErrorCount());"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,67,JSError error =
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,68,Iterables.getOnlyElement(Lists.newArrayList(compiler.getErrors()));
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,69,"assertEquals(type, error.getType());"
True,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,test/com/google/javascript/jscomp/RhinoErrorReporterTest.java,70,"assertEquals(description, error.description);"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,2,* Copyright 2010 Google Inc.
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,20,* Tests for {@link RuntimeTypeCheck}.
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,25,public class RuntimeTypeCheckTest extends CompilerTestCase {
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,27,public RuntimeTypeCheckTest() {
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,28,enableTypeCheck(CheckLevel.WARNING);
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,31,public void testValue() {
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,32,"testChecks(""/** @param {number} i */ function f(i) {}"","
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,33,"""function f(i) {"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,34,"""  jscomp.typecheck.checkType(i, "" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,35,"""      [jscomp.typecheck.valueChecker('number')]);"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,39,public void testNullValue() {
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,40,"testChecks(""/** @param {null} i */ function f(i) {}"","
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,41,"""function f(i) {"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,42,"""  jscomp.typecheck.checkType(i, [jscomp.typecheck.nullChecker]);"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,46,public void testValues() {
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,47,"testChecks(""/** @param {number} i\n@param {string} j*/ function f(i, j) {}"","
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,48,"""function f(i, j) {"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,49,"""  jscomp.typecheck.checkType(i, "" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,50,"""      [jscomp.typecheck.valueChecker('number')]);"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,51,"""  jscomp.typecheck.checkType(j, "" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,52,"""      [jscomp.typecheck.valueChecker('string')]);"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,56,public void testSkipParamOK() {
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,57,"testChecks(""/** @param {*} i\n@param {string} j*/ function f(i, j) {}"","
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,58,"""function f(i, j) {"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,59,"""  jscomp.typecheck.checkType(j, "" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,60,"""      [jscomp.typecheck.valueChecker('string')]);"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,64,public void testUnion() {
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,65,"testChecks(""/** @param {number|string} x */ function f(x) {}"","
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,66,"""function f(x) {"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,67,"""  jscomp.typecheck.checkType(x, ["" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,68,"""      jscomp.typecheck.valueChecker('number'), "" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,69,"""      jscomp.typecheck.valueChecker('string')"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,74,public void testUntypedParam() {
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,75,"testChecks(""/** ... */ function f(x) {}"", ""function f(x) {}"");"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,78,public void testReturn() {
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,79,"testChecks(""/** @return {string} */ function f() { return 'x'; }"","
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,80,"""function f() {"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,81,"""  return jscomp.typecheck.checkType('x', "" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,82,"""      [jscomp.typecheck.valueChecker('string')]);"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,86,public void testNativeClass() {
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,87,"testChecks(""/** @param {!String} x */ function f(x) {}"","
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,88,"""function f(x) {"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,89,"""  jscomp.typecheck.checkType(x, "" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,90,"""      [jscomp.typecheck.externClassChecker('String')]);"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,94,public void testQualifiedClass() {
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,95,"testChecks(""var goog = {}; /** @constructor */goog.Foo = function() {};"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,96,"""/** @param {!goog.Foo} x */ function f(x) {}"","
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,97,"""var goog = {}; goog.Foo = function() {};"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,98,"""goog.Foo.prototype['instance_of__goog.Foo'] = true;"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,99,"""function f(x) {"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,100,"""  jscomp.typecheck.checkType(x, "" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,101,"""    [jscomp.typecheck.classChecker('goog.Foo')]);"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,105,public void testInterface() {
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,106,"testChecks(""/** @interface */function I() {}"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,107,"""/** @param {!I} i */function f(i) {}"","
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,108,"""function I() {}"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,109,"""function f(i) {"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,110,"""  jscomp.typecheck.checkType(i, "" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,111,"""    [jscomp.typecheck.interfaceChecker('I')])"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,115,public void testImplementedInterface() {
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,116,"testChecks(""/** @interface */function I() {}"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,117,"""/** @param {!I} i */function f(i) {}"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,118,"""/** @constructor\n@implements {I} */function C() {}"","
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,119,"""function I() {}"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,120,"""function f(i) {"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,121,"""  jscomp.typecheck.checkType(i, "" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,122,"""      [jscomp.typecheck.interfaceChecker('I')])"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,124,"""function C() {}"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,125,"""C.prototype['instance_of__C'] = true;"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,126,"""C.prototype['implements__I'] = true;"");"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,129,public void testExtendedInterface() {
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,130,"testChecks(""/** @interface */function I() {}"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,131,"""/** @interface\n@extends {I} */function J() {}"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,132,"""/** @param {!I} i */function f(i) {}"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,133,"""/** @constructor\n@implements {J} */function C() {}"","
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,134,"""function I() {}"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,135,"""function J() {}"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,136,"""function f(i) {"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,137,"""  jscomp.typecheck.checkType(i, "" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,138,"""      [jscomp.typecheck.interfaceChecker('I')])"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,140,"""function C() {}"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,141,"""C.prototype['instance_of__C'] = true;"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,142,"""C.prototype['implements__I'] = true;"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,143,"""C.prototype['implements__J'] = true;"");"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,146,public void testImplementedInterfaceOrdering() {
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,147,"testChecks(""/** @interface */function I() {}"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,148,"""/** @param {!I} i */function f(i) {}"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,149,"""/** @constructor\n@implements {I} */function C() {}"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,150,"""C.prototype.f = function() {};"","
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,151,"""function I() {}"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,152,"""function f(i) {"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,153,"""  jscomp.typecheck.checkType(i, "" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,154,"""      [jscomp.typecheck.interfaceChecker('I')])"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,156,"""function C() {}"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,157,"""C.prototype['instance_of__C'] = true;"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,158,"""C.prototype['implements__I'] = true;"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,159,"""C.prototype.f = function() {};"");"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,162,public void testImplementedInterfaceOrderingGoogInherits() {
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,163,"testChecks(""var goog = {}; goog.inherits = function(x, y) {};"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,164,"""/** @interface */function I() {}"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,165,"""/** @param {!I} i */function f(i) {}"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,166,"""/** @constructor */function B() {}"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,167,"""/** @constructor\n@extends {B}\n@implements {I} */function C() {}"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,168,"""goog.inherits(C, B);"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,169,"""C.prototype.f = function() {};"","
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,170,"""var goog = {}; goog.inherits = function(x, y) {};"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,171,"""function I() {}"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,172,"""function f(i) {"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,173,"""  jscomp.typecheck.checkType(i, "" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,174,"""      [jscomp.typecheck.interfaceChecker('I')])"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,176,"""function B() {}"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,177,"""B.prototype['instance_of__B'] = true;"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,178,"""function C() {}"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,179,"""goog.inherits(C, B);"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,180,"""C.prototype['instance_of__C'] = true;"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,181,"""C.prototype['implements__I'] = true;"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,182,"""C.prototype.f = function() {};"");"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,185,public void testInnerConstructor() {
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,186,"testChecks(""(function() { /** @constructor */ function C() {} })()"","
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,187,"""(function() {"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,188,"""  function C() {} C.prototype['instance_of__C'] = true;"" +"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,192,public void testReturnNothing() {
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,193,"testChecks(""function f() { return; }"", ""function f() { return; }"");"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,196,public void testFunctionType() {
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,197,"testChecks(""/** @type {!Function} */function f() {}"", ""function f() {}"");"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,200,"private void testChecks(String js, String expected) {"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,201,String boilerplateCode = RuntimeTypeCheck.getBoilerplateCode(null);
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,202,"test(js, boilerplateCode + expected);"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,205,@Override
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,206,protected CompilerPass getProcessor(final Compiler compiler) {
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,207,"return new RuntimeTypeCheck(compiler, null);"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,210,@Override
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,211,protected int getNumRepetitions() {
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,212,return 1;

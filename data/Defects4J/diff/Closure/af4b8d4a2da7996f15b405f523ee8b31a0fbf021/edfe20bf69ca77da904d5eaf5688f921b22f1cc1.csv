is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,774,eturn (this.isConstructor() || other.isConstructor() ||
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,775,ther.typeOfThis.isSubtype(this.typeOfThis) ||
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,776,his.typeOfThis.isSubtype(other.typeOfThis)) &&
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,777,his.call.isSubtype(other.call);
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,774,boolean treatThisTypesAsCovariant =
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,775,"// If either one of these is a ctor, skip 'this' checking."
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,776,this.isConstructor() || other.isConstructor() ||
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,778,// An interface 'this'-type is non-restrictive.
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,779,"// In practical terms, if C implements I, and I has a method m,"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,780,// then any m doesn't necessarily have to C#m's 'this'
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,781,// type doesn't need to match I.
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,782,(other.typeOfThis.getConstructor() != null &&
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,783,other.typeOfThis.getConstructor().isInterface()) ||
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,785,"// If one of the 'this' types is covariant of the other,"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,786,// then we'll treat them as covariant (see comment above).
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,787,other.typeOfThis.isSubtype(this.typeOfThis) ||
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,788,this.typeOfThis.isSubtype(other.typeOfThis);
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,789,return treatThisTypesAsCovariant && this.call.isSubtype(other.call);
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6235,public void testInterfaceInheritanceCheck9() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6236,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6237,"""/** @interface */ function I() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6238,"""/** @return {number} */ I.prototype.bar = function() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6239,"""/** @constructor */ function F() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6240,"""/** @return {number} */ F.prototype.bar = function() {return 3; };"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6241,"""/** @return {number} */ F.prototype.foo = function() {return 3; };"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6242,"""/** @constructor \n * @extends {F} \n * @implements {I} */ "" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6243,"""function G() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6244,"""/** @return {string} */ function f() { return new G().bar(); }"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6245,"""inconsistent return type\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6246,"""found   : number\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6247,"""required: string"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6250,public void testInterfaceInheritanceCheck10() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6251,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6252,"""/** @interface */ function I() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6253,"""/** @return {number} */ I.prototype.bar = function() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6254,"""/** @constructor */ function F() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6255,"""/** @return {number} */ F.prototype.foo = function() {return 3; };"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6256,"""/** @constructor \n * @extends {F} \n * @implements {I} */ "" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6257,"""function G() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6258,"""/** @return {number} \n * @override */ G.prototype.bar = G.prototype.foo;"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6259,"""/** @return {string} */ function f() { return new G().bar(); }"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6260,"""inconsistent return type\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6261,"""found   : number\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6262,"""required: string"");"
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,151,public void testSubtypeWithInterfaceThisType() {
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,152,"FunctionType iface = registry.createInterfaceType(""I"", null);"
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,153,FunctionType ifaceReturnBoolean = new FunctionBuilder(registry)
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,154,.withParamsNode(registry.createParameters())
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,155,.withTypeOfThis(iface.getInstanceType())
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,156,.withReturnType(BOOLEAN_TYPE).build();
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,157,FunctionType objReturnBoolean = new FunctionBuilder(registry)
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,158,.withParamsNode(registry.createParameters())
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,159,.withTypeOfThis(OBJECT_TYPE)
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,160,.withReturnType(BOOLEAN_TYPE).build();
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,161,assertTrue(objReturnBoolean.canAssignTo(ifaceReturnBoolean));

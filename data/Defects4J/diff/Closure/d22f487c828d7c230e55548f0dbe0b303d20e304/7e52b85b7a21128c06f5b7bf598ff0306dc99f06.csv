is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,132, @return the current coding convention.
False,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,134,odingConvention getCodingConvention() {
False,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,135,/ Note: this assumes a thread safe coding convention object.
False,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,136,eturn currentTraversal.getCompiler().getCodingConvention();
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,348,Override
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,349,ublic Bind describeFunctionBind(Node n) {
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,350,/ It would be nice to be able to identify a fn.bind call
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,351,"/ but that requires knowing the type of ""fn""."
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,353,f (n.getType() != Token.CALL) {
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,354,eturn null;
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,357,ode callTarget = n.getFirstChild();
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,358,tring name = callTarget.getQualifiedName();
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,359,f (name != null) {
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,360,"f (name.equals(""goog.bind"") || name.equals(""goog$bind"")) {"
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,361,"/ goog.bind(fn, self, args...);"
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,362,ode fn = callTarget.getNext();
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,363,ode thisValue = safeNext(fn);
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,364,ode parameters = safeNext(thisValue);
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,365,"eturn new Bind(fn, thisValue, parameters);"
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,368,"f (name.equals(""goog.partial"") || name.equals(""goog$partial"")) {"
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,369,"/ goog.partial(fn, args...);"
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,370,ode fn = callTarget.getNext();
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,371,ode thisValue = null;
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,372,ode parameters = safeNext(fn);
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,373,"eturn new Bind(fn, thisValue, parameters);"
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,377,f (callTarget.getType() == Token.GETPROP
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,378,"& callTarget.getLastChild().getString().equals(""bind"")"
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,379,& callTarget.getFirstChild().getType() == Token.FUNCTION) {
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,380,"/ (function(){}).bind(self, args...);"
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,381,ode fn = callTarget.getFirstChild();
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,382,ode thisValue = callTarget.getNext();
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,383,ode parameters = safeNext(thisValue);
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,384,"eturn new Bind(fn, thisValue, parameters);"
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,387,eturn null;
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,390,rivate Node safeNext(Node n) {
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,391,f (n != null) {
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,392,eturn n.getNext();
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,394,eturn null;
False,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,225, A Bind instance or null.
False,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,227,ublic Bind describeFunctionBind(Node n);
False,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,229,ublic static class Bind {
False,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,230,/ The target of the bind action
False,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,231,inal Node target;
False,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,232,"/ The node representing the ""this"" value, maybe null"
False,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,233,inal Node thisValue;
False,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,234,/ The head of a Node list representing the parameters
False,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,235,inal Node parameters;
False,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,237,"ublic Bind(Node target, Node thisValue, Node parameters) {"
False,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,238,his.target = target;
False,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,239,his.thisValue = thisValue;
False,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,240,his.parameters = parameters;
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,184,Override
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,185,ublic Bind describeFunctionBind(Node n) {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,186,eturn null;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,22,mport com.google.javascript.jscomp.CodingConvention.Bind;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,131,ode result =  tryFoldLiteralConstructor(node);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,132,f (result == node) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,133,esult = tryFoldImmediateCallToBoundFunction(node);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,135,eturn result;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,130,return tryFoldLiteralConstructor(node);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,151,rivate Node tryFoldImmediateCallToBoundFunction(Node n) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,152,"/ Rewriting ""(fn.bind(a,b))()"" to ""fn.call(a,b)"" makes it inlinable"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,153,reconditions.checkState(n.getType() == Token.CALL);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,154,ode callTarget = n.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,155,ind bind = getCodingConvention().describeFunctionBind(callTarget);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,156,f (bind != null) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,157,/ replace the call target
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,158,ind.target.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,159,".replaceChild(callTarget, bind.target);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,160,allTarget = bind.target;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,162,/ push the parameters
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,163,"ddParameterAfter(bind.parameters, callTarget);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,165,/ add the this value before the parameters if necessary
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,166,f (bind.thisValue != null && !NodeUtil.isUndefined(bind.thisValue)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,167,"/ rewrite from ""fn(a, b)"" to ""fn.call(thisValue, a, b)"""
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,168,"ode newCallTarget = new Node(Token.GETPROP,"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,169,"allTarget.cloneTree(),"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,170,"ode.newString(""call"").copyInformationFrom(callTarget));"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,171,".replaceChild(callTarget, newCallTarget);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,172,".addChildAfter(bind.thisValue.cloneTree(), newCallTarget);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,175,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,177,eturn n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,180,"rivate void addParameterAfter(Node parameterList, Node after) {"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,181,f (parameterList != null) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,182,/ push the last parameter to the head of the list first.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,183,"ddParameterAfter(parameterList.getNext(), after);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,184,"fter.getParent().addChildAfter(parameterList.cloneTree(), after);"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,845,ublic void testBindToCall() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,846,"est(""(goog.bind(f))()"", ""f()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,847,"est(""(goog.bind(f,a))()"", ""f.call(a)"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,848,"est(""(goog.bind(f,a,b))()"", ""f.call(a,b)"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,850,"est(""(goog.bind(f))(a)"", ""f(a)"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,851,"est(""(goog.bind(f,a))(b)"", ""f.call(a,b)"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,852,"est(""(goog.bind(f,a,b))(c)"", ""f.call(a,b,c)"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,854,"est(""(goog.partial(f))()"", ""f()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,855,"est(""(goog.partial(f,a))()"", ""f(a)"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,856,"est(""(goog.partial(f,a,b))()"", ""f(a,b)"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,858,"est(""(goog.partial(f))(a)"", ""f(a)"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,859,"est(""(goog.partial(f,a))(b)"", ""f(a,b)"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,860,"est(""(goog.partial(f,a,b))(c)"", ""f(a,b,c)"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,862,"est(""((function(){}).bind())()"", ""((function(){}))()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,863,"est(""((function(){}).bind(a))()"", ""((function(){})).call(a)"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,864,"est(""((function(){}).bind(a,b))()"", ""((function(){})).call(a,b)"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,866,"est(""((function(){}).bind())(a)"", ""((function(){}))(a)"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,867,"est(""((function(){}).bind(a))(b)"", ""((function(){})).call(a,b)"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,868,"est(""((function(){}).bind(a,b))(c)"", ""((function(){})).call(a,b,c)"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,870,/ Don't rewrite if the bind isn't the immediate call target
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,871,"estSame(""(goog.bind(f)).call(g)"");"

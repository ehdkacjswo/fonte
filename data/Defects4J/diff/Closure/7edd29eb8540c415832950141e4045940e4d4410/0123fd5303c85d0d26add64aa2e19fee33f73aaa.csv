is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,47,mport com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode;
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1325," Force this type to resolve, even if the registry is in a lazy"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1326, resolving mode.
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1327, @see #resolve
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1329,"ublic final JSType forceResolve(ErrorReporter t, StaticScope<JSType> scope) {"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1330,esolveMode oldResolveMode = registry.getResolveMode();
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1331,egistry.setResolveMode(ResolveMode.IMMEDIATE);
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1332,"SType result = resolve(t, scope);"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1333,egistry.setResolveMode(oldResolveMode);
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1334,eturn result;
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,184," The type registry has three modes, which control how type ASTs are"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,185, converted to types in {@link #createFromTypeNodes}.
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,187,ublic static enum ResolveMode {
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,189, Expressions are converted into Unknown blobs that can be
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,190, resolved into complex types.
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,192,"AZY_EXPRESSIONS,"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,195, Expressions are evaluated. If any names in the expression point to
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,196," unknown types, then we create a proxy {@code NamedType} structure"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,197, until the type can be resolved.
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,199," This is the legacy way of resolving ways, and may not exist in the"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,200, future.
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,202,"AZY_NAMES,"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,205, Expressions and type names are evaluated aggressively. A warning
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,206, will be emitted if a type name fails to resolve to a real type.
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,208,MMEDIATE
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,211,rivate ResolveMode resolveMode = ResolveMode.LAZY_NAMES;
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,252, Set the current resolving mode of the type registry.
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,253, @see ResolveMode
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,255,ublic void setResolveMode(ResolveMode mode) {
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,256,his.resolveMode = mode;
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,259,esolveMode getResolveMode() {
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,260,eturn resolveMode;
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1617,f (resolveMode == ResolveMode.LAZY_EXPRESSIONS) {
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1618,"/ If the type expression doesn't contain any names, just"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1619,/ resolve it anyway.
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1620,oolean hasNames = hasTypeName(n);
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1621,f (hasNames) {
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1622,"eturn new UnresolvedTypeExpression(this, n, sourceName);"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1700,f (resolveMode != ResolveMode.LAZY_NAMES) {
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1701,"amedType = namedType.resolveInternal(reporter, scope);"
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,3, ***** BEGIN LICENSE BLOCK *****
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,4, Version: MPL 1.1/GPL 2.0
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,6, The contents of this file are subject to the Mozilla Public License Version
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,7," 1.1 (the ""License""); you may not use this file except in compliance with"
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,8, the License. You may obtain a copy of the License at
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,9, http://www.mozilla.org/MPL/
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,11," Software distributed under the License is distributed on an ""AS IS"" basis,"
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,12," WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License"
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,13, for the specific language governing rights and limitations under the
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,14, License.
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,16," The Original Code is Rhino code, released"
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,17," May 6, 1999."
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,19, The Initial Developer of the Original Code is
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,20, Netscape Communications Corporation.
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,21, Portions created by the Initial Developer are Copyright (C) 1997-1999
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,22, the Initial Developer. All Rights Reserved.
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,24, Contributor(s):
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,25,   Nick Santos
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,26,   Google Inc.
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,28," Alternatively, the contents of this file may be used under the terms of"
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,29," the GNU General Public License Version 2 or later (the ""GPL""), in which"
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,30, case the provisions of the GPL are applicable instead of those above. If
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,31, you wish to allow use of your version of this file only under the terms of
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,32, the GPL and not to allow others to use your version of this file under the
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,33," MPL, indicate your decision by deleting the provisions above and replacing"
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,34, them with the notice and other provisions required by the GPL. If you do
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,35," not delete the provisions above, a recipient may use your version of this"
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,36, file under either the MPL or the GPL.
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,38, ***** END LICENSE BLOCK ***** */
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,40,ackage com.google.javascript.rhino.jstype;
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,42,mport com.google.common.base.Preconditions;
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,43,mport com.google.javascript.rhino.ErrorReporter;
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,44,mport com.google.javascript.rhino.Node;
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,47, An {@code UnresolvedType} is a reference to some type expression.
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,48, This provides a convenient mechanism for implementing forward
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,49, references to types; a {@code UnresolvedType} can be used as a
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,50, placeholder until its reference is resolved.
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,52, The {@code UnresolvedType} will behave like an opaque unknown type.
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,53," When its {@code #resolve} method is called, it will return the underlying"
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,54, type. The underlying type can resolve to any JS type.<p>
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,56, @author nicksantos@google.com (Nick Santos)
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,58,lass UnresolvedTypeExpression extends UnknownType {
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,59,rivate static final long serialVersionUID = 1L;
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,61,rivate final Node typeExpr;
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,62,rivate final String sourceName;
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,65, Create a named type based on the reference.
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,67,"nresolvedTypeExpression(JSTypeRegistry registry, Node typeExpr,"
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,68,tring sourceName) {
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,69,"uper(registry, false);"
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,71,reconditions.checkNotNull(typeExpr);
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,72,his.typeExpr = typeExpr;
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,73,his.sourceName = sourceName;
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,77, Resolve the referenced type within the enclosing scope.
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,79,Override
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,80,"SType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {"
False,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java,81,"eturn registry.createFromTypeNodes(typeExpr, sourceName, enclosing);"
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,44,mport com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode;
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,208,ublic void testTypeResolutionModes() {
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,209,impleErrorReporter reporter = new SimpleErrorReporter();
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,211,STypeRegistry lazyExprRegistry = new JSTypeRegistry(reporter);
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,212,azyExprRegistry.setResolveMode(ResolveMode.LAZY_EXPRESSIONS);
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,214,STypeRegistry lazyNameRegistry = new JSTypeRegistry(reporter);
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,215,azyNameRegistry.setResolveMode(ResolveMode.LAZY_NAMES);
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,217,STypeRegistry immediateRegistry = new JSTypeRegistry(reporter);
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,218,mmediateRegistry.setResolveMode(ResolveMode.IMMEDIATE);
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,220,"ode expr = new Node(Token.QMARK, Node.newString(""foo""));"
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,221,taticScope<JSType> empty = MapBasedScope.emptyScope();
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,223,SType type = lazyExprRegistry.createFromTypeNodes(
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,224,"xpr, ""source.js"", empty);"
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,225,ssertTrue(type instanceof UnresolvedTypeExpression);
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,226,ssertTrue(type.isUnknownType());
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,227,"ssertEquals(""?"", type.toString());"
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,228,"ssertNull(""Unexpected warnings: "" + reporter.warnings(),"
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,229,eporter.warnings());
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,231,ype = lazyNameRegistry.createFromTypeNodes(
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,232,"xpr, ""source.js"", empty);"
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,233,ssertTrue(type instanceof UnionType);
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,234,ssertTrue(type.isUnknownType());
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,235,"ssertEquals(""(foo|null)"", type.toString());"
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,236,"ssertNull(""Unexpected warnings: "" + reporter.warnings(),"
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,237,eporter.warnings());
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,239,ype = immediateRegistry.createFromTypeNodes(
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,240,"xpr, ""source.js"", empty);"
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,241,ssertTrue(type instanceof UnknownType);
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,242,"ssertEquals(""Expected warnings"", 1, reporter.warnings().size());"
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,245,ublic void testForceResolve() {
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,246,impleErrorReporter reporter = new SimpleErrorReporter();
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,248,STypeRegistry lazyExprRegistry = new JSTypeRegistry(reporter);
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,249,azyExprRegistry.setResolveMode(ResolveMode.LAZY_EXPRESSIONS);
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,251,"ode expr = new Node(Token.QMARK, Node.newString(""foo""));"
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,252,taticScope<JSType> empty = MapBasedScope.emptyScope();
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,254,SType type = lazyExprRegistry.createFromTypeNodes(
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,255,"xpr, ""source.js"", empty);"
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,256,ssertFalse(type.isResolved());
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,257,"ssertTrue(type.forceResolve(reporter, empty).isResolved());"
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,258,"ssertEquals(""Expected warnings"", 1, reporter.warnings().size());"
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,261,ublic void testAllTypeResolvesImmediately() {
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,262,STypeRegistry lazyExprRegistry = new JSTypeRegistry(
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,263,ew SimpleErrorReporter());
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,264,azyExprRegistry.setResolveMode(ResolveMode.LAZY_EXPRESSIONS);
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,266,ode expr = new Node(Token.STAR);
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,267,SType type = lazyExprRegistry.createFromTypeNodes(
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,268,"xpr, ""source.js"", MapBasedScope.emptyScope());"
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,269,ssertTrue(type instanceof AllType);

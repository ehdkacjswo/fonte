is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,446,if (isAssignmentOp(n)) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,447,// Assignments will have side effects if
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,448,"// a) The RHS has side effects, or"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,449,"// b) The LHS has side effects, or"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,450,// c) A name on the LHS will exist beyond the life of this statement.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,451,if (checkForStateChangeHelper(
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,452,"n.getFirstChild(), checkForNewObjects) ||"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,453,checkForStateChangeHelper(
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,454,"n.getLastChild(), checkForNewObjects)) {"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,455,return true;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,458,Node current = n.getFirstChild();
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,459,for (;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,460,current.getType() == Token.GETPROP ||
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,461,current.getType() == Token.GETELEM;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,462,current = current.getFirstChild()) { }
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,464,return !(isLiteralValue(current) ||
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,465,current.getType() == Token.FUNCTION);
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1394,* @return true if n or any of its children are of the specified type.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1395,*     Does not traverse into functions.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1397,"static boolean containsTypeInOuterScope(Node node, int type) {"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1398,"return containsType(node, type,"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1399,Predicates.<Node>not(new NodeUtil.MatchNodeType(Token.FUNCTION)));
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,22,import com.google.javascript.rhino.Token;
False,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,55,"anityCheckSymbolTable(reparsedRoot, root);"
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,56,Node clonedExterns = externs.cloneTree();
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,57,sanityCheckSymbolTable(
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,58,"new Node(Token.BLOCK,"
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,59,"clonedExterns,"
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,60,"new Node(Token.BLOCK, reparsedRoot)),"
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,61,root.getParent());
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,62,static final DiagnosticType SCOPE_MISMATCH =
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,63,DiagnosticType.error(
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,64,"""JSC_SCOPE_MISMATCH"","
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,65,"""Scope roots used with the symbol table do not match."" +"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,66,"""\nExpected : {0}\nActual : {1}"");"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,101,// We may only ask for local blocks and the global (all scripts) block.
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,96,.getType() == Token.BLOCK || n.getType() == Token.FUNCTION);
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,103,(n.getType() == Token.BLOCK && n.getParent() == null) ||
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,104,"n.getType() == Token.FUNCTION,"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,105,"""May only create scopes for the global node and functions"");"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,221,"if (!checkNodesMatch(expectedScope.getRootNode(),"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,222,actualScope.getRootNode())) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,223,compiler.report(
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,224,JSError.make(
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,225,"SCOPE_MISMATCH,"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,226,"expectedScope.getRootNode().toStringTree(),"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,227,actualScope.getRootNode().toStringTree()));
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,228,continue;
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,222,f (actualVar == null) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,242,if (actualVar == null ||
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,243,expectedScope.getVar(var.getName()) != var) {
False,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,225, else if (!isNodeAttached(actualVar.getNameNode())) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,246,} else if (
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,247,!checkNodesMatch(
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,248,"var.getNameNode(),"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,249,actualVar.getNameNode()) ||
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,250,!isNodeAttached(actualVar.getNameNode())) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,260,* Check that the two nodes have the same relative position in the tree.
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,262,"private boolean checkNodesMatch(Node nodeA, Node nodeB) {"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,263,Node currentA = nodeA;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,264,Node currentB = nodeB;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,265,while (currentA != null && currentB != null) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,266,if (currentA.getType() != currentB.getType() ||
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,267,!currentA.isEquivalentTo(currentB)) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,268,return false;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,271,currentA = currentA.getParent();
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,272,currentB = currentB.getParent();
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,275,return currentA == null && currentB == null;
False,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,622,ype = type.dereference();
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,622,ObjectType dereferenced = type.dereference();
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,623,if (dereferenced != null) {
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,624,type = dereferenced;
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,115,removeNoOpStatements && !NodeUtil.mayEffectMutableState(n))) {
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,115,(removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n))) {
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,229,"ase IS_NAMESPACE:         return ""is_namespace"";"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,230,"ase IS_DISPATCHER:        return ""is_dispatcher"";"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,231,efault: Kit.codeBug();
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,229,"case IS_NAMESPACE:       return ""is_namespace"";"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,230,"case IS_DISPATCHER:      return ""is_dispatcher"";"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,231,"case DIRECTIVES:         return ""directives"";"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,232,default:
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,233,Kit.codeBug();
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,23,import com.google.javascript.rhino.Token;
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,683,expectedRoot.detachFromParent();
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,683,"able.verify(expectedRoot, mainRoot);"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,685,table.verify(
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,686,"new Node(Token.BLOCK, externsRoot.cloneTree(), expectedRoot),"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,687,mainRoot.getParent());
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,776,"ssertEquals(""There should be one error."", 1, compiler.getErrorCount());"
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,777,"ssertEquals(error, compiler.getErrors()[0].getType());"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,780,"String errors = """";"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,781,for (JSError actualError : compiler.getErrors()) {
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,782,"errors += actualError.description + ""\n"";"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,784,"assertEquals(""There should be one error. "" + errors,"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,785,"1, compiler.getErrorCount());"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,786,"assertEquals(errors, error, compiler.getErrors()[0].getType());"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,225,"assertSideEffect(true, ""new SomeClassINeverHeardOf()"");"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,227,"assertSideEffect(false, ""({}).foo = 4"");"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,228,"assertSideEffect(false, ""([]).foo = 4"");"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,229,"assertSideEffect(false, ""(function() {}).foo = 4"");"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,231,"assertSideEffect(true, ""this.foo = 4"");"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,232,"assertSideEffect(true, ""a.foo = 4"");"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,233,"assertSideEffect(true, ""(function() { return n; })().foo = 4"");"
True,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,234,"assertSideEffect(true, ""([]).foo = bar()"");"
False,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,115,"t.createScope(root, null);"
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,115,"st.createScope(root.getParent(), null);"
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,125,public void testSymbolTableWrongRoot() throws Exception {
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,126,otherPass = new CompilerPass() {
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,127,"@Override public void process(Node externs, Node root) {"
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,128,SymbolTable st = getLastCompiler().acquireSymbolTable();
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,129,"st.createScope(root, null);"
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,130,st.release();
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,134,try {
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,135,"testSame(""var x;"");"
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,136,} catch (IllegalArgumentException e) {
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,137,assertEquals(
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,138,"""May only create scopes for the global node and functions"","
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,139,e.getMessage());
False,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,86,"new NodeTraversal(compiler, this, table)).traverse(root);"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,86,"(new NodeTraversal(compiler, this, table)).traverseRoots(externs, root);"
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,169,public void testAssignPropertyOnCreatedObject() {
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,170,"testSame(""this.foo = 3;"");"
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,171,"testSame(""a.foo = 3;"");"
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,172,"testSame(""bar().foo = 3;"");"
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,173,"testSame(""({}).foo = bar();"");"
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,174,"testSame(""(new X()).foo = 3;"");"
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,176,"test(""({}).foo = 3;"", """");"
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,177,"test(""(function() {}).prototype.toString = function(){};"", """");"
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,178,"test(""(function() {}).prototype['toString'] = function(){};"", """");"
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,179,"test(""(function() {}).prototype[f] = function(){};"", """");"

is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,20,import com.google.common.collect.ImmutableList;
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,26,import com.google.javascript.jscomp.deps.JsFileParser;
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,32,import java.util.Collections;
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,57,private boolean generatedDependencyInfoFromSource = false;
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,59,// An error manager for handling problems when dealing with
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,60,// provides/requires.
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,61,private ErrorManager errorManager;
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,63,// An AbstractCompiler for doing parsing.
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,64,private AbstractCompiler compiler;
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,117,** Gets a list of types depended on by this input. */
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,118,ublic Collection<String> getRequires(AbstractCompiler compiler) {
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,119,f (getAstRoot(compiler) != null) {
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,120,"epsFinder deps = new DepsFinder(compiler, true);"
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,121,"odeTraversal.traverse(compiler, getAstRoot(compiler), deps);"
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,122,equires.addAll(deps.types);
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,123,eturn requires;
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,124, else {
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,125,eturn ImmutableSet.<String>of();
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,128,/** Sets an error manager for routing error messages. */
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,129,public void setErrorManager(ErrorManager errorManager) {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,130,this.errorManager = errorManager;
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,133,/** Sets an abstract compiler for doing parsing. */
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,134,public void setCompiler(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,135,this.compiler = compiler;
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,136,setErrorManager(compiler.getErrorManager());
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,132,/ TODO(nicksantos): Implement me.
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,133,hrow new UnsupportedOperationException();
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,136,** Gets a list of types provided by this input. */
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,137,ublic Collection<String> getProvides(AbstractCompiler compiler) {
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,138,f (getAstRoot(compiler) != null) {
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,139,"epsFinder deps = new DepsFinder(compiler, false);"
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,140,"odeTraversal.traverse(compiler, getAstRoot(compiler), deps);"
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,141,rovides.addAll(deps.types);
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,142,eturn provides;
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,143, else {
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,144,eturn ImmutableSet.<String>of();
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,142,"Preconditions.checkNotNull(errorManager,"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,143,"""Expected setErrorManager to be called first"");"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,144,try {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,145,regenerateDependencyInfoIfNecessary();
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,146,return Collections.<String>unmodifiableSet(requires);
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,147,} catch (IOException e) {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,148,"errorManager.report(CheckLevel.ERROR,"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,149,"JSError.make(AbstractCompiler.READ_ERROR, getName()));"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,150,return ImmutableList.<String>of();
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,151,/ TODO(nicksantos): Implement me.
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,152,hrow new UnsupportedOperationException();
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,157,"Preconditions.checkNotNull(errorManager,"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,158,"""Expected setErrorManager to be called first"");"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,159,try {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,160,regenerateDependencyInfoIfNecessary();
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,161,return Collections.<String>unmodifiableSet(provides);
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,162,} catch (IOException e) {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,163,"errorManager.report(CheckLevel.ERROR,"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,164,"JSError.make(AbstractCompiler.READ_ERROR, getName()));"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,165,return ImmutableList.<String>of();
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,155,rivate class DepsFinder extends AbstractShallowCallback {
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,156,rivate boolean findRequire;
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,157,rivate List<String> types;
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,158,rivate CodingConvention codingConvention;
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,170,* Regenerates the provides/requires if we need to do so.
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,172,private void regenerateDependencyInfoIfNecessary() throws IOException {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,173,"// If the code is NOT a JsAst, then it was not originally JS code."
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,174,// Look at the Ast for dependency info.
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,175,if (!(ast instanceof JsAst)) {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,176,"Preconditions.checkNotNull(compiler,"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,177,"""Expected setCompiler to be called first"");"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,178,DepsFinder finder = new DepsFinder();
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,179,Node root = getAstRoot(compiler);
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,180,if (root == null) {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,181,return;
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,160,"epsFinder(AbstractCompiler compiler, boolean findRequire) {"
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,161,his.findRequire = findRequire;
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,162,his.codingConvention = compiler.getCodingConvention();
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,163,his.types = Lists.newArrayList();
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,184,finder.visitTree(getAstRoot(compiler));
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,186,// TODO(nicksantos|user): This caching behavior is a bit
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,187,"// odd, and only works if you assume the exact call flow that"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,188,"// clients are currently using.  In that flow, they call"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,189,"// getProvides(), then remove the goog.provide calls from the"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,190,"// AST, and then call getProvides() again."
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,192,"// This won't work for any other call flow, or any sort of incremental"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,193,// compilation scheme. The API needs to be fixed so callers aren't
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,194,"// doing weird things like this, and then we should get rid of the"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,195,// multiple-scan strategy.
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,197,provides.addAll(finder.provides);
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,198,requires.addAll(finder.requires);
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,199,} else {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,200,"// Otherwise, look at the source code."
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,201,if (!generatedDependencyInfoFromSource) {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,202,// Note: it's ok to use getName() instead of
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,203,// getPathRelativeToClosureBase() here because we're not using
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,204,// this to generate deps files. (We're only using it for
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,205,// symbol dependencies.)
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,206,DependencyInfo info = (new JsFileParser(errorManager)).parseFile(
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,207,"getName(), getName(), getCode());"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,209,provides.addAll(info.getProvides());
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,210,requires.addAll(info.getRequires());
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,212,generatedDependencyInfoFromSource = true;
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,217,private static class DepsFinder {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,218,private final List<String> provides = Lists.newArrayList();
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,219,private final List<String> requires = Lists.newArrayList();
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,220,private final CodingConvention codingConvention =
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,221,new ClosureCodingConvention();
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,223,void visitTree(Node n) {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,224,"visitSubtree(n, null);"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,227,"void visitSubtree(Node n, Node parent) {"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,228,if (n.getType() == Token.CALL) {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,229,String require =
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,230,"codingConvention.extractClassNameIfRequire(n, parent);"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,231,if (require != null) {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,232,requires.add(require);
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,235,String provide =
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,236,"codingConvention.extractClassNameIfProvide(n, parent);"
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,237,if (provide != null) {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,238,provides.add(provide);
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,240,return;
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,241,} else if (parent != null &&
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,242,parent.getType() != Token.EXPR_RESULT &&
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,243,parent.getType() != Token.SCRIPT) {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,244,return;
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,166,"ublic void visit(NodeTraversal t, Node n, Node parent) {"
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,167,witch (n.getType()) {
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,168,ase Token.CALL:
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,169,tring className = findRequire
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,170," codingConvention.extractClassNameIfRequire(n, parent)"
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,171," codingConvention.extractClassNameIfProvide(n, parent);"
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,172,f (className != null) {
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,173,ypes.add(className);
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,175,reak;
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,247,for (Node child = n.getFirstChild();
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,248,child != null; child = child.getNext()) {
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,249,"visitSubtree(child, n);"
False,src/com/google/javascript/jscomp/JSModule.java,src/com/google/javascript/jscomp/JSModule.java,206,or (String provide : input.getProvides(compiler)) {
True,src/com/google/javascript/jscomp/JSModule.java,src/com/google/javascript/jscomp/JSModule.java,206,input.setCompiler(compiler);
True,src/com/google/javascript/jscomp/JSModule.java,src/com/google/javascript/jscomp/JSModule.java,207,for (String provide : input.getProvides()) {
False,src/com/google/javascript/jscomp/JSModule.java,src/com/google/javascript/jscomp/JSModule.java,215,or (String req : input.getRequires(compiler)) {
True,src/com/google/javascript/jscomp/JSModule.java,src/com/google/javascript/jscomp/JSModule.java,216,for (String req : input.getRequires()) {
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,2,* Copyright 2008 Google Inc.
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,17,package com.google.javascript.jscomp.deps;
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,19,import com.google.common.base.Charsets;
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,20,import com.google.common.collect.Lists;
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,21,import com.google.common.io.Files;
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,22,import com.google.javascript.jscomp.ErrorManager;
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,24,import java.io.File;
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,25,import java.io.IOException;
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,26,import java.util.List;
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,27,import java.util.logging.Level;
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,28,import java.util.logging.Logger;
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,29,import java.util.regex.Matcher;
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,30,import java.util.regex.Pattern;
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,33,* A parser that can extract dependency information from existing deps.js files.
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,35,* <p>See //javascript/closure/deps.js for an example file.</p>
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,37,* @author agrieve@google.com (Andrew Grieve)
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,39,public class DepsFileParser extends JsFileLineParser {
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,41,private static Logger logger = Logger.getLogger(DepsFileParser.class.getName());
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,44,* Pattern for matching JavaScript string literals. The group is:
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,45,* goog.addDependency({1});
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,47,private final Matcher depMatcher =
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,48,"Pattern.compile(""\\s*goog.addDependency\\((.*)\\);?\\s*"").matcher("""");"
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,51,* Pattern for matching the args of a goog.addDependency(). The group is:
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,52,"* goog.addDependency({1}, {2}, {3});"
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,54,private final Matcher depArgsMatch =
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,55,"Pattern.compile(""\\s*([^,]*), (\\[[^\\]]*\\]), (\\[[^\\]]*\\])\\s*"").matcher("""");"
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,58,* The dependency information extracted from the current file.
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,60,private List<DependencyInfo> depInfos;
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,63,* Constructor
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,65,* @param errorManager Handles parse errors.
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,67,public DepsFileParser(ErrorManager errorManager) {
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,68,super(errorManager);
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,72,* Parses the given file and returns a list of dependency information that it
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,73,* contained.
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,75,* @param filePath Path to the file to parse.
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,76,* @return A list of DependencyInfo objects.
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,77,* @throws IOException Thrown if the file could not be read.
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,79,public List<DependencyInfo> parseFile(String filePath) throws IOException {
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,80,"return parseFile(filePath, Files.toString(new File(filePath), Charsets.UTF_8));"
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,84,* Parses the given file and returns a list of dependency information that it
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,85,* contained.
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,86,* It uses the passed in fileContents instead of reading the file.
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,88,* @param filePath Path to the file to parse.
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,89,* @param fileContents The contents to parse.
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,90,* @return A list of DependencyInfo objects.
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,92,"public List<DependencyInfo> parseFile(String filePath, String fileContents) {"
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,93,depInfos = Lists.newArrayList();
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,94,"logger.info(""Parsing Dep: "" + filePath);"
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,95,"doParse(filePath, fileContents);"
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,97,return depInfos;
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,101,* Extracts dependency information from lines that look like
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,102,"*   goog.addDependency('pathRelativeToClosure', ['provides'], ['requires']);"
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,103,* Adds the dependencies to depInfos.
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,105,* @throws ParseException Thrown if the given line has a malformed
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,106,*     goog.addDependency().
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,108,@Override
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,109,protected void parseLine(String line) throws ParseException {
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,110,depMatcher.reset(line);
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,111,// See if the line looks like: goog.addDependency(...)
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,112,if (depMatcher.matches()) {
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,113,String addDependencyParams = depMatcher.group(1);
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,114,depArgsMatch.reset(addDependencyParams);
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,115,// Extract the three parameters.
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,116,if (!depArgsMatch.matches()) {
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,117,"// Although we could recover, we mark this as fatal since there should"
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,118,// not be problems with generated deps.js files.
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,119,"throw new ParseException(""Invalid arguments to goog.addDependency(). Found: """
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,120,"+ addDependencyParams, true);"
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,122,// Parse the file path.
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,123,String path = parseJsString(depArgsMatch.group(1));
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,124,"DependencyInfo depInfo = new SimpleDependencyInfo(path, filePath,"
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,125,// Parse the provides.
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,126,"parseJsStringArray(depArgsMatch.group(2)),"
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,127,// Parse the requires.
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,128,parseJsStringArray(depArgsMatch.group(3)));
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,130,if (logger.isLoggable(Level.FINE)) {
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,131,"logger.fine(""Found dep: "" + depInfo);"
True,src/com/google/javascript/jscomp/deps/DepsFileParser.java,src/com/google/javascript/jscomp/deps/DepsFileParser.java,133,depInfos.add(depInfo);
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,2,* Copyright 2008 Google Inc.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,17,package com.google.javascript.jscomp.deps;
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,19,import com.google.common.collect.Lists;
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,20,import com.google.javascript.jscomp.CheckLevel;
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,21,import com.google.javascript.jscomp.DiagnosticType;
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,22,import com.google.javascript.jscomp.ErrorManager;
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,23,import com.google.javascript.jscomp.JSError;
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,25,import java.util.List;
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,26,import java.util.regex.Matcher;
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,27,import java.util.regex.Pattern;
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,30,* Base class for classes that parse Javascript sources on a line-by-line basis. Strips comments
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,31,* from files and records all parsing errors.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,33,* @author agrieve@google.com (Andrew Grieve)
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,35,public abstract class JsFileLineParser {
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,37,static final DiagnosticType PARSE_WARNING = DiagnosticType.warning(
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,38,"""DEPS_PARSE_WARNING"", ""{0}\n{1}"");"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,39,static final DiagnosticType PARSE_ERROR = DiagnosticType.error(
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,40,"""DEPS_PARSE_ERROR"", ""{0}\n{1}"");"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,43,* Thrown by base classes to signify a problem parsing a line.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,45,protected static class ParseException extends Exception {
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,46,public static final long serialVersionUID = 1L;
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,47,private boolean fatal;
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,50,* Constructor.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,52,* @param message A description of what caused the exception.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,53,* @param fatal Whether the exception is recoverable.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,55,"public ParseException(String message, boolean fatal) {"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,56,super(message);
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,57,this.fatal = fatal;
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,60,public boolean isFatal() {
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,61,return fatal;
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,65,/** Pattern for stripping JavaScript comments from source files. */
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,66,private static final Pattern STRIP_COMMENTS_PATTERN =
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,67,"Pattern.compile(""/\\*.*?\\*/"" + // Multi-line comments"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,68,"""|//.*?$"" // Single-line comments."
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,69,", Pattern.DOTALL | Pattern.MULTILINE);"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,71,/** Pattern for matching JavaScript string literals. */
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,72,private static final Pattern STRING_LITERAL_PATTERN = Pattern.compile(
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,73,"""\\s*(?:'((?:\\\\'|[^'])*?)'|\""((?:\\\\\""|[^\""])*?)\"")\\s*"");"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,75,/** Matcher used in the parsing comments. */
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,76,"private Matcher stripCommentsMatcher = STRIP_COMMENTS_PATTERN.matcher("""");"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,77,/** Matcher used in the parsing string literals. */
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,78,"private Matcher valueMatcher = STRING_LITERAL_PATTERN.matcher("""");"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,80,/** Path of the file currently being parsed. */
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,81,protected String filePath;
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,82,/** The line number of the line currently being parsed. */
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,83,protected int lineNum;
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,84,/** Handles error messages. */
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,85,protected ErrorManager errorManager;
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,86,/** Did our parse succeed. */
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,87,protected boolean parseSucceeded;
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,90,* Constructor.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,92,* @param errorManager Parse error handler.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,94,public JsFileLineParser(ErrorManager errorManager) {
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,95,this.errorManager = errorManager;
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,98,public boolean didParseSucceed() {
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,99,return parseSucceeded;
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,103,* Performs the line-by-line parsing of the given fileContents. This method
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,104,* strips out Javascript comments and then uses the abstract parseLine()
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,105,* method to do the line parsing.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,107,* @param filePath The path to the file being parsed. Used for reporting parse
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,108,*     exceptions.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,109,* @param fileContents The contents of the file.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,111,"protected void doParse(String filePath, String fileContents) {"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,112,this.filePath = filePath;
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,113,parseSucceeded = true;
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,115,// Strip all comments.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,116,stripCommentsMatcher.reset(fileContents);
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,117,"// TODO(agrieve): Multi-line comments will be removed, causing line-number reporting"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,118,// to be wrong.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,119,"fileContents = stripCommentsMatcher.replaceAll("""");"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,120,lineNum = 0;
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,121,// Parse all lines.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,122,"for (String line : fileContents.split(""\n"")) {"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,123,++lineNum;
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,124,try {
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,125,parseLine(line);
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,126,} catch (ParseException e) {
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,127,// Inform the error handler of the exception.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,128,errorManager.report(
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,129,"e.isFatal() ? CheckLevel.ERROR : CheckLevel.WARNING,"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,130,"JSError.make(filePath, lineNum, 0 /* char offset */,"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,131,"e.isFatal() ? PARSE_ERROR : PARSE_WARNING,"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,132,"e.getMessage(), line));"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,133,parseSucceeded = parseSucceeded && !e.isFatal();
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,139,* Called for each line of the file being parsed.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,141,* @param line The line to parse.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,142,* @throws ParseException Should be thrown to signify a problem with the line.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,144,protected abstract void parseLine(String line) throws ParseException;
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,147,* Parses a JS string literal.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,149,"* @param jsStringLiteral The literal. Must look like ""asdf"" or 'asdf'"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,150,* @throws ParseException Thrown if there is a string literal that cannot be
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,151,*     parsed.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,153,protected String parseJsString(String jsStringLiteral) throws ParseException {
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,154,valueMatcher.reset(jsStringLiteral);
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,155,if (!valueMatcher.matches()) {
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,156,"throw new ParseException(""Syntax error in JS String literal"", true /* fatal */);"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,158,return valueMatcher.group(1) != null ? valueMatcher.group(1) : valueMatcher.group(2);
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,162,"* Parses a Javascript array of string literals. (eg: ['a', 'b', ""c""])."
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,163,* @param input A string containing an Javascript array of string literals.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,164,* @return A list of parsed string literals.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,165,* @throws ParseException Thrown if there is a syntax error with the input.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,167,List<String> parseJsStringArray(String input)
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,168,throws ParseException {
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,169,List<String> results = Lists.newArrayList();
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,170,int indexStart = input.indexOf('[');
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,171,int indexEnd = input.lastIndexOf(']');
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,172,if ((indexStart == -1) || (indexEnd == -1)) {
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,173,"throw new ParseException(""Syntax error when parsing JS array"", true /* fatal */);"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,175,"String innerValues = input.substring(indexStart + 1, indexEnd);"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,177,if (!innerValues.trim().isEmpty()) {
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,178,valueMatcher.reset(innerValues);
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,179,for (;;) {
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,180,// Parse the current string literal.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,181,if (!valueMatcher.lookingAt()) {
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,182,"throw new ParseException(""Syntax error in JS String literal"", true /* fatal */);"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,184,// Add it to the results.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,185,results.add(valueMatcher.group(1) != null ?
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,186,valueMatcher.group(1) : valueMatcher.group(2));
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,187,if (valueMatcher.hitEnd()) {
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,188,break;
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,190,// Ensure there is a comma after the value.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,191,"if (innerValues.charAt(valueMatcher.end()) != ',') {"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,192,"throw new ParseException(""Missing comma in string array"", true /* fatal */);"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,194,// Move to the next value.
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,195,"valueMatcher.region(valueMatcher.end() + 1, valueMatcher.regionEnd());"
True,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,src/com/google/javascript/jscomp/deps/JsFileLineParser.java,198,return results;
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,2,* Copyright 2008 Google Inc.
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,17,package com.google.javascript.jscomp.deps;
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,19,import com.google.common.base.Charsets;
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,20,import com.google.common.collect.Lists;
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,21,import com.google.common.io.Files;
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,22,import com.google.javascript.jscomp.ErrorManager;
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,24,import java.io.File;
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,25,import java.io.IOException;
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,26,import java.util.List;
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,27,import java.util.logging.Logger;
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,28,import java.util.regex.Matcher;
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,29,import java.util.regex.Pattern;
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,32,* A parser that can extract goog.require() and goog.provide() dependency
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,33,* information from a .js file.
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,35,* @author agrieve@google.com (Andrew Grieve)
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,37,public class JsFileParser extends JsFileLineParser {
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,39,private static Logger logger = Logger.getLogger(JsFileParser.class.getName());
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,41,/** Pattern for matching goog.provide(*) and goog.require(*). */
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,42,private static final Pattern GOOG_PROVIDE_REQUIRE_PATTERN = Pattern.compile(
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,43,"""(?:^|;)\\s*goog\\.(provide|require)\\s*\\((.*?)\\)"");"
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,45,/** Matchers used in the parsing. */
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,46,"private Matcher googMatcher = GOOG_PROVIDE_REQUIRE_PATTERN.matcher("""");"
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,48,/** The info for the file we are currently parsing. */
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,49,private List<String> provides;
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,50,private List<String> requires;
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,53,* Constructor
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,55,* @param errorManager Handles parse errors.
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,57,public JsFileParser(ErrorManager errorManager) {
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,58,super(errorManager);
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,62,* Parses the given file and returns the dependency information that it
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,63,* contained.
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,65,* @param filePath Path to the file to parse.
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,66,* @param closureRelativePath Path of the file relative to closure.
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,67,* @return A DependencyInfo containing all provides/requires found in the
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,68,*     file.
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,69,* @throws IOException Thrown if there was an problem reading the given file.
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,71,"public DependencyInfo parseFile(String filePath, String closureRelativePath)"
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,72,throws IOException {
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,73,"return parseFile(filePath, closureRelativePath,"
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,74,"Files.toString(new File(filePath), Charsets.UTF_8));"
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,78,* Parses the given file and returns the dependency information that it
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,79,* contained.
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,81,* @param filePath Path to the file to parse.
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,82,* @param closureRelativePath Path of the file relative to closure.
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,83,* @param fileContents The contents to parse.
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,84,* @return A DependencyInfo containing all provides/requires found in the
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,85,*     file.
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,87,"public DependencyInfo parseFile(String filePath, String closureRelativePath,"
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,88,String fileContents) {
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,89,provides = Lists.newArrayList();
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,90,requires = Lists.newArrayList();
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,92,"logger.fine(""Parsing Source: "" + filePath);"
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,93,"doParse(filePath, fileContents);"
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,95,DependencyInfo dependencyInfo = new SimpleDependencyInfo(
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,96,"closureRelativePath, filePath, provides, requires);"
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,97,"logger.fine(""DepInfo: "" + dependencyInfo);"
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,98,return dependencyInfo;
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,102,"* Parses a line of javascript, extracting goog.provide and goog.require"
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,103,* information.
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,105,@Override
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,106,protected void parseLine(String line) throws ParseException {
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,107,// Iterate over the provides/requires.
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,108,googMatcher.reset(line);
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,109,while (googMatcher.find()) {
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,110,// See if it's a require or provide.
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,111,boolean isRequire = googMatcher.group(1).charAt(0) == 'r';
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,112,// Parse the param.
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,113,String arg = parseJsString(googMatcher.group(2));
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,115,// Add the dependency.
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,116,if (isRequire) {
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,117,// goog is always implicit.
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,118,// TODO(nicksantos): I'm pretty sure we don't need this anymore.
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,119,// Remove this later.
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,120,"if (!""goog"".equals(arg)) {"
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,121,requires.add(arg);
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,123,} else {
True,src/com/google/javascript/jscomp/deps/JsFileParser.java,src/com/google/javascript/jscomp/deps/JsFileParser.java,124,provides.add(arg);

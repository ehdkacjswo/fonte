is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,56,private static final Annotation VISITED_EDGE = new Annotation() {};
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,173,"// Once we visited that edge once, we no longer need to"
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,174,// re-visit it again.
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,175,if (e.getAnnotation() == VISITED_EDGE) {
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,176,continue;
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,178,e.setAnnotation(VISITED_EDGE);
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,209,"// Once we visited that edge once, we no longer need to"
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,210,// re-visit it again.
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,211,if (e.getAnnotation() == VISITED_EDGE) {
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,212,continue;
True,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java,214,e.setAnnotation(VISITED_EDGE);
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,240,public void testSomePathRevisiting() {
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,241,"DiGraph<String, String> g = LinkedDirectedGraph.create();"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,242,"g.createDirectedGraphNode(""1"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,243,"g.createDirectedGraphNode(""2a"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,244,"g.createDirectedGraphNode(""2b"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,245,"g.createDirectedGraphNode(""3"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,246,"g.createDirectedGraphNode(""4a"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,247,"g.createDirectedGraphNode(""4b"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,248,"g.createDirectedGraphNode(""5"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,249,"g.connect(""1"", ""-"", ""2a"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,250,"g.connect(""1"", ""-"", ""2b"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,251,"g.connect(""2a"", ""-"", ""3"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,252,"g.connect(""2b"", ""-"", ""3"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,253,"g.connect(""3"", ""-"", ""4a"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,254,"g.connect(""3"", ""-"", ""4b"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,255,"g.connect(""4a"", ""-"", ""5"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,256,"g.connect(""4b"", ""-"", ""5"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,258,CountingPredicate<String> p =
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,259,"new CountingPredicate<String>(Predicates.equalTo(""4a""));"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,261,"assertTrue(createTest(g, ""1"", ""5"", p, ALL_EDGE)"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,262,.somePathsSatisfyPredicate());
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,264,// Make sure we are not doing more traversals than we have to.
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,265,"assertEquals(4, p.count);"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,325,private static class CountingPredicate<T> implements Predicate<T> {
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,327,private int count = 0;
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,328,private final Predicate<T> delegate;
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,330,private CountingPredicate(Predicate<T> delegate) {
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,331,this.delegate = delegate;
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,333,@Override
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,334,public boolean apply(T input) {
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,335,count ++;
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,336,return delegate.apply(input);

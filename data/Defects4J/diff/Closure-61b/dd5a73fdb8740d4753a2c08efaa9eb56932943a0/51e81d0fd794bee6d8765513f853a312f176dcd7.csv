is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,58," Whether the compiler should assume that a function's ""this"" value"
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,59," never needs coercion (for example in non-strict ""null"" or ""undefined"" will"
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,60," be coerced to the global ""this"" and primitives to objects)."
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,62,rivate boolean assumeStrictThis;
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,726,ssumeStrictThis = false;
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1228, @return Whether assumeStrictThis is set.
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1230,ublic boolean isAssumeStrictThis() {
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1231,eturn assumeStrictThis;
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1235," If true, enables enables additional optimizations."
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1237,ublic void setAssumeStrictThis(boolean enable) {
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1238,his.assumeStrictThis = enable;
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1046,rotected HotSwapCompilerPass createInternal(
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1047,inal AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1046,protected HotSwapCompilerPass createInternal(final AbstractCompiler compiler) {
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1601,"nableBlockInlining,"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1602,ptions.isAssumeStrictThis());
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1600,enableBlockInlining);
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,39,"/ A string to use to represent ""this"".  Anything that is not a valid"
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,40,"/ identifier can be used, so we use ""this""."
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,41,"tatic final String THIS_MARKER = ""this"";"
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,56,"tatic Node inject(AbstractCompiler compiler, Node node, Node parent,"
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,52,"static Node inject(Node node, Node parent,"
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,69,eturn replacement;
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,71, else if (node.getType() == Token.THIS) {
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,72,ode replacementTemplate = replacements.get(THIS_MARKER);
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,73,reconditions.checkNotNull(replacementTemplate);
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,74,f (replacementTemplate.getType() != Token.THIS) {
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,75,"/ The name may need to be replaced more than once,"
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,76,/ so we need to clone the node.
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,77,ode replacement = replacementTemplate.cloneTree();
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,78,"arent.replaceChild(node, replacement);"
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,80,/ Remove the value.  This isn't required but it ensures that we won't
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,81,/ inject side-effects multiple times as it will trigger the null
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,82,/ check above if we do.
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,83,"f (NodeUtil.mayHaveSideEffects(replacementTemplate, compiler)) {"
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,84,eplacements.remove(THIS_MARKER);
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,94," = inject(compiler, c, node, replacements);"
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,72,"c = inject(c, node, replacements);"
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,111,f (cArg != null && NodeUtil.isFunctionObjectCall(callNode)) {
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,112,"rgMap.put(THIS_MARKER, cArg);"
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,113,Arg = cArg.getNext();
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,114, else {
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,115,/ 'apply' isn't supported yet.
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,116,reconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,117,"rgMap.put(THIS_MARKER, NodeUtil.newUndefinedNode(callNode));"
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,89,if (callNode.getFirstChild().getType() != Token.NAME) {
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,90,if (NodeUtil.isFunctionObjectCall(callNode)) {
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,91,// TODO(johnlenz): Support replace this with a value.
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,92,Preconditions.checkNotNull(cArg);
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,93,Preconditions.checkState(cArg.getType() == Token.THIS);
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,94,cArg = cArg.getNext();
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,95,} else {
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,96,Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,403, else if (n.getType() == Token.THIS) {
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,404,arametersReferenced.add(THIS_MARKER);
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,45,rivate final boolean assumeStrictThis;
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,55,"oolean allowDecomposition,"
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,56,oolean assumeStrictThis) {
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,54,boolean allowDecomposition) {
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,62,his.assumeStrictThis = assumeStrictThis;
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,203,f (!assumeStrictThis) {
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,204,ode thisValue = callNode.getFirstChild().getNext();
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,205,f (thisValue == null || thisValue.getType() != Token.THIS) {
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,206,eturn false;
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,200,Node thisValue = callNode.getFirstChild().getNext();
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,201,if (thisValue == null || thisValue.getType() != Token.THIS) {
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,202,return false;
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,261,"ull, safeReturnNode, null, argMap);"
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,256,"safeReturnNode, null, argMap);"
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,639,f (cArg == null || cArg.getType() != Token.THIS) {
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,640,eturn CanInlineResult.NO;
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,634,Preconditions.checkNotNull(cArg);
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,635,Preconditions.checkState(cArg.getType() == Token.THIS);
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,18,mport static com.google.javascript.jscomp.FunctionArgumentInjector.THIS_MARKER;
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,31,mport java.util.Map.Entry;
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,30,import java.util.Map.Entry;
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,180," Create a unique ""this"" name."
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,182,rivate String getUniqueThisName() {
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,183,"eturn ""JSCompiler_inline_this_"" + safeNameIdSupplier.get();"
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,203,"ompiler, fnTemplateRoot, null, argMap);"
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,194,"fnTemplateRoot, null, argMap);"
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,222,f (name.equals(THIS_MARKER)) {
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,223,oolean referencesThis = NodeUtil.referencesThis(fnTemplateRoot);
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,224,"/ Update ""this"", this is only necessary if ""this"" is referenced"
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,225,"/ and the value of ""this"" is not Token.THIS, or the value of ""this"""
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,226,/ has side effects.
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,228,ode value = entry.getValue();
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,229,f (value.getType() != Token.THIS
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,230,& (referencesThis
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,231,"| NodeUtil.mayHaveSideEffects(value, compiler))) {"
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,232,tring newName = getUniqueThisName();
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,233,ode newValue = entry.getValue().cloneTree();
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,234,"ode newNode = NodeUtil.newVarNode(newName, newValue)"
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,235,copyInformationFromForTree(newValue);
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,236,"ewVars.add(0, newNode);"
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,237,/ Remove the parameter from the list to replace.
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,238,"ewArgMap.put(THIS_MARKER,"
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,239,"ode.newString(Token.NAME, newName)"
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,240,copyInformationFromForTree(newValue));
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,242, else {
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,243,ode newValue = entry.getValue().cloneTree();
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,244,"ode newNode = NodeUtil.newVarNode(name, newValue)"
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,245,copyInformationFromForTree(newValue);
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,246,"ewVars.add(0, newNode);"
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,247,/ Remove the parameter from the list to replace.
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,248,ewArgMap.remove(name);
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,213,Node newValue = entry.getValue().cloneTree();
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,214,"Node newNode = NodeUtil.newVarNode(name, newValue)"
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,215,.copyInformationFromForTree(newValue);
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,216,"newVars.add(0, newNode);"
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,217,// Remove the parameter from the list to replace.
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,218,newArgMap.remove(name);
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,255,"ompiler, fnTemplateRoot, null, newArgMap);"
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,224,"fnTemplateRoot, null, newArgMap);"
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,79,"oolean blockFunctionInliningEnabled,"
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,80,oolean assumeStrictThis) {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,79,boolean blockFunctionInliningEnabled) {
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,89,his.injector = new FunctionInjector(
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,90,"ompiler, safeNameIdSupplier, true, assumeStrictThis);"
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,88,"this.injector = new FunctionInjector(compiler, safeNameIdSupplier, true);"
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,39,rivate boolean assumeStrictThis = true;
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,45,"ompiler, compiler.getUniqueNameIdSupplier(), true, assumeStrictThis);"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,44,"compiler, compiler.getUniqueNameIdSupplier(), true);"
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,328,ssumeStrictThis = false;
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,335,ssumeStrictThis = true;
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,337,"elperCanInlineReferenceToFunction(CanInlineResult.YES,"
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,338,"function foo(a){return true;}; "" +"
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,339,"function x() { foo.call(null, goo()); }"","
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,340,"foo"", INLINE_BLOCK);"
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,351,ssumeStrictThis = false;
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,357,ssumeStrictThis = true;
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,358,"elperCanInlineReferenceToFunction(CanInlineResult.YES,"
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,359,"function foo(a){return true;}; "" +"
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,360,"function x() { foo.call(bar, goo()); }"","
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,361,"foo"", INLINE_BLOCK);"
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,372,ssumeStrictThis = false;
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,378,ssumeStrictThis = true;
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,379,"elperCanInlineReferenceToFunction(CanInlineResult.YES,"
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,380,"function foo(a){return true;}; "" +"
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,381,"function x() { foo.call(new bar(), goo()); }"","
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,382,"foo"", INLINE_BLOCK);"
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,394,ssumeStrictThis = false;
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,401,ssumeStrictThis = true;
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,402,/ Handle the case of a missing 'this' value in a call.
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,403,"elperCanInlineReferenceToFunction(CanInlineResult.YES,"
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,404,"function foo(){return true;}; "" +"
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,405,"function x() { foo.call(); }"","
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,406,"foo"", INLINE_BLOCK);"
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1329,oolean allowDecomposition) {
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1297,boolean allowDecomposition
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1332,"ompiler, compiler.getUniqueNameIdSupplier(), allowDecomposition,"
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1333,ssumeStrictThis);
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1301,"compiler, compiler.getUniqueNameIdSupplier(), allowDecomposition);"
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1385,"ompiler, compiler.getUniqueNameIdSupplier(), decompose,"
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1386,ssumeStrictThis);
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1353,"compiler, compiler.getUniqueNameIdSupplier(), decompose);"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,30,oolean assumeStrictThis = true;
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,43,ssumeStrictThis = true;
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,54,"llowBlockInlining,"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,55,ssumeStrictThis);
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,52,allowBlockInlining);
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1632,ublic void testInlineWithThis1() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1633,ssumeStrictThis = false;
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1634,"/ If no ""this"" is provided it might need to be coerced to the global"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1635,"/ ""this""."
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1636,"estSame(""function f(){} f.call();"");"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1637,"estSame(""function f(){this} f.call();"");"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1639,ssumeStrictThis = true;
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1640,"/ In strict mode, ""this"" is never coerced so we can use the provided value."
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1641,"est(""function f(){} f.call();"", ""{}"");"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1642,"est(""function f(){this} f.call();"","
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1643,"{void 0;}"");"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1646,ublic void testInlineWithThis2() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1647,"/ ""this"" can always be replaced with ""this"""
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1648,ssumeStrictThis = false;
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1649,"est(""function f(){} f.call(this);"", ""void 0"");"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1651,ssumeStrictThis = true;
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1652,"est(""function f(){} f.call(this);"", ""void 0"");"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1655,ublic void testInlineWithThis3() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1656,ssumeStrictThis = false;
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1657,"/ If no ""this"" is provided it might need to be coerced to the global"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1658,"/ ""this""."
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1659,"estSame(""function f(){} f.call([]);"");"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1661,ssumeStrictThis = true;
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1662,"/ In strict mode, ""this"" is never coerced so we can use the provided value."
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1663,"est(""function f(){} f.call([]);"", ""{}"");"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1666,ublic void testInlineWithThis4() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1667,ssumeStrictThis = false;
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1668,"/ If no ""this"" is provided it might need to be coerced to the global"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1669,"/ ""this""."
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1670,"estSame(""function f(){} f.call(new g);"");"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1672,ssumeStrictThis = true;
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1673,"/ In strict mode, ""this"" is never coerced so we can use the provided value."
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1674,"est(""function f(){} f.call(new g);"","
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1675,"{var JSCompiler_inline_this_0=new g}"");"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1678,ublic void testInlineWithThis5() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1679,ssumeStrictThis = false;
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1680,"/ If no ""this"" is provided it might need to be coerced to the global"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1681,"/ ""this""."
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1682,"estSame(""function f(){} f.call(g());"");"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1684,ssumeStrictThis = true;
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1685,"/ In strict mode, ""this"" is never coerced so we can use the provided value."
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1686,"est(""function f(){} f.call(g());"","
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1687,"{var JSCompiler_inline_this_0=g()}"");"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1690,ublic void testInlineWithThis6() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1691,ssumeStrictThis = false;
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1692,"/ If no ""this"" is provided it might need to be coerced to the global"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1693,"/ ""this""."
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1694,"estSame(""function f(){this} f.call(new g);"");"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1696,ssumeStrictThis = true;
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1697,"/ In strict mode, ""this"" is never coerced so we can use the provided value."
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1698,"est(""function f(){this} f.call(new g);"","
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1699,"{var JSCompiler_inline_this_0=new g;JSCompiler_inline_this_0}"");"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1702,ublic void testInlineWithThis7() {
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1703,ssumeStrictThis = true;
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1704,"/ In strict mode, ""this"" is never coerced so we can use the provided value."
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1705,"est(""function f(a){a=1;this} f.call();"","
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1706,"{var a$$inline_1=void 0; a$$inline_1=1; void 0;}"");"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1707,"est(""function f(a){a=1;this} f.call(x, x);"","
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1708,"{var a$$inline_1=x; a$$inline_1=1; x;}"");"
False,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,42,"ompiler.getUniqueNameIdSupplier(), true, false, true, true);"
True,test/com/google/javascript/jscomp/SpecializeModuleTest.java,test/com/google/javascript/jscomp/SpecializeModuleTest.java,42,"compiler.getUniqueNameIdSupplier(), true, false, true);"

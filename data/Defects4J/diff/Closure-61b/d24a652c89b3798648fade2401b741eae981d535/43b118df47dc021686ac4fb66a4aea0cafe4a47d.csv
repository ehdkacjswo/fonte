is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,24,import com.google.common.collect.Sets;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,712,f (!options.stripTypes.isEmpty() ||
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,713,if (options.getTweakProcessing().shouldStrip() ||
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,714,!options.stripTypes.isEmpty() ||
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,780,if (options.getTweakProcessing().shouldStrip()) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,781,r.enableTweakStripping();
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,515,/** What kind of processing to do for goog.tweak functions. */
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,516,private TweakProcessing tweakProcessing;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,518,"/** Replacements for tweaks. Will be Boolean, Numbers, or Strings */"
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,519,"private Map<String, Object> tweakReplacements;"
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,742,tweakProcessing = TweakProcessing.OFF;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,743,tweakReplacements = Maps.newHashMap();
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,775,return getReplacementsHelper(defineReplacements);
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,779,* Returns the map of tweak replacements.
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,781,"public Map<String, Node> getTweakReplacements() {"
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,782,return getReplacementsHelper(tweakReplacements);
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,786,* Creates a map of String->Node from a map of String->Number/String/Boolean.
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,788,"private static Map<String, Node> getReplacementsHelper("
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,789,"Map<String, Object> source) {"
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,768,"or (Map.Entry<String, Object> entry : defineReplacements.entrySet()) {"
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,791,"for (Map.Entry<String, Object> entry : source.entrySet()) {"
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,842,* Sets the value of the tweak in JS
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,843,* to a boolean literal.
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,845,"public void setTweakToBooleanLiteral(String tweakId, boolean value) {"
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,846,"tweakReplacements.put(tweakId, new Boolean(value));"
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,850,* Sets the value of the tweak in JS to a
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,851,* String literal.
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,853,"public void setTweakToStringLiteral(String tweakId, String value) {"
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,854,"tweakReplacements.put(tweakId, value);"
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,858,* Sets the value of the tweak in JS to a
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,859,* number literal.
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,861,"public void setTweakToNumberLiteral(String tweakId, int value) {"
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,862,"tweakReplacements.put(tweakId, new Integer(value));"
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,866,* Sets the value of the tweak in JS to a
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,867,* number literal.
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,869,"public void setTweakToDoubleLiteral(String tweakId, double value) {"
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,870,"tweakReplacements.put(tweakId, new Double(value));"
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1069,* Sets how goog.tweak calls are processed.
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1071,public void setTweakProcessing(TweakProcessing tweakProcessing) {
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1072,this.tweakProcessing = tweakProcessing;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1075,public TweakProcessing getTweakProcessing() {
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1076,return tweakProcessing;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1146,public static enum TweakProcessing {
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1147,"OFF,  // Do not run the ProcessTweaks pass."
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1148,"CHECK, // Run the pass, but do not strip out the calls."
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1149,STRIP;  // Strip out all calls to goog.tweak.*.
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1151,public boolean isOn() {
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1152,return this != OFF;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1155,public boolean shouldStrip() {
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1156,return this == STRIP;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,291,if (options.getTweakProcessing().isOn()) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,292,checks.add(processTweaks);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1116,/** Process goog.tweak.getTweak() calls. */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1117,"final PassFactory processTweaks = new PassFactory(""processTweaks"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1118,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1119,protected CompilerPass createInternal(final AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1120,return new CompilerPass() {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1121,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1122,"public void process(Node externs, Node jsRoot) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1123,"new ProcessTweaks(compiler,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1124,"options.getTweakProcessing().shouldStrip(),"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1125,"options.getTweakReplacements()).process(externs, jsRoot);"
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,29,import java.util.Map.Entry;
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,30,import java.util.SortedMap;
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,52,private final boolean stripTweaks;
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,53,"private final SortedMap<String, Node> compilerDefaultValueOverrides;"
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,56,* Var name for the map of tweakId->defaultValue of the compiler-specified
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,57,* overrides. Added only when stripTweaks == false.
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,59,private static final String DEFAULT_VALUES_VAR_NAME =
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,60,"""__JSCOMPILER_TWEAK_DEFAULT_VALUE_OVERRIDES"";"
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,177,Node createDefaultValueNode() {
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,178,switch (this) {
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,179,case REGISTER_BOOLEAN:
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,180,return new Node(Token.FALSE);
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,181,case REGISTER_NUMBER:
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,182,return Node.newNumber(0);
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,183,case REGISTER_STRING:
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,184,"return Node.newString("""");"
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,186,throw new IllegalStateException();
False,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,175,rocessTweaks(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,199,"ProcessTweaks(AbstractCompiler compiler, boolean stripTweaks,"
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,200,"Map<String, Node> compilerDefaultValueOverrides) {"
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,202,this.stripTweaks = stripTweaks;
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,203,// Having the map sorted is required for the unit tests to be deterministic.
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,204,this.compilerDefaultValueOverrides = Maps.newTreeMap();
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,205,this.compilerDefaultValueOverrides.putAll(compilerDefaultValueOverrides);
False,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,181,ollectTweaks(root);
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,210,"Map<String, TweakInfo> tweakInfos = collectTweaks(root);"
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,211,applyCompilerDefaultValueOverrides(tweakInfos);
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,213,boolean changed = false;
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,215,if (stripTweaks) {
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,216,changed = stripAllCalls(tweakInfos);
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,217,} else if (!compilerDefaultValueOverrides.isEmpty()) {
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,218,// Pass the compiler default value overrides to the JS through a specially
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,219,// named variable.
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,220,Node varNode = createCompilerDefaultValueOverridesVarNode(
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,221,root.getFirstChild());
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,222,root.getFirstChild().addChildToFront(varNode);
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,223,changed = true;
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,225,if (changed) {
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,226,compiler.reportCodeChange();
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,231,"* Removes all CALL nodes in the given TweakInfos, replacing calls to getter"
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,232,* functions with the tweak's default value.
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,234,"private boolean stripAllCalls(Map<String, TweakInfo> tweakInfos) {"
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,235,for (TweakInfo tweakInfo : tweakInfos.values()) {
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,236,boolean isRegistered = tweakInfo.isRegistered();
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,237,for (TweakFunctionCall functionCall : tweakInfo.functionCalls) {
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,238,Node callNode = functionCall.callNode;
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,239,Node parent = callNode.getParent();
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,240,if (functionCall.tweakFunc.isGetterFunction()) {
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,241,Node newValue;
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,242,if (isRegistered) {
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,243,newValue = tweakInfo.getDefaultValueNode().cloneNode();
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,244,} else {
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,245,"// When we find a getter of an unregistered tweak, there has"
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,246,"// already been a warning about it, so now just use a default"
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,247,// value when stripping.
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,248,TweakFunction registerFunction =
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,249,functionCall.tweakFunc.registerFunction;
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,250,newValue = registerFunction.createDefaultValueNode();
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,252,"parent.replaceChild(callNode, newValue);"
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,253,} else {
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,254,Node voidZeroNode = new Node(Token.VOID)
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,255,.copyInformationFrom(callNode);
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,256,voidZeroNode.addChildToBack(Node.newNumber(0)
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,257,.copyInformationFrom(callNode));
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,258,"parent.replaceChild(callNode, voidZeroNode);"
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,262,return !tweakInfos.isEmpty();
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,266,* Creates the var __JSCOMPILER_TWEAK_DEFAULT_VALUE_OVERRIDES = { ... };
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,267,* snippet that is prepended when there are compiler overrides and tweaks
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,268,* are not stripped.
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,270,private Node createCompilerDefaultValueOverridesVarNode(
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,271,Node sourceInformationNode) {
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,272,Node varNode = new Node(Token.VAR)
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,273,.copyInformationFrom(sourceInformationNode);
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,274,"Node nameNode = Node.newString(Token.NAME, DEFAULT_VALUES_VAR_NAME)"
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,275,.copyInformationFrom(sourceInformationNode);
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,276,Node objNode = new Node(Token.OBJECTLIT)
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,277,.copyInformationFrom(sourceInformationNode);
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,278,varNode.addChildToBack(nameNode);
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,279,nameNode.addChildToBack(objNode);
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,280,"for (Entry<String, Node> entry : compilerDefaultValueOverrides.entrySet()) {"
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,281,Node objKeyNode = Node.newString(entry.getKey())
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,282,.copyInformationFrom(sourceInformationNode);
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,283,Node objValueNode = entry.getValue().cloneNode()
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,284,.copyInformationFrom(sourceInformationNode);
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,285,objKeyNode.addChildToBack(objValueNode);
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,286,objNode.addChildToBack(objKeyNode);
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,288,return varNode;
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,291,/** Sets the default values of tweaks based on compiler options. */
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,292,private void applyCompilerDefaultValueOverrides(
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,293,"Map<String, TweakInfo> tweakInfos) {"
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,294,"for (Entry<String, Node> entry : compilerDefaultValueOverrides.entrySet()) {"
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,295,String tweakId = entry.getKey();
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,296,TweakInfo tweakInfo = tweakInfos.get(tweakId);
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,297,if (tweakInfo == null) {
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,298,"compiler.report(JSError.make(UNKNOWN_TWEAK_WARNING, tweakId));"
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,299,} else {
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,300,tweakInfo.defaultValueNode = entry.getValue();
False,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,384,f (this.defaultValueNode == null) {
False,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,385,his.defaultValueNode = defaultValueNode;
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,523,Node getDefaultValueNode() {
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,524,Preconditions.checkState(isRegistered());
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,525,// Use calls to goog.tweak.overrideDefaultValue() first.
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,526,if (defaultValueNode != null) {
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,527,return defaultValueNode;
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,529,// Use the value passed to the register function next.
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,530,if (registerCall.valueNode != null) {
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,531,return registerCall.valueNode;
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,533,"// Otherwise, use the default value for the tweak's type."
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,534,return registerCall.tweakFunc.createDefaultValueNode();
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,74,his.stripTypes = stripTypes;
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,75,his.stripNameSuffixes = stripNameSuffixes;
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,76,his.stripTypePrefixes = stripTypePrefixes;
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,77,his.stripNamePrefixes = stripNamePrefixes;
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,74,this.stripTypes = Sets.newHashSet(stripTypes);
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,75,this.stripNameSuffixes = Sets.newHashSet(stripNameSuffixes);
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,76,this.stripTypePrefixes = Sets.newHashSet(stripTypePrefixes);
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,77,this.stripNamePrefixes = Sets.newHashSet(stripNamePrefixes);
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,82,* Enables stripping of goog.tweak functions.
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,84,public void enableTweakStripping() {
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,85,"stripTypes.add(""goog.tweak"");"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,19,import com.google.common.collect.Maps;
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,20,import com.google.javascript.rhino.Node;
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,21,import com.google.javascript.rhino.Token;
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,23,import java.util.Map;
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,30,"Map<String, Node> defaultValueOverrides;"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,31,boolean stripTweaks;
False,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,25,"uper(""var externMethod;"");"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,34,"super(""function alert(arg) {}"");"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,37,@Override
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,38,public void setUp() throws Exception {
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,39,super.setUp();
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,40,defaultValueOverrides = Maps.newHashMap();
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,41,stripTweaks = false;
False,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,30,eturn new ProcessTweaks(compiler);
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,46,"return new ProcessTweaks(compiler, stripTweaks, defaultValueOverrides);"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,175,public void testStrippingWithImplicitDefaultValues() {
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,176,stripTweaks = true;
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,177,"test(""goog.tweak.registerNumber('TweakA', 'desc');"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,178,"""goog.tweak.registerBoolean('TweakB', 'desc');"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,179,"""goog.tweak.registerString('TweakC', 'desc');"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,180,"""alert(goog.tweak.getNumber('TweakA'));"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,181,"""alert(goog.tweak.getBoolean('TweakB'));"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,182,"""alert(goog.tweak.getString('TweakC'));"","
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,183,"""void 0; void 0; void 0; alert(0); alert(false); alert('')"");"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,186,public void testStrippingWithExplicitDefaultValues() {
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,187,stripTweaks = true;
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,188,"test(""goog.tweak.registerNumber('TweakA', 'desc', 5);"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,189,"""goog.tweak.registerBoolean('TweakB', 'desc', true);"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,190,"""goog.tweak.registerString('TweakC', 'desc', '!');"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,191,"""alert(goog.tweak.getNumber('TweakA'));"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,192,"""alert(goog.tweak.getBoolean('TweakB'));"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,193,"""alert(goog.tweak.getString('TweakC'));"","
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,194,"""void 0; void 0; void 0; alert(5); alert(true); alert('!')"");"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,197,public void testStrippingWithInCodeOverrides() {
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,198,stripTweaks = true;
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,199,"test(""goog.tweak.overrideDefaultValue('TweakA', 5);"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,200,"""goog.tweak.overrideDefaultValue('TweakB', true);"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,201,"""goog.tweak.overrideDefaultValue('TweakC', 'bar');"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,202,"""goog.tweak.registerNumber('TweakA', 'desc');"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,203,"""goog.tweak.registerBoolean('TweakB', 'desc');"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,204,"""goog.tweak.registerString('TweakC', 'desc', 'foo');"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,205,"""alert(goog.tweak.getNumber('TweakA'));"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,206,"""alert(goog.tweak.getBoolean('TweakB'));"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,207,"""alert(goog.tweak.getString('TweakC'));"","
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,208,"""void 0; void 0; void 0; void 0; void 0; void 0;"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,209,"""alert(5); alert(true); alert('bar');"");"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,212,public void testStrippingWithUnregisteredTweak1() {
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,213,stripTweaks = true;
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,214,"test(""alert(goog.tweak.getNumber('TweakA'));"","
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,215,"""alert(0)"", null, ProcessTweaks.UNKNOWN_TWEAK_WARNING);"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,218,public void testStrippingWithUnregisteredTweak2() {
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,219,stripTweaks = true;
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,220,"test(""alert(goog.tweak.getBoolean('TweakB'))"","
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,221,"""alert(false)"", null, ProcessTweaks.UNKNOWN_TWEAK_WARNING);"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,224,public void testStrippingWithUnregisteredTweak3() {
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,225,stripTweaks = true;
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,226,"test(""alert(goog.tweak.getString('TweakC'))"","
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,227,"""alert('')"", null, ProcessTweaks.UNKNOWN_TWEAK_WARNING);"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,230,public void testOverridesWithStripping() {
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,231,stripTweaks = true;
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,232,"defaultValueOverrides.put(""TweakA"", Node.newNumber(1));"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,233,"defaultValueOverrides.put(""TweakB"", new Node(Token.FALSE));"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,234,"defaultValueOverrides.put(""TweakC"", Node.newString(""!""));"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,235,"test(""goog.tweak.overrideDefaultValue('TweakA', 5);"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,236,"""goog.tweak.overrideDefaultValue('TweakC', 'bar');"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,237,"""goog.tweak.registerNumber('TweakA', 'desc');"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,238,"""goog.tweak.registerBoolean('TweakB', 'desc', true);"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,239,"""goog.tweak.registerString('TweakC', 'desc', 'foo');"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,240,"""alert(goog.tweak.getNumber('TweakA'));"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,241,"""alert(goog.tweak.getBoolean('TweakB'));"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,242,"""alert(goog.tweak.getString('TweakC'));"","
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,243,"""void 0; void 0; void 0; void 0; void 0; "" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,244,"""alert(1); alert(false); alert('!')"");"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,247,public void testCompilerOverridesNoStripping() {
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,248,"defaultValueOverrides.put(""TweakA"", Node.newNumber(1));"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,249,"defaultValueOverrides.put(""TweakB"", new Node(Token.FALSE));"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,250,"defaultValueOverrides.put(""TweakC"", Node.newString(""!""));"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,251,"test(""goog.tweak.registerNumber('TweakA', 'desc');"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,252,"""goog.tweak.registerBoolean('TweakB', 'desc', true);"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,253,"""goog.tweak.registerString('TweakC', 'desc', 'foo')"","
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,254,"""var __JSCOMPILER_TWEAK_DEFAULT_VALUE_OVERRIDES ="" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,255,"""  { 'TweakA': 1, 'TweakB': false, 'TweakC': '!' };"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,256,"""goog.tweak.registerNumber('TweakA', 'desc');"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,257,"""goog.tweak.registerBoolean('TweakB', 'desc', true);"" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,258,"""goog.tweak.registerString('TweakC', 'desc', 'foo')"");"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,261,public void testUnknownCompilerOverride() {
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,262,allowSourcelessWarnings();
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,263,"defaultValueOverrides.put(""TweakA"", Node.newString(""!""));"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,264,"test("""","
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,265,"""var __JSCOMPILER_TWEAK_DEFAULT_VALUE_OVERRIDES ="" +"
True,test/com/google/javascript/jscomp/ProcessTweaksTest.java,test/com/google/javascript/jscomp/ProcessTweaksTest.java,266,"""  { 'TweakA': '!' };"", null, ProcessTweaks.UNKNOWN_TWEAK_WARNING);"

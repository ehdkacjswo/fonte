is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,19,import com.google.common.annotations.VisibleForTesting;
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,490,"* Creates a variable reference in a given script file name, used in tests."
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,492,* @param sourceName The name of the script file.
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,493,* @return The created reference.
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,495,@VisibleForTesting
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,496,static Reference createRefForTest(String sourceName) {
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,497,"return new Reference(new Node(Token.NAME), null, null, null, null,"
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,498,sourceName);
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,2,* Copyright 2011 The Closure Compiler Authors.
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,19,import static com.google.javascript.jscomp.ReferenceCollectingCallback.Reference.createRefForTest;
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,21,import com.google.common.collect.Lists;
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,22,import com.google.common.collect.Maps;
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,23,import com.google.javascript.jscomp.ReferenceCollectingCallback.Reference;
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,24,import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection;
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,25,import com.google.javascript.jscomp.Scope.Var;
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,26,import com.google.javascript.rhino.Node;
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,27,import com.google.javascript.rhino.Token;
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,28,import com.google.javascript.rhino.jstype.ObjectType;
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,30,import junit.framework.TestCase;
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,32,import java.util.Map;
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,35,* Unit-tests for the GlobalVarReferenceMap class.
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,37,* @author bashir@google.com (Bashir Sadjad)
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,39,public class GlobalVarReferenceMapTest extends TestCase {
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,41,private static final CompilerInput INPUT1 =
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,42,"new CompilerInput(null, ""input1"", false);"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,43,private static final CompilerInput INPUT2 =
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,44,"new CompilerInput(null, ""input2"", false);"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,45,private static final CompilerInput INPUT3 =
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,46,"new CompilerInput(null, ""input3"", false);"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,48,private final GlobalVarReferenceMap map = new GlobalVarReferenceMap(
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,49,"Lists.newArrayList(INPUT1, INPUT2, INPUT3));"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,50,"private final Map<Var, ReferenceCollection> globalMap = Maps.newHashMap();"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,51,private final Node root = new Node(Token.BLOCK);
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,52,"private final Scope globalScope = new Scope(root, (ObjectType) null);"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,53,Node scriptRoot = new Node(Token.SCRIPT);
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,55,// In the initial setUp we have 3 references to var1 (one in each input) and
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,56,// 2 references to var2 (in first and third inputs).
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,57,"private static final String VAR1 = ""var1"";"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,58,"private static final String VAR2 = ""var2"";"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,59,private final ReferenceCollection var1Refs = new ReferenceCollection();
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,60,private final ReferenceCollection var2Refs = new ReferenceCollection();
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,61,private final Reference var1In1Ref =  createRefForTest(INPUT1.getName());
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,62,private final Reference var1In2Ref =  createRefForTest(INPUT2.getName());
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,63,private final Reference var1In3Ref =  createRefForTest(INPUT3.getName());
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,64,private final Reference var2In1Ref =  createRefForTest(INPUT1.getName());
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,65,private final Reference var2In3Ref =  createRefForTest(INPUT3.getName());
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,67,@Override
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,68,protected void setUp() throws Exception {
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,69,super.setUp();
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,70,"globalScope.declare(VAR1, new Node(Token.NAME), null, INPUT1);"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,71,"var1Refs.references = Lists.newArrayList(var1In1Ref,"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,72,"var1In2Ref, var1In3Ref);"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,73,"globalScope.declare(VAR2, new Node(Token.NAME), null, INPUT1);"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,74,"var2Refs.references = Lists.newArrayList(var2In1Ref, var2In3Ref);"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,75,// We recreate these two ReferenceCollection to keep var1Refs and
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,76,// var2Refs intact in update operations for comparison in the tests.
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,77,ReferenceCollection var1TempRefs = new ReferenceCollection();
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,78,var1TempRefs.references = Lists.newArrayList(var1Refs.references);
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,79,ReferenceCollection var2TempRefs = new ReferenceCollection();
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,80,var2TempRefs.references = Lists.newArrayList(var2Refs.references);
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,81,"globalMap.put(globalScope.getVar(VAR1), var1TempRefs);"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,82,"globalMap.put(globalScope.getVar(VAR2), var2TempRefs);"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,83,"map.updateGlobalVarReferences(globalMap, root);"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,84,"scriptRoot.putProp(Node.SOURCENAME_PROP, INPUT2.getName());"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,87,/** Tests whether the global variable references are set/reset properly. */
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,88,public void testUpdateGlobalVarReferences_ResetReferences() {
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,89,// First we check the original setup then reset again.
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,90,for (int i = 0; i < 2; i++) {
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,91,"assertEquals(var1Refs.references,"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,92,map.getReferences(globalScope.getVar(VAR1)).references);
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,93,"assertEquals(var2Refs.references,"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,94,map.getReferences(globalScope.getVar(VAR2)).references);
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,95,"map.updateGlobalVarReferences(globalMap, root);"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,99,/** Removes all variable references in second script. */
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,100,public void testUpdateGlobalVarReferences_UpdateScriptNoRef() {
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,101,"Map<Var, ReferenceCollection> scriptMap = Maps.newHashMap();"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,102,"map.updateGlobalVarReferences(scriptMap, scriptRoot);"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,103,ReferenceCollection refs = map.getReferences(globalScope.getVar(VAR2));
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,104,"assertEquals(var2Refs.references, refs.references);"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,105,refs = map.getReferences(globalScope.getVar(VAR1));
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,106,"assertEquals(2, refs.references.size());"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,107,"assertEquals(var1Refs.references.get(0), refs.references.get(0));"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,108,"assertEquals(var1Refs.references.get(2), refs.references.get(1));"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,111,/** Changes variable references in second script. */
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,112,public void testUpdateGlobalVarReferences_UpdateScriptNewRefs() {
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,113,"Map<Var, ReferenceCollection> scriptMap = Maps.newHashMap();"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,114,ReferenceCollection newVar1Refs = new ReferenceCollection();
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,115,Reference newVar1In2Ref = createRefForTest(INPUT2.getName());
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,116,newVar1Refs.references = Lists.newArrayList(newVar1In2Ref);
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,117,ReferenceCollection newVar2Refs = new ReferenceCollection();
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,118,Reference newVar2In2Ref = createRefForTest(INPUT2.getName());
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,119,newVar2Refs.references = Lists.newArrayList(newVar2In2Ref);
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,120,"scriptMap.put(globalScope.getVar(VAR1), newVar1Refs);"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,121,"scriptMap.put(globalScope.getVar(VAR2), newVar2Refs);"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,122,"map.updateGlobalVarReferences(scriptMap, scriptRoot);"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,123,ReferenceCollection refs = map.getReferences(globalScope.getVar(VAR1));
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,124,"assertEquals(3, refs.references.size());"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,125,"assertEquals(var1Refs.references.get(0), refs.references.get(0));"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,126,"assertEquals(newVar1In2Ref, refs.references.get(1));"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,127,"assertEquals(var1Refs.references.get(2), refs.references.get(2));"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,128,refs = map.getReferences(globalScope.getVar(VAR2));
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,129,"assertEquals(3, refs.references.size());"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,130,"assertEquals(var2Refs.references.get(0), refs.references.get(0));"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,131,"assertEquals(newVar2In2Ref, refs.references.get(1));"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,132,"assertEquals(var2Refs.references.get(1), refs.references.get(2));"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,135,/** Changes variable references in second script. */
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,136,public void testUpdateGlobalVarReferences_UpdateScriptNewVar() {
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,137,"Map<Var, ReferenceCollection> scriptMap = Maps.newHashMap();"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,138,"final String var3 = ""var3"";"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,139,"globalScope.declare(var3, new Node(Token.NAME), null, INPUT2);"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,140,ReferenceCollection newVar3Refs = new ReferenceCollection();
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,141,Reference newVar3In2Ref = createRefForTest(INPUT2.getName());
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,142,newVar3Refs.references = Lists.newArrayList(newVar3In2Ref);
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,143,"scriptMap.put(globalScope.getVar(var3), newVar3Refs);"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,144,"map.updateGlobalVarReferences(scriptMap, scriptRoot);"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,145,ReferenceCollection refs = map.getReferences(globalScope.getVar(var3));
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,146,"assertEquals(1, refs.references.size());"
True,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,test/com/google/javascript/jscomp/GlobalVarReferenceMapTest.java,147,"assertEquals(newVar3In2Ref, refs.references.get(0));"

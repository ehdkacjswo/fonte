is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/AstChangeProxy.java,src/com/google/javascript/jscomp/AstChangeProxy.java,114,newChild.copyInformationFrom(node);
True,src/com/google/javascript/jscomp/AstChangeProxy.java,src/com/google/javascript/jscomp/AstChangeProxy.java,123,newChild.copyInformationFrom(node);
False,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,306," @param injectionPoint The before which extracted expression, whould be"
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,306,"* @param injectionPoint The before which extracted expression, would be"
False,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,327,ode trueExpr = new Node(Token.BLOCK);
False,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,328,ode falseExpr = new Node(Token.BLOCK);
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,327,Node trueExpr = new Node(Token.BLOCK).copyInformationFrom(expr);
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,328,Node falseExpr = new Node(Token.BLOCK).copyInformationFrom(expr);
False,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,333,"rueExpr.addChildToFront(new Node(Token.EXPR_RESULT,"
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,333,trueExpr.addChildToFront(NodeUtil.newExpr(
False,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,335,"alseExpr.addChildToFront(new Node(Token.EXPR_RESULT,"
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,335,falseExpr.addChildToFront(NodeUtil.newExpr(
False,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,341,"rueExpr.addChildToFront(new Node(Token.EXPR_RESULT,"
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,341,trueExpr.addChildToFront(NodeUtil.newExpr(
False,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,347,"alseExpr.addChildToFront(new Node(Token.EXPR_RESULT,"
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,347,falseExpr.addChildToFront(NodeUtil.newExpr(
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,361,ifNode.copyInformationFrom(expr);
False,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,363,"ode tempVarNode = new Node(Token.VAR,"
False,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,364,"ode.newString(Token.NAME, tempName));"
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,364,"Node tempVarNode = NodeUtil.newVarNode(tempName, null)"
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,365,.copyInformationFromForTree(expr);
False,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,397,xpr);
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,398,expr).copyInformationFromForTree(expr);
False,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,443,"ode replacementValueNode = Node.newString(Token.NAME, tempName);"
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,444,"Node replacementValueNode = Node.newString(Token.NAME, tempName)"
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,445,.copyInformationFrom(expr);
False,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,474,"ode tempNameNode = Node.newString(Token.NAME, tempName);"
False,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,475,empNameNode.addChildToBack(tempNameValue);
False,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,476,"ode tempVarNode = new Node(Token.VAR, tempNameNode);"
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,476,"Node tempVarNode = NodeUtil.newVarNode(tempName, tempNameValue);"
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,105,"rgMap.put(fnArg.getString(), NodeUtil.newUndefinedNode());"
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,105,Node srcLocation = callNode;
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,106,"argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));"
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,231,ewExpression = NodeUtil.newUndefinedNode();
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,231,Node srcLocation = block;
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,232,newExpression = NodeUtil.newUndefinedNode(srcLocation);
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,451,"ewBlock.addChildrenToFront(NodeUtil.newVarNode(resultName, null));"
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,452,newBlock.addChildrenToFront(
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,453,"NodeUtil.newVarNode(resultName, null)"
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,454,.copyInformationFromForTree(callNode));
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,648,"/ Note: Unlike block inlining, there it is not possible that a"
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,651,"// Note: Unlike block inlining, there it is not possible that a"
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,126,ame.addChildToBack(NodeUtil.newUndefinedNode());
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,126,Node srcLocation = name;
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,127,name.addChildToBack(NodeUtil.newUndefinedNode(srcLocation));
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,195,"ode newNode = NodeUtil.newVarNode(name, newValue);"
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,196,"Node newNode = NodeUtil.newVarNode(name, newValue)"
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,197,.copyInformationFromForTree(newValue);
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,264,ode label = new Node(Token.LABEL);
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,265,"ode name = Node.newString(Token.LABEL_NAME, labelName);"
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,266,Node label = new Node(Token.LABEL).copyInformationFrom(block);
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,267,"Node name = Node.newString(Token.LABEL_NAME, labelName)"
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,268,.copyInformationFrom(block);
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,269,ode newRoot = new Node(Token.BLOCK);
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,272,Node newRoot = new Node(Token.BLOCK).copyInformationFrom(block);
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,298,ode retVal = NodeUtil.newUndefinedNode();
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,302,Node srcLocation = node;
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,303,Node retVal = NodeUtil.newUndefinedNode(srcLocation);
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,305,resultNode.copyInformationFromForTree(node);
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,327,resultNode.copyInformationFromForTree(ret);
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,364,etVal = NodeUtil.newUndefinedNode();
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,371,Node srcLocation = node;
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,372,retVal = NodeUtil.newUndefinedNode(srcLocation);
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,414,breakNode.copyInformationFromForTree(current);
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,417,resultNode.copyInformationFromForTree(current);
False,src/com/google/javascript/jscomp/InlineGetters.java,src/com/google/javascript/jscomp/InlineGetters.java,258,"arent.replaceChild(call, new Node(Token.VOID, Node.newNumber(0)));"
True,src/com/google/javascript/jscomp/InlineGetters.java,src/com/google/javascript/jscomp/InlineGetters.java,258,Node srcLocation = call;
True,src/com/google/javascript/jscomp/InlineGetters.java,src/com/google/javascript/jscomp/InlineGetters.java,259,"parent.replaceChild(call, NodeUtil.newUndefinedNode(srcLocation));"
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,242,alue = NodeUtil.newUndefinedNode()
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,243,copyInformationFromForTree(declaration.getNameNode());
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,242,Node srcLocation = declaration.getNameNode();
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,243,value = NodeUtil.newUndefinedNode(srcLocation);
False,src/com/google/javascript/jscomp/LineNumberCheck.java,src/com/google/javascript/jscomp/LineNumberCheck.java,33,"No source line associated with {0}"");"
True,src/com/google/javascript/jscomp/LineNumberCheck.java,src/com/google/javascript/jscomp/LineNumberCheck.java,33,"""No source location information associated with {0}.\n"" +"
True,src/com/google/javascript/jscomp/LineNumberCheck.java,src/com/google/javascript/jscomp/LineNumberCheck.java,34,"""Most likely a Node has been created with settings the source file "" +"
True,src/com/google/javascript/jscomp/LineNumberCheck.java,src/com/google/javascript/jscomp/LineNumberCheck.java,35,"""and line/column location.  Usually this is done using "" +"
True,src/com/google/javascript/jscomp/LineNumberCheck.java,src/com/google/javascript/jscomp/LineNumberCheck.java,36,"""Node.copyInformationFrom and supplying a Node from the source AST."");"
True,src/com/google/javascript/jscomp/LineNumberCheck.java,src/com/google/javascript/jscomp/LineNumberCheck.java,45,public void setCheckSubTree(Node root) {
True,src/com/google/javascript/jscomp/LineNumberCheck.java,src/com/google/javascript/jscomp/LineNumberCheck.java,46,requiresLineNumbers = true;
True,src/com/google/javascript/jscomp/LineNumberCheck.java,src/com/google/javascript/jscomp/LineNumberCheck.java,48,"NodeTraversal.traverse(compiler, root, this);"
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,31,mport com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge;
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,33,mport com.google.javascript.jscomp.graph.FixedPointGraphTraversal.EdgeCallback;
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,33,import com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge;
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,34,import com.google.javascript.jscomp.graph.FixedPointGraphTraversal.EdgeCallback;
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,308,f (parent.getFirstChild() ==
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,309,arent.getLastChild()) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,310,"eplaceWithRhs(containingNode, parent);"
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,311, else {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,312,/ Break up var expression into the parts before the
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,313,/ current declaration and the ones after.  Replace
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,314,"/ the current declaration with its RHS, after"
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,315,/ removing subexpressions with no side effects.
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,316,/ Replacement nodes should end up between the two
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,317,/ sets of variable declarations.
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,318,ist<Node> earlyChildren = Lists.newArrayList();
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,319,ist<Node> lateChildren = Lists.newArrayList();
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,320,oolean seen = false;
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,321,or (Node child : parent.children()) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,322,f (child == node) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,323,een = true;
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,324,ontinue;
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,327,f (seen) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,328,ateChildren.add(child);
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,329, else {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,330,arlyChildren.add(child);
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,334,f (!earlyChildren.isEmpty() && !lateChildren.isEmpty()) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,335,ode earlyDecls = new Node(Token.VAR);
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,336,or (Node child : earlyChildren) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,337,arent.removeChild(child);
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,338,arlyDecls.addChildToBack(child);
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,340,"ontainingNode.addChildBefore(earlyDecls, parent);"
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,343,ode currDecl = new Node(Token.VAR);
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,344,arent.removeChild(node);
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,345,urrDecl.addChildToBack(node);
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,346,f (earlyChildren.isEmpty() || !lateChildren.isEmpty()) {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,347,"ontainingNode.addChildBefore(currDecl, parent);"
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,348, else {
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,349,"ontainingNode.addChildAfter(currDecl, parent);"
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,351,"eplaceWithRhs(containingNode, currDecl);"
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,308,Preconditions.checkState(parent.hasOneChild());
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,309,"replaceWithRhs(containingNode, parent);"
False,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1530,"eplacements.add(new Node(Token.EXPR_RESULT, subexpression));"
True,src/com/google/javascript/jscomp/NameAnalyzer.java,src/com/google/javascript/jscomp/NameAnalyzer.java,1487,replacements.add(NodeUtil.newExpr(subexpression));
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1741,tatic Node newUndefinedNode() {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1741,static Node newUndefinedNode(Node srcReferenceNode) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1743,"eturn new Node(Token.VOID, Node.newNumber(0));"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1743,"Node node = new Node(Token.VOID, Node.newNumber(0));"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1744,if (srcReferenceNode != null) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1745,node.copyInformationFromForTree(srcReferenceNode);
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1747,return node;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1752,odeName.addChildrenToBack(value);
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1756,Preconditions.checkState(value.getNext() == null);
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1757,nodeName.addChildToBack(value);
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1758,nodeName.copyInformationFrom(value);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1754,"ode var = new Node(Token.VAR, nodeName);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1760,"Node var = new Node(Token.VAR, nodeName)"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1761,.copyInformationFrom(nodeName);
True,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,469,"private void validateSourceInfo(Compiler compiler, Node subtree) {"
True,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,470,(new LineNumberCheck(compiler)).setCheckSubTree(subtree);
True,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,471,// Source information problems are reported as compiler errors.
True,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,472,if (compiler.getErrorCount() != 0) {
True,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,473,"String msg = ""Error encountered: "";"
True,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,474,for (JSError err : compiler.getErrors()) {
True,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,475,"msg += err.toString() + ""\n"";"
True,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,477,"assertTrue(msg, compiler.getErrorCount() == 0);"
True,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,509,"validateSourceInfo(compiler, tree);"
True,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,551,"validateSourceInfo(compiler, tree);"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1238,"private void validateSourceInfo(Compiler compiler, Node subtree) {"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1239,(new LineNumberCheck(compiler)).setCheckSubTree(subtree);
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1240,// Source information problems are reported as compiler errors.
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1241,if (compiler.getErrorCount() != 0) {
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1242,"String msg = ""Error encountered: "";"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1243,for (JSError err : compiler.getErrors()) {
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1244,"msg += err.toString() + ""\n"";"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1246,"assertTrue(msg, compiler.getErrorCount() == 0);"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1312,"validateSourceInfo(compiler, result);"
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,20,import com.google.common.base.Preconditions;
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,183,"private void validateSourceInfo(Compiler compiler, Node subtree) {"
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,184,(new LineNumberCheck(compiler)).setCheckSubTree(subtree);
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,185,// Source information problems are reported as compiler errors.
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,186,if (compiler.getErrorCount() != 0) {
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,187,"String msg = ""Error encountered: "";"
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,188,for (JSError err : compiler.getErrors()) {
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,189,"msg += err.toString() + ""\n"";"
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,191,"assertTrue(msg, compiler.getErrorCount() == 0);"
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,204,Preconditions.checkState(compiler.getErrorCount() == 0);
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,207,Preconditions.checkState(compiler.getErrorCount() == 0);
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,228,"validateSourceInfo(compiler, result);"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,39,super.enableLineNumberCheck(true);
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,25,@Override
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,26,protected void setUp() throws Exception {
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,27,super.setUp();
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,28,super.enableLineNumberCheck(true);
True,test/com/google/javascript/jscomp/NameAnalyzerTest.java,test/com/google/javascript/jscomp/NameAnalyzerTest.java,36,@Override
True,test/com/google/javascript/jscomp/NameAnalyzerTest.java,test/com/google/javascript/jscomp/NameAnalyzerTest.java,37,protected void setUp() {
True,test/com/google/javascript/jscomp/NameAnalyzerTest.java,test/com/google/javascript/jscomp/NameAnalyzerTest.java,38,super.enableNormalize();
True,test/com/google/javascript/jscomp/NameAnalyzerTest.java,test/com/google/javascript/jscomp/NameAnalyzerTest.java,39,super.enableLineNumberCheck(true);
False,test/com/google/javascript/jscomp/NameAnalyzerTest.java,test/com/google/javascript/jscomp/NameAnalyzerTest.java,332,"var window;"" +"
True,test/com/google/javascript/jscomp/NameAnalyzerTest.java,test/com/google/javascript/jscomp/NameAnalyzerTest.java,338,"""/** @suppress {duplicate} */ var window;"" +"
False,test/com/google/javascript/jscomp/NameAnalyzerTest.java,test/com/google/javascript/jscomp/NameAnalyzerTest.java,338,"var document,window,klass;"" +"
True,test/com/google/javascript/jscomp/NameAnalyzerTest.java,test/com/google/javascript/jscomp/NameAnalyzerTest.java,344,"""/** @suppress {duplicate} */ var document;\n"" +"
True,test/com/google/javascript/jscomp/NameAnalyzerTest.java,test/com/google/javascript/jscomp/NameAnalyzerTest.java,345,"""/** @suppress {duplicate} */ var window;\n"" +"
True,test/com/google/javascript/jscomp/NameAnalyzerTest.java,test/com/google/javascript/jscomp/NameAnalyzerTest.java,346,"""var klass;\n"" +"
False,test/com/google/javascript/jscomp/NameAnalyzerTest.java,test/com/google/javascript/jscomp/NameAnalyzerTest.java,598,"var j = 0; for (f(), g(), h(); 0; j++);"");"
True,test/com/google/javascript/jscomp/NameAnalyzerTest.java,test/com/google/javascript/jscomp/NameAnalyzerTest.java,606,"""var j = 0; f(); g(); h(); for (; 0; j++);"");"
False,test/com/google/javascript/jscomp/NameAnalyzerTest.java,test/com/google/javascript/jscomp/NameAnalyzerTest.java,603,"var j = 0; for (f(), g(), h(); 0; j++);"");"
True,test/com/google/javascript/jscomp/NameAnalyzerTest.java,test/com/google/javascript/jscomp/NameAnalyzerTest.java,611,"""var j = 0; f(); g(); h(); for (; 0; j++);"");"
False,test/com/google/javascript/jscomp/NameAnalyzerTest.java,test/com/google/javascript/jscomp/NameAnalyzerTest.java,716,"/ TODO(user) Make NameAnalyzer smarter so it can remove ""Class""."
False,test/com/google/javascript/jscomp/NameAnalyzerTest.java,test/com/google/javascript/jscomp/NameAnalyzerTest.java,717,"estSame(""var a = 1;"" +"
False,test/com/google/javascript/jscomp/NameAnalyzerTest.java,test/com/google/javascript/jscomp/NameAnalyzerTest.java,718,"var Class = function() {}; "" +"
False,test/com/google/javascript/jscomp/NameAnalyzerTest.java,test/com/google/javascript/jscomp/NameAnalyzerTest.java,719,"while (Class.property_ = a);"");"
True,test/com/google/javascript/jscomp/NameAnalyzerTest.java,test/com/google/javascript/jscomp/NameAnalyzerTest.java,724,"test(""var a = 1;"" +"
True,test/com/google/javascript/jscomp/NameAnalyzerTest.java,test/com/google/javascript/jscomp/NameAnalyzerTest.java,725,"""var Class = function() {}; "" +"
True,test/com/google/javascript/jscomp/NameAnalyzerTest.java,test/com/google/javascript/jscomp/NameAnalyzerTest.java,726,"""while (Class.property_ = a);"","
True,test/com/google/javascript/jscomp/NameAnalyzerTest.java,test/com/google/javascript/jscomp/NameAnalyzerTest.java,727,"""var a = 1; for (;a;) {}"");"

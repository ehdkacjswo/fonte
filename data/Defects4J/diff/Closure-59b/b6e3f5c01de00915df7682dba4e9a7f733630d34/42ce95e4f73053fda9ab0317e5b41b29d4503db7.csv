is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1847,"/** Shadowing */ false,"
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,45," RenameVars renames all the variables names into short names, to reduce"
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,46, code size and also to obfuscate the code.
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,45,"* RenameVars renames all the variables names into short names, to reduce code"
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,46,* size and also to obfuscate the code.
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,92,// TODO(user): The input seems useless.
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,96,nt count;                          // Number of times this is referenced
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,97,int count; // Number of times this is referenced
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,133,private final boolean shouldShadow;
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,135,"rivate static final String LOCAL_VAR_PREFIX = ""L "";"
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,139,// TODO(user): No longer needs to be public when shadowing doesn't use it.
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,140,"public static final String LOCAL_VAR_PREFIX = ""L "";"
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,137,"enameVars(AbstractCompiler compiler,"
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,138,"tring prefix,"
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,139,"oolean localRenamingOnly,"
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,140,"oolean preserveFunctionExpressionNames,"
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,141,"oolean generatePseudoNames,"
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,142,"RenameVars(AbstractCompiler compiler, String prefix,"
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,143,"boolean localRenamingOnly, boolean preserveFunctionExpressionNames,"
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,144,"boolean generatePseudoNames, boolean shouldShadow,"
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,159,this.shouldShadow = shouldShadow;
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,241,f (preserveFunctionExpressionNames
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,242,& var != null
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,245,if (preserveFunctionExpressionNames && var != null
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,252,tring newName =
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,253,akeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,254,ame);
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,255,String newName = MakeDeclaredNamesUnique.ContextualRenameInverter
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,256,.getOrginalName(name);
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,280, else if (var != null) {  // Not an extern
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,282,} else if (var != null) { // Not an extern
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,299," Sorts Assignment objects by their count, breaking ties by their"
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,300, order of occurrence in the source to ensure a deterministic total
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,301, ordering.
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,301,"* Sorts Assignment objects by their count, breaking ties by their order of"
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,302,* occurrence in the source to ensure a deterministic total ordering.
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,304,ew Comparator<Assignment>() {
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,305,"ublic int compare(Assignment a1, Assignment a2) {"
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,306,f (a1.count != a2.count) {
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,307,eturn a2.count - a1.count;
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,309,/ Break a tie using the order in which the variable first appears in
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,310,/ the source.
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,311,"eturn ORDER_OF_OCCURRENCE_COMPARATOR.compare(a1, a2);"
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,305,new Comparator<Assignment>() {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,306,"public int compare(Assignment a1, Assignment a2) {"
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,307,if (a1.count != a2.count) {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,308,return a2.count - a1.count;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,310,// Break a tie using the order in which the variable first appears in
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,311,// the source.
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,312,"return ORDER_OF_OCCURRENCE_COMPARATOR.compare(a1, a2);"
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,320,ew Comparator<Assignment>() {
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,321,"ublic int compare(Assignment a1, Assignment a2) {"
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,322,eturn a1.orderOfOccurrence - a2.orderOfOccurrence;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,321,new Comparator<Assignment>() {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,322,"public int compare(Assignment a1, Assignment a2) {"
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,323,return a1.orderOfOccurrence - a2.orderOfOccurrence;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,343,if (shouldShadow) {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,344,new ShadowVariables(
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,345,"compiler, assignments, varsByFrequency, pseudoNameMap).process("
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,346,"externs, root);"
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,425,f (a.oldName.startsWith(LOCAL_VAR_PREFIX) ||
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,426,!externNames.contains(a.oldName) &&
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,427,revNewName.startsWith(prefix))) {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,432,if (a.oldName.startsWith(LOCAL_VAR_PREFIX)
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,433,|| (!externNames.contains(a.oldName)
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,434,&& prevNewName.startsWith(prefix))) {
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,442,ameGenerator localNameGenerator = prefix.isEmpty() ?
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,443,"lobalNameGenerator : new NameGenerator(reservedNames, """","
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,444,eservedCharacters);
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,449,NameGenerator localNameGenerator =
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,450,prefix.isEmpty() ? globalNameGenerator : new NameGenerator(
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,451,"reservedNames, """", reservedCharacters);"
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,496,or (int j = i;
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,497, < numPendingAssignments &&
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,498,eneratedNamesForAssignments.get(j).length() == len;
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,499,++) {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,503,for (int j = i; j < numPendingAssignments
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,504,&& generatedNamesForAssignments.get(j).length() == len; j++) {
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,521,"ssignmentLog.append(a.oldName).append("" => "").append(newName)."
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,522,ppend('\n');
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,526,"assignmentLog.append(a.oldName).append("" => "").append(newName).append('\n');"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,2,* Copyright 2011 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,19,import com.google.common.collect.HashMultimap;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,20,import com.google.common.collect.Multimap;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,21,import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,22,import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,23,import com.google.javascript.jscomp.RenameVars.Assignment;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,24,import com.google.javascript.jscomp.Scope.Var;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,25,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,27,import java.util.Collection;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,28,import java.util.Iterator;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,29,import java.util.Map;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,30,import java.util.SortedMap;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,31,import java.util.SortedSet;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,34,* Tries to compute a list of variables that can shadow a variable in the
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,35,* outer scope.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,37,* For example:
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,39,* <code>
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,40,* var a = function() {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,41,*   var b = getB();
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,42,*   b();
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,43,*   return function(y) {};
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,45,* </code>
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,47,"* Normally, b would be mapped to variable L0, y would be L1."
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,49,* Instead we are going to make y shadows L0 in hope of using less variables
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,50,* and reusing frequently used local names.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,53,class ShadowVariables implements CompilerPass {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,55,// Keep a map of Upward Referencing name nodes of each scope.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,56,// A name is upward referencing name of a scope if:
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,58,// 1) It refers to (or defines) a name that is defined in the current
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,59,// scope or any scope above the current scope that isn't the
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,60,// global scope.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,62,// 2) It is a upward referencing name of a child scope of this scope.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,64,// Example:
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,65,"// var x; var y; function foo(a) { function bar(b) { x, a } }"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,66,"// The upward referencing names in scope 'foo' is bar, b, x and a;"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,67,// The key to this map is the root node of the scope.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,69,"// We can see that for any variable x in the current scope, we can shadow"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,70,// a variable y in an outer scope given that y is not a upward referencing
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,71,// name of the current scope.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,73,// TODO(user): Maps scope to string instead of Node to string.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,74,// Make sure of scope memorization to minimize scope creation cost.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,75,"private final Multimap<Node, String> scopeUpRefMap = HashMultimap.create();"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,77,// Maps all local Scope.Var to all of its referencing NAME node
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,78,// in any scope.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,79,"private final Multimap<Var, Node> varToNameUsage = HashMultimap.create();"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,81,private final AbstractCompiler compiler;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,83,// All the information used for renaming.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,84,private final SortedSet<Assignment> varsByFrequency;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,85,"private final SortedMap<String, Assignment> assignments;"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,86,"private final Map<Node, String> pseudoNameMap;"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,89,* @param assignments Map of old variable names to its assignment Objects.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,90,* @param varsByFrequency Sorted variable assignments by Frequency.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,91,* @param pseudoNameMap The current psedo name map so this pass can update
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,92,*     it accordingly.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,94,ShadowVariables(
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,95,"AbstractCompiler compiler,"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,96,"SortedMap<String, Assignment> assignments,"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,97,"SortedSet<Assignment> varsByFrequency,"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,98,"Map<Node, String> pseudoNameMap) {"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,99,this.compiler = compiler;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,100,this.assignments = assignments;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,101,this.varsByFrequency = varsByFrequency;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,102,this.pseudoNameMap = pseudoNameMap;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,106,@Override
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,107,"public void process(Node externs, Node root) {"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,109,// The algorithm is divided into two stages:
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,111,"// 1. Information gathering (variable usage, upward referencing)"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,113,"// 2. Tries to find shadows for each variables, updates the"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,114,//    variable usage frequency map.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,115,"NodeTraversal.traverse(compiler, root, new GatherReferenceInfo());"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,116,"NodeTraversal.traverse(compiler, root, new DoShadowVariables());"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,119,private class GatherReferenceInfo extends AbstractPostOrderCallback {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,120,@Override
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,121,"public void visit(NodeTraversal t, Node n, Node parent) {"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,122,// Skipping over non-name nodes and empty function names.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,123,if (!NodeUtil.isReferenceName(n)) {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,124,return;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,127,// We focus on shadowing local variables as their name occurs much more
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,128,// than global names.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,129,"// TODO(user): Alternatively, we could experiment with using a local"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,130,// name to shadow a global variable.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,131,if (t.inGlobalScope()) {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,132,return;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,135,Var var = t.getScope().getVar(n.getString());
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,136,if (var == null) {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,137,// extern name or undefined name.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,138,return;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,141,if (var.getScope().isGlobal()) {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,142,// We will not shadow a global variable name.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,143,return;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,146,"// Using the definition of upward referencing, fill in the map."
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,147,if (var.getScope() != t.getScope()) {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,148,for (Scope s = t.getScope();
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,149,s != var.getScope() && s.isLocal(); s = s.getParent()) {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,150,"scopeUpRefMap.put(s.getRootNode(), var.name);"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,154,if (var.getScope() == t.getScope()) {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,155,"scopeUpRefMap.put(t.getScopeRoot(), var.name);"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,158,// Find in the usage map that tracks a var and all of its usage.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,159,"varToNameUsage.put(var, n);"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,163,private class DoShadowVariables extends AbstractPostOrderCallback
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,164,implements ScopedCallback {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,166,@Override
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,167,public void enterScope(NodeTraversal t) {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,168,Scope s = t.getScope();
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,169,if (!s.isLocal()) {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,170,return;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,173,"// Since we don't shadow global, there is nothing to be done in the"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,174,// first immediate local scope as well.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,175,if (s.getParent().isGlobal()) {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,176,return;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,179,for (Iterator<Var> vars = s.getVars(); vars.hasNext();) {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,180,Var var = vars.next();
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,182,// Don't shadow variables that is bleed-out to fix an IE bug.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,183,if (var.isBleedingFunction()) {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,184,continue;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,187,// Try to look for the best shadow for the current candidate.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,188,"Assignment bestShadow = findBestShadow(s, var);"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,189,if (bestShadow == null) {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,190,continue;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,193,// The name assignment being shadowed.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,194,Assignment localAssignment = assignments.get(var.getName());
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,196,// Only shadow if this increases the number of occurrences of the
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,197,// shadowed variable.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,198,if (bestShadow.count < localAssignment.count) {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,199,continue; // Hope the next local variable would have a smaller count.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,202,"doShadow(localAssignment, bestShadow, var);"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,204,if (pseudoNameMap != null) {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,205,String targetPseudoName =
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,206,pseudoNameMap.get(s.getVar(bestShadow.oldName).nameNode);
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,207,for (Node use : varToNameUsage.get(var)) {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,208,"pseudoNameMap.put(use, targetPseudoName);"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,214,@Override
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,215,public void exitScope(NodeTraversal t) {}
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,217,@Override
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,218,"public void visit(NodeTraversal t, Node n, Node parent) {}"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,221,* @returns An assignment that can be used as a shadow for a local variable
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,222,*     in the scope defined by curScopeRoot.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,224,"private Assignment findBestShadow(Scope curScope, Var candidate) {"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,225,// Search for the candidate starting from the most used local.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,226,TARGET: for (Assignment assignment : varsByFrequency) {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,227,if (assignment.oldName.startsWith(RenameVars.LOCAL_VAR_PREFIX)) {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,228,if (!scopeUpRefMap.get(curScope.getRootNode()).contains(
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,229,assignment.oldName)) {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,230,"if (curScope.isDeclared(assignment.oldName, true)) {"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,231,return assignment;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,236,return null;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,239,"private void doShadow(Assignment original, Assignment toShadow, Var var) {"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,240,Scope s = var.getScope();
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,241,// We are now shadowing 'bestShadow' with localAssignment.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,242,// All of the reference NAME node of this variable.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,243,Collection<Node> references = varToNameUsage.get(var);
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,245,// First remove both assignments from the sorted list since they need
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,246,// to be re-sorted.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,247,varsByFrequency.remove(original);
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,248,varsByFrequency.remove(toShadow);
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,250,// Adjust the count offset by the inner scope variable.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,251,original.count -= references.size();
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,252,toShadow.count += references.size();
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,254,// Add it back to the sorted list after re-adjustment.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,255,varsByFrequency.add(original);
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,256,varsByFrequency.add(toShadow);
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,258,// This is an important step. If variable L7 is going to be renamed to
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,259,"// L1, by definition of upward referencing, The name L1 is now in the"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,260,// set of upward referencing names of the current scope up to the
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,261,// declaring scope of the best shadow variable.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,262,Var shadowed = s.getVar(toShadow.oldName);
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,263,if (shadowed != null) {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,264,for (Scope curScope = s; curScope != shadowed.scope;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,265,curScope = curScope.getParent()) {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,266,"scopeUpRefMap.put(curScope.getRootNode(), toShadow.oldName);"
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,270,// Mark all the references as shadowed.
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,271,for (Node n : references) {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,272,n.setString(toShadow.oldName);
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,273,Node cur = n;
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,274,while(cur != s.getRootNode()) {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,275,cur = cur.getParent();
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,276,if (NodeUtil.isFunction(cur)) {
True,src/com/google/javascript/jscomp/ShadowVariables.java,src/com/google/javascript/jscomp/ShadowVariables.java,277,"scopeUpRefMap.put(cur, toShadow.oldName);"
False,test/com/google/javascript/jscomp/RenameLocalVarsTest.java,test/com/google/javascript/jscomp/RenameLocalVarsTest.java,31,"ompiler, prefix, true, false, false, null, null, null);"
True,test/com/google/javascript/jscomp/RenameLocalVarsTest.java,test/com/google/javascript/jscomp/RenameLocalVarsTest.java,31,"compiler, prefix, true, false, false, false, null, null, null);"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,40,private boolean shouldShadow = false;
False,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,57,"eneratePseudoNames,"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,58,"generatePseudoNames, shouldShadow,"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,77,shouldShadow = false;
False,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,587,"alse, false, false, previouslyUsedMap, null,"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,589,"false, false, false, false, previouslyUsedMap, null,"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,2,* Copyright 2011 The Closure Compiler Authors.
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,20,* Unit tests for {@link ShadowVariableTest}.
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,24,public class ShadowVariablesTest extends CompilerTestCase{
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,25,// Use psedo names to make test easier to read.
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,26,private boolean generatePseudoNames = false;
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,27,@Override
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,28,protected CompilerPass getProcessor(Compiler compiler) {
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,29,return new RenameVars(
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,30,"compiler, """", false, false,"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,31,"generatePseudoNames, true, null, null, null);"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,34,@Override
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,35,protected int getNumRepetitions() {
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,36,return 1;
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,39,@Override
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,40,protected void setUp() throws Exception {
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,41,super.setUp();
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,42,generatePseudoNames = false;
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,45,public void testShadowSimple1() {
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,46,"test(""function foo(x) { return function (y) {} }"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,47,"""function   b(a) { return function (a) {} }"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,49,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,51,"test(""function  foo  ( x  ) { return function ( y  ) {} }"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,52,"""function $foo$$($x$$) { return function ($x$$) {} }"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,56,public void testShadowSimple2() {
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,57,"test(""function foo(x,y) { return function (y,z) {} }"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,58,"""function   c(a,b) { return function (a,b) {} }"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,60,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,62,"test(""function  foo  ( x  , y  ) { return function ( y  , z  ) {} }"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,63,"""function $foo$$($x$$,$y$$) { return function ($x$$,$y$$) {} }"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,67,"* If we have a choice, pick out the most used variable to shadow."
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,69,public void testShadowMostUsedVar() {
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,70,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,71,"test(""function  foo  () {var  x  ; var  y  ;  y  ; y  ; y  ; x  ;"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,72,"""  return function ( k  ) {} }"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,74,"""function $foo$$() {var $x$$; var $y$$; $y$$;$y$$;$y$$;$x$$;"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,75,"""  return function ($y$$) {} }"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,78,public void testNoShadowReferencedVariables() {
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,79,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,80,"test(""function  f1  () { var  x  ; x  ; x  ; x  ;"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,81,"""  return function  f2  ( y  ) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,82,"""    return function  f3  () { x  } }}"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,83,"""function $f1$$() { var $x$$;$x$$;$x$$;$x$$;"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,84,"""  return function $f2$$($y$$) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,85,"""    return function $f3$$() {$x$$} }}"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,88,public void testNoShadowGlobalVariables() {
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,89,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,90,"test(""var  x  ;  x  ; function  foo  () { return function ( y  ) {}}"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,91,"""var $x$$; $x$$; function $foo$$() { return function ($y$$) {}}"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,94,public void testShadowBleedInFunctionName() {
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,95,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,96,"test(""function  foo  () { function  b  ( y  ) { y  }  b  ;  b  ;}"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,97,"""function $foo$$() { function $b$$($b$$) {$b$$} $b$$; $b$$;}"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,100,public void testNoShadowLessPopularName() {
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,101,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,102,// We make sure that y doesn't pick x as a shadow and remains to be renamed
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,103,// to 'a'.
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,104,// If we do shadow y with whatever x renames to (say b) we will
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,105,// get 4 b's and 7 a's while currently we get 3 b's and 8 a's.
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,106,// I believe this arrangement will always be better for gzipping.
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,107,"test(""function  f1  ( x  ) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,108,"""  function  f2  ( y  ) {}  x  ; x  ;}"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,109,"""function  f3  ( i  ) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,110,"""  var  k  ; var  j  ; j  ; j  ; j  ; j  ; j  ; j  ;}"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,112,"""function $f1$$($x$$) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,113,"""  function $f2$$($y$$) {} $x$$;$x$$;}"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,114,"""function $f3$$($i$$) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,115,"""  var $k$$; var $j$$;$j$$;$j$$;$j$$;$j$$;$j$$;$j$$;}"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,118,public void testShadowFunctionName() {
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,119,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,120,"test(""var  g   = function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,121,"""  var  x  ; return function(){function  y  (){}}}"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,122,"""var $g$$ = function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,123,"""  var $x$$; return function(){function $x$$(){}}}"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,126,public void testShadowLotsOfScopes1() {
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,127,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,128,"test(""var  g   = function( x  ) { return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,129,""" return function() { var  y   }}}}"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,130,"""var $g$$ = function($x$$) { return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,131,""" return function() { var $x$$ }}}}"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,134,public void testShadowLotsOfScopes2() {
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,135,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,136,// 'y' does't have a candidate to shadow due to upward referencing.
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,137,"test(""var  g   = function( x  ) { return function( y  ) "" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,138,""" {return function() {return function() {  x   }}}}"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,139,"""var $g$$ = function($x$$) { return function($y$$) "" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,140,""" {return function() {return function() { $x$$ }}}}"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,142,"test(""var  g   = function( x  ) { return function() "" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,143,""" {return function( y  ) {return function() {  x   }}}}"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,144,"""var $g$$ = function($x$$) { return function() "" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,145,""" {return function($y$$) {return function() { $x$$ }}}}"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,147,"test(""var  g   = function( x  ) { return function() "" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,148,""" {return function() {return function( y  ) {  x   }}}}"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,149,"""var $g$$ = function($x$$) { return function() "" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,150,""" {return function() {return function($y$$) { $x$$ }}}}"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,153,public void testShadowLotsOfScopes3() {
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,154,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,155,// 'y' does't have a candidate to shadow due to upward referencing.
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,156,"test(""var  g   = function( x  ) { return function() "" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,157,""" {return function() {return function() {  x   }; var  y   }}}"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,158,"""var $g$$ = function($x$$) { return function() "" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,159,""" {return function() {return function() { $x$$ }; var $y$$}}}"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,160,"test(""var  g   = function( x  ) { return function() "" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,161,""" {return function() {return function() {  x   }}; var  y   }}"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,162,"""var $g$$ = function($x$$) { return function() "" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,163,""" {return function() {return function() { $x$$ }}; var $y$$}}"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,164,"test(""var  g   = function( x  ) { return function() "" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,165,""" {return function() {return function() {  x   }}}; var  y   }"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,166,"""var $g$$ = function($x$$) { return function() "" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,167,""" {return function() {return function() { $x$$ }}}; var $y$$}"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,170,public void testShadowLotsOfScopes4() {
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,171,// Make sure we do get the optimal shadowing scheme where
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,172,"test(""var g = function(x) { return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,173,""" return function(){return function(){};var m};var n};var o}}"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,174,"""var b = function(a) { return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,175,""" return function(){return function(){};var a};var a};var a}}"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,178,public void testShadowLotsOfScopes5() {
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,179,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,180,"test(""var  g   = function( x  ) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,181,""" return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,182,""" return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,183,"""      x  }; o  };var  n  };var  o  };var  p  }"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,184,"""var $g$$ = function($x$$) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,185,""" return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,186,""" return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,187,"""     $x$$};$o$$};var $p$$};var $o$$};var $p$$}"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,189,"test(""var  g   = function( x  ) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,190,""" return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,191,""" return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,192,"""      x  }; p  };var  n  };var  o  };var  p  }"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,193,"""var $g$$ = function($x$$) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,194,""" return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,195,""" return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,196,"""     $x$$};$p$$};var $o$$};var $o$$};var $p$$}"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,199,public void testShadowWithShadowAlready() {
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,200,"test(""var g = function(x) { return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,201,""" return function(){return function(){x}};var p};var o};var p}"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,202,"""var c = function(b) { return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,203,""" return function(){return function(){b}};var a};var a};var a}"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,205,"test(""var g = function(x) { return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,206,""" return function(){return function(){x};p};var p};var o};var p}"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,207,"""var c = function(b) { return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,208,""" return function(){return function(){b};a};var a};var a};var a}"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,211,public void testShadowBug1() {
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,212,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,213,"test(""function  f  ( x  ) { return function( y  ) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,214,"""    return function( x  ) {  x   +  y  ; }}}"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,215,"""function $f$$($x$$) { return function($y$$) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,216,"""    return function($x$$) { $x$$ + $y$$; }}}"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,219,public void testOptimal() {
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,220,// A test for a case that wasn't optimal in a single pass algorithm.
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,221,"test(""function f(x) { function g(y) { function h(x) {}}}"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,222,"""function c(a) { function b(a) { function b(a) {}}}"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,225,public void testSharingAcrossInnerScopes() {
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,226,"test(""function f() {var f=function g(){g()}; var x=function y(){y()}}"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,227,"""function c() {var d=function a(){a()}; var e=function b(){b()}}"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,228,"test(""function f(x) { return x ? function(y){} : function(z) {} }"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,229,"""function b(a) { return a ? function(a){} : function(a) {} }"");"

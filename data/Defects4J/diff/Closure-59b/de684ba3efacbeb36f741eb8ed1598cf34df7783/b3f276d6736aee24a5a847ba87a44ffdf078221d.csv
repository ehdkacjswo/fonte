is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,231,"edeclare(informed, item.getString(), iterKeyType);"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,231,"redeclareSimpleVar(informed, item, iterKeyType);"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,473,"edeclare(scope, name.getString(), type);"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,473,"redeclareSimpleVar(scope, name, type);"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,517,"edeclare(scope, varName, resultType);"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,517,"redeclareSimpleVar(scope, left, resultType);"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,838,cope = scope.createChildFlowScope();
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,839,"edeclare(scope, assertedNodeName, narrowed);"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,838,"scope = narrowScope(scope, assertedNode, narrowed);"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,855,cope = scope.createChildFlowScope();
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,856,"edeclare(scope, assertedNodeName, narrowed);"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,854,"scope = narrowScope(scope, assertedNode, narrowed);"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,861,"private FlowScope narrowScope(FlowScope scope, Node node, JSType narrowed) {"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,862,scope = scope.createChildFlowScope();
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,863,if (node.getType() == Token.GETPROP) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,864,scope.inferQualifiedSlot(
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,865,"node.getQualifiedName(), getNativeType(UNKNOWN_TYPE), narrowed);"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,866,} else {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,867,"redeclareSimpleVar(scope, node, narrowed);"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,869,return scope;
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1091,f (n.getType() == Token.NAME) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1100,if (n.isQualifiedName()) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1095,cope = scope.createChildFlowScope();
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1096,"edeclare(scope, n.getString(), narrowed);"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1104,"scope = narrowScope(scope, n, narrowed);"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1322,"rivate void redeclare(FlowScope scope, String varName, JSType varType) {"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1330,private void redeclareSimpleVar(
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1331,"FlowScope scope, Node nameNode, JSType varType) {"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1332,Preconditions.checkState(nameNode.getType() == Token.NAME);
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1333,String varName = nameNode.getString();
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5103,public void testIssue483() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5104,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5105,"""/** @constructor */ function C() {"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5106,"""  /** @type {?Array} */ this.a = [];"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5108,"""C.prototype.f = function() {"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5109,"""  if (this.a.length > 0) {"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5110,"""    g(this.a);"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5113,"""/** @param {number} a */ function g(a) {}"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5114,"""actual parameter 1 of g does not match formal parameter\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5115,"""found   : Array\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5116,"""required: number"");"

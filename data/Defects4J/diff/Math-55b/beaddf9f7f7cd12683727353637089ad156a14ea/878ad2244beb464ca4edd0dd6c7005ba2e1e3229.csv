is_addition,old_file_path,new_file_path,line_num,content
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,2,* Copyright 2003-2005 The Apache Software Foundation.
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,16,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,18,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,19,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,22,* Testcase for Divided Difference interpolator.
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,23,* <p>
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,24,* The error of polynomial interpolation is
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,25,*     f(z) - p(z) = f^(n)(zeta) * (z-x[0])(z-x[1])...(z-x[n-1]) / n!
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,26,* where f^(n) is the n-th derivative of the approximated function and
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,27,* zeta is some point in the interval determined by x[] and z.
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,28,* <p>
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,29,"* Since zeta is unknown, f^(n)(zeta) cannot be calculated. But we can bound"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,30,"* it and use the absolute value upper bound for estimates. For reference,"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,31,"* see <b>Introduction to Numerical Analysis</b>, ISBN 038795452X, chapter 2."
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,33,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,35,public final class DividedDifferenceInterpolatorTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,38,* Test of interpolator for the sine function.
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,39,* <p>
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,40,"* |sin^(n)(zeta)| <= 1.0, zeta in [0, 2*PI]"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,42,public void testSinFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,43,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,44,UnivariateRealInterpolator interpolator = new DividedDifferenceInterpolator();
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,45,"double x[], y[], z, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,47,"// 6 interpolating points on interval [0, 2*PI]"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,48,int n = 6;
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,49,"double min = 0.0, max = 2 * Math.PI;"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,50,x = new double[n];
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,51,y = new double[n];
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,52,for (int i = 0; i < n; i++) {
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,53,x[i] = min + i * (max - min) / n;
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,54,y[i] = f.value(x[i]);
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,56,double derivativebound = 1.0;
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,57,"UnivariateRealFunction p = interpolator.interpolate(x, y);"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,59,z = Math.PI / 4; expected = f.value(z); result = p.value(z);
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,60,"tolerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,61,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,63,z = Math.PI * 1.5; expected = f.value(z); result = p.value(z);
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,64,"tolerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,65,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,69,* Test of interpolator for the exponential function.
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,70,* <p>
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,71,"* |expm1^(n)(zeta)| <= e, zeta in [-1, 1]"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,73,public void testExpm1Function() throws MathException {
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,74,UnivariateRealFunction f = new Expm1Function();
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,75,UnivariateRealInterpolator interpolator = new DividedDifferenceInterpolator();
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,76,"double x[], y[], z, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,78,"// 5 interpolating points on interval [-1, 1]"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,79,int n = 5;
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,80,"double min = -1.0, max = 1.0;"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,81,x = new double[n];
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,82,y = new double[n];
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,83,for (int i = 0; i < n; i++) {
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,84,x[i] = min + i * (max - min) / n;
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,85,y[i] = f.value(x[i]);
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,87,double derivativebound = Math.E;
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,88,"UnivariateRealFunction p = interpolator.interpolate(x, y);"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,90,z = 0.0; expected = f.value(z); result = p.value(z);
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,91,"tolerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,92,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,94,z = 0.5; expected = f.value(z); result = p.value(z);
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,95,"tolerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,96,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,98,z = -0.5; expected = f.value(z); result = p.value(z);
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,99,"tolerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,100,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,104,* Test of parameters for the interpolator.
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,106,public void testParameters() throws Exception {
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,107,UnivariateRealInterpolator interpolator = new DividedDifferenceInterpolator();
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,109,try {
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,110,// bad abscissas array
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,111,"double x[] = { 1.0, 2.0, 2.0, 4.0 };"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,112,"double y[] = { 0.0, 4.0, 4.0, 2.5 };"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,113,"UnivariateRealFunction p = interpolator.interpolate(x, y);"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,114,p.value(0.0);
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,115,"fail(""Expecting MathException - bad abscissas array"");"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,116,} catch (MathException ex) {
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,117,// expected
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,122,* Returns the partial error term (z-x[0])(z-x[1])...(z-x[n-1])/n!
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,124,"protected double partialerror(double x[], double z) throws"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,125,IllegalArgumentException {
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,127,if (x.length < 1) {
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,128,throw new IllegalArgumentException
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,129,"(""Interpolation array cannot be empty."");"
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,131,double out = 1;
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,132,for (int i = 0; i < x.length; i++) {
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,133,out *= (z - x[i]) / (i + 1);
True,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,src/test/org/apache/commons/math/analysis/DividedDifferenceInterpolatorTest.java,135,return out;
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,2,* Copyright 2003-2005 The Apache Software Foundation.
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,14,* limitations under the License.
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,16,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,18,import org.apache.commons.math.FunctionEvaluationException;
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,21,* Auxillary class for testing purposes.
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,23,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,25,public class Expm1Function implements DifferentiableUnivariateRealFunction {
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,27,public double value(double x) throws FunctionEvaluationException {
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,28,// Math.expm1() is available in jdk 1.5 but not in jdk 1.4.2.
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,29,return Math.exp(x) - 1.0;
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,32,public UnivariateRealFunction derivative() {
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,33,return new UnivariateRealFunction() {
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,34,public double value(double x) throws FunctionEvaluationException {
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,35,return Math.exp(x);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,2,* Copyright 2005 The Apache Software Foundation.
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,16,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,18,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,19,import org.apache.commons.math.complex.Complex;
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,20,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,23,* Testcase for Laguerre solver.
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,24,* <p>
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,25,* Laguerre's method is very efficient in solving polynomials. Test runs
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,26,"* show that for a default absolute accuracy of 1E-6, it generally takes"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,27,"* less than 5 iterations to find one root, provided solveAll() is not"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,28,"* invoked, and 15 to 20 iterations to find all roots for quintic function."
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,30,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,32,public final class LaguerreSolverTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,35,* Test of solver for the linear function.
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,37,public void testLinearFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,38,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,40,// p(x) = 4x - 1
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,41,"double coefficients[] = { -1.0, 4.0 };"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,42,PolynomialFunction f = new PolynomialFunction(coefficients);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,43,UnivariateRealSolver solver = new LaguerreSolver(f);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,45,min = 0.0; max = 1.0; expected = 0.25;
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,46,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,47,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,48,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,49,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,53,* Test of solver for the quadratic function.
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,55,public void testQuadraticFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,56,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,58,// p(x) = 2x^2 + 5x - 3 = (x+3)(2x-1)
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,59,"double coefficients[] = { -3.0, 5.0, 2.0 };"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,60,PolynomialFunction f = new PolynomialFunction(coefficients);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,61,UnivariateRealSolver solver = new LaguerreSolver(f);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,63,min = 0.0; max = 2.0; expected = 0.5;
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,64,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,65,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,66,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,67,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,69,min = -4.0; max = -1.0; expected = -3.0;
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,70,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,71,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,72,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,73,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,77,* Test of solver for the quintic function.
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,79,public void testQuinticFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,80,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,82,// p(x) = x^5 - x^4 - 12x^3 + x^2 - x - 12 = (x+1)(x+3)(x-4)(x^2-x+1)
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,83,"double coefficients[] = { -12.0, -1.0, 1.0, -12.0, -1.0, 1.0 };"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,84,PolynomialFunction f = new PolynomialFunction(coefficients);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,85,UnivariateRealSolver solver = new LaguerreSolver(f);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,87,min = -2.0; max = 2.0; expected = -1.0;
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,88,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,89,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,90,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,91,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,93,min = -5.0; max = -2.5; expected = -3.0;
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,94,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,95,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,96,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,97,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,99,min = 3.0; max = 6.0; expected = 4.0;
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,100,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,101,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,102,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,103,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,107,* Test of solver for the quintic function using solveAll().
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,109,public void testQuinticFunction2() throws MathException {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,110,"double initial = 0.0, tolerance;"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,111,"Complex expected, result[];"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,113,// p(x) = x^5 + 4x^3 + x^2 + 4 = (x+1)(x^2-x+1)(x^2+4)
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,114,"double coefficients[] = { 4.0, 0.0, 1.0, 4.0, 0.0, 1.0 };"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,115,PolynomialFunction f = new PolynomialFunction(coefficients);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,116,LaguerreSolver solver = new LaguerreSolver(f);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,117,"result = solver.solveAll(coefficients, initial);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,119,// The order of roots returned by solveAll() depends on
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,120,"// initial value, solveAll() does no sorting."
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,121,"expected = new Complex(0.0, -2.0);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,122,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,123,Math.abs(expected.abs() * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,124,"assertEquals(0.0, (expected.subtract(result[0])).abs(), tolerance);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,126,"expected = new Complex(0.0, 2.0);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,127,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,128,Math.abs(expected.abs() * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,129,"assertEquals(0.0, (expected.subtract(result[1])).abs(), tolerance);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,131,"expected = new Complex(0.5, 0.5 * Math.sqrt(3.0));"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,132,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,133,Math.abs(expected.abs() * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,134,"assertEquals(0.0, (expected.subtract(result[2])).abs(), tolerance);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,136,"expected = new Complex(-1.0, 0.0);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,137,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,138,Math.abs(expected.abs() * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,139,"assertEquals(0.0, (expected.subtract(result[3])).abs(), tolerance);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,141,"expected = new Complex(0.5, -0.5 * Math.sqrt(3.0));"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,142,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,143,Math.abs(expected.abs() * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,144,"assertEquals(0.0, (expected.subtract(result[4])).abs(), tolerance);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,148,* Test of parameters for the solver.
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,150,public void testParameters() throws Exception {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,151,"double coefficients[] = { -3.0, 5.0, 2.0 };"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,152,PolynomialFunction f = new PolynomialFunction(coefficients);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,153,UnivariateRealSolver solver = new LaguerreSolver(f);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,155,try {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,156,// bad interval
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,157,"solver.solve(1, -1);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,158,"fail(""Expecting IllegalArgumentException - bad interval"");"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,159,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,160,// expected
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,162,try {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,163,// no bracketing
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,164,"solver.solve(2, 3);"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,165,"fail(""Expecting IllegalArgumentException - no bracketing"");"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,166,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,167,// expected
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,169,try {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,170,// bad function
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,171,UnivariateRealFunction f2 = new SinFunction();
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,172,UnivariateRealSolver solver2 = new LaguerreSolver(f2);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,173,"fail(""Expecting IllegalArgumentException - bad function"");"
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,174,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,175,// expected
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,2,* Copyright 2005 The Apache Software Foundation.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,16,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,18,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,19,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,22,* Testcase for Muller solver.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,23,* <p>
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,24,"* Muller's method converges almost quadratically near roots, but it can"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,25,* be very slow in regions far away from zeros. Test runs show that for
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,26,"* reasonably good initial values, for a default absolute accuracy of 1E-6,"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,27,* it generally takes 5 to 10 iterations for the solver to converge.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,28,* <p>
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,29,* Tests for the exponential function illustrate the situations where
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,30,* Muller solver performs poorly.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,32,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,34,public final class MullerSolverTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,37,* Test of solver for the sine function.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,39,public void testSinFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,40,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,41,UnivariateRealSolver solver = new MullerSolver(f);
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,42,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,44,min = 3.0; max = 4.0; expected = Math.PI;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,45,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,46,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,47,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,48,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,50,min = -1.0; max = 1.5; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,51,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,52,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,53,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,54,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,58,* Test of solver for the sine function using solve2().
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,60,public void testSinFunction2() throws MathException {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,61,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,62,MullerSolver solver = new MullerSolver(f);
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,63,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,65,min = 3.0; max = 4.0; expected = Math.PI;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,66,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,67,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,68,"result = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,69,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,71,min = -1.0; max = 1.5; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,72,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,73,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,74,"result = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,75,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,79,* Test of solver for the quintic function.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,81,public void testQuinticFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,82,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,83,UnivariateRealSolver solver = new MullerSolver(f);
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,84,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,86,min = -0.4; max = 0.2; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,87,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,88,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,89,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,90,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,92,min = 0.75; max = 1.5; expected = 1.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,93,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,94,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,95,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,96,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,98,min = -0.9; max = -0.2; expected = -0.5;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,99,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,100,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,101,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,102,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,106,* Test of solver for the quintic function using solve2().
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,108,public void testQuinticFunction2() throws MathException {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,109,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,110,MullerSolver solver = new MullerSolver(f);
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,111,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,113,min = -0.4; max = 0.2; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,114,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,115,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,116,"result = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,117,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,119,min = 0.75; max = 1.5; expected = 1.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,120,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,121,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,122,"result = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,123,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,125,min = -0.9; max = -0.2; expected = -0.5;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,126,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,127,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,128,"result = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,129,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,133,* Test of solver for the exponential function.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,134,* <p>
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,135,* It takes 10 to 15 iterations for the last two tests to converge.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,136,"* In fact, if not for the bisection alternative, the solver would"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,137,* exceed the default maximal iteration of 100.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,139,public void testExpm1Function() throws MathException {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,140,UnivariateRealFunction f = new Expm1Function();
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,141,UnivariateRealSolver solver = new MullerSolver(f);
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,142,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,144,min = -1.0; max = 2.0; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,145,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,146,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,147,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,148,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,150,min = -20.0; max = 10.0; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,151,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,152,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,153,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,154,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,156,min = -50.0; max = 100.0; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,157,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,158,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,159,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,160,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,164,* Test of solver for the exponential function using solve2().
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,165,* <p>
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,166,* It takes 25 to 50 iterations for the last two tests to converge.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,168,public void testExpm1Function2() throws MathException {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,169,UnivariateRealFunction f = new Expm1Function();
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,170,MullerSolver solver = new MullerSolver(f);
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,171,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,173,min = -1.0; max = 2.0; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,174,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,175,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,176,"result = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,177,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,179,min = -20.0; max = 10.0; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,180,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,181,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,182,"result = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,183,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,185,min = -50.0; max = 100.0; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,186,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,187,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,188,"result = solver.solve2(min, max);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,189,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,193,* Test of parameters for the solver.
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,195,public void testParameters() throws Exception {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,196,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,197,UnivariateRealSolver solver = new MullerSolver(f);
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,199,try {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,200,// bad interval
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,201,"solver.solve(1, -1);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,202,"fail(""Expecting IllegalArgumentException - bad interval"");"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,203,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,204,// expected
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,206,try {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,207,// no bracketing
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,208,"solver.solve(2, 3);"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,209,"fail(""Expecting IllegalArgumentException - no bracketing"");"
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,210,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,src/test/org/apache/commons/math/analysis/MullerSolverTest.java,211,// expected
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,2,* Copyright 2003-2005 The Apache Software Foundation.
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,16,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,18,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,19,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,22,* Testcase for Neville interpolator.
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,23,* <p>
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,24,* The error of polynomial interpolation is
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,25,*     f(z) - p(z) = f^(n)(zeta) * (z-x[0])(z-x[1])...(z-x[n-1]) / n!
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,26,* where f^(n) is the n-th derivative of the approximated function and
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,27,* zeta is some point in the interval determined by x[] and z.
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,28,* <p>
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,29,"* Since zeta is unknown, f^(n)(zeta) cannot be calculated. But we can bound"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,30,"* it and use the absolute value upper bound for estimates. For reference,"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,31,"* see <b>Introduction to Numerical Analysis</b>, ISBN 038795452X, chapter 2."
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,33,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,35,public final class NevilleInterpolatorTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,38,* Test of interpolator for the sine function.
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,39,* <p>
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,40,"* |sin^(n)(zeta)| <= 1.0, zeta in [0, 2*PI]"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,42,public void testSinFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,43,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,44,UnivariateRealInterpolator interpolator = new NevilleInterpolator();
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,45,"double x[], y[], z, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,47,"// 6 interpolating points on interval [0, 2*PI]"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,48,int n = 6;
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,49,"double min = 0.0, max = 2 * Math.PI;"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,50,x = new double[n];
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,51,y = new double[n];
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,52,for (int i = 0; i < n; i++) {
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,53,x[i] = min + i * (max - min) / n;
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,54,y[i] = f.value(x[i]);
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,56,double derivativebound = 1.0;
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,57,"UnivariateRealFunction p = interpolator.interpolate(x, y);"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,59,z = Math.PI / 4; expected = f.value(z); result = p.value(z);
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,60,"tolerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,61,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,63,z = Math.PI * 1.5; expected = f.value(z); result = p.value(z);
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,64,"tolerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,65,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,69,* Test of interpolator for the exponential function.
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,70,* <p>
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,71,"* |expm1^(n)(zeta)| <= e, zeta in [-1, 1]"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,73,public void testExpm1Function() throws MathException {
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,74,UnivariateRealFunction f = new Expm1Function();
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,75,UnivariateRealInterpolator interpolator = new NevilleInterpolator();
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,76,"double x[], y[], z, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,78,"// 5 interpolating points on interval [-1, 1]"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,79,int n = 5;
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,80,"double min = -1.0, max = 1.0;"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,81,x = new double[n];
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,82,y = new double[n];
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,83,for (int i = 0; i < n; i++) {
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,84,x[i] = min + i * (max - min) / n;
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,85,y[i] = f.value(x[i]);
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,87,double derivativebound = Math.E;
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,88,"UnivariateRealFunction p = interpolator.interpolate(x, y);"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,90,z = 0.0; expected = f.value(z); result = p.value(z);
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,91,"tolerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,92,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,94,z = 0.5; expected = f.value(z); result = p.value(z);
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,95,"tolerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,96,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,98,z = -0.5; expected = f.value(z); result = p.value(z);
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,99,"tolerance = Math.abs(derivativebound * partialerror(x, z));"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,100,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,104,* Test of parameters for the interpolator.
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,106,public void testParameters() throws Exception {
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,107,UnivariateRealInterpolator interpolator = new NevilleInterpolator();
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,109,try {
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,110,// bad abscissas array
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,111,"double x[] = { 1.0, 2.0, 2.0, 4.0 };"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,112,"double y[] = { 0.0, 4.0, 4.0, 2.5 };"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,113,"UnivariateRealFunction p = interpolator.interpolate(x, y);"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,114,p.value(0.0);
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,115,"fail(""Expecting MathException - bad abscissas array"");"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,116,} catch (MathException ex) {
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,117,// expected
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,122,* Returns the partial error term (z-x[0])(z-x[1])...(z-x[n-1])/n!
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,124,"protected double partialerror(double x[], double z) throws"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,125,IllegalArgumentException {
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,127,if (x.length < 1) {
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,128,throw new IllegalArgumentException
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,129,"(""Interpolation array cannot be empty."");"
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,131,double out = 1;
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,132,for (int i = 0; i < x.length; i++) {
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,133,out *= (z - x[i]) / (i + 1);
True,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,src/test/org/apache/commons/math/analysis/NevilleInterpolatorTest.java,135,return out;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,2,* Copyright 2003-2005 The Apache Software Foundation.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,16,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,18,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,19,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,22,* Testcase for Lagrange form of polynomial function.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,23,* <p>
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,24,* We use n+1 points to interpolate a polynomial of degree n. This should
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,25,* give us the exact same polynomial as result. Thus we can use a very
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,26,* small tolerance to account only for round-off errors.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,28,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,30,public final class PolynomialFunctionLagrangeFormTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,33,* Test of polynomial for the linear function.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,35,public void testLinearFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,36,PolynomialFunctionLagrangeForm p;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,37,"double c[], z, expected, result, tolerance = 1E-12;"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,39,// p(x) = 1.5x - 4
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,40,"double x[] = { 0.0, 3.0 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,41,"double y[] = { -4.0, 0.5 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,42,"p = new PolynomialFunctionLagrangeForm(x, y);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,44,z = 2.0; expected = -1.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,45,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,47,z = 4.5; expected = 2.75; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,48,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,50,z = 6.0; expected = 5.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,51,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,53,"assertEquals(1, p.degree());"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,55,c = p.getCoefficients();
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,56,"assertEquals(2, c.length);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,57,"assertEquals(-4.0, c[0], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,58,"assertEquals(1.5, c[1], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,62,* Test of polynomial for the quadratic function.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,64,public void testQuadraticFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,65,PolynomialFunctionLagrangeForm p;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,66,"double c[], z, expected, result, tolerance = 1E-12;"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,68,// p(x) = 2x^2 + 5x - 3 = (2x - 1)(x + 3)
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,69,"double x[] = { 0.0, -1.0, 0.5 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,70,"double y[] = { -3.0, -6.0, 0.0 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,71,"p = new PolynomialFunctionLagrangeForm(x, y);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,73,z = 1.0; expected = 4.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,74,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,76,z = 2.5; expected = 22.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,77,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,79,z = -2.0; expected = -5.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,80,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,82,"assertEquals(2, p.degree());"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,84,c = p.getCoefficients();
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,85,"assertEquals(3, c.length);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,86,"assertEquals(-3.0, c[0], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,87,"assertEquals(5.0, c[1], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,88,"assertEquals(2.0, c[2], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,92,* Test of polynomial for the quintic function.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,94,public void testQuinticFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,95,PolynomialFunctionLagrangeForm p;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,96,"double c[], z, expected, result, tolerance = 1E-12;"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,98,// p(x) = x^5 - x^4 - 7x^3 + x^2 + 6x = x(x^2 - 1)(x + 2)(x - 3)
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,99,"double x[] = { 1.0, -1.0, 2.0, 3.0, -3.0, 0.5 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,100,"double y[] = { 0.0, 0.0, -24.0, 0.0, -144.0, 2.34375 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,101,"p = new PolynomialFunctionLagrangeForm(x, y);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,103,z = 0.0; expected = 0.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,104,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,106,z = -2.0; expected = 0.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,107,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,109,z = 4.0; expected = 360.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,110,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,112,"assertEquals(5, p.degree());"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,114,c = p.getCoefficients();
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,115,"assertEquals(6, c.length);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,116,"assertEquals(0.0, c[0], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,117,"assertEquals(6.0, c[1], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,118,"assertEquals(1.0, c[2], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,119,"assertEquals(-7.0, c[3], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,120,"assertEquals(-1.0, c[4], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,121,"assertEquals(1.0, c[5], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,125,* Test of parameters for the polynomial.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,127,public void testParameters() throws Exception {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,128,PolynomialFunctionLagrangeForm p;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,130,try {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,131,// bad input array length
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,132,double x[] = { 1.0 };
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,133,double y[] = { 2.0 };
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,134,"p = new PolynomialFunctionLagrangeForm(x, y);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,135,"fail(""Expecting IllegalArgumentException - bad input array length"");"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,136,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,137,// expected
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,139,try {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,140,// mismatch input arrays
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,141,"double x[] = { 1.0, 2.0, 3.0, 4.0 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,142,"double y[] = { 0.0, -4.0, -24.0 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,143,"p = new PolynomialFunctionLagrangeForm(x, y);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,144,"fail(""Expecting IllegalArgumentException - mismatch input arrays"");"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,145,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,146,// expected
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,2,* Copyright 2003-2005 The Apache Software Foundation.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,16,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,18,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,19,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,22,* Testcase for Newton form of polynomial function.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,23,* <p>
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,24,* The small tolerance number is used only to account for round-off errors.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,26,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,28,public final class PolynomialFunctionNewtonFormTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,31,* Test of polynomial for the linear function.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,33,public void testLinearFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,34,PolynomialFunctionNewtonForm p;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,35,"double coefficients[], z, expected, result, tolerance = 1E-12;"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,37,// p(x) = 1.5x - 4 = 2 + 1.5(x-4)
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,38,"double a[] = { 2.0, 1.5 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,39,double c[] = { 4.0 };
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,40,"p = new PolynomialFunctionNewtonForm(a, c);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,42,z = 2.0; expected = -1.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,43,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,45,z = 4.5; expected = 2.75; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,46,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,48,z = 6.0; expected = 5.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,49,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,51,"assertEquals(1, p.degree());"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,53,coefficients = p.getCoefficients();
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,54,"assertEquals(2, coefficients.length);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,55,"assertEquals(-4.0, coefficients[0], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,56,"assertEquals(1.5, coefficients[1], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,60,* Test of polynomial for the quadratic function.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,62,public void testQuadraticFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,63,PolynomialFunctionNewtonForm p;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,64,"double coefficients[], z, expected, result, tolerance = 1E-12;"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,66,// p(x) = 2x^2 + 5x - 3 = 4 + 3(x-1) + 2(x-1)(x+2)
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,67,"double a[] = { 4.0, 3.0, 2.0 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,68,"double c[] = { 1.0, -2.0 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,69,"p = new PolynomialFunctionNewtonForm(a, c);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,71,z = 1.0; expected = 4.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,72,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,74,z = 2.5; expected = 22.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,75,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,77,z = -2.0; expected = -5.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,78,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,80,"assertEquals(2, p.degree());"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,82,coefficients = p.getCoefficients();
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,83,"assertEquals(3, coefficients.length);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,84,"assertEquals(-3.0, coefficients[0], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,85,"assertEquals(5.0, coefficients[1], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,86,"assertEquals(2.0, coefficients[2], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,90,* Test of polynomial for the quintic function.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,92,public void testQuinticFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,93,PolynomialFunctionNewtonForm p;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,94,"double coefficients[], z, expected, result, tolerance = 1E-12;"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,96,// p(x) = x^5 - x^4 - 7x^3 + x^2 + 6x
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,97,//      = 6x - 6x^2 -6x^2(x-1) + x^2(x-1)(x+1) + x^2(x-1)(x+1)(x-2)
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,98,"double a[] = { 0.0, 6.0, -6.0, -6.0, 1.0, 1.0 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,99,"double c[] = { 0.0, 0.0, 1.0, -1.0, 2.0 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,100,"p = new PolynomialFunctionNewtonForm(a, c);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,102,z = 0.0; expected = 0.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,103,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,105,z = -2.0; expected = 0.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,106,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,108,z = 4.0; expected = 360.0; result = p.value(z);
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,109,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,111,"assertEquals(5, p.degree());"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,113,coefficients = p.getCoefficients();
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,114,"assertEquals(6, coefficients.length);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,115,"assertEquals(0.0, coefficients[0], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,116,"assertEquals(6.0, coefficients[1], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,117,"assertEquals(1.0, coefficients[2], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,118,"assertEquals(-7.0, coefficients[3], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,119,"assertEquals(-1.0, coefficients[4], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,120,"assertEquals(1.0, coefficients[5], tolerance);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,124,* Test of parameters for the polynomial.
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,126,public void testParameters() throws Exception {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,127,PolynomialFunctionNewtonForm p;
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,129,try {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,130,// bad input array length
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,131,double a[] = { 1.0 };
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,132,double c[] = { 2.0 };
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,133,"p = new PolynomialFunctionNewtonForm(a, c);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,134,"fail(""Expecting IllegalArgumentException - bad input array length"");"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,135,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,136,// expected
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,138,try {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,139,// mismatch input arrays
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,140,"double a[] = { 1.0, 2.0, 3.0, 4.0 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,141,"double c[] = { 4.0, 3.0, 2.0, 1.0 };"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,142,"p = new PolynomialFunctionNewtonForm(a, c);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,143,"fail(""Expecting IllegalArgumentException - mismatch input arrays"");"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,144,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,145,// expected
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,2,* Copyright 2005 The Apache Software Foundation.
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,16,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,18,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,19,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,22,* Testcase for Ridders solver.
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,23,* <p>
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,24,"* Ridders' method converges superlinearly, more specific, its rate of"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,25,* convergence is sqrt(2). Test runs show that for a default absolute
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,26,"* accuracy of 1E-6, it generally takes less than 5 iterations for close"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,27,* initial bracket and 5 to 10 iterations for distant initial bracket
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,28,* to converge.
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,30,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,32,public final class RiddersSolverTest extends TestCase {
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,35,* Test of solver for the sine function.
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,37,public void testSinFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,38,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,39,UnivariateRealSolver solver = new RiddersSolver(f);
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,40,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,42,min = 3.0; max = 4.0; expected = Math.PI;
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,43,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,44,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,45,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,46,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,48,min = -1.0; max = 1.5; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,49,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,50,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,51,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,52,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,56,* Test of solver for the quintic function.
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,58,public void testQuinticFunction() throws MathException {
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,59,UnivariateRealFunction f = new QuinticFunction();
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,60,UnivariateRealSolver solver = new RiddersSolver(f);
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,61,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,63,min = -0.4; max = 0.2; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,64,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,65,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,66,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,67,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,69,min = 0.75; max = 1.5; expected = 1.0;
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,70,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,71,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,72,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,73,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,75,min = -0.9; max = -0.2; expected = -0.5;
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,76,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,77,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,78,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,79,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,83,* Test of solver for the exponential function.
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,85,public void testExpm1Function() throws MathException {
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,86,UnivariateRealFunction f = new Expm1Function();
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,87,UnivariateRealSolver solver = new RiddersSolver(f);
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,88,"double min, max, expected, result, tolerance;"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,90,min = -1.0; max = 2.0; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,91,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,92,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,93,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,94,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,96,min = -20.0; max = 10.0; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,97,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,98,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,99,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,100,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,102,min = -50.0; max = 100.0; expected = 0.0;
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,103,"tolerance = Math.max(solver.getAbsoluteAccuracy(),"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,104,Math.abs(expected * solver.getRelativeAccuracy()));
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,105,"result = solver.solve(min, max);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,106,"assertEquals(expected, result, tolerance);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,110,* Test of parameters for the solver.
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,112,public void testParameters() throws Exception {
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,113,UnivariateRealFunction f = new SinFunction();
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,114,UnivariateRealSolver solver = new RiddersSolver(f);
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,116,try {
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,117,// bad interval
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,118,"solver.solve(1, -1);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,119,"fail(""Expecting IllegalArgumentException - bad interval"");"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,120,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,121,// expected
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,123,try {
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,124,// no bracketing
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,125,"solver.solve(2, 3);"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,126,"fail(""Expecting IllegalArgumentException - no bracketing"");"
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,127,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,src/test/org/apache/commons/math/analysis/RiddersSolverTest.java,128,// expected

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,22,mport org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,22,import org.apache.commons.math.exception.MathArithmeticException;
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,34,ublic class Vector3D
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,35,mplements Serializable {
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,33,public class Vector3D implements Serializable {
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,288,hrow MathRuntimeException.createArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,285,throw new MathArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,312,hrow MathRuntimeException.createArithmeticException(LocalizedFormats.ZERO_NORM);
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,309,throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,342,hrow MathRuntimeException.createArithmeticException(LocalizedFormats.ZERO_NORM);
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,339,throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,23,mport junit.framework.*;
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,25,ublic class Vector3DTest
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,26,xtends TestCase {
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,28,ublic Vector3DTest(String name) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,29,uper(name);
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,32,ublic void testConstructors() {
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,33,ouble r = FastMath.sqrt(2) /2;
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,34,"heckVector(new Vector3D(2, new Vector3D(FastMath.PI / 3, -FastMath.PI / 4)),"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,35,", r * FastMath.sqrt(3), -2 * r);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,36,"heckVector(new Vector3D(2, Vector3D.PLUS_I,"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,37,"3, Vector3D.MINUS_K),"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,38,", 0, 3);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,39,"heckVector(new Vector3D(2, Vector3D.PLUS_I,"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,40,", Vector3D.PLUS_J,"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,41,"3, Vector3D.MINUS_K),"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,42,", 5, 3);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,43,"heckVector(new Vector3D(2, Vector3D.PLUS_I,"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,44,", Vector3D.PLUS_J,"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,45,", Vector3D.MINUS_J,"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,46,"3, Vector3D.MINUS_K),"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,47,", 0, 3);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,50,ublic void testCoordinates() {
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,51,"ector3D v = new Vector3D(1, 2, 3);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,52,ssertTrue(FastMath.abs(v.getX() - 1) < 1.0e-12);
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,53,ssertTrue(FastMath.abs(v.getY() - 2) < 1.0e-12);
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,54,ssertTrue(FastMath.abs(v.getZ() - 3) < 1.0e-12);
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,57,ublic void testNorm1() {
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,58,"ssertEquals(0.0, Vector3D.ZERO.getNorm1());"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,59,"ssertEquals(6.0, new Vector3D(1, -2, 3).getNorm1(), 0);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,62,ublic void testNorm() {
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,63,"ssertEquals(0.0, Vector3D.ZERO.getNorm());"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,64,"ssertEquals(FastMath.sqrt(14), new Vector3D(1, 2, 3).getNorm(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,22,import org.apache.commons.math.exception.MathArithmeticException;
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,27,public class Vector3DTest {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,28,@Test
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,29,public void testConstructors() {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,30,double r = FastMath.sqrt(2) /2;
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,31,"checkVector(new Vector3D(2, new Vector3D(FastMath.PI / 3, -FastMath.PI / 4)),"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,32,"r, r * FastMath.sqrt(3), -2 * r);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,33,"checkVector(new Vector3D(2, Vector3D.PLUS_I,"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,34,"-3, Vector3D.MINUS_K),"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,35,"2, 0, 3);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,36,"checkVector(new Vector3D(2, Vector3D.PLUS_I,"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,37,"5, Vector3D.PLUS_J,"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,38,"-3, Vector3D.MINUS_K),"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,39,"2, 5, 3);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,40,"checkVector(new Vector3D(2, Vector3D.PLUS_I,"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,41,"5, Vector3D.PLUS_J,"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,42,"5, Vector3D.MINUS_J,"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,43,"-3, Vector3D.MINUS_K),"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,44,"2, 0, 3);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,67,ublic void testNormInf() {
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,68,"ssertEquals(0.0, Vector3D.ZERO.getNormInf());"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,69,"ssertEquals(3.0, new Vector3D(1, -2, 3).getNormInf(), 0);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,47,@Test
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,48,public void testCoordinates() {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,49,"Vector3D v = new Vector3D(1, 2, 3);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,50,Assert.assertTrue(FastMath.abs(v.getX() - 1) < 1.0e-12);
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,51,Assert.assertTrue(FastMath.abs(v.getY() - 2) < 1.0e-12);
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,52,Assert.assertTrue(FastMath.abs(v.getZ() - 3) < 1.0e-12);
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,72,ublic void testDistance1() {
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,73,"ector3D v1 = new Vector3D(1, -2, 3);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,74,"ector3D v2 = new Vector3D(-4, 2, 0);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,75,"ssertEquals(0.0, Vector3D.distance1(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,76,"ssertEquals(12.0, Vector3D.distance1(v1, v2), 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,77,"ssertEquals(v1.subtract(v2).getNorm1(), Vector3D.distance1(v1, v2), 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,80,ublic void testDistance() {
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,81,"ector3D v1 = new Vector3D(1, -2, 3);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,82,"ector3D v2 = new Vector3D(-4, 2, 0);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,83,"ssertEquals(0.0, Vector3D.distance(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,84,"ssertEquals(FastMath.sqrt(50), Vector3D.distance(v1, v2), 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,85,"ssertEquals(v1.subtract(v2).getNorm(), Vector3D.distance(v1, v2), 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,88,ublic void testDistanceSq() {
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,89,"ector3D v1 = new Vector3D(1, -2, 3);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,90,"ector3D v2 = new Vector3D(-4, 2, 0);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,91,"ssertEquals(0.0, Vector3D.distanceSq(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,92,"ssertEquals(50.0, Vector3D.distanceSq(v1, v2), 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,93,"ssertEquals(Vector3D.distance(v1, v2) * Vector3D.distance(v1, v2),"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,94,"ector3D.distanceSq(v1, v2), 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,97,ublic void testDistanceInf() {
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,98,"ector3D v1 = new Vector3D(1, -2, 3);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,99,"ector3D v2 = new Vector3D(-4, 2, 0);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,100,"ssertEquals(0.0, Vector3D.distanceInf(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,101,"ssertEquals(5.0, Vector3D.distanceInf(v1, v2), 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,102,"ssertEquals(v1.subtract(v2).getNormInf(), Vector3D.distanceInf(v1, v2), 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,105,ublic void testSubtract() {
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,107,"ector3D v1 = new Vector3D(1, 2, 3);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,108,"ector3D v2 = new Vector3D(-3, -2, -1);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,109,1 = v1.subtract(v2);
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,110,"heckVector(v1, 4, 4, 4);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,112,"heckVector(v2.subtract(v1), -7, -6, -5);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,113,"heckVector(v2.subtract(3, v1), -15, -14, -13);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,55,@Test
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,56,public void testNorm1() {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,57,"Assert.assertEquals(0.0, Vector3D.ZERO.getNorm1(), 0);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,58,"Assert.assertEquals(6.0, new Vector3D(1, -2, 3).getNorm1(), 0);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,117,ublic void testAdd() {
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,118,"ector3D v1 = new Vector3D(1, 2, 3);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,119,"ector3D v2 = new Vector3D(-3, -2, -1);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,120,1 = v1.add(v2);
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,121,"heckVector(v1, -2, 0, 2);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,61,@Test
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,62,public void testNorm() {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,63,"Assert.assertEquals(0.0, Vector3D.ZERO.getNorm(), 0);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,64,"Assert.assertEquals(FastMath.sqrt(14), new Vector3D(1, 2, 3).getNorm(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,123,"heckVector(v2.add(v1), -5, -2, 1);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,124,"heckVector(v2.add(3, v1), -9, -2, 5);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,67,@Test
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,68,public void testNormInf() {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,69,"Assert.assertEquals(0.0, Vector3D.ZERO.getNormInf(), 0);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,70,"Assert.assertEquals(3.0, new Vector3D(1, -2, 3).getNormInf(), 0);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,73,@Test
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,74,public void testDistance1() {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,75,"Vector3D v1 = new Vector3D(1, -2, 3);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,76,"Vector3D v2 = new Vector3D(-4, 2, 0);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,77,"Assert.assertEquals(0.0, Vector3D.distance1(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,78,"Assert.assertEquals(12.0, Vector3D.distance1(v1, v2), 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,79,"Assert.assertEquals(v1.subtract(v2).getNorm1(), Vector3D.distance1(v1, v2), 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,128,ublic void testScalarProduct() {
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,129,"ector3D v = new Vector3D(1, 2, 3);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,130, = v.scalarMultiply(3);
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,131,"heckVector(v, 3, 6, 9);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,82,@Test
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,83,public void testDistance() {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,84,"Vector3D v1 = new Vector3D(1, -2, 3);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,85,"Vector3D v2 = new Vector3D(-4, 2, 0);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,86,"Assert.assertEquals(0.0, Vector3D.distance(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,87,"Assert.assertEquals(FastMath.sqrt(50), Vector3D.distance(v1, v2), 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,88,"Assert.assertEquals(v1.subtract(v2).getNorm(), Vector3D.distance(v1, v2), 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,133,"heckVector(v.scalarMultiply(0.5), 1.5, 3, 4.5);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,91,@Test
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,92,public void testDistanceSq() {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,93,"Vector3D v1 = new Vector3D(1, -2, 3);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,94,"Vector3D v2 = new Vector3D(-4, 2, 0);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,95,"Assert.assertEquals(0.0, Vector3D.distanceSq(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,96,"Assert.assertEquals(50.0, Vector3D.distanceSq(v1, v2), 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,97,"Assert.assertEquals(Vector3D.distance(v1, v2) * Vector3D.distance(v1, v2),"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,98,"Vector3D.distanceSq(v1, v2), 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,101,@Test
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,102,public void testDistanceInf() {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,103,"Vector3D v1 = new Vector3D(1, -2, 3);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,104,"Vector3D v2 = new Vector3D(-4, 2, 0);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,105,"Assert.assertEquals(0.0, Vector3D.distanceInf(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,106,"Assert.assertEquals(5.0, Vector3D.distanceInf(v1, v2), 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,107,"Assert.assertEquals(v1.subtract(v2).getNormInf(), Vector3D.distanceInf(v1, v2), 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,110,@Test
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,111,public void testSubtract() {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,112,"Vector3D v1 = new Vector3D(1, 2, 3);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,113,"Vector3D v2 = new Vector3D(-3, -2, -1);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,114,v1 = v1.subtract(v2);
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,115,"checkVector(v1, 4, 4, 4);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,137,ublic void testVectorialProducts() {
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,138,"ector3D v1 = new Vector3D(2, 1, -4);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,139,"ector3D v2 = new Vector3D(3, 1, -1);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,117,"checkVector(v2.subtract(v1), -7, -6, -5);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,118,"checkVector(v2.subtract(3, v1), -15, -14, -13);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,141,"ssertTrue(FastMath.abs(Vector3D.dotProduct(v1, v2) - 11) < 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,121,@Test
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,122,public void testAdd() {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,123,"Vector3D v1 = new Vector3D(1, 2, 3);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,124,"Vector3D v2 = new Vector3D(-3, -2, -1);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,125,v1 = v1.add(v2);
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,126,"checkVector(v1, -2, 0, 2);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,143,"ector3D v3 = Vector3D.crossProduct(v1, v2);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,144,"heckVector(v3, 3, -10, -1);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,128,"checkVector(v2.add(v1), -5, -2, 1);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,129,"checkVector(v2.add(3, v1), -9, -2, 5);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,146,"ssertTrue(FastMath.abs(Vector3D.dotProduct(v1, v3)) < 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,147,"ssertTrue(FastMath.abs(Vector3D.dotProduct(v2, v3)) < 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,132,@Test
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,133,public void testScalarProduct() {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,134,"Vector3D v = new Vector3D(1, 2, 3);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,135,v = v.scalarMultiply(3);
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,136,"checkVector(v, 3, 6, 9);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,138,"checkVector(v.scalarMultiply(0.5), 1.5, 3, 4.5);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,151,ublic void testAngular() {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,141,@Test
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,142,public void testVectorialProducts() {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,143,"Vector3D v1 = new Vector3D(2, 1, -4);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,144,"Vector3D v2 = new Vector3D(3, 1, -1);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,153,"ssertEquals(0,           Vector3D.PLUS_I.getAlpha(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,154,"ssertEquals(0,           Vector3D.PLUS_I.getDelta(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,155,"ssertEquals(FastMath.PI / 2, Vector3D.PLUS_J.getAlpha(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,156,"ssertEquals(0,           Vector3D.PLUS_J.getDelta(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,157,"ssertEquals(0,           Vector3D.PLUS_K.getAlpha(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,158,"ssertEquals(FastMath.PI / 2, Vector3D.PLUS_K.getDelta(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,146,"Assert.assertTrue(FastMath.abs(Vector3D.dotProduct(v1, v2) - 11) < 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,160,"ector3D u = new Vector3D(-1, 1, -1);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,161,"ssertEquals(3 * FastMath.PI /4, u.getAlpha(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,162,"ssertEquals(-1.0 / FastMath.sqrt(3), FastMath.sin(u.getDelta()), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,148,"Vector3D v3 = Vector3D.crossProduct(v1, v2);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,149,"checkVector(v3, 3, -10, -1);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,151,"Assert.assertTrue(FastMath.abs(Vector3D.dotProduct(v1, v3)) < 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,152,"Assert.assertTrue(FastMath.abs(Vector3D.dotProduct(v2, v3)) < 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,166,ublic void testAngularSeparation() {
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,167,"ector3D v1 = new Vector3D(2, -1, 4);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,155,@Test
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,156,public void testAngular() {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,157,"Assert.assertEquals(0,           Vector3D.PLUS_I.getAlpha(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,158,"Assert.assertEquals(0,           Vector3D.PLUS_I.getDelta(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,159,"Assert.assertEquals(FastMath.PI / 2, Vector3D.PLUS_J.getAlpha(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,160,"Assert.assertEquals(0,           Vector3D.PLUS_J.getDelta(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,161,"Assert.assertEquals(0,           Vector3D.PLUS_K.getAlpha(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,162,"Assert.assertEquals(FastMath.PI / 2, Vector3D.PLUS_K.getDelta(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,164,"Vector3D u = new Vector3D(-1, 1, -1);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,165,"Assert.assertEquals(3 * FastMath.PI /4, u.getAlpha(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,166,"Assert.assertEquals(-1.0 / FastMath.sqrt(3), FastMath.sin(u.getDelta()), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,169,ector3D  k = v1.normalize();
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,170,ector3D  i = k.orthogonal();
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,171,ector3D v2 = k.scalarMultiply(FastMath.cos(1.2)).add(i.scalarMultiply(FastMath.sin(1.2)));
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,169,@Test
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,170,public void testAngularSeparation() {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,171,"Vector3D v1 = new Vector3D(2, -1, 4);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,173,"ssertTrue(FastMath.abs(Vector3D.angle(v1, v2) - 1.2) < 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,173,Vector3D  k = v1.normalize();
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,174,Vector3D  i = k.orthogonal();
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,175,Vector3D v2 = k.scalarMultiply(FastMath.cos(1.2)).add(i.scalarMultiply(FastMath.sin(1.2)));
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,177,"Assert.assertTrue(FastMath.abs(Vector3D.angle(v1, v2) - 1.2) < 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,177,ublic void testNormalize() {
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,178,"ssertEquals(1.0, new Vector3D(5, -4, 2).normalize().getNorm(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,179,ry {
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,180,ector3D.ZERO.normalize();
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,181,"ail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,182, catch (ArithmeticException ae) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,183,/ expected behavior
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,180,@Test
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,181,public void testNormalize() {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,182,"Assert.assertEquals(1.0, new Vector3D(5, -4, 2).normalize().getNorm(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,183,try {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,184,Vector3D.ZERO.normalize();
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,185,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,186,} catch (MathArithmeticException ae) {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,187,// expected behavior
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,187,ublic void testOrthogonal() {
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,188,"ector3D v1 = new Vector3D(0.1, 2.5, 1.3);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,189,"ssertEquals(0.0, Vector3D.dotProduct(v1, v1.orthogonal()), 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,190,"ector3D v2 = new Vector3D(2.3, -0.003, 7.6);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,191,"ssertEquals(0.0, Vector3D.dotProduct(v2, v2.orthogonal()), 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,192,"ector3D v3 = new Vector3D(-1.7, 1.4, 0.2);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,193,"ssertEquals(0.0, Vector3D.dotProduct(v3, v3.orthogonal()), 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,194,ry {
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,195,"ew Vector3D(0, 0, 0).orthogonal();"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,196,"ail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,197, catch (ArithmeticException ae) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,198,/ expected behavior
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,202,ublic void testAngle() {
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,203,"ssertEquals(0.22572612855273393616,"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,204,"ector3D.angle(new Vector3D(1, 2, 3), new Vector3D(4, 5, 6)),"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,205,.0e-12);
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,206,"ssertEquals(7.98595620686106654517199e-8,"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,207,"ector3D.angle(new Vector3D(1, 2, 3), new Vector3D(2, 4, 6.000001)),"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,208,.0e-12);
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,209,"ssertEquals(3.14159257373023116985197793156,"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,210,"ector3D.angle(new Vector3D(1, 2, 3), new Vector3D(-2, -4, -6.000001)),"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,211,.0e-12);
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,212,ry {
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,213,"ector3D.angle(Vector3D.ZERO, Vector3D.PLUS_I);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,214,"ail(""an exception should have been thrown"");"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,215, catch (ArithmeticException ae) {
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,216,/ expected behavior
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,191,@Test
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,192,public void testOrthogonal() {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,193,"Vector3D v1 = new Vector3D(0.1, 2.5, 1.3);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,194,"Assert.assertEquals(0.0, Vector3D.dotProduct(v1, v1.orthogonal()), 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,195,"Vector3D v2 = new Vector3D(2.3, -0.003, 7.6);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,196,"Assert.assertEquals(0.0, Vector3D.dotProduct(v2, v2.orthogonal()), 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,197,"Vector3D v3 = new Vector3D(-1.7, 1.4, 0.2);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,198,"Assert.assertEquals(0.0, Vector3D.dotProduct(v3, v3.orthogonal()), 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,199,try {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,200,"new Vector3D(0, 0, 0).orthogonal();"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,201,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,202,} catch (MathArithmeticException ae) {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,203,// expected behavior
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,220,"rivate void checkVector(Vector3D v, double x, double y, double z) {"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,221,"ssertEquals(x, v.getX(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,222,"ssertEquals(y, v.getY(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,223,"ssertEquals(z, v.getZ(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,207,@Test
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,208,public void testAngle() {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,209,"Assert.assertEquals(0.22572612855273393616,"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,210,"Vector3D.angle(new Vector3D(1, 2, 3), new Vector3D(4, 5, 6)),"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,211,1.0e-12);
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,212,"Assert.assertEquals(7.98595620686106654517199e-8,"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,213,"Vector3D.angle(new Vector3D(1, 2, 3), new Vector3D(2, 4, 6.000001)),"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,214,1.0e-12);
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,215,"Assert.assertEquals(3.14159257373023116985197793156,"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,216,"Vector3D.angle(new Vector3D(1, 2, 3), new Vector3D(-2, -4, -6.000001)),"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,217,1.0e-12);
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,218,try {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,219,"Vector3D.angle(Vector3D.ZERO, Vector3D.PLUS_I);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,220,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,221,} catch (MathArithmeticException ae) {
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,222,// expected behavior
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,226,"private void checkVector(Vector3D v, double x, double y, double z) {"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,227,"Assert.assertEquals(x, v.getX(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,228,"Assert.assertEquals(y, v.getY(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,229,"Assert.assertEquals(z, v.getZ(), 1.0e-12);"

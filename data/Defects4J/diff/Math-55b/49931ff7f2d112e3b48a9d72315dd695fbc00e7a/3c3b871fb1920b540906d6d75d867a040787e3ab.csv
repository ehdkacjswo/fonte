is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,17,package org.apache.commons.math.util;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,19,import java.lang.reflect.InvocationTargetException;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,20,import java.lang.reflect.Method;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,21,import java.lang.reflect.Modifier;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,22,import java.lang.reflect.Type;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,23,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,24,import java.util.Arrays;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,25,import java.util.List;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,27,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,28,import org.junit.Test;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,29,import org.junit.runner.RunWith;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,30,import org.junit.runners.Parameterized;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,31,import org.junit.runners.Parameterized.Parameters;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,34,* Test to compare FastMath results against StrictMath results for boundary values.
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,36,@RunWith(Parameterized.class)
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,37,public class FastMathStrictComparisonTest {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,39,// Values which often need special handling
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,40,private static final Double[] DOUBLE_SPECIAL_VALUES = {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,41,"-0.0, +0.0,                                         // 1,2"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,42,"Double.NaN,                                         // 3"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,43,"Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, // 4,5"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,44,"-Double.MAX_VALUE, Double.MAX_VALUE,                // 6,7"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,45,// decreasing order of absolute value to help catch first failure
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,46,"-MathUtils.EPSILON, MathUtils.EPSILON,              // 8,9"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,47,"-MathUtils.SAFE_MIN, MathUtils.SAFE_MIN,            // 10,11"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,48,"-Double.MIN_VALUE, Double.MIN_VALUE,                // 12,13"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,51,private static final Float [] FLOAT_SPECIAL_VALUES = {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,52,"-0.0f, +0.0f,                                       // 1,2"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,53,"Float.NaN,                                          // 3"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,54,"Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY,   // 4,5"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,55,"Float.MIN_VALUE, Float.MAX_VALUE,                   // 6,7"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,56,"-Float.MIN_VALUE, -Float.MAX_VALUE,                 // 8,9"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,59,private static final Object [] LONG_SPECIAL_VALUES = {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,60,"-1,0,1,"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,61,"Long.MIN_VALUE, Long.MAX_VALUE,"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,64,private static final Object[] INT_SPECIAL_VALUES = {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,65,"-1,0,1,"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,66,"Integer.MIN_VALUE, Integer.MAX_VALUE,"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,69,private final Method mathMethod;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,70,private final Method fastMethod;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,71,private final Type[] types;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,72,private final Object[][] valueArrays;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,74,"public FastMathStrictComparisonTest(Method m, Method f, Type[] types, Object[][] data) throws Exception{"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,75,this.mathMethod=m;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,76,this.fastMethod=f;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,77,this.types=types;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,78,this.valueArrays=data;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,81,@Test
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,82,public void test1() throws Exception{
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,83,"setupMethodCall(mathMethod, fastMethod, types, valueArrays);"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,85,private static boolean isNumber(Double d) {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,86,return !(d.isInfinite() || d.isNaN());
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,89,private static boolean isNumber(Float f) {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,90,return !(f.isInfinite() || f.isNaN());
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,93,"private static void reportFailedResults(Method mathMethod, Object[] params, Object expected, Object actual, int[] entries){"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,94,String format = null;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,95,long actL=0;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,96,long expL=0;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,97,if (expected instanceof Double) {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,98,Double exp = (Double) expected;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,99,Double act = (Double) actual;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,100,if (isNumber(exp) && isNumber(act)) { // show difference as hex
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,101,actL = Double.doubleToLongBits(act);
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,102,expL = Double.doubleToLongBits(exp);
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,103,"format = ""%016x"";"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,105,} else if (expected instanceof Float ){
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,106,Float exp = (Float) expected;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,107,Float act = (Float) actual;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,108,if (isNumber(exp) && isNumber(act)) { // show difference as hex
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,109,actL = Float.floatToIntBits(act);
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,110,expL = Float.floatToIntBits(exp);
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,111,"format = ""%08x"";"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,114,StringBuilder sb = new StringBuilder();
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,115,sb.append(mathMethod.getReturnType().getSimpleName());
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,116,"sb.append("" "");"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,117,sb.append(mathMethod.getName());
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,118,"sb.append(""("");"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,119,"String sep = """";"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,120,for(Object o : params){
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,121,sb.append(sep);
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,122,sb.append(o);
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,123,"sep="", "";"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,125,"sb.append("") expected "");"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,126,if (format != null){
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,127,"sb.append(String.format(format, expL));"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,128,} else {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,129,sb.append(expected);
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,131,"sb.append("" actual "");"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,132,if (format != null){
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,133,"sb.append(String.format(format, actL));"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,134,} else {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,135,sb.append(actual);
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,137,"sb.append("" entries "");"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,138,sb.append(Arrays.toString(entries));
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,139,String message = sb.toString();
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,140,final boolean fatal = false;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,141,if (fatal) {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,142,Assert.fail(message);
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,143,} else {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,144,System.out.println(message);
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,148,"private static void callMethods(Method mathMethod, Method fastMethod,"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,149,"Object[] params, int[] entries) throws IllegalAccessException,"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,150,InvocationTargetException {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,151,try {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,152,"Object expected = mathMethod.invoke(mathMethod, params);"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,153,"Object actual = fastMethod.invoke(mathMethod, params);"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,154,if (!expected.equals(actual)) {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,155,"reportFailedResults(mathMethod, params, expected, actual, entries);"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,157,} catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,158,"Assert.fail(mathMethod+"" ""+e);"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,162,"private static void setupMethodCall(Method mathMethod, Method fastMethod,"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,163,"Type[] types, Object[][] valueArrays) throws Exception {"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,164,Object[] params = new Object[types.length];
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,165,int entry1 = 0;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,166,int[] entries = new int[types.length];
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,167,for(Object d : valueArrays[0]) {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,168,entry1++;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,169,params[0] = d;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,170,entries[0] = entry1;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,171,if (params.length > 1){
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,172,int entry2 = 0;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,173,for(Object d1 : valueArrays[1]) {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,174,entry2++;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,175,params[1] = d1;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,176,entries[1] = entry2;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,177,"callMethods(mathMethod, fastMethod, params, entries);"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,179,} else {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,180,"callMethods(mathMethod, fastMethod, params, entries);"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,185,@Parameters
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,186,public static List<Object[]> data() throws Exception {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,187,List<Object[]> list = new ArrayList<Object[]>();
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,188,for(Method mathMethod : StrictMath.class.getDeclaredMethods()) {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,189,method:
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,190,if (Modifier.isPublic(mathMethod.getModifiers())){// Only test public methods
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,191,Type []types = mathMethod.getGenericParameterTypes();
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,192,if (types.length >=1) { // Only check methods with at least one parameter
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,193,try {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,194,// Get the corresponding FastMath method
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,195,"Method fastMethod = FastMath.class.getDeclaredMethod(mathMethod.getName(), (Class[]) types);"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,196,if (Modifier.isPublic(fastMethod.getModifiers())) { // It must be public too
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,197,Object [][] values = new Object[types.length][];
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,198,int index = 0;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,199,for(Type t : types) {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,200,if (t.equals(double.class)){
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,201,values[index]=DOUBLE_SPECIAL_VALUES;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,202,} else if (t.equals(float.class)) {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,203,values[index]=FLOAT_SPECIAL_VALUES;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,204,} else if (t.equals(long.class)) {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,205,values[index]=LONG_SPECIAL_VALUES;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,206,} else if (t.equals(int.class)) {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,207,values[index]=INT_SPECIAL_VALUES;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,208,} else {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,209,"System.out.println(""Cannot handle class ""+t+"" for ""+mathMethod);"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,210,break method;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,212,index++;
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,214,//                            System.out.println(fastMethod);
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,216,* The current implementation runs each method as a separate test.
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,217,* Could be amended to run each value as a separate test
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,219,"list.add(new Object[]{mathMethod, fastMethod, types, values});"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,220,"//                            setupMethodCall(mathMethod, fastMethod, params, data);"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,221,} else {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,222,"System.out.println(""Cannot find public FastMath method corresponding to: ""+mathMethod);"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,224,} catch (NoSuchMethodException e) {
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,225,"System.out.println(""Cannot find FastMath method corresponding to: ""+mathMethod);"
True,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,src/test/java/org/apache/commons/math/util/FastMathStrictComparisonTest.java,230,return list;

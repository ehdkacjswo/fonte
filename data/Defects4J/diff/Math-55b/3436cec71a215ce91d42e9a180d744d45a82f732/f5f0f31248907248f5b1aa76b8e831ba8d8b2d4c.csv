is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,26,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,27,import org.apache.commons.math.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,28,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,31,import org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,95,* @throws MathIllegalArgumentException if the data points are null or the number
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,96,*     of clusters is larger than the number of data points
False,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,92,"ublic List<Cluster<T>> cluster(final Collection<T> points,"
False,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,93,"inal int k, final int maxIterations) {"
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,98,"public List<Cluster<T>> cluster(final Collection<T> points, final int k,"
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,99,final int maxIterations)
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,100,throws MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,102,// sanity checks
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,103,MathUtils.checkNotNull(points);
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,105,// number of clusters has to be smaller or equal the number of data points
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,106,if (points.size() < k) {
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,107,"throw new NumberIsTooSmallException(points.size(), k, false);"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,27,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,252,* 2 variables cannot be clustered into 3 clusters. See issue MATH-436.
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,254,@Test(expected=NumberIsTooSmallException.class)
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,255,public void testPerformClusterAnalysisToManyClusters() {
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,256,KMeansPlusPlusClusterer<EuclideanIntegerPoint> transformer =
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,257,new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,258,new Random(1746432956321l));
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,260,EuclideanIntegerPoint[] points = new EuclideanIntegerPoint[] {
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,261,new EuclideanIntegerPoint(new int[] {
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,262,"1959, 325100"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,263,"}), new EuclideanIntegerPoint(new int[] {"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,264,"1960, 373200"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,268,"transformer.cluster(Arrays.asList(points), 3, 1);"

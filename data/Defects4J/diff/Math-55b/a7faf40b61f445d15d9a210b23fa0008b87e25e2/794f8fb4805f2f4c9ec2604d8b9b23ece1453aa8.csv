is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,121,/ org.apache.commons.math.optimization.direct.DirectSearchOptimizer
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,122,/ org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,121,// org.apache.commons.math.estimation.AbstractEstimation
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,41,rivate static final long serialVersionUID = 9008747186334431824L;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,41,private static final long serialVersionUID = 6185821146433609962L;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,46,/** Maximal number of iterations allowed. */
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,47,private int maxIterations;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,49,/** Number of iterations already performed for all starts. */
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,50,private int totalIterations;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,49,** Maximal number of evaluations allowed. */
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,50,rivate int maxEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,55,/** Number of gradient evaluations already performed for all starts. */
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,56,private int totalGradientEvaluations;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,72,his.optimizer        = optimizer;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,73,his.totalEvaluations = 0;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,74,his.maxEvaluations   = Integer.MAX_VALUE;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,75,his.starts           = starts;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,76,his.generator        = generator;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,77,his.optima           = null;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,78,this.optimizer                = optimizer;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,79,this.maxIterations            = Integer.MAX_VALUE;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,80,this.totalIterations          = 0;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,81,this.totalEvaluations         = 0;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,82,this.totalGradientEvaluations = 0;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,83,this.starts                   = starts;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,84,this.generator                = generator;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,85,this.optima                   = null;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,114,ublic int getEvaluations() {
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,115,eturn totalEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,122,public void setMaxIterations(int maxIterations) {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,123,this.maxIterations = maxIterations;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,126,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,127,public int getMaxIterations() {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,128,return maxIterations;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,131,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,132,public int getIterations() {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,133,return totalIterations;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,119,ublic void setMaxEvaluations(int maxEvaluations) {
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,120,his.maxEvaluations = maxEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,137,public int getEvaluations() {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,138,return totalEvaluations;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,124,ublic int getMaxEvaluations() {
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,125,eturn maxEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,142,public int getGradientEvaluations() {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,143,return totalGradientEvaluations;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,144,ptima = new ScalarPointValuePair[starts];
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,145,otalEvaluations = 0;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,162,optima                   = new ScalarPointValuePair[starts];
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,163,totalIterations          = 0;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,164,totalEvaluations         = 0;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,165,totalGradientEvaluations = 0;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,151,ptimizer.setMaxEvaluations(maxEvaluations - totalEvaluations);
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,171,optimizer.setMaxIterations(maxIterations - totalIterations);
False,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,160,otalEvaluations += optimizer.getEvaluations();
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,180,totalIterations          += optimizer.getIterations();
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,181,totalEvaluations         += optimizer.getEvaluations();
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,182,totalGradientEvaluations += optimizer.getGradientEvaluations();
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,41,rivate static final long serialVersionUID = 6648351778723282863L;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,41,private static final long serialVersionUID = -7333253288301713047L;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,46,/** Maximal number of iterations allowed. */
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,47,private int maxIterations;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,49,/** Number of iterations already performed for all starts. */
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,50,private int totalIterations;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,49,** Maximal number of evaluations allowed. */
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,50,rivate int maxEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,75,this.maxIterations    = Integer.MAX_VALUE;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,76,this.totalIterations  = 0;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,73,his.maxEvaluations   = Integer.MAX_VALUE;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,113,ublic int getEvaluations() {
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,114,eturn totalEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,117,public void setMaxIterations(int maxIterations) {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,118,this.maxIterations = maxIterations;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,118,ublic void setMaxEvaluations(int maxEvaluations) {
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,119,his.maxEvaluations = maxEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,122,public int getMaxIterations() {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,123,return maxIterations;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,123,ublic int getMaxEvaluations() {
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,124,eturn maxEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,127,public int getIterations() {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,128,return totalIterations;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,131,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,132,public int getEvaluations() {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,133,return totalEvaluations;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,143,ptima = new ScalarPointValuePair[starts];
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,152,optima           = new ScalarPointValuePair[starts];
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,153,totalIterations  = 0;
False,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,150,ptimizer.setMaxEvaluations(maxEvaluations - totalEvaluations);
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,160,optimizer.setMaxIterations(maxIterations - totalIterations);
True,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,169,totalIterations  += optimizer.getIterations();
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,41,rivate static final long serialVersionUID = -6671992853686531955L;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,41,private static final long serialVersionUID = -9109278856437190136L;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,46,/** Maximal number of iterations allowed. */
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,47,private int maxIterations;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,49,/** Number of iterations already performed for all starts. */
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,50,private int totalIterations;
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,52,** Maximal number of evaluations allowed. */
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,53,rivate int maxEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,79,this.maxIterations            = Integer.MAX_VALUE;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,80,this.totalIterations          = 0;
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,78,his.maxEvaluations           = Integer.MAX_VALUE;
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,118,ublic int getEvaluations() {
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,119,eturn totalEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,122,public void setMaxIterations(int maxIterations) {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,123,this.maxIterations = maxIterations;
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,123,ublic int getJacobianEvaluations() {
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,124,eturn totalJacobianEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,127,public int getMaxIterations() {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,128,return maxIterations;
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,128,ublic void setMaxEvaluations(int maxEvaluations) {
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,129,his.maxEvaluations = maxEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,132,public int getIterations() {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,133,return totalIterations;
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,133,ublic int getMaxEvaluations() {
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,134,eturn maxEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,137,public int getEvaluations() {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,138,return totalEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,141,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,142,public int getJacobianEvaluations() {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,143,return totalJacobianEvaluations;
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,153,ptima = new VectorialPointValuePair[starts];
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,154,otalEvaluations = 0;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,162,optima                   = new VectorialPointValuePair[starts];
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,163,totalIterations          = 0;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,164,totalEvaluations         = 0;
False,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,161,ptimizer.setMaxEvaluations(maxEvaluations - totalEvaluations);
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,171,optimizer.setMaxIterations(maxIterations - totalIterations);
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,180,totalIterations          += optimizer.getIterations();
False,src/java/org/apache/commons/math/optimization/OptimizationException.java,src/java/org/apache/commons/math/optimization/OptimizationException.java,33,rivate static final long serialVersionUID = -781139167958631145L;
True,src/java/org/apache/commons/math/optimization/OptimizationException.java,src/java/org/apache/commons/math/optimization/OptimizationException.java,33,private static final long serialVersionUID = -357696069587075016L;
True,src/java/org/apache/commons/math/optimization/OptimizationException.java,src/java/org/apache/commons/math/optimization/OptimizationException.java,46,* Create an exception with a given root cause.
True,src/java/org/apache/commons/math/optimization/OptimizationException.java,src/java/org/apache/commons/math/optimization/OptimizationException.java,47,* @param cause  the exception or error that caused this exception to be thrown
True,src/java/org/apache/commons/math/optimization/OptimizationException.java,src/java/org/apache/commons/math/optimization/OptimizationException.java,49,public OptimizationException(Throwable cause) {
True,src/java/org/apache/commons/math/optimization/OptimizationException.java,src/java/org/apache/commons/math/optimization/OptimizationException.java,50,super(cause);
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,32,** Set the maximal number of objective function calls.
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,33, <p>
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,34, The number of objective function calls may be checked <em>after</em> a few
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,35, related calls have been made. This implies that in some cases this number may
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,36," be exceeded by a few units, depending on the dimension of the problem and kind"
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,37, of optimizer.
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,38, </p>
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,39, @param maxEvaluations maximal number of function calls
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,32,/** Set the maximal number of iterations of the algorithm.
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,33,* @param maxIterations maximal number of function calls
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,42,oid setMaxEvaluations(int maxEvaluations);
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,35,void setMaxIterations(int maxIterations);
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,44,** Get the maximal number of objective function calls.
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,37,/** Get the maximal number of iterations of the algorithm.
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,38,* @return maximal number of iterations
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,40,int getMaxIterations();
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,42,/** Get the number of iterations realized by the algorithm.
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,46, The number of objective function calls may be checked <em>after</em> a few
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,47, related calls have been made. This implies that in some cases this number may
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,48," be exceeded by a few units, depending on the dimension of the problem and kind"
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,49, of optimizer.
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,44,* The number of evaluations corresponds to the last call to the
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,45,"* {@link #optimize(ScalarDifferentiableObjectiveFunction, GoalType, double[]) optimize}"
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,46,* method. It is 0 if the method has not been called yet.
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,51, @return maximal number of function calls
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,48,* @return number of iterations
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,53,nt getMaxEvaluations();
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,50,int getIterations();
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,57, The number of evaluation correspond to the last call to the
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,58," {@link #optimize(ScalarObjectiveFunction, GoalType, double[]) optimize}"
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,54,* The number of evaluations corresponds to the last call to the
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,55,"* {@link #optimize(ScalarDifferentiableObjectiveFunction, GoalType, double[]) optimize}"
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,63,nt getEvaluations();
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,60,int getEvaluations();
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,62,/** Get the number of evaluations of the objective function gradient.
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,63,* <p>
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,64,* The number of evaluations corresponds to the last call to the
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,65,"* {@link #optimize(ScalarDifferentiableObjectiveFunction, GoalType, double[]) optimize}"
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,66,* method. It is 0 if the method has not been called yet.
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,67,* </p>
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,68,* @return number of evaluations of the objective function gradient
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,70,int getGradientEvaluations();
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,32,** Set the maximal number of objective function calls.
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,33, <p>
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,34, The number of objective function calls may be checked <em>after</em> a few
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,35, related calls have been made. This implies that in some cases this number may
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,36," be exceeded by a few units, depending on the dimension of the problem and kind"
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,37, of optimizer.
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,38, </p>
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,39, @param maxEvaluations maximal number of function calls
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,32,/** Set the maximal number of iterations of the algorithm.
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,33,* @param maxIterations maximal number of function calls
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,35,void setMaxIterations(int maxIterations);
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,37,/** Get the maximal number of iterations of the algorithm.
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,38,* @return maximal number of iterations
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,42,oid setMaxEvaluations(int maxEvaluations);
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,40,int getMaxIterations();
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,44,** Get the maximal number of objective function calls.
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,42,/** Get the number of iterations realized by the algorithm.
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,46, The number of objective function calls may be checked <em>after</em> a few
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,47, related calls have been made. This implies that in some cases this number may
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,48," be exceeded by a few units, depending on the dimension of the problem and kind"
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,49, of optimizer.
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,44,* The number of evaluations corresponds to the last call to the
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,45,"* {@link #optimize(ScalarObjectiveFunction, GoalType, double[]) optimize}"
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,46,* method. It is 0 if the method has not been called yet.
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,51, @return maximal number of function calls
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,48,* @return number of iterations
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,53,nt getMaxEvaluations();
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,50,int getIterations();
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,57, The number of evaluation correspond to the last call to the
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,54,* The number of evaluations corresponds to the last call to the
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,63,nt getEvaluations();
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,60,int getEvaluations();
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,32,** Set the maximal number of objective function calls.
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,33, <p>
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,34, The number of objective function calls may be checked <em>after</em> a few
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,35, related calls have been made. This implies that in some cases this number may
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,36," be exceeded by a few units, depending on the dimension of the problem and kind"
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,37, of optimizer.
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,38, </p>
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,39, @param maxEvaluations maximal number of function calls
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,32,/** Set the maximal number of iterations of the algorithm.
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,33,* @param maxIterations maximal number of function calls
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,42,oid setMaxEvaluations(int maxEvaluations);
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,36,void setMaxIterations(int maxIterations);
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,44,** Get the maximal number of objective function calls.
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,45, <p>
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,46, The number of objective function calls may be checked <em>after</em> a few
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,47, related calls have been made. This implies that in some cases this number may
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,48," be exceeded by a few units, depending on the dimension of the problem and kind"
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,49, of optimizer.
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,50, </p>
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,51, @return maximal number of function calls
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,38,/** Get the maximal number of iterations of the algorithm.
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,39,* @return maximal number of iterations
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,53,nt getMaxEvaluations();
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,41,int getMaxIterations();
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,43,/** Get the number of iterations realized by the algorithm.
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,44,* @return number of iterations
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,46,int getIterations();
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,24,import org.apache.commons.math.MaxIterationsExceededException;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,31,mport org.apache.commons.math.optimization.SimpleValueChecker;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,32,import org.apache.commons.math.optimization.SimpleScalarValueChecker;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,68, a default {@link SimpleValueChecker} is used.</p>
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,69,* a default {@link SimpleScalarValueChecker} is used.</p>
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,98,** Number of evaluations already performed for the current start. */
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,99,rivate int evaluations;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,99,/** Maximal number of iterations allowed. */
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,100,private int maxIterations;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,102,/** Number of iterations already performed. */
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,103,private int iterations;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,101,** Maximal number of evaluations allowed. */
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,102,rivate int maxEvaluations;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,105,/** Number of evaluations already performed. */
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,106,private int evaluations;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,110,etConvergenceChecker(new SimpleValueChecker());
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,111,etMaxEvaluations(Integer.MAX_VALUE);
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,114,setConvergenceChecker(new SimpleScalarValueChecker());
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,115,setMaxIterations(Integer.MAX_VALUE);
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,211,ublic void setMaxEvaluations(int maxEvaluations) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,212,his.maxEvaluations = maxEvaluations;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,215,public void setMaxIterations(int maxIterations) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,216,this.maxIterations = maxIterations;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,216,ublic int getMaxEvaluations() {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,217,eturn maxEvaluations;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,220,public int getMaxIterations() {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,221,return maxIterations;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,224,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,225,public int getIterations() {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,226,return iterations;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,229,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,230,public int getEvaluations() {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,231,return evaluations;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,232,inal double[] startPoint)
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,246,final double[] startPoint)
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,268,iterations  = 0;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,259,nt iterations = 0;
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,260,hile (evaluations <= maxEvaluations) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,274,while (true) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,262,f (++iterations > 1) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,276,if (iterations > 0) {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,279,hrow new OptimizationException(
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,280,"maximal number of evaluations exceeded ({0})"","
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,281,valuations);
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,285,** {@inheritDoc} */
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,286,ublic int getEvaluations() {
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,287,eturn evaluations;
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,295,/** Increment the iterations counter by 1.
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,296,* @exception OptimizationException if the maximal number
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,297,* of iterations is exceeded
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,299,protected void incrementIterationsCounter()
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,300,throws OptimizationException {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,301,if (++iterations > maxIterations) {
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,302,throw new OptimizationException(new MaxIterationsExceededException(maxIterations));
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,294, @exception OptimizationException if the algorithm failed to converge
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,310,* @exception OptimizationException if the algorithm fails to converge
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,65,inal int max = getMaxEvaluations();
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,66,hile (getEvaluations() < max) {
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,65,while (true) {
True,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,67,incrementIterationsCounter();
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,97,hrow new OptimizationException(
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,98,"maximal number of evaluations exceeded ({0})"","
False,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java,99,etEvaluations());
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,23,import org.apache.commons.math.optimization.OptimizationException;
False,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,76,hrows ObjectiveException {
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,77,"throws ObjectiveException, OptimizationException {"
True,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,src/java/org/apache/commons/math/optimization/direct/NelderMead.java,79,incrementIterationsCounter();
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,20,import org.apache.commons.math.MaxIterationsExceededException;
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,43,rivate static final long serialVersionUID = -3080152374642370722L;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,44,private static final long serialVersionUID = 5413193243329026789L;
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,45,** Default maximal number of objective function evaluations allowed. */
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,46,ublic static final int DEFAULT_MAX_EVALUATIONS = 100;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,46,/** Default maximal number of iterations allowed. */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,47,public static final int DEFAULT_MAX_ITERATIONS = 100;
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,48,** Number of evaluations already performed for the current start. */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,49,/** Maximal number of iterations allowed. */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,50,private int maxIterations;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,52,/** Number of iterations already performed. */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,53,private int iterations;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,55,/** Number of evaluations already performed. */
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,54,** Maximal number of evaluations allowed. */
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,55,rivate int maxEvaluations;
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,102,etMaxEvaluations(DEFAULT_MAX_EVALUATIONS);
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,106,setMaxIterations(DEFAULT_MAX_ITERATIONS);
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,109,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,110,public void setMaxIterations(int maxIterations) {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,111,this.maxIterations = maxIterations;
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,106,ublic void setMaxEvaluations(int maxEvaluations) {
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,107,his.maxEvaluations = maxEvaluations;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,115,public int getMaxIterations() {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,116,return maxIterations;
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,111,ublic int getMaxEvaluations() {
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,112,eturn maxEvaluations;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,120,public int getIterations() {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,121,return iterations;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,144,/** Increment the iterations counter by 1.
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,145,* @exception OptimizationException if the maximal number
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,146,* of iterations is exceeded
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,148,protected void incrementIterationsCounter()
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,149,throws OptimizationException {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,150,if (++iterations > maxIterations) {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,151,if (++iterations > maxIterations) {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,152,throw new OptimizationException(new MaxIterationsExceededException(maxIterations));
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,141,ncrementJacobianEvaluationsCounter();
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,163,++jacobianEvaluations;
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,157, Increment the jacobian evaluations counter.
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,159,rotected final void incrementJacobianEvaluationsCounter() {
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,160,+jacobianEvaluations;
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,167, @exception OptimizationException if the number of cost evaluations
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,168, exceeds the maximum allowed
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,171,"hrows ObjectiveException, OptimizationException {"
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,173,f (++objectiveEvaluations > maxEvaluations) {
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,174,hrow new OptimizationException(
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,175,"maximal number of evaluations exceeded ({0})"","
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,176,bjectiveEvaluations);
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,184,throws ObjectiveException {
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,308,iterations           = 0;
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,330,"hrows ObjectiveException, OptimizationException, IllegalArgumentException;"
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,338,"throws ObjectiveException, OptimizationException, IllegalArgumentException;"
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,56, {@link AbstractLeastSquaresOptimizer#DEFAULT_MAX_EVALUATIONS}.
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,56,* {@link AbstractLeastSquaresOptimizer#DEFAULT_MAX_ITERATIONS}.
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,70,oolean converged = false;
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,71,or (int iteration = 1; ! converged; ++iteration) {
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,70,for (boolean converged = false; !converged;) {
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,72,incrementIterationsCounter();
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,125,"onverged = checker.converged(++iteration, previous, current);"
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,126,"converged = checker.converged(getIterations(), previous, current);"
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,149,    <li>{@link #setMaxCostEval maximal cost evaluations}: 1000</li>
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,149,*    <li>{@link #setMaxIterations maximal iterations}: 1000</li>
False,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,159,etMaxEvaluations(1000);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,159,setMaxIterations(1000);
True,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,240,incrementIterationsCounter();
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,30,mport org.apache.commons.math.optimization.SimpleValueChecker;
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,30,import org.apache.commons.math.optimization.SimpleScalarValueChecker;
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,97,"ptimizer.setConvergenceChecker(new SimpleValueChecker(1.0e-10, 1.0e-30));"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,98,ptimizer.setMaxEvaluations(200);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,97,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-10, 1.0e-30));"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,98,optimizer.setMaxIterations(200);
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,150,"ptimizer.setConvergenceChecker(new SimpleValueChecker(-1, 1.0e-3));"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,151,ptimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,150,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1, 1.0e-3));"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,151,optimizer.setMaxIterations(100);
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,183,"ptimizer.setConvergenceChecker(new SimpleValueChecker(-1.0, 1.0e-3));"
False,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,184,ptimizer.setMaxEvaluations(1000);
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,183,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1.0, 1.0e-3));"
True,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,184,optimizer.setMaxIterations(1000);
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,30,mport org.apache.commons.math.optimization.SimpleValueChecker;
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,30,import org.apache.commons.math.optimization.SimpleScalarValueChecker;
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,97,"ptimizer.setConvergenceChecker(new SimpleValueChecker(1.0e-10, 1.0e-30));"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,98,ptimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,97,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-10, 1.0e-30));"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,98,optimizer.setMaxIterations(100);
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,150,"ptimizer.setConvergenceChecker(new SimpleValueChecker(-1, 1.0e-3));"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,151,ptimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,150,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1, 1.0e-3));"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,151,optimizer.setMaxIterations(100);
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,183,"ptimizer.setConvergenceChecker(new SimpleValueChecker(-1.0, 1.0e-3));"
False,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,184,ptimizer.setMaxEvaluations(200);
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,183,"optimizer.setConvergenceChecker(new SimpleScalarValueChecker(-1.0, 1.0e-3));"
True,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java,184,optimizer.setMaxIterations(200);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,109,ptimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,109,optimizer.setMaxIterations(100);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,125,ptimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,125,optimizer.setMaxIterations(100);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,148,ptimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,148,optimizer.setMaxIterations(100);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,167,ptimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,167,optimizer.setMaxIterations(100);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,190,ptimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,190,optimizer.setMaxIterations(100);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,213,ptimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,213,optimizer.setMaxIterations(100);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,233,ptimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,233,optimizer.setMaxIterations(100);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,270,ptimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,270,optimizer.setMaxIterations(100);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,293,ptimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,293,optimizer.setMaxIterations(100);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,314,ptimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,314,optimizer.setMaxIterations(100);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,333,ptimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,333,optimizer.setMaxIterations(100);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,344,ptimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,344,optimizer.setMaxIterations(100);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,385,ptimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,385,optimizer.setMaxIterations(100);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,407,ptimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,407,optimizer.setMaxIterations(100);
False,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,461,ptimizer.setMaxEvaluations(100);
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,461,optimizer.setMaxIterations(100);
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,382,ptimizer.setMaxEvaluations(maxCostEval);
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,382,optimizer.setMaxIterations(maxCostEval);
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,222,"), true);"
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,222,"}), false);"
False,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,508,ptimizer.setMaxEvaluations(100 * (function.getN() + 1));
True,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/org/apache/commons/math/optimization/general/MinpackTest.java,508,optimizer.setMaxIterations(100 * (function.getN() + 1));

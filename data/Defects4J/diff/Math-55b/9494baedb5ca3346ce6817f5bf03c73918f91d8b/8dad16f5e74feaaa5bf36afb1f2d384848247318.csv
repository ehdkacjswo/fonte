is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,312,/ reject the step to match exactly the next switch time
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,313,New = manager.getEventTime() - stepStart;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,312,final double dt = manager.getEventTime() - stepStart;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,313,if (Math.abs(dt) <= Math.ulp(stepStart)) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,314,"// rejecting the step would lead to a too small next step, we accept it"
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,315,loop = false;
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,316,} else {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,317,// reject the step to match exactly the next switch time
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,318,hNew = dt;
False,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,271,/ reject the step to match exactly the next switch time
False,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,272,New = manager.getEventTime() - stepStart;
True,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,271,final double dt = manager.getEventTime() - stepStart;
True,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,272,if (Math.abs(dt) <= Math.ulp(stepStart)) {
True,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,273,"// rejecting the step would lead to a too small next step, we accept it"
True,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,274,loop = false;
True,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,275,} else {
True,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,276,// reject the step to match exactly the next switch time
True,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,277,hNew = dt;
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,834,eject = true;
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,835,New = Math.abs(eventsHandlersManager.getEventTime() - stepStart);
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,834,final double dt = eventsHandlersManager.getEventTime() - stepStart;
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,835,if (Math.abs(dt) > Math.ulp(stepStart)) {
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,836,// reject the step to match exactly the next switch time
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,837,hNew = Math.abs(dt);
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,838,reject = true;
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,161,tepSize = manager.getEventTime() - stepStart;
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,161,final double dt = manager.getEventTime() - stepStart;
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,162,if (Math.abs(dt) <= Math.ulp(stepStart)) {
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,163,"// rejecting the step would lead to a too small next step, we accept it"
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,164,loop = false;
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,165,} else {
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,166,// reject the step to match exactly the next switch time
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,167,stepSize = dt;

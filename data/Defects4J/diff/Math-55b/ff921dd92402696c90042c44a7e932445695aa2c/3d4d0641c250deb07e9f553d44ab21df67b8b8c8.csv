is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,22,import org.apache.commons.math.analysis.ParametricUnivariateRealFunction;
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,24,import org.apache.commons.math.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,25,import org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,81,inal double diff = x - mean;
False,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,82,eturn norm * FastMath.exp(-diff * diff * i2s2);
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,84,"return value(x - mean, norm, i2s2);"
False,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,91,inal double g = Gaussian.this.value(x);
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,93,"final double g = Gaussian.value(diff, norm, i2s2);"
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,106,* Parametric function where the input array contains the parameters of
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,107,"* the Gaussian, ordered as follows:"
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,108,* <ul>
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,109,*  <li>Norm</li>
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,110,*  <li>Mean</li>
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,111,*  <li>Standard deviation</li>
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,112,* </ul>
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,114,public static class Parametric implements ParametricUnivariateRealFunction {
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,116,* Computes the value of the Gaussian at {@code x}.
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,118,* @param x Value for which the function must be computed.
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,119,"* @param param Values of norm, mean and standard deviation."
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,120,* @return the value of the function.
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,121,* @throws NullArgumentException if {@code param} is {@code null}.
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,122,* @throws DimensionMismatchException if the size of {@code param} is
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,123,* not 3.
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,124,* @throws NotStrictlyPositiveException if {@code param[2]} is negative.
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,126,"public double value(double x,"
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,127,double[] param) {
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,128,validateParameters(param);
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,130,final double diff = x - param[1];
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,131,final double i2s2 = 1 / (2 * param[2] * param[2]);
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,132,"return Gaussian.value(diff, param[0], i2s2);"
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,136,* Computes the value of the gradient at {@code x}.
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,137,* The components of the gradient vector are the partial
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,138,* derivatives of the function with respect to each of the
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,139,"* <em>parameters</em> (norm, mean and standard deviation)."
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,141,* @param x Value at which the gradient must be computed.
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,142,"* @param param Values of norm, mean and standard deviation."
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,143,* @return the gradient vector at {@code x}.
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,144,* @throws NullArgumentException if {@code param} is {@code null}.
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,145,* @throws DimensionMismatchException if the size of {@code param} is
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,146,* not 3.
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,147,* @throws NotStrictlyPositiveException if {@code param[2]} is negative.
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,149,"public double[] gradient(double x, double[] param) {"
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,150,validateParameters(param);
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,152,final double norm = param[0];
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,153,final double diff = x - param[1];
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,154,final double sigma = param[2];
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,155,final double i2s2 = 1 / (2 * sigma * sigma);
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,157,"final double n = Gaussian.value(diff, 1, i2s2);"
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,158,final double m = norm * n * 2 * i2s2 * diff;
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,159,final double s = m * diff / sigma;
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,161,"return new double[] { n, m, s };"
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,165,* Validates parameters to ensure they are appropriate for the evaluation of
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,166,"* the {@link #value(double,double[])} and {@link #gradient(double,double[])}"
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,167,* methods.
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,169,"* @param param Values of norm, mean and standard deviation."
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,170,* @throws NullArgumentException if {@code param} is {@code null}.
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,171,* @throws DimensionMismatchException if the size of {@code param} is
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,172,* not 3.
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,173,* @throws NotStrictlyPositiveException if {@code param[2]} is negative.
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,175,private void validateParameters(double[] param) {
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,176,if (param == null) {
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,177,throw new NullArgumentException();
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,179,if (param.length != 3) {
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,180,"throw new DimensionMismatchException(param.length, 3);"
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,182,if (param[2] <= 0) {
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,183,throw new NotStrictlyPositiveException(param[2]);
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,189,* @param xMinusMean {@code x - mean}.
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,190,* @param norm Normalization factor.
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,191,* @param i2s2 Inverse of twice the square of the standard deviation.
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,192,* @return the value of the Gaussian at {@code x}.
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,194,"private static double value(double xMinusMean,"
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,195,"double norm,"
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,196,double i2s2) {
True,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,src/main/java/org/apache/commons/math/analysis/function/Gaussian.java,197,return norm * FastMath.exp(-xMinusMean * xMinusMean * i2s2);
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,22,import org.apache.commons.math.exception.NullArgumentException;
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,23,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,90,@Test(expected=NullArgumentException.class)
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,91,public void testParametricUsage1() {
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,92,final Gaussian.Parametric g = new Gaussian.Parametric();
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,93,"g.value(0, null);"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,96,@Test(expected=DimensionMismatchException.class)
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,97,public void testParametricUsage2() {
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,98,final Gaussian.Parametric g = new Gaussian.Parametric();
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,99,"g.value(0, new double[] {0});"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,102,@Test(expected=NotStrictlyPositiveException.class)
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,103,public void testParametricUsage3() {
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,104,final Gaussian.Parametric g = new Gaussian.Parametric();
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,105,"g.value(0, new double[] {0, 1, 0});"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,108,@Test(expected=NullArgumentException.class)
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,109,public void testParametricUsage4() {
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,110,final Gaussian.Parametric g = new Gaussian.Parametric();
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,111,"g.gradient(0, null);"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,114,@Test(expected=DimensionMismatchException.class)
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,115,public void testParametricUsage5() {
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,116,final Gaussian.Parametric g = new Gaussian.Parametric();
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,117,"g.gradient(0, new double[] {0});"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,120,@Test(expected=NotStrictlyPositiveException.class)
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,121,public void testParametricUsage6() {
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,122,final Gaussian.Parametric g = new Gaussian.Parametric();
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,123,"g.gradient(0, new double[] {0, 1, 0});"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,126,@Test
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,127,public void testParametricValue() {
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,128,final double norm = 2;
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,129,final double mean = 3;
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,130,final double sigma = 4;
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,131,"final Gaussian f = new Gaussian(norm, mean, sigma);"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,133,final Gaussian.Parametric g = new Gaussian.Parametric();
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,134,"Assert.assertEquals(f.value(-1), g.value(-1, new double[] {norm, mean, sigma}), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,135,"Assert.assertEquals(f.value(0), g.value(0, new double[] {norm, mean, sigma}), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,136,"Assert.assertEquals(f.value(2), g.value(2, new double[] {norm, mean, sigma}), 0);"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,139,@Test
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,140,public void testParametricGradient() {
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,141,final double norm = 2;
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,142,final double mean = 3;
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,143,final double sigma = 4;
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,144,final Gaussian.Parametric f = new Gaussian.Parametric();
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,146,final double x = 1;
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,147,"final double[] grad = f.gradient(1, new double[] {norm, mean, sigma});"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,148,final double diff = x - mean;
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,149,final double n = FastMath.exp(-diff * diff / (2 * sigma * sigma));
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,150,"Assert.assertEquals(n, grad[0], EPS);"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,151,final double m = norm * n * diff / (sigma * sigma);
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,152,"Assert.assertEquals(m, grad[1], EPS);"
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,153,final double s = m * diff / sigma;
True,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,src/test/java/org/apache/commons/math/analysis/function/GaussianTest.java,154,"Assert.assertEquals(s, grad[2], EPS);"

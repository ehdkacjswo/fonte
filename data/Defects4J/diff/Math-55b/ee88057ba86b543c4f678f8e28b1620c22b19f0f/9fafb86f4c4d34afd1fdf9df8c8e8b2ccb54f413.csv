is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,22,mport java.util.Collection;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,22,import java.util.List;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,870, Compute the angle phi of this complex number.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,871, @return the angle phi of this complex number
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,870,* <p>Compute the argument of this complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,871,* </p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,872,* <p>The argument is the angle phi between the positive real axis and the point
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,873,* representing this number in the complex plane. The value returned is between -PI (not inclusive)
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,874,"* and PI (inclusive), with negative values returned for numbers with negative imaginary parts."
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,875,* </p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,876,"* <p>If either real or imaginary part (or both) is NaN, NaN is returned.  Infinite parts are handled"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,877,"* as java.Math.atan2 handles them, essentially treating finite parts as zero in the presence of"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,878,* an infinite coordinate and returning a multiple of pi/4 depending on the signs of the infinite
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,879,* parts.  See the javadoc for java.Math.atan2 for full details.</p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,881,* @return the argument of this complex number
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,873,ublic double getPhi() {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,883,public double getArgument() {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,878, Compute the n-th root of this complex number.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,879, <p>
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,880, For a given n it implements the formula: <pre>
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,881," <code> z_k = pow( abs , 1.0/n ) * (cos(phi + k * 2&pi;) + i * (sin(phi + k * 2&pi;)</code></pre></p>"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,882," with <i><code>k=0, 1, ..., n-1</code></i> and <i><code>pow(abs, 1.0 / n)</code></i> is the nth root of the absolute-value."
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,883, <p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,888,* <p>Computes the n-th roots of this complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,889,* </p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,890,* <p>The nth roots are defined by the formula: <pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,891,* <code> z<sub>k</sub> = abs<sup> 1/n</sup> (cos(phi + 2&pi;k/n) + i (sin(phi + 2&pi;k/n))</code></pre>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,892,"* for <i><code>k=0, 1, ..., n-1</code></i>, where <code>abs</code> and <code>phi</code> are"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,893,* respectively the {@link #abs() modulus} and {@link #getArgument() argument} of this complex number.
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,894,* </p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,895,"* <p>If one or both parts of this complex number is NaN, a list with just one element,"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,896,*  {@link #NaN} is returned.</p>
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,897,"* <p>if neither part is NaN, but at least one part is infinite, the result is a one-element"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,898,* list containing {@link #INF}.</p>
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,886, @return Collection<Complex> all nth roots of this complex number as a Collection
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,887, @throws IllegalArgumentException if parameter n is negative
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,901,* @return List<Complex> all nth roots of this complex number
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,902,* @throws IllegalArgumentException if parameter n is less than or equal to 0
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,890,ublic Collection<Complex> nthRoot(int n) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,905,public List<Complex> nthRoot(int n) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,912,List<Complex> result = new ArrayList<Complex>();
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,914,if (isNaN()) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,915,result.add(Complex.NaN);
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,916,return result;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,919,if (isInfinite()) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,920,result.add(Complex.INF);
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,921,return result;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,897,ollection<Complex> result = new ArrayList<Complex>();
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,899,/ nth root of abs
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,924,// nth root of abs -- faster / more accurate to use a solver here?
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,903,inal double phi = getPhi();
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,928,final double nthPhi = getArgument()/n;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,929,final double slice = 2 * Math.PI / n;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,930,double innerPart = nthPhi;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,906,inal double innerPart     = (phi + k * 2 * Math.PI) / n;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,936,innerPart += slice;
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,22,import java.util.List;
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,804,ublic void testNthRoot_cornercase_thirdRoot_realPartEmpty() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,806,public void testNthRoot_cornercase_thirdRoot_realPartZero() {
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,826,/ third root of z = 1 + NaN * i
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,827,or (Complex c : oneNaN.nthRoot(3)) {
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,828,/ both parts should be nan
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,829,"ssertEquals(nan, c.getReal());"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,830,"ssertEquals(nan, c.getImaginary());"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,832,/ third root of z = inf + NaN * i
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,833,or (Complex c : infNaN.nthRoot(3)) {
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,834,/ both parts should be nan
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,835,"ssertEquals(nan, c.getReal());"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,836,"ssertEquals(nan, c.getImaginary());"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,838,/ third root of z = neginf + 1 * i
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,839,omplex[] zInfOne = negInfOne.nthRoot(2).toArray(new Complex[0]);
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,840,/ first root
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,841,"ssertEquals(inf, zInfOne[0].getReal());"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,842,"ssertEquals(inf, zInfOne[0].getImaginary());"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,843,/ second root
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,844,"ssertEquals(neginf, zInfOne[1].getReal());"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,845,"ssertEquals(neginf, zInfOne[1].getImaginary());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,828,// NaN + finite -> NaN
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,829,List<Complex> roots = oneNaN.nthRoot(3);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,830,"assertEquals(1,roots.size());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,831,"assertEquals(Complex.NaN, roots.get(0));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,833,roots = nanZero.nthRoot(3);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,834,"assertEquals(1,roots.size());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,835,"assertEquals(Complex.NaN, roots.get(0));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,837,// NaN + infinite -> NaN
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,838,roots = nanInf.nthRoot(3);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,839,"assertEquals(1,roots.size());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,840,"assertEquals(Complex.NaN, roots.get(0));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,842,// finite + infinite -> Inf
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,843,roots = oneInf.nthRoot(3);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,844,"assertEquals(1,roots.size());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,845,"assertEquals(Complex.INF, roots.get(0));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,847,// infinite + infinite -> Inf
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,848,roots = negInfInf.nthRoot(3);
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,849,"assertEquals(1,roots.size());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,850,"assertEquals(Complex.INF, roots.get(0));"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,854,* Test standard values
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,856,public void testGetArgument() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,857,"Complex z = new Complex(1, 0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,858,"assertEquals(0.0, z.getArgument(), 1.0e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,860,"z = new Complex(1, 1);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,861,"assertEquals(Math.PI/4, z.getArgument(), 1.0e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,863,"z = new Complex(0, 1);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,864,"assertEquals(Math.PI/2, z.getArgument(), 1.0e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,866,"z = new Complex(-1, 1);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,867,"assertEquals(3 * Math.PI/4, z.getArgument(), 1.0e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,869,"z = new Complex(-1, 0);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,870,"assertEquals(Math.PI, z.getArgument(), 1.0e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,872,"z = new Complex(-1, -1);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,873,"assertEquals(-3 * Math.PI/4, z.getArgument(), 1.0e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,875,"z = new Complex(0, -1);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,876,"assertEquals(-Math.PI/2, z.getArgument(), 1.0e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,878,"z = new Complex(1, -1);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,879,"assertEquals(-Math.PI/4, z.getArgument(), 1.0e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,884,* Verify atan2-style handling of infinite parts
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,886,public void testGetArgumentInf() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,887,"assertEquals(Math.PI/4, infInf.getArgument(), 1.0e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,888,"assertEquals(Math.PI/2, oneInf.getArgument(), 1.0e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,889,"assertEquals(0.0, infOne.getArgument(), 1.0e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,890,"assertEquals(Math.PI/2, zeroInf.getArgument(), 1.0e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,891,"assertEquals(0.0, infZero.getArgument(), 1.0e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,892,"assertEquals(Math.PI, negInfOne.getArgument(), 1.0e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,893,"assertEquals(-3.0*Math.PI/4, negInfNegInf.getArgument(), 1.0e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,894,"assertEquals(-Math.PI/2, oneNegInf.getArgument(), 1.0e-12);"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,898,* Verify that either part NaN results in NaN
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,900,public void testGetArgumentNaN() {
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,901,"assertEquals(nan, nanZero.getArgument());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,902,"assertEquals(nan, zeroNaN.getArgument());"
True,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,903,"assertEquals(nan, Complex.NaN.getArgument());"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,576, else {
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,577,ouble cost1 = ((PointCostPair) o1).cost;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,578,ouble cost2 = ((PointCostPair) o2).cost;
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,579,eturn (cost1 < cost2) ? -1 : ((o1 == o2) ? 0 : +1);
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,577,double cost1 = ((PointCostPair) o1).cost;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,578,double cost2 = ((PointCostPair) o2).cost;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,579,return (cost1 < cost2) ? -1 : ((o1 == o2) ? 0 : +1);

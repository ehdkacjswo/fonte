is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//compress/src/java/org/apache/commons/compress/tar/TarBuffer.java,v 1.1 2003/11/23 20:07:46 bayard Exp $"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,3,* $Revision: 1.1 $
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,4,* $Date: 2003/11/23 20:07:46 $
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,8,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,10,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,11,* reserved.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,13,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,14,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,15,* are met:
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,17,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,18,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,20,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,21,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,22,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,23,*    distribution.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,25,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,26,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,27,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,28,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,29,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,30,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,32,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,33,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,34,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,35,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,37,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,38,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,39,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,41,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,42,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,43,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,44,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,45,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,46,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,47,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,48,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,49,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,50,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,51,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,52,* SUCH DAMAGE.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,55,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,56,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,57,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,58,* <http://www.apache.org/>.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,61,package org.apache.commons.compress.tar;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,63,import java.io.IOException;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,64,import java.io.InputStream;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,65,import java.io.OutputStream;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,68,* The TarBuffer class implements the tar archive concept of a buffered input
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,69,* stream. This concept goes back to the days of blocked tape drives and special
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,70,"* io devices. In the Java universe, the only real function that this class"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,71,"* performs is to ensure that files have the correct ""block"" size, or other tars"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,72,* will complain. <p>
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,74,* You should never have a need to access this class directly. TarBuffers are
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,75,* created by Tar IO Streams.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,77,"* @author <a href=""mailto:time@ice.com"">Timothy Gerard Endres</a>"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,78,"* @author <a href=""mailto:peter@apache.org"">Peter Donald</a>"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,79,* @version $Revision: 1.1 $ $Date: 2003/11/23 20:07:46 $
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,81,class TarBuffer
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,83,public static final int DEFAULT_RECORDSIZE = ( 512 );
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,84,public static final int DEFAULT_BLOCKSIZE = ( DEFAULT_RECORDSIZE * 20 );
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,86,private byte[] m_blockBuffer;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,87,private int m_blockSize;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,88,private int m_currBlkIdx;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,89,private int m_currRecIdx;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,90,private boolean m_debug;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,92,private InputStream m_input;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,93,private OutputStream m_output;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,94,private int m_recordSize;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,95,private int m_recsPerBlock;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,97,public TarBuffer( final InputStream input )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,99,"this( input, TarBuffer.DEFAULT_BLOCKSIZE );"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,102,"public TarBuffer( final InputStream input, final int blockSize )"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,104,"this( input, blockSize, TarBuffer.DEFAULT_RECORDSIZE );"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,107,"public TarBuffer( final InputStream input,"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,108,"final int blockSize,"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,109,final int recordSize )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,111,m_input = input;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,112,"initialize( blockSize, recordSize );"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,115,public TarBuffer( final OutputStream output )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,117,"this( output, TarBuffer.DEFAULT_BLOCKSIZE );"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,120,"public TarBuffer( final OutputStream output, final int blockSize )"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,122,"this( output, blockSize, TarBuffer.DEFAULT_RECORDSIZE );"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,125,"public TarBuffer( final OutputStream output,"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,126,"final int blockSize,"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,127,final int recordSize )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,129,m_output = output;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,130,"initialize( blockSize, recordSize );"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,134,* Set the debugging flag for the buffer.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,136,"* @param debug If true, print debugging output."
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,138,public void setDebug( final boolean debug )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,140,m_debug = debug;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,144,* Get the TAR Buffer's block size. Blocks consist of multiple records.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,146,* @return The BlockSize value
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,148,public int getBlockSize()
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,150,return m_blockSize;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,154,"* Get the current block number, zero based."
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,156,* @return The current zero based block number.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,158,public int getCurrentBlockNum()
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,160,return m_currBlkIdx;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,164,"* Get the current record number, within the current block, zero based."
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,165,"* Thus, current offset = (currentBlockNum * recsPerBlk) + currentRecNum."
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,167,* @return The current zero based record number.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,169,public int getCurrentRecordNum()
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,171,return m_currRecIdx - 1;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,175,* Get the TAR Buffer's record size.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,177,* @return The RecordSize value
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,179,public int getRecordSize()
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,181,return m_recordSize;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,185,* Determine if an archive record indicate End of Archive. End of archive is
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,186,* indicated by a record that consists entirely of null bytes.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,188,* @param record The record data to check.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,189,* @return The EOFRecord value
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,191,public boolean isEOFRecord( final byte[] record )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,193,final int size = getRecordSize();
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,194,for( int i = 0; i < size; ++i )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,196,if( record[ i ] != 0 )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,198,return false;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,202,return true;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,206,"* Close the TarBuffer. If this is an output buffer, also flush the current"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,207,* block before closing.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,209,public void close()
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,210,throws IOException
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,212,if( m_debug )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,214,"debug( ""TarBuffer.closeBuffer()."" );"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,217,if( null != m_output )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,219,flushBlock();
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,221,if( m_output != System.out && m_output != System.err )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,223,m_output.close();
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,224,m_output = null;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,227,else if( m_input != null )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,229,if( m_input != System.in )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,231,m_input.close();
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,232,m_input = null;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,238,* Read a record from the input stream and return the data.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,240,* @return The record data.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,241,* @exception IOException Description of Exception
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,243,public byte[] readRecord()
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,244,throws IOException
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,246,if( m_debug )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,248,"final String message = ""ReadRecord: recIdx = "" + m_currRecIdx +"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,249,""" blkIdx = "" + m_currBlkIdx;"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,250,debug( message );
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,253,if( null == m_input )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,255,"final String message = ""reading from an output buffer"";"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,256,throw new IOException( message );
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,259,if( m_currRecIdx >= m_recsPerBlock )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,261,if( !readBlock() )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,263,return null;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,267,final byte[] result = new byte[ m_recordSize ];
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,268,"System.arraycopy( m_blockBuffer,"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,269,"( m_currRecIdx * m_recordSize ),"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,270,"result,"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,271,"0,"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,272,m_recordSize );
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,274,m_currRecIdx++;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,276,return result;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,280,* Skip over a record on the input stream.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,282,public void skipRecord()
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,283,throws IOException
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,285,if( m_debug )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,287,"final String message = ""SkipRecord: recIdx = "" + m_currRecIdx +"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,288,""" blkIdx = "" + m_currBlkIdx;"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,289,debug( message );
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,292,if( null == m_input )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,294,"final String message = ""reading (via skip) from an output buffer"";"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,295,throw new IOException( message );
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,298,if( m_currRecIdx >= m_recsPerBlock )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,300,if( !readBlock() )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,302,return;// UNDONE
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,306,m_currRecIdx++;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,310,* Write an archive record to the archive.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,312,* @param record The record data to write to the archive.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,314,public void writeRecord( final byte[] record )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,315,throws IOException
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,317,if( m_debug )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,319,"final String message = ""WriteRecord: recIdx = "" + m_currRecIdx +"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,320,""" blkIdx = "" + m_currBlkIdx;"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,321,debug( message );
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,324,if( null == m_output )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,326,"final String message = ""writing to an input buffer"";"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,327,throw new IOException( message );
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,330,if( record.length != m_recordSize )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,332,"final String message = ""record to write has length '"" +"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,333,"record.length + ""' which is not the record size of '"" +"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,334,"m_recordSize + ""'"";"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,335,throw new IOException( message );
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,338,if( m_currRecIdx >= m_recsPerBlock )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,340,writeBlock();
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,343,"System.arraycopy( record,"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,344,"0,"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,345,"m_blockBuffer,"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,346,"( m_currRecIdx * m_recordSize ),"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,347,m_recordSize );
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,349,m_currRecIdx++;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,353,"* Write an archive record to the archive, where the record may be inside of"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,354,"* a larger array buffer. The buffer must be ""offset plus record size"" long."
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,356,* @param buffer The buffer containing the record data to write.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,357,* @param offset The offset of the record data within buf.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,359,"public void writeRecord( final byte[] buffer, final int offset )"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,360,throws IOException
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,362,if( m_debug )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,364,"final String message = ""WriteRecord: recIdx = "" + m_currRecIdx +"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,365,""" blkIdx = "" + m_currBlkIdx;"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,366,debug( message );
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,369,if( null == m_output )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,371,"final String message = ""writing to an input buffer"";"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,372,throw new IOException( message );
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,375,if( ( offset + m_recordSize ) > buffer.length )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,377,"final String message = ""record has length '"" + buffer.length +"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,378,"""' with offset '"" + offset + ""' which is less than the record size of '"" +"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,379,"m_recordSize + ""'"";"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,380,throw new IOException( message );
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,383,if( m_currRecIdx >= m_recsPerBlock )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,385,writeBlock();
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,388,"System.arraycopy( buffer,"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,389,"offset,"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,390,"m_blockBuffer,"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,391,"( m_currRecIdx * m_recordSize ),"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,392,m_recordSize );
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,394,m_currRecIdx++;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,398,* Flush the current data block if it has any data in it.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,400,private void flushBlock()
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,401,throws IOException
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,403,if( m_debug )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,405,"final String message = ""TarBuffer.flushBlock() called."";"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,406,debug( message );
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,409,if( m_output == null )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,411,"final String message = ""writing to an input buffer"";"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,412,throw new IOException( message );
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,415,if( m_currRecIdx > 0 )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,417,writeBlock();
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,422,* Initialization common to all constructors.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,424,"private void initialize( final int blockSize, final int recordSize )"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,426,m_debug = false;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,427,m_blockSize = blockSize;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,428,m_recordSize = recordSize;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,429,m_recsPerBlock = ( m_blockSize / m_recordSize );
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,430,m_blockBuffer = new byte[ m_blockSize ];
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,432,if( null != m_input )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,434,m_currBlkIdx = -1;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,435,m_currRecIdx = m_recsPerBlock;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,437,else
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,439,m_currBlkIdx = 0;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,440,m_currRecIdx = 0;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,445,"* @return false if End-Of-File, else true"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,447,private boolean readBlock()
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,448,throws IOException
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,450,if( m_debug )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,452,"final String message = ""ReadBlock: blkIdx = "" + m_currBlkIdx;"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,453,debug( message );
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,456,if( null == m_input )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,458,"final String message = ""reading from an output buffer"";"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,459,throw new IOException( message );
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,462,m_currRecIdx = 0;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,464,int offset = 0;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,465,int bytesNeeded = m_blockSize;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,467,while( bytesNeeded > 0 )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,469,"final long numBytes = m_input.read( m_blockBuffer, offset, bytesNeeded );"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,472,// NOTE
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,473,"// We have fit EOF, and the block is not full!"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,475,// This is a broken archive. It does not follow the standard
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,476,"// blocking algorithm. However, because we are generous, and"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,477,"// it requires little effort, we will simply ignore the error"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,478,// and continue as if the entire block were read. This does
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,479,// not appear to break anything upstream. We used to return
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,480,// false in this case.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,482,// Thanks to 'Yohann.Roussel@alcatel.fr' for this fix.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,484,if( numBytes == -1 )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,486,break;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,489,offset += numBytes;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,490,bytesNeeded -= numBytes;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,492,if( numBytes != m_blockSize )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,494,if( m_debug )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,496,"System.err.println( ""ReadBlock: INCOMPLETE READ """
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,497,"+ numBytes + "" of "" + m_blockSize"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,498,"+ "" bytes read."" );"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,503,m_currBlkIdx++;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,505,return true;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,509,* Write a TarBuffer block to the archive.
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,511,* @exception IOException Description of Exception
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,513,private void writeBlock()
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,514,throws IOException
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,516,if( m_debug )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,518,"final String message = ""WriteBlock: blkIdx = "" + m_currBlkIdx;"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,519,debug( message );
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,522,if( null == m_output )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,524,"final String message = ""writing to an input buffer"";"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,525,throw new IOException( message );
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,528,"m_output.write( m_blockBuffer, 0, m_blockSize );"
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,529,m_output.flush();
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,531,m_currRecIdx = 0;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,532,m_currBlkIdx++;
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,535,protected void debug( final String message )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,537,if( m_debug )
True,src/java/org/apache/commons/compress/tar/TarBuffer.java,src/java/org/apache/commons/compress/tar/TarBuffer.java,539,System.err.println( message );
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//compress/src/java/org/apache/commons/compress/tar/TarConstants.java,v 1.1 2003/11/23 20:07:46 bayard Exp $"
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,3,* $Revision: 1.1 $
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,4,* $Date: 2003/11/23 20:07:46 $
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,8,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,10,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,11,* reserved.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,13,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,14,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,15,* are met:
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,17,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,18,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,20,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,21,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,22,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,23,*    distribution.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,25,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,26,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,27,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,28,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,29,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,30,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,32,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,33,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,34,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,35,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,37,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,38,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,39,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,41,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,42,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,43,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,44,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,45,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,46,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,47,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,48,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,49,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,50,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,51,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,52,* SUCH DAMAGE.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,55,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,56,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,57,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,58,* <http://www.apache.org/>.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,61,package org.apache.commons.compress.tar;
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,64,* This interface contains all the definitions used in the package.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,66,"* @author <a href=""mailto:time@ice.com"">Timothy Gerard Endres</a>"
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,67,"* @author <a href=""mailto:stefano@apache.org"">Stefano Mazzocchi</a>"
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,68,* @version $Revision: 1.1 $ $Date: 2003/11/23 20:07:46 $
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,70,interface TarConstants
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,73,* The length of the mode field in a header buffer.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,75,int MODELEN = 8;
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,78,* The length of the user id field in a header buffer.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,80,int UIDLEN = 8;
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,83,* The length of the group id field in a header buffer.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,85,int GIDLEN = 8;
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,88,* The length of the checksum field in a header buffer.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,90,int CHKSUMLEN = 8;
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,93,* The length of the size field in a header buffer.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,95,int SIZELEN = 12;
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,98,* The length of the magic field in a header buffer.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,100,int MAGICLEN = 8;
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,103,* The length of the modification time field in a header buffer.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,105,int MODTIMELEN = 12;
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,108,* The length of the user name field in a header buffer.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,110,int UNAMELEN = 32;
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,113,* The length of the group name field in a header buffer.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,115,int GNAMELEN = 32;
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,118,* The length of the devices field in a header buffer.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,120,int DEVLEN = 8;
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,123,"* LF_ constants represent the ""link flag"" of an entry, or more commonly,"
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,124,"* the ""entry type"". This is the ""old way"" of indicating a normal file."
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,126,byte LF_OLDNORM = 0;
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,129,* Normal file type.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,131,byte LF_NORMAL = (byte)'0';
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,134,* Link file type.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,136,byte LF_LINK = (byte)'1';
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,139,* Symbolic link file type.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,141,byte LF_SYMLINK = (byte)'2';
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,144,* Character device file type.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,146,byte LF_CHR = (byte)'3';
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,149,* Block device file type.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,151,byte LF_BLK = (byte)'4';
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,154,* Directory file type.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,156,byte LF_DIR = (byte)'5';
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,159,* FIFO (pipe) file type.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,161,byte LF_FIFO = (byte)'6';
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,164,* Contiguous file type.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,166,byte LF_CONTIG = (byte)'7';
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,169,* The magic tag representing a POSIX tar archive.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,171,"String TMAGIC = ""ustar"";"
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,174,* The magic tag representing a GNU tar archive.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,176,"String GNU_TMAGIC = ""ustar  "";"
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,179,* The namr of the GNU tar entry which contains a long name.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,181,"String GNU_LONGLINK = ""././@LongLink"";"
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,184,* Identifies the *next* file on the tape as having a long name.
True,src/java/org/apache/commons/compress/tar/TarConstants.java,src/java/org/apache/commons/compress/tar/TarConstants.java,186,byte LF_GNUTYPE_LONGNAME = (byte)'L';
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//compress/src/java/org/apache/commons/compress/tar/TarEntry.java,v 1.1 2003/11/23 20:07:46 bayard Exp $"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,3,* $Revision: 1.1 $
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,4,* $Date: 2003/11/23 20:07:46 $
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,8,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,10,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,11,* reserved.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,13,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,14,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,15,* are met:
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,17,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,18,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,20,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,21,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,22,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,23,*    distribution.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,25,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,26,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,27,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,28,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,29,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,30,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,32,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,33,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,34,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,35,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,37,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,38,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,39,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,41,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,42,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,43,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,44,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,45,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,46,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,47,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,48,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,49,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,50,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,51,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,52,* SUCH DAMAGE.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,55,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,56,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,57,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,58,* <http://www.apache.org/>.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,61,package org.apache.commons.compress.tar;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,63,import java.io.File;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,64,import java.util.Date;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,65,import java.util.Locale;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,68,* This class represents an entry in a Tar archive. It consists of the entry's
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,69,"* header, as well as the entry's File. Entries can be instantiated in one of"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,70,"* three ways, depending on how they are to be used. <p>"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,72,* TarEntries that are created from the header bytes read from an archive are
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,73,* instantiated with the TarEntry( byte[] ) constructor. These entries will be
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,74,* used when extracting from or listing the contents of an archive. These
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,75,* entries have their header filled in using the header bytes. They also set the
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,76,"* File to null, since they reference an archive entry not a file. <p>"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,78,* TarEntries that are created from Files that are to be written into an archive
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,79,* are instantiated with the TarEntry( File ) constructor. These entries have
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,80,* their header filled in using the File's information. They also keep a
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,81,* reference to the File for convenience when writing entries. <p>
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,83,"* Finally, TarEntries can be constructed from nothing but a name. This allows"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,84,"* the programmer to construct the entry by hand, for instance when only an"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,85,"* InputStream is available for writing to the archive, and the header"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,86,* information is constructed from other information. In this case the header
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,87,* fields are set to defaults and the File is set to null. <p>
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,89,* The C structure for a Tar Entry's header is: <pre>
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,90,* struct header {
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,91,* char name[NAMSIZ];
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,92,* char mode[8];
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,93,* char uid[8];
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,94,* char gid[8];
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,95,* char size[12];
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,96,* char mtime[12];
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,97,* char chksum[8];
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,98,* char linkflag;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,99,* char linkname[NAMSIZ];
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,100,* char magic[8];
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,101,* char uname[TUNMLEN];
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,102,* char gname[TGNMLEN];
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,103,* char devmajor[8];
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,104,* char devminor[8];
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,105,* } header;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,106,* </pre>
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,108,"* @author <a href=""mailto:time@ice.com"">Timothy Gerard Endres</a>"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,109,"* @author <a href=""mailto:stefano@apache.org"">Stefano Mazzocchi</a>"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,110,"* @author <a href=""mailto:peter@apache.org"">Peter Donald</a>"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,111,* @version $Revision: 1.1 $ $Date: 2003/11/23 20:07:46 $
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,112,* @see TarInputStream
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,113,* @see TarOutputStream
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,115,public class TarEntry
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,118,* The length of the name field in a header buffer.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,120,public static final int NAMELEN = 100;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,123,* The entry's modification time.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,125,private int m_checkSum;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,128,* The entry's group name.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,130,private int m_devMajor;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,133,* The entry's major device number.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,135,private int m_devMinor;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,138,* The entry's minor device number.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,140,private File m_file;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,143,* The entry's user id.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,145,private int m_groupID;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,148,* The entry's user name.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,150,private StringBuffer m_groupName;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,153,* The entry's checksum.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,155,private byte m_linkFlag;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,158,* The entry's link flag.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,160,private StringBuffer m_linkName;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,163,* The entry's link name.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,165,private StringBuffer m_magic;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,168,* The entry's size.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,170,private long m_modTime;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,173,* The entry's name.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,175,private int m_mode;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,177,private StringBuffer m_name;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,180,* The entry's group id.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,182,private long m_size;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,185,* The entry's permission mode.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,187,private int m_userID;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,190,* The entry's magic tag.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,192,private StringBuffer m_userName;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,195,* Construct an entry with only a name. This allows the programmer to
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,196,"* construct the entry's header ""by hand"". File is set to null."
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,198,* @param name the name of the entry
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,200,public TarEntry( final String name )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,202,this();
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,204,"final boolean isDir = name.endsWith( ""/"" );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,206,m_name = new StringBuffer( name );
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,207,m_mode = isDir ? 040755 : 0100644;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,208,m_linkFlag = isDir ? TarConstants.LF_DIR : TarConstants.LF_NORMAL;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,209,m_modTime = ( new Date() ).getTime() / 1000;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,210,"m_linkName = new StringBuffer( """" );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,211,"m_userName = new StringBuffer( """" );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,212,"m_groupName = new StringBuffer( """" );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,216,* Construct an entry with a name an a link flag.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,218,* @param name Description of Parameter
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,219,* @param linkFlag Description of Parameter
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,221,"public TarEntry( final String name, final byte linkFlag )"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,223,this( name );
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,224,m_linkFlag = linkFlag;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,228,"* Construct an entry for a file. File is set to file, and the header is"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,229,* constructed from information from the file.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,231,* @param file The file that the entry represents.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,233,public TarEntry( final File file )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,235,this();
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,237,m_file = file;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,239,String name = file.getPath();
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,241,// Strip off drive letters!
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,242,final String osName =
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,243,"System.getProperty( ""os.name"" ).toLowerCase( Locale.US );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,244,"if( -1 != osName.indexOf( ""netware"" ) )"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,246,if( name.length() > 2 )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,248,final char ch1 = name.charAt( 0 );
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,249,final char ch2 = name.charAt( 1 );
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,251,if( ch2 == ':' &&
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,252,( ( ch1 >= 'a' && ch1 <= 'z' ) ||
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,253,( ch1 >= 'A' && ch1 <= 'Z' ) ) )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,255,name = name.substring( 2 );
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,259,"else if( -1 != osName.indexOf( ""netware"" ) )"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,261,final int colon = name.indexOf( ':' );
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,262,if( colon != -1 )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,264,name = name.substring( colon + 1 );
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,268,"name = name.replace( File.separatorChar, '/' );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,270,// No absolute pathnames
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,271,"// Windows (and Posix?) paths can start with ""\\NetworkDrive\"","
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,272,// so we loop on starting /'s.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,273,"while( name.startsWith( ""/"" ) )"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,275,name = name.substring( 1 );
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,278,"m_linkName = new StringBuffer( """" );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,279,m_name = new StringBuffer( name );
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,281,if( file.isDirectory() )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,283,m_mode = 040755;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,284,m_linkFlag = TarConstants.LF_DIR;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,286,if( m_name.charAt( m_name.length() - 1 ) != '/' )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,288,"m_name.append( ""/"" );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,291,else
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,293,m_mode = 0100644;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,294,m_linkFlag = TarConstants.LF_NORMAL;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,297,m_size = file.length();
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,298,m_modTime = file.lastModified() / 1000;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,299,m_checkSum = 0;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,300,m_devMajor = 0;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,301,m_devMinor = 0;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,305,* Construct an entry from an archive's header bytes. File is set to null.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,307,* @param header The header bytes from a tar archive entry.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,309,public TarEntry( final byte[] header )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,311,this();
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,312,parseTarHeader( header );
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,316,* Construct an empty entry and prepares the header values.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,318,private TarEntry()
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,320,m_magic = new StringBuffer( TarConstants.TMAGIC );
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,321,m_name = new StringBuffer();
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,322,m_linkName = new StringBuffer();
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,324,"String user = System.getProperty( ""user.name"", """" );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,325,if( user.length() > 31 )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,327,"user = user.substring( 0, 31 );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,330,m_userName = new StringBuffer( user );
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,331,"m_groupName = new StringBuffer( """" );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,335,* Set this entry's group id.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,337,* @param groupId This entry's new group id.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,339,public void setGroupID( final int groupId )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,341,m_groupID = groupId;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,345,* Set this entry's group id.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,347,* @param groupId This entry's new group id.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,348,* @deprecated Use setGroupID() instead
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,349,* @see #setGroupID(int)
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,351,public void setGroupId( final int groupId )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,353,m_groupID = groupId;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,357,* Set this entry's group name.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,359,* @param groupName This entry's new group name.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,361,public void setGroupName( final String groupName )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,363,m_groupName = new StringBuffer( groupName );
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,367,* Set this entry's modification time. The parameter passed to this method
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,368,"* is in ""Java time""."
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,370,* @param time This entry's new modification time.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,372,public void setModTime( final long time )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,374,m_modTime = time / 1000;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,378,* Set this entry's modification time.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,380,* @param time This entry's new modification time.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,382,public void setModTime( final Date time )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,384,m_modTime = time.getTime() / 1000;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,388,* Set the mode for this entry
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,390,* @param mode The new Mode value
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,392,public void setMode( final int mode )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,394,m_mode = mode;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,398,* Set this entry's name.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,400,* @param name This entry's new name.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,402,public void setName( final String name )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,404,m_name = new StringBuffer( name );
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,408,* Set this entry's file size.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,410,* @param size This entry's new file size.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,412,public void setSize( final long size )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,414,m_size = size;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,418,* Set this entry's user id.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,420,* @param userId This entry's new user id.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,422,public void setUserID( final int userId )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,424,m_userID = userId;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,428,* Set this entry's user id.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,430,* @param userId This entry's new user id.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,431,* @deprecated Use setUserID() instead
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,432,* @see #setUserID(int)
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,434,public void setUserId( final int userId )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,436,m_userID = userId;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,440,* Set this entry's user name.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,442,* @param userName This entry's new user name.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,444,public void setUserName( final String userName )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,446,m_userName = new StringBuffer( userName );
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,450,"* If this entry represents a file, and the file is a directory, return an"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,451,* array of TarEntries for this entry's children.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,453,* @return An array of TarEntry's for this entry's children.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,455,public TarEntry[] getDirectoryEntries()
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,457,if( null == m_file || !m_file.isDirectory() )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,459,return new TarEntry[ 0 ];
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,462,final String[] list = m_file.list();
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,463,final TarEntry[] result = new TarEntry[ list.length ];
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,465,for( int i = 0; i < list.length; ++i )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,467,"result[ i ] = new TarEntry( new File( m_file, list[ i ] ) );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,470,return result;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,474,* Get this entry's file.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,476,* @return This entry's file.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,478,public File getFile()
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,480,return m_file;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,484,* Get this entry's group id.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,486,* @return This entry's group id.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,487,* @deprecated Use getGroupID() instead
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,488,* @see #getGroupID()
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,490,public int getGroupId()
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,492,return m_groupID;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,496,* Get this entry's group id.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,498,* @return This entry's group id.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,500,public int getGroupID()
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,502,return m_groupID;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,506,* Get this entry's group name.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,508,* @return This entry's group name.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,510,public String getGroupName()
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,512,return m_groupName.toString();
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,516,* Set this entry's modification time.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,518,* @return The ModTime value
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,520,public Date getModTime()
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,522,return new Date( m_modTime * 1000 );
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,526,* Get this entry's mode.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,528,* @return This entry's mode.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,530,public int getMode()
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,532,return m_mode;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,536,* Get this entry's name.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,538,* @return This entry's name.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,540,public String getName()
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,542,return m_name.toString();
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,546,* Get this entry's file size.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,548,* @return This entry's file size.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,550,public long getSize()
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,552,return m_size;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,556,* Get this entry's checksum.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,558,* @return This entry's checksum.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,560,public int getCheckSum()
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,562,return m_checkSum;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,566,* Get this entry's user id.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,568,* @return This entry's user id.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,569,* @deprecated Use getUserID() instead
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,570,* @see #getUserID()
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,572,public int getUserId()
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,574,return m_userID;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,578,* Get this entry's user id.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,580,* @return This entry's user id.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,582,public int getUserID()
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,584,return m_userID;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,588,* Get this entry's user name.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,590,* @return This entry's user name.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,592,public String getUserName()
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,594,return m_userName.toString();
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,598,* Determine if the given entry is a descendant of this entry. Descendancy
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,599,* is determined by the name of the descendant starting with this entry's
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,600,* name.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,602,* @param desc Entry to be checked as a descendent of
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,603,* @return True if entry is a descendant of
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,605,public boolean isDescendent( final TarEntry desc )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,607,return desc.getName().startsWith( getName() );
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,611,* Return whether or not this entry represents a directory.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,613,* @return True if this entry is a directory.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,615,public boolean isDirectory()
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,617,if( m_file != null )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,619,return m_file.isDirectory();
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,622,if( m_linkFlag == TarConstants.LF_DIR )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,624,return true;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,627,"if( getName().endsWith( ""/"" ) )"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,629,return true;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,632,return false;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,636,* Indicate if this entry is a GNU long name block
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,638,* @return true if this is a long name extension provided by GNU tar
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,640,public boolean isGNULongNameEntry()
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,642,return m_linkFlag == TarConstants.LF_GNUTYPE_LONGNAME &&
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,643,m_name.toString().equals( TarConstants.GNU_LONGLINK );
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,647,* Determine if the two entries are equal. Equality is determined by the
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,648,* header names being equal.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,650,* @param other Entry to be checked for equality.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,651,* @return True if the entries are equal.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,653,public boolean equals( final TarEntry other )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,655,return getName().equals( other.getName() );
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,659,* Parse an entry's header information from a header buffer.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,661,* @param header The tar entry header buffer to get information from.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,663,private void parseTarHeader( final byte[] header )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,665,int offset = 0;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,667,"m_name = TarUtils.parseName( header, offset, NAMELEN );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,668,offset += NAMELEN;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,669,"m_mode = (int)TarUtils.parseOctal( header, offset, TarConstants.MODELEN );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,670,offset += TarConstants.MODELEN;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,671,"m_userID = (int)TarUtils.parseOctal( header, offset, TarConstants.UIDLEN );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,672,offset += TarConstants.UIDLEN;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,673,"m_groupID = (int)TarUtils.parseOctal( header, offset, TarConstants.GIDLEN );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,674,offset += TarConstants.GIDLEN;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,675,"m_size = TarUtils.parseOctal( header, offset, TarConstants.SIZELEN );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,676,offset += TarConstants.SIZELEN;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,677,"m_modTime = TarUtils.parseOctal( header, offset, TarConstants.MODTIMELEN );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,678,offset += TarConstants.MODTIMELEN;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,679,"m_checkSum = (int)TarUtils.parseOctal( header, offset, TarConstants.CHKSUMLEN );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,680,offset += TarConstants.CHKSUMLEN;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,681,m_linkFlag = header[ offset++ ];
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,682,"m_linkName = TarUtils.parseName( header, offset, NAMELEN );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,683,offset += NAMELEN;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,684,"m_magic = TarUtils.parseName( header, offset, TarConstants.MAGICLEN );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,685,offset += TarConstants.MAGICLEN;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,686,"m_userName = TarUtils.parseName( header, offset, TarConstants.UNAMELEN );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,687,offset += TarConstants.UNAMELEN;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,688,"m_groupName = TarUtils.parseName( header, offset, TarConstants.GNAMELEN );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,689,offset += TarConstants.GNAMELEN;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,690,"m_devMajor = (int)TarUtils.parseOctal( header, offset, TarConstants.DEVLEN );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,691,offset += TarConstants.DEVLEN;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,692,"m_devMinor = (int)TarUtils.parseOctal( header, offset, TarConstants.DEVLEN );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,696,* Write an entry's header information to a header buffer.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,698,* @param buffer The tar entry header buffer to fill in.
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,700,public void writeEntryHeader( final byte[] buffer )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,702,int offset = 0;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,704,"offset = TarUtils.getNameBytes( m_name, buffer, offset, NAMELEN );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,705,"offset = TarUtils.getOctalBytes( m_mode, buffer, offset, TarConstants.MODELEN );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,706,"offset = TarUtils.getOctalBytes( m_userID, buffer, offset, TarConstants.UIDLEN );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,707,"offset = TarUtils.getOctalBytes( m_groupID, buffer, offset, TarConstants.GIDLEN );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,708,"offset = TarUtils.getLongOctalBytes( m_size, buffer, offset, TarConstants.SIZELEN );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,709,"offset = TarUtils.getLongOctalBytes( m_modTime, buffer, offset, TarConstants.MODTIMELEN );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,711,final int checkSumOffset = offset;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,712,for( int i = 0; i < TarConstants.CHKSUMLEN; ++i )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,714,buffer[ offset++ ] = (byte)' ';
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,717,buffer[ offset++ ] = m_linkFlag;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,718,"offset = TarUtils.getNameBytes( m_linkName, buffer, offset, NAMELEN );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,719,"offset = TarUtils.getNameBytes( m_magic, buffer, offset, TarConstants.MAGICLEN );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,720,"offset = TarUtils.getNameBytes( m_userName, buffer, offset, TarConstants.UNAMELEN );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,721,"offset = TarUtils.getNameBytes( m_groupName, buffer, offset, TarConstants.GNAMELEN );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,722,"offset = TarUtils.getOctalBytes( m_devMajor, buffer, offset, TarConstants.DEVLEN );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,723,"offset = TarUtils.getOctalBytes( m_devMinor, buffer, offset, TarConstants.DEVLEN );"
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,725,while( offset < buffer.length )
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,727,buffer[ offset++ ] = 0;
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,730,final long checkSum = TarUtils.computeCheckSum( buffer );
True,src/java/org/apache/commons/compress/tar/TarEntry.java,src/java/org/apache/commons/compress/tar/TarEntry.java,731,"TarUtils.getCheckSumOctalBytes( checkSum, buffer, checkSumOffset, TarConstants.CHKSUMLEN );"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//compress/src/java/org/apache/commons/compress/tar/TarInputStream.java,v 1.1 2003/11/23 20:07:46 bayard Exp $"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,3,* $Revision: 1.1 $
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,4,* $Date: 2003/11/23 20:07:46 $
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,8,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,10,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,11,* reserved.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,13,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,14,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,15,* are met:
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,17,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,18,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,20,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,21,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,22,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,23,*    distribution.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,25,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,26,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,27,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,28,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,29,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,30,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,32,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,33,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,34,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,35,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,37,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,38,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,39,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,41,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,42,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,43,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,44,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,45,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,46,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,47,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,48,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,49,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,50,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,51,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,52,* SUCH DAMAGE.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,55,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,56,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,57,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,58,* <http://www.apache.org/>.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,61,package org.apache.commons.compress.tar;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,63,import java.io.FilterInputStream;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,64,import java.io.IOException;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,65,import java.io.InputStream;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,66,import java.io.OutputStream;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,69,* The TarInputStream reads a UNIX tar archive as an InputStream. methods are
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,70,"* provided to position at each successive entry in the archive, and the read"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,71,* each entry as a normal input stream using read().
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,73,"* @author <a href=""mailto:time@ice.com"">Timothy Gerard Endres</a>"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,74,"* @author <a href=""mailto:stefano@apache.org"">Stefano Mazzocchi</a>"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,75,"* @author <a href=""mailto:peter@apache.org"">Peter Donald</a>"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,76,* @version $Revision: 1.1 $ $Date: 2003/11/23 20:07:46 $
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,77,* @see TarInputStream
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,78,* @see TarEntry
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,80,public class TarInputStream
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,81,extends FilterInputStream
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,83,private TarBuffer m_buffer;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,84,private TarEntry m_currEntry;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,85,private boolean m_debug;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,86,private int m_entryOffset;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,87,private int m_entrySize;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,88,private boolean m_hasHitEOF;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,89,private byte[] m_oneBuf;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,90,private byte[] m_readBuf;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,93,* Construct a TarInputStream using specified input
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,94,* stream and default block and record sizes.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,96,* @param input stream to create TarInputStream from
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,97,* @see TarBuffer#DEFAULT_BLOCKSIZE
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,98,* @see TarBuffer#DEFAULT_RECORDSIZE
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,100,public TarInputStream( final InputStream input )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,102,"this( input, TarBuffer.DEFAULT_BLOCKSIZE, TarBuffer.DEFAULT_RECORDSIZE );"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,106,* Construct a TarInputStream using specified input
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,107,"* stream, block size and default record sizes."
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,109,* @param input stream to create TarInputStream from
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,110,* @param blockSize the block size to use
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,111,* @see TarBuffer#DEFAULT_RECORDSIZE
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,113,"public TarInputStream( final InputStream input,"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,114,final int blockSize )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,116,"this( input, blockSize, TarBuffer.DEFAULT_RECORDSIZE );"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,120,* Construct a TarInputStream using specified input
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,121,"* stream, block size and record sizes."
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,123,* @param input stream to create TarInputStream from
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,124,* @param blockSize the block size to use
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,125,* @param recordSize the record size to use
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,127,"public TarInputStream( final InputStream input,"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,128,"final int blockSize,"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,129,final int recordSize )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,131,super( input );
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,133,"m_buffer = new TarBuffer( input, blockSize, recordSize );"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,134,m_oneBuf = new byte[ 1 ];
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,138,* Sets the debugging flag.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,140,* @param debug The new Debug value
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,142,public void setDebug( final boolean debug )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,144,m_debug = debug;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,145,m_buffer.setDebug( debug );
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,149,* Get the next entry in this tar archive. This will skip over any remaining
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,150,"* data in the current entry, if there is one, and place the input stream at"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,151,"* the header of the next entry, and read the header and instantiate a new"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,152,* TarEntry from the header bytes and return that entry. If there are no
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,153,"* more entries in the archive, null will be returned to indicate that the"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,154,* end of the archive has been reached.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,156,"* @return The next TarEntry in the archive, or null."
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,157,* @exception IOException Description of Exception
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,159,public TarEntry getNextEntry()
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,160,throws IOException
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,162,if( m_hasHitEOF )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,164,return null;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,167,if( m_currEntry != null )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,169,final int numToSkip = m_entrySize - m_entryOffset;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,171,if( m_debug )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,173,"final String message = ""TarInputStream: SKIP currENTRY '"" +"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,174,"m_currEntry.getName() + ""' SZ "" + m_entrySize +"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,175,""" OFF "" + m_entryOffset + ""  skipping "" + numToSkip + "" bytes"";"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,176,debug( message );
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,179,if( numToSkip > 0 )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,181,skip( numToSkip );
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,184,m_readBuf = null;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,187,final byte[] headerBuf = m_buffer.readRecord();
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,188,if( headerBuf == null )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,190,if( m_debug )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,192,"debug( ""READ NULL RECORD"" );"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,194,m_hasHitEOF = true;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,196,else if( m_buffer.isEOFRecord( headerBuf ) )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,198,if( m_debug )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,200,"debug( ""READ EOF RECORD"" );"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,202,m_hasHitEOF = true;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,205,if( m_hasHitEOF )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,207,m_currEntry = null;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,209,else
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,211,m_currEntry = new TarEntry( headerBuf );
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,213,if( !( headerBuf[ 257 ] == 'u' && headerBuf[ 258 ] == 's' &&
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,214,headerBuf[ 259 ] == 't' && headerBuf[ 260 ] == 'a' &&
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,215,headerBuf[ 261 ] == 'r' ) )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,217,//Must be v7Format
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,220,if( m_debug )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,222,"final String message = ""TarInputStream: SET CURRENTRY '"" +"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,223,"m_currEntry.getName() + ""' size = "" + m_currEntry.getSize();"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,224,debug( message );
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,227,m_entryOffset = 0;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,229,// REVIEW How do we resolve this discrepancy?!
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,230,m_entrySize = (int)m_currEntry.getSize();
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,233,if( null != m_currEntry && m_currEntry.isGNULongNameEntry() )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,235,// read in the name
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,236,final StringBuffer longName = new StringBuffer();
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,237,final byte[] buffer = new byte[ 256 ];
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,238,int length = 0;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,239,while( ( length = read( buffer ) ) >= 0 )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,241,"final String str = new String( buffer, 0, length );"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,242,longName.append( str );
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,244,getNextEntry();
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,245,m_currEntry.setName( longName.toString() );
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,248,return m_currEntry;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,252,* Get the record size being used by this stream's TarBuffer.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,254,* @return The TarBuffer record size.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,256,public int getRecordSize()
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,258,return m_buffer.getRecordSize();
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,262,* Get the available data that can be read from the current entry in the
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,263,* archive. This does not indicate how much data is left in the entire
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,264,"* archive, only in the current entry. This value is determined from the"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,265,* entry's size header field and the amount of data already read from the
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,266,* current entry.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,268,* @return The number of available bytes for the current entry.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,269,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,271,public int available()
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,272,throws IOException
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,274,return m_entrySize - m_entryOffset;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,278,* Closes this stream. Calls the TarBuffer's close() method.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,280,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,282,public void close()
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,283,throws IOException
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,285,m_buffer.close();
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,289,* Copies the contents of the current tar archive entry directly into an
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,290,* output stream.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,292,* @param output The OutputStream into which to write the entry's data.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,293,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,295,public void copyEntryContents( final OutputStream output )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,296,throws IOException
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,298,final byte[] buffer = new byte[ 32 * 1024 ];
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,299,while( true )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,301,"final int numRead = read( buffer, 0, buffer.length );"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,302,if( numRead == -1 )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,304,break;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,307,"output.write( buffer, 0, numRead );"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,312,"* Since we do not support marking just yet, we do nothing."
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,314,* @param markLimit The limit to mark.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,316,public void mark( int markLimit )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,321,"* Since we do not support marking just yet, we return false."
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,323,* @return False.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,325,public boolean markSupported()
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,327,return false;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,331,* Reads a byte from the current tar archive entry. This method simply calls
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,332,"* read( byte[], int, int )."
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,334,"* @return The byte read, or -1 at EOF."
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,335,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,337,public int read()
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,338,throws IOException
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,340,"final int num = read( m_oneBuf, 0, 1 );"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,341,if( num == -1 )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,343,return num;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,345,else
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,347,return (int)m_oneBuf[ 0 ];
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,352,* Reads bytes from the current tar archive entry. This method simply calls
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,353,"* read( byte[], int, int )."
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,355,* @param buffer The buffer into which to place bytes read.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,356,"* @return The number of bytes read, or -1 at EOF."
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,357,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,359,public int read( final byte[] buffer )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,360,throws IOException
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,362,"return read( buffer, 0, buffer.length );"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,366,* Reads bytes from the current tar archive entry. This method is aware of
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,367,* the boundaries of the current entry in the archive and will deal with
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,368,* them as if they were this stream's start and EOF.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,370,* @param buffer The buffer into which to place bytes read.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,371,* @param offset The offset at which to place bytes read.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,372,* @param count The number of bytes to read.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,373,"* @return The number of bytes read, or -1 at EOF."
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,374,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,376,"public int read( final byte[] buffer,"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,377,"final int offset,"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,378,final int count )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,379,throws IOException
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,381,int position = offset;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,382,int numToRead = count;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,383,int totalRead = 0;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,385,if( m_entryOffset >= m_entrySize )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,387,return -1;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,390,if( ( numToRead + m_entryOffset ) > m_entrySize )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,392,numToRead = ( m_entrySize - m_entryOffset );
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,395,if( null != m_readBuf )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,397,final int size =
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,398,( numToRead > m_readBuf.length ) ? m_readBuf.length : numToRead;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,400,"System.arraycopy( m_readBuf, 0, buffer, position, size );"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,402,if( size >= m_readBuf.length )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,404,m_readBuf = null;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,406,else
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,408,final int newLength = m_readBuf.length - size;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,409,final byte[] newBuffer = new byte[ newLength ];
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,411,"System.arraycopy( m_readBuf, size, newBuffer, 0, newLength );"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,413,m_readBuf = newBuffer;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,416,totalRead += size;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,417,numToRead -= size;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,418,position += size;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,421,while( numToRead > 0 )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,423,final byte[] rec = m_buffer.readRecord();
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,424,if( null == rec )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,426,// Unexpected EOF!
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,427,final String message =
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,428,"""unexpected EOF with "" + numToRead + "" bytes unread"";"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,429,throw new IOException( message );
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,432,int size = numToRead;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,433,final int recordLength = rec.length;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,435,if( recordLength > size )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,437,"System.arraycopy( rec, 0, buffer, position, size );"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,439,m_readBuf = new byte[ recordLength - size ];
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,441,"System.arraycopy( rec, size, m_readBuf, 0, recordLength - size );"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,443,else
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,445,size = recordLength;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,447,"System.arraycopy( rec, 0, buffer, position, recordLength );"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,450,totalRead += size;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,451,numToRead -= size;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,452,position += size;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,455,m_entryOffset += totalRead;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,457,return totalRead;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,461,"* Since we do not support marking just yet, we do nothing."
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,463,public void reset()
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,468,* Skip bytes in the input buffer. This skips bytes in the current entry's
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,469,"* data, not the entire archive, and will stop at the end of the current"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,470,* entry's data if the number to skip extends beyond that point.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,472,* @param numToSkip The number of bytes to skip.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,473,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,475,public void skip( final int numToSkip )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,476,throws IOException
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,478,// REVIEW
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,479,"// This is horribly inefficient, but it ensures that we"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,480,// properly skip over bytes via the TarBuffer...
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,482,final byte[] skipBuf = new byte[ 8 * 1024 ];
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,483,int num = numToSkip;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,484,while( num > 0 )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,486,final int count = ( num > skipBuf.length ) ? skipBuf.length : num;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,487,"final int numRead = read( skipBuf, 0, count );"
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,488,if( numRead == -1 )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,490,break;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,493,num -= numRead;
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,498,* Utility method to do debugging.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,499,* Capable of being overidden in sub-classes.
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,501,* @param message the message to use in debugging
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,503,protected void debug( final String message )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,505,if( m_debug )
True,src/java/org/apache/commons/compress/tar/TarInputStream.java,src/java/org/apache/commons/compress/tar/TarInputStream.java,507,System.err.println( message );
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//compress/src/java/org/apache/commons/compress/tar/TarOutputStream.java,v 1.1 2003/11/23 20:07:46 bayard Exp $"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,3,* $Revision: 1.1 $
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,4,* $Date: 2003/11/23 20:07:46 $
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,8,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,10,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,11,* reserved.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,13,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,14,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,15,* are met:
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,17,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,18,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,20,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,21,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,22,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,23,*    distribution.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,25,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,26,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,27,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,28,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,29,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,30,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,32,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,33,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,34,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,35,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,37,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,38,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,39,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,41,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,42,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,43,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,44,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,45,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,46,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,47,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,48,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,49,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,50,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,51,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,52,* SUCH DAMAGE.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,55,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,56,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,57,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,58,* <http://www.apache.org/>.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,61,package org.apache.commons.compress.tar;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,63,import java.io.FilterOutputStream;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,64,import java.io.IOException;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,65,import java.io.InputStream;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,66,import java.io.OutputStream;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,69,* The TarOutputStream writes a UNIX tar archive as an OutputStream. Methods are
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,70,"* provided to put entries, and then write their contents by writing to this"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,71,* stream using write().
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,73,"* @author Timothy Gerard Endres <a href=""mailto:time@ice.com"">time@ice.com</a>"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,74,"* @author <a href=""mailto:peter@apache.org"">Peter Donald</a>"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,75,* @version $Revision: 1.1 $ $Date: 2003/11/23 20:07:46 $
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,76,* @see TarInputStream
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,77,* @see TarEntry
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,79,public class TarOutputStream
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,80,extends FilterOutputStream
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,83,* Flag to indicate that an error should be generated if
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,84,* an attempt is made to write an entry that exceeds the 100 char
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,85,* POSIX limit.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,87,public static final int LONGFILE_ERROR = 0;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,90,* Flag to indicate that entry name should be truncated if
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,91,* an attempt is made to write an entry that exceeds the 100 char
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,92,* POSIX limit.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,94,public static final int LONGFILE_TRUNCATE = 1;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,97,* Flag to indicate that entry name should be formatted
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,98,* according to GNU tar extension if an attempt is made
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,99,* to write an entry that exceeds the 100 char POSIX
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,100,* limit. Note that this makes the jar unreadable by
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,101,* non-GNU tar commands.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,103,public static final int LONGFILE_GNU = 2;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,105,private int m_longFileMode = LONGFILE_ERROR;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,106,private byte[] m_assemBuf;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,107,private int m_assemLen;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,108,private TarBuffer m_buffer;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,109,private int m_currBytes;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,110,private int m_currSize;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,112,private byte[] m_oneBuf;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,113,private byte[] m_recordBuf;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,116,* Construct a TarOutputStream using specified input
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,117,* stream and default block and record sizes.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,119,* @param output stream to create TarOutputStream from
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,120,* @see TarBuffer#DEFAULT_BLOCKSIZE
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,121,* @see TarBuffer#DEFAULT_RECORDSIZE
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,123,public TarOutputStream( final OutputStream output )
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,125,"this( output, TarBuffer.DEFAULT_BLOCKSIZE, TarBuffer.DEFAULT_RECORDSIZE );"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,129,* Construct a TarOutputStream using specified input
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,130,"* stream, block size and default record sizes."
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,132,* @param output stream to create TarOutputStream from
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,133,* @param blockSize the block size
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,134,* @see TarBuffer#DEFAULT_RECORDSIZE
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,136,"public TarOutputStream( final OutputStream output,"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,137,final int blockSize )
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,139,"this( output, blockSize, TarBuffer.DEFAULT_RECORDSIZE );"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,143,* Construct a TarOutputStream using specified input
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,144,"* stream, block size and record sizes."
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,146,* @param output stream to create TarOutputStream from
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,147,* @param blockSize the block size
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,148,* @param recordSize the record size
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,150,"public TarOutputStream( final OutputStream output,"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,151,"final int blockSize,"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,152,final int recordSize )
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,154,super( output );
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,156,"m_buffer = new TarBuffer( output, blockSize, recordSize );"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,157,m_assemLen = 0;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,158,m_assemBuf = new byte[ recordSize ];
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,159,m_recordBuf = new byte[ recordSize ];
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,160,m_oneBuf = new byte[ 1 ];
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,164,* Sets the debugging flag in this stream's TarBuffer.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,166,* @param debug The new BufferDebug value
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,168,public void setBufferDebug( boolean debug )
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,170,m_buffer.setDebug( debug );
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,174,* Set the mode used to work with entrys exceeding
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,175,* 100 chars (and thus break the POSIX standard).
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,176,* Must be one of the LONGFILE_* constants.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,178,* @param longFileMode the mode
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,180,public void setLongFileMode( final int longFileMode )
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,182,if( LONGFILE_ERROR != longFileMode &&
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,183,LONGFILE_GNU != longFileMode &&
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,184,LONGFILE_TRUNCATE != longFileMode )
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,186,"throw new IllegalArgumentException( ""longFileMode"" );"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,188,m_longFileMode = longFileMode;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,192,* Get the record size being used by this stream's TarBuffer.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,194,* @return The TarBuffer record size.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,196,public int getRecordSize()
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,198,return m_buffer.getRecordSize();
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,202,* Ends the TAR archive and closes the underlying OutputStream. This means
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,203,* that finish() is called followed by calling the TarBuffer's close().
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,205,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,207,public void close()
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,208,throws IOException
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,210,finish();
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,211,m_buffer.close();
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,215,* Close an entry. This method MUST be called for all file entries that
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,216,* contain data. The reason is that we must buffer data written to the
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,217,"* stream in order to satisfy the buffer's record based writes. Thus, there"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,218,* may be data fragments still being assembled that must be written to the
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,219,* output stream before this entry is closed and the next entry written.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,221,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,223,public void closeEntry()
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,224,throws IOException
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,226,if( m_assemLen > 0 )
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,228,for( int i = m_assemLen; i < m_assemBuf.length; ++i )
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,230,m_assemBuf[ i ] = 0;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,233,m_buffer.writeRecord( m_assemBuf );
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,235,m_currBytes += m_assemLen;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,236,m_assemLen = 0;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,239,if( m_currBytes < m_currSize )
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,241,"final String message = ""entry closed at '"" + m_currBytes +"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,242,"""' before the '"" + m_currSize +"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,243,"""' bytes specified in the header were written"";"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,244,throw new IOException( message );
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,249,* Ends the TAR archive without closing the underlying OutputStream. The
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,250,* result is that the EOF record of nulls is written.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,252,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,254,public void finish()
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,255,throws IOException
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,257,writeEOFRecord();
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,261,* Put an entry on the output stream. This writes the entry's header record
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,262,* and positions the output stream for writing the contents of the entry.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,263,"* Once this method is called, the stream is ready for calls to write() to"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,264,"* write the entry's contents. Once the contents are written, closeEntry()"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,265,* <B>MUST</B> be called to ensure that all buffered data is completely
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,266,* written to the output stream.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,268,* @param entry The TarEntry to be written to the archive.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,269,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,271,public void putNextEntry( final TarEntry entry )
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,272,throws IOException
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,274,if( entry.getName().length() >= TarEntry.NAMELEN )
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,276,if( m_longFileMode == LONGFILE_GNU )
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,278,"// create a TarEntry for the LongLink, the contents"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,279,// of which are the entry's name
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,280,final TarEntry longLinkEntry =
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,281,"new TarEntry( TarConstants.GNU_LONGLINK,"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,282,TarConstants.LF_GNUTYPE_LONGNAME );
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,284,longLinkEntry.setSize( entry.getName().length() );
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,285,putNextEntry( longLinkEntry );
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,286,write( entry.getName().getBytes() );
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,287,//write( 0 );
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,288,closeEntry();
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,290,else if( m_longFileMode != LONGFILE_TRUNCATE )
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,292,"final String message = ""file name '"" + entry.getName() +"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,293,"""' is too long ( > "" + TarEntry.NAMELEN + "" bytes)"";"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,294,throw new IOException( message );
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,298,entry.writeEntryHeader( m_recordBuf );
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,299,m_buffer.writeRecord( m_recordBuf );
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,301,m_currBytes = 0;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,303,if( entry.isDirectory() )
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,305,m_currSize = 0;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,307,else
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,309,m_currSize = (int)entry.getSize();
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,314,* Copies the contents of the specified stream into current tar
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,315,* archive entry.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,317,* @param input The InputStream from which to read entrys data
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,318,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,320,public void copyEntryContents( final InputStream input )
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,321,throws IOException
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,323,final byte[] buffer = new byte[ 32 * 1024 ];
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,324,while( true )
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,326,"final int numRead = input.read( buffer, 0, buffer.length );"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,327,if( numRead == -1 )
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,329,break;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,332,"write( buffer, 0, numRead );"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,337,* Writes a byte to the current tar archive entry. This method simply calls
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,338,"* read( byte[], int, int )."
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,340,* @param data The byte written.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,341,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,343,public void write( final int data )
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,344,throws IOException
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,346,m_oneBuf[ 0 ] = (byte)data;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,348,"write( m_oneBuf, 0, 1 );"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,352,* Writes bytes to the current tar archive entry. This method simply calls
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,353,"* write( byte[], int, int )."
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,355,* @param buffer The buffer to write to the archive.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,356,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,358,public void write( final byte[] buffer )
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,359,throws IOException
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,361,"write( buffer, 0, buffer.length );"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,365,* Writes bytes to the current tar archive entry. This method is aware of
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,366,* the current entry and will throw an exception if you attempt to write
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,367,* bytes past the length specified for the current entry. The method is also
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,368,"* (painfully) aware of the record buffering required by TarBuffer, and"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,369,"* manages buffers that are not a multiple of recordsize in length,"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,370,* including assembling records from small buffers.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,372,* @param buffer The buffer to write to the archive.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,373,* @param offset The offset in the buffer from which to get bytes.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,374,* @param count The number of bytes to write.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,375,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,377,"public void write( final byte[] buffer,"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,378,"final int offset,"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,379,final int count )
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,380,throws IOException
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,382,int position = offset;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,383,int numToWrite = count;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,384,if( ( m_currBytes + numToWrite ) > m_currSize )
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,386,"final String message = ""request to write '"" + numToWrite +"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,387,"""' bytes exceeds size in header of '"" + m_currSize + ""' bytes"";"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,388,throw new IOException( message );
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,390,// We have to deal with assembly!!!
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,391,// The programmer can be writing little 32 byte chunks for all
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,392,"// we know, and we must assemble complete records for writing."
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,393,// REVIEW Maybe this should be in TarBuffer? Could that help to
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,394,// eliminate some of the buffer copying.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,398,if( m_assemLen > 0 )
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,400,if( ( m_assemLen + numToWrite ) >= m_recordBuf.length )
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,402,final int length = m_recordBuf.length - m_assemLen;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,404,"System.arraycopy( m_assemBuf, 0, m_recordBuf, 0,"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,405,m_assemLen );
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,406,"System.arraycopy( buffer, position, m_recordBuf,"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,407,"m_assemLen, length );"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,408,m_buffer.writeRecord( m_recordBuf );
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,410,m_currBytes += m_recordBuf.length;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,411,position += length;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,412,numToWrite -= length;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,413,m_assemLen = 0;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,415,else
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,417,"System.arraycopy( buffer, position, m_assemBuf, m_assemLen,"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,418,numToWrite );
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,420,position += numToWrite;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,421,m_assemLen += numToWrite;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,422,numToWrite -= numToWrite;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,427,// When we get here we have EITHER:
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,428,"// o An empty ""assemble"" buffer."
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,429,// o No bytes to write (numToWrite == 0)
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,431,while( numToWrite > 0 )
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,433,if( numToWrite < m_recordBuf.length )
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,435,"System.arraycopy( buffer, position, m_assemBuf, m_assemLen,"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,436,numToWrite );
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,438,m_assemLen += numToWrite;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,440,break;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,443,"m_buffer.writeRecord( buffer, position );"
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,445,int num = m_recordBuf.length;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,447,m_currBytes += num;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,448,numToWrite -= num;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,449,position += num;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,454,* Write an EOF (end of archive) record to the tar archive. An EOF record
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,455,* consists of a record of all zeros.
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,457,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,459,private void writeEOFRecord()
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,460,throws IOException
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,462,for( int i = 0; i < m_recordBuf.length; ++i )
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,464,m_recordBuf[ i ] = 0;
True,src/java/org/apache/commons/compress/tar/TarOutputStream.java,src/java/org/apache/commons/compress/tar/TarOutputStream.java,467,m_buffer.writeRecord( m_recordBuf );
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//compress/src/java/org/apache/commons/compress/tar/TarUtils.java,v 1.1 2003/11/23 20:07:46 bayard Exp $"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,3,* $Revision: 1.1 $
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,4,* $Date: 2003/11/23 20:07:46 $
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,8,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,10,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,11,* reserved.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,13,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,14,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,15,* are met:
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,17,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,18,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,20,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,21,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,22,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,23,*    distribution.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,25,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,26,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,27,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,28,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,29,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,30,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,32,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,33,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,34,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,35,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,37,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,38,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,39,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,41,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,42,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,43,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,44,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,45,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,46,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,47,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,48,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,49,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,50,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,51,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,52,* SUCH DAMAGE.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,55,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,56,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,57,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,58,* <http://www.apache.org/>.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,61,package org.apache.commons.compress.tar;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,64,* This class provides static utility methods to work with byte streams.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,66,"* @author <a href=""mailto:time@ice.com"">Timothy Gerard Endres</a>"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,67,"* @author <a href=""mailto:stefano@apache.org"">Stefano Mazzocchi</a>"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,68,* @version $Revision: 1.1 $ $Date: 2003/11/23 20:07:46 $
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,70,class TarUtils
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,73,* Parse the checksum octal integer from a header buffer.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,75,* @param offset The offset into the buffer from which to parse.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,76,* @param length The number of header bytes to parse.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,77,* @param value Description of Parameter
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,78,* @param buf Description of Parameter
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,79,* @return The integer value of the entry's checksum.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,81,"public static int getCheckSumOctalBytes( final long value,"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,82,"final byte[] buf,"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,83,"final int offset,"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,84,final int length )
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,86,"getOctalBytes( value, buf, offset, length );"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,88,buf[ offset + length - 1 ] = (byte)' ';
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,89,buf[ offset + length - 2 ] = 0;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,91,return offset + length;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,95,* Parse an octal long integer from a header buffer.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,97,* @param offset The offset into the buffer from which to parse.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,98,* @param length The number of header bytes to parse.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,99,* @param value Description of Parameter
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,100,* @param buf Description of Parameter
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,101,* @return The long value of the octal bytes.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,103,"public static int getLongOctalBytes( final long value,"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,104,"final byte[] buf,"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,105,"final int offset,"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,106,final int length )
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,108,byte[] temp = new byte[ length + 1 ];
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,110,"getOctalBytes( value, temp, 0, length + 1 );"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,111,"System.arraycopy( temp, 0, buf, offset, length );"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,113,return offset + length;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,117,* Determine the number of bytes in an entry name.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,119,* @param offset The offset into the buffer from which to parse.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,120,* @param length The number of header bytes to parse.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,121,* @param name Description of Parameter
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,122,* @param buffer Description of Parameter
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,123,* @return The number of bytes in a header's entry name.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,125,"public static int getNameBytes( final StringBuffer name,"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,126,"final byte[] buffer,"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,127,"final int offset,"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,128,final int length )
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,130,int i;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,132,for( i = 0; i < length && i < name.length(); ++i )
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,134,buffer[ offset + i ] = (byte)name.charAt( i );
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,137,for( ; i < length; ++i )
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,139,buffer[ offset + i ] = 0;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,142,return offset + length;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,146,* Parse an octal integer from a header buffer.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,148,* @param offset The offset into the buffer from which to parse.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,149,* @param length The number of header bytes to parse.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,150,* @return The integer value of the octal bytes.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,152,"public static int getOctalBytes( final long value,"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,153,"final byte[] buffer,"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,154,"final int offset,"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,155,final int length )
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,157,int idx = length - 1;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,159,buffer[ offset + idx ] = 0;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,160,--idx;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,161,buffer[ offset + idx ] = (byte)' ';
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,162,--idx;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,164,if( value == 0 )
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,166,buffer[ offset + idx ] = (byte)'0';
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,167,--idx;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,169,else
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,171,long val = value;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,172,while( idx >= 0 && val > 0 )
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,174,buffer[ offset + idx ] = (byte)( (byte)'0' + (byte)( val & 7 ) );
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,175,val = val >> 3;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,176,idx--;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,180,while( idx >= 0 )
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,182,buffer[ offset + idx ] = (byte)' ';
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,183,idx--;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,186,return offset + length;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,190,* Compute the checksum of a tar entry header.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,192,* @param buffer The tar entry's header buffer.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,193,* @return The computed checksum.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,195,public static long computeCheckSum( final byte[] buffer )
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,197,long sum = 0;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,199,for( int i = 0; i < buffer.length; ++i )
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,201,sum += 255 & buffer[ i ];
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,204,return sum;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,208,* Parse an entry name from a header buffer.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,210,* @param header The header buffer from which to parse.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,211,* @param offset The offset into the buffer from which to parse.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,212,* @param length The number of header bytes to parse.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,213,* @return The header's entry name.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,215,"public static StringBuffer parseName( final byte[] header,"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,216,"final int offset,"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,217,final int length )
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,219,StringBuffer result = new StringBuffer( length );
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,220,int end = offset + length;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,222,for( int i = offset; i < end; ++i )
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,224,if( header[ i ] == 0 )
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,226,break;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,229,result.append( (char)header[ i ] );
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,232,return result;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,236,* Parse an octal string from a header buffer. This is used for the file
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,237,* permission mode value.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,239,* @param header The header buffer from which to parse.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,240,* @param offset The offset into the buffer from which to parse.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,241,* @param length The number of header bytes to parse.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,242,* @return The long value of the octal string.
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,244,"public static long parseOctal( final byte[] header,"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,245,"final int offset,"
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,246,final int length )
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,248,long result = 0;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,249,boolean stillPadding = true;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,250,int end = offset + length;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,252,for( int i = offset; i < end; ++i )
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,254,if( header[ i ] == 0 )
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,256,break;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,259,if( header[ i ] == (byte)' ' || header[ i ] == '0' )
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,261,if( stillPadding )
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,263,continue;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,266,if( header[ i ] == (byte)' ' )
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,268,break;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,272,stillPadding = false;
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,273,result = ( result << 3 ) + ( header[ i ] - '0' );
True,src/java/org/apache/commons/compress/tar/TarUtils.java,src/java/org/apache/commons/compress/tar/TarUtils.java,276,return result;
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//compress/src/java/org/apache/commons/compress/zip/AsiExtraField.java,v 1.1 2003/11/23 20:07:46 bayard Exp $"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,3,* $Revision: 1.1 $
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,4,* $Date: 2003/11/23 20:07:46 $
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,8,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,10,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,11,* reserved.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,13,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,14,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,15,* are met:
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,17,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,18,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,20,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,21,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,22,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,23,*    distribution.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,25,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,26,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,27,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,28,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,29,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,30,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,32,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,33,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,34,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,35,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,37,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,38,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,39,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,41,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,42,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,43,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,44,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,45,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,46,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,47,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,48,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,49,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,50,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,51,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,52,* SUCH DAMAGE.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,55,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,56,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,57,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,58,* <http://www.apache.org/>.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,61,package org.apache.commons.compress.zip;
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,63,import java.util.zip.CRC32;
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,64,import java.util.zip.ZipException;
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,67,* Adds Unix file permission and UID/GID fields as well as symbolic link
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,68,* handling. <p>
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,70,* This class uses the ASi extra field in the format: <pre>
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,71,*         Value         Size            Description
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,73,* (Unix3) 0x756e        Short           tag for this extra block type
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,74,*         TSize         Short           total data size for this block
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,75,*         CRC           Long            CRC-32 of the remaining data
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,76,*         Mode          Short           file permissions
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,77,*         SizDev        Long            symlink'd size OR major/minor dev num
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,78,*         UID           Short           user ID
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,79,*         GID           Short           group ID
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,80,*         (var.)        variable        symbolic link filename
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,81,"* </pre> taken from appnote.iz (Info-ZIP note, 981119) found at <a"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,82,"* href=""ftp://ftp.uu.net/pub/archiving/zip/doc/"">"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,83,* ftp://ftp.uu.net/pub/archiving/zip/doc/</a> </p> <p>
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,85,"* Short is two bytes and Long is four bytes in big endian byte and word order,"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,86,* device numbers are currently not supported.</p>
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,88,"* @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,89,* @version $Revision: 1.1 $
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,91,public class AsiExtraField
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,92,"implements ZipExtraField, UnixStat, Cloneable"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,94,private static final ZipShort HEADER_ID = new ZipShort( 0x756E );
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,97,* Standard Unix stat(2) file mode.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,99,* @since 1.1
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,101,private int m_mode;
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,104,* User ID.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,106,* @since 1.1
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,108,private int m_uid;
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,111,* Group ID.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,113,* @since 1.1
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,115,private int m_gid;
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,118,"* File this entry points to, if it is a symbolic link. <p>"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,120,* empty string - if entry is not a symbolic link.</p>
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,122,* @since 1.1
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,124,"private String m_link = """";"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,127,* Is this an entry for a directory?
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,129,* @since 1.1
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,131,private boolean m_dirFlag;
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,134,* Instance used to calculate checksums.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,136,* @since 1.1
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,138,private CRC32 m_crc = new CRC32();
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,141,* Indicate whether this entry is a directory.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,143,* @param dirFlag The new Directory value
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,144,* @since 1.1
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,146,public void setDirectory( final boolean dirFlag )
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,148,m_dirFlag = dirFlag;
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,149,m_mode = getMode( m_mode );
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,153,* Set the group id.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,155,* @param gid The new GroupId value
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,156,* @since 1.1
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,158,public void setGroupId( int gid )
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,160,m_gid = gid;
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,164,* Indicate that this entry is a symbolic link to the given filename.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,166,"* @param name Name of the file this entry links to, empty String if it is"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,167,*      not a symbolic link.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,168,* @since 1.1
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,170,public void setLinkedFile( final String name )
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,172,m_link = name;
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,173,m_mode = getMode( m_mode );
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,177,* File mode of this file.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,179,* @param mode The new Mode value
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,180,* @since 1.1
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,182,public void setMode( final int mode )
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,184,m_mode = getMode( mode );
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,188,* Set the user id.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,190,* @param uid The new UserId value
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,191,* @since 1.1
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,192,* @deprecated Use setUserID(int)
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,193,* @see #setUserID(int)
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,195,public void setUserId( final int uid )
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,197,m_uid = uid;
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,201,* Set the user id.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,203,* @param uid The new UserId value
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,205,public void setUserID( final int uid )
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,207,m_uid = uid;
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,211,* Delegate to local file data.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,213,* @return The CentralDirectoryData value
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,214,* @since 1.1
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,216,public byte[] getCentralDirectoryData()
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,218,return getLocalFileDataData();
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,222,* Delegate to local file data.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,224,* @return The CentralDirectoryLength value
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,225,* @since 1.1
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,227,public ZipShort getCentralDirectoryLength()
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,229,return getLocalFileDataLength();
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,233,* Get the group id.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,235,* @return The GroupId value
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,236,* @since 1.1
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,238,public int getGroupID()
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,240,return m_gid;
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,244,* Get the group id.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,246,* @return The GroupId value
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,247,* @since 1.1
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,248,* @deprecated Use getGroupID() instead
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,249,* @see #getGroupID()
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,251,public int getGroupId()
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,253,return m_gid;
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,257,* The Header-ID.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,259,* @return The HeaderId value
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,260,* @since 1.1
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,262,public ZipShort getHeaderID()
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,264,return HEADER_ID;
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,268,* Name of linked file
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,270,"* @return name of the file this entry links to if it is a symbolic link,"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,271,*      the empty string otherwise.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,272,* @since 1.1
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,274,public String getLinkedFile()
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,276,return m_link;
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,280,* The actual data to put into local file data - without Header-ID or length
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,281,* specifier.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,283,* @return The LocalFileDataData value
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,284,* @since 1.1
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,286,public byte[] getLocalFileDataData()
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,288,// CRC will be added later
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,289,byte[] data = new byte[ getLocalFileDataLength().getValue() - 4 ];
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,290,"System.arraycopy( ( new ZipShort( getMode() ) ).getBytes(), 0, data, 0, 2 );"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,292,byte[] linkArray = getLinkedFile().getBytes();
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,293,"System.arraycopy( ( new ZipLong( linkArray.length ) ).getBytes(),"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,294,"0, data, 2, 4 );"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,296,"System.arraycopy( ( new ZipShort( getUserID() ) ).getBytes(),"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,297,"0, data, 6, 2 );"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,298,"System.arraycopy( ( new ZipShort( getGroupID() ) ).getBytes(),"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,299,"0, data, 8, 2 );"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,301,"System.arraycopy( linkArray, 0, data, 10, linkArray.length );"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,303,m_crc.reset();
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,304,m_crc.update( data );
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,305,long checksum = m_crc.getValue();
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,307,byte[] result = new byte[ data.length + 4 ];
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,308,"System.arraycopy( ( new ZipLong( checksum ) ).getBytes(), 0, result, 0, 4 );"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,309,"System.arraycopy( data, 0, result, 4, data.length );"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,310,return result;
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,314,* Length of the extra field in the local file data - without Header-ID or
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,315,* length specifier.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,317,* @return The LocalFileDataLength value
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,318,* @since 1.1
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,320,public ZipShort getLocalFileDataLength()
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,322,return new ZipShort( 4 + // CRC
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,323,2 + // Mode
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,324,4 + // SizDev
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,325,2 + // UID
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,326,2 + // GID
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,327,getLinkedFile().getBytes().length );
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,331,* File mode of this file.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,333,* @return The Mode value
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,334,* @since 1.1
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,336,public int getMode()
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,338,return m_mode;
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,342,* Get the user id.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,344,* @return The UserId value
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,345,* @since 1.1
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,346,* @deprecated Use getUserID()
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,347,* @see #getUserID()
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,349,public int getUserId()
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,351,return m_uid;
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,355,* Get the user id.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,357,* @return The UserID value
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,359,public int getUserID()
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,361,return m_uid;
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,365,* Is this entry a directory?
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,367,* @return The Directory value
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,368,* @since 1.1
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,370,public boolean isDirectory()
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,372,return m_dirFlag && !isLink();
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,376,* Is this entry a symbolic link?
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,378,* @return The Link value
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,379,* @since 1.1
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,381,public boolean isLink()
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,383,return getLinkedFile().length() != 0;
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,387,* Populate data from this array as if it was in local file data.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,389,* @param buffer the buffer
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,390,* @param offset the offset into buffer
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,391,* @param length the length of data in buffer
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,392,* @throws ZipException on error
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,393,* @since 1.1
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,395,"public void parseFromLocalFileData( final byte[] buffer,"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,396,"final int offset,"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,397,final int length )
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,398,throws ZipException
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,401,"long givenChecksum = ( new ZipLong( buffer, offset ) ).getValue();"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,402,byte[] tmp = new byte[ length - 4 ];
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,403,"System.arraycopy( buffer, offset + 4, tmp, 0, length - 4 );"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,404,m_crc.reset();
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,405,m_crc.update( tmp );
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,406,long realChecksum = m_crc.getValue();
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,407,if( givenChecksum != realChecksum )
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,409,"throw new ZipException( ""bad CRC checksum "" + Long.toHexString( givenChecksum ) +"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,410,""" instead of "" + Long.toHexString( realChecksum ) );"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,413,"int newMode = ( new ZipShort( tmp, 0 ) ).getValue();"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,414,"byte[] linkArray = new byte[ (int)( new ZipLong( tmp, 2 ) ).getValue() ];"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,415,"m_uid = ( new ZipShort( tmp, 6 ) ).getValue();"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,416,"m_gid = ( new ZipShort( tmp, 8 ) ).getValue();"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,418,if( linkArray.length == 0 )
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,420,"m_link = """";"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,422,else
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,424,"System.arraycopy( tmp, 10, linkArray, 0, linkArray.length );"
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,425,m_link = new String( linkArray );
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,427,setDirectory( ( newMode & DIR_FLAG ) != 0 );
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,428,setMode( newMode );
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,432,* Get the file mode for given permissions with the correct file type.
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,434,* @param mode Description of Parameter
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,435,* @return The Mode value
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,436,* @since 1.1
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,438,protected int getMode( final int mode )
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,440,int type = FILE_FLAG;
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,441,if( isLink() )
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,443,type = LINK_FLAG;
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,445,else if( isDirectory() )
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,447,type = DIR_FLAG;
True,src/java/org/apache/commons/compress/zip/AsiExtraField.java,src/java/org/apache/commons/compress/zip/AsiExtraField.java,449,return type | ( mode & PERM_MASK );
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//compress/src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,v 1.1 2003/11/23 20:07:46 bayard Exp $"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,3,* $Revision: 1.1 $
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,4,* $Date: 2003/11/23 20:07:46 $
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,8,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,10,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,11,* reserved.
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,13,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,14,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,15,* are met:
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,17,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,18,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,20,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,21,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,22,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,23,*    distribution.
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,25,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,26,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,27,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,28,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,29,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,30,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,32,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,33,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,34,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,35,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,37,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,38,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,39,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,41,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,42,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,43,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,44,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,45,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,46,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,47,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,48,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,49,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,50,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,51,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,52,* SUCH DAMAGE.
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,55,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,56,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,57,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,58,* <http://www.apache.org/>.
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,61,package org.apache.commons.compress.zip;
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,63,import java.util.ArrayList;
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,64,import java.util.Hashtable;
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,65,import java.util.zip.ZipException;
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,68,* ZipExtraField related methods
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,70,"* @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,71,* @version $Revision: 1.1 $
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,73,public class ExtraFieldUtils
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,76,* Static registry of known extra fields.
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,78,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,80,private static final Hashtable c_implementations;
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,82,static
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,84,c_implementations = new Hashtable();
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,85,register( AsiExtraField.class );
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,89,"* Create an instance of the approriate ExtraField, falls back to {@link"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,90,* UnrecognizedExtraField UnrecognizedExtraField}.
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,92,* Throws java.lang.IllegalAccessException if cant create implementation.
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,94,* @param headerID the header ID
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,95,* @return the extra field implementation
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,96,* @throws InstantiationException if cant create implementation
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,97,* @throws IllegalAccessException if cant create implementation
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,98,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,100,public static ZipExtraField createExtraField( final ZipShort headerID )
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,101,"throws InstantiationException, IllegalAccessException"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,103,final Class clazz =
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,104,(Class)c_implementations.get( headerID );
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,105,if( clazz != null )
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,107,return (ZipExtraField)clazz.newInstance();
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,109,final UnrecognizedExtraField unrecognized = new UnrecognizedExtraField();
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,110,unrecognized.setHeaderID( headerID );
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,111,return unrecognized;
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,115,* Merges the central directory fields of the given ZipExtraFields.
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,117,* @param data the central directory data
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,118,* @return the merged data
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,119,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,121,public static byte[] mergeCentralDirectoryData( final ZipExtraField[] data )
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,123,int sum = 4 * data.length;
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,124,for( int i = 0; i < data.length; i++ )
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,126,sum += data[ i ].getCentralDirectoryLength().getValue();
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,128,byte[] result = new byte[ sum ];
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,129,int start = 0;
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,130,for( int i = 0; i < data.length; i++ )
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,132,"System.arraycopy( data[ i ].getHeaderID().getBytes(),"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,133,"0, result, start, 2 );"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,134,"System.arraycopy( data[ i ].getCentralDirectoryLength().getBytes(),"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,135,"0, result, start + 2, 2 );"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,136,byte[] local = data[ i ].getCentralDirectoryData();
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,137,"System.arraycopy( local, 0, result, start + 4, local.length );"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,138,start += ( local.length + 4 );
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,140,return result;
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,144,* Merges the local file data fields of the given ZipExtraFields.
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,146,* @param data the data
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,147,* @return the merged data
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,148,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,150,public static byte[] mergeLocalFileDataData( final ZipExtraField[] data )
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,152,int sum = 4 * data.length;
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,153,for( int i = 0; i < data.length; i++ )
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,155,sum += data[ i ].getLocalFileDataLength().getValue();
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,157,byte[] result = new byte[ sum ];
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,158,int start = 0;
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,159,for( int i = 0; i < data.length; i++ )
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,161,"System.arraycopy( data[ i ].getHeaderID().getBytes(),"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,162,"0, result, start, 2 );"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,163,"System.arraycopy( data[ i ].getLocalFileDataLength().getBytes(),"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,164,"0, result, start + 2, 2 );"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,165,byte[] local = data[ i ].getLocalFileDataData();
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,166,"System.arraycopy( local, 0, result, start + 4, local.length );"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,167,start += ( local.length + 4 );
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,169,return result;
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,173,* Split the array into ExtraFields and populate them with the give data.
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,175,* @param data the data to parse
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,176,* @return the parsed fields
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,177,* @exception ZipException on error
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,178,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,180,public static ZipExtraField[] parse( final byte[] data )
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,181,throws ZipException
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,183,ArrayList v = new ArrayList();
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,184,int start = 0;
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,185,while( start <= data.length - 4 )
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,187,"final ZipShort headerID = new ZipShort( data, start );"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,188,"int length = ( new ZipShort( data, start + 2 ) ).getValue();"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,189,if( start + 4 + length > data.length )
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,191,"throw new ZipException( ""data starting at "" + start + "" is in unknown format"" );"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,193,try
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,195,ZipExtraField ze = createExtraField( headerID );
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,196,"ze.parseFromLocalFileData( data, start + 4, length );"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,197,v.add( ze );
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,199,catch( InstantiationException ie )
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,201,throw new ZipException( ie.getMessage() );
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,203,catch( IllegalAccessException iae )
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,205,throw new ZipException( iae.getMessage() );
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,207,start += ( length + 4 );
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,209,if( start != data.length )
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,210,{// array not exhausted
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,211,"throw new ZipException( ""data starting at "" + start + "" is in unknown format"" );"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,214,final ZipExtraField[] result = new ZipExtraField[ v.size() ];
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,215,return (ZipExtraField[])v.toArray( result );
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,219,* Register a ZipExtraField implementation. <p>
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,221,* The given class must have a no-arg constructor and implement the {@link
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,222,* ZipExtraField ZipExtraField interface}.</p>
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,224,* @param clazz The Class for particular implementation
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,225,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,227,public static void register( final Class clazz )
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,229,try
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,231,ZipExtraField ze = (ZipExtraField)clazz.newInstance();
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,232,"c_implementations.put( ze.getHeaderID(), clazz );"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,234,catch( ClassCastException cc )
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,236,throw new RuntimeException( clazz +
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,237,""" doesn\'t implement ZipExtraField"" );"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,239,catch( InstantiationException ie )
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,241,"throw new RuntimeException( clazz + "" is not a concrete class"" );"
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,243,catch( IllegalAccessException ie )
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,245,throw new RuntimeException( clazz +
True,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/zip/ExtraFieldUtils.java,246,"""\'s no-arg constructor is not public"" );"
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//compress/src/java/org/apache/commons/compress/zip/UnixStat.java,v 1.1 2003/11/23 20:07:46 bayard Exp $"
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,3,* $Revision: 1.1 $
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,4,* $Date: 2003/11/23 20:07:46 $
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,8,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,10,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,11,* reserved.
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,13,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,14,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,15,* are met:
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,17,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,18,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,20,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,21,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,22,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,23,*    distribution.
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,25,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,26,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,27,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,28,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,29,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,30,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,32,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,33,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,34,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,35,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,37,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,38,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,39,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,41,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,42,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,43,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,44,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,45,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,46,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,47,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,48,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,49,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,50,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,51,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,52,* SUCH DAMAGE.
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,55,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,56,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,57,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,58,* <http://www.apache.org/>.
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,61,package org.apache.commons.compress.zip;
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,64,* Constants from stat.h on Unix systems.
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,66,"* @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,67,* @version $Revision: 1.1 $
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,69,public interface UnixStat
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,72,* Bits used for permissions (and sticky bit)
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,74,* @since 1.1
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,76,int PERM_MASK = 07777;
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,78,* Indicates symbolic links.
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,80,* @since 1.1
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,82,int LINK_FLAG = 0120000;
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,84,* Indicates plain files.
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,86,* @since 1.1
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,88,int FILE_FLAG = 0100000;
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,90,* Indicates directories.
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,92,* @since 1.1
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,94,int DIR_FLAG = 040000;
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,97,// somewhat arbitrary choices that are quite common for shared
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,98,// installations
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,102,* Default permissions for symbolic links.
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,104,* @since 1.1
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,106,int DEFAULT_LINK_PERM = 0777;
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,109,* Default permissions for directories.
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,111,* @since 1.1
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,113,int DEFAULT_DIR_PERM = 0755;
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,116,* Default permissions for plain files.
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,118,* @since 1.1
True,src/java/org/apache/commons/compress/zip/UnixStat.java,src/java/org/apache/commons/compress/zip/UnixStat.java,120,int DEFAULT_FILE_PERM = 0644;
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//compress/src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,v 1.1 2003/11/23 20:07:46 bayard Exp $"
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,3,* $Revision: 1.1 $
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,4,* $Date: 2003/11/23 20:07:46 $
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,8,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,10,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,11,* reserved.
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,13,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,14,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,15,* are met:
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,17,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,18,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,20,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,21,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,22,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,23,*    distribution.
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,25,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,26,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,27,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,28,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,29,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,30,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,32,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,33,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,34,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,35,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,37,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,38,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,39,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,41,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,42,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,43,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,44,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,45,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,46,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,47,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,48,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,49,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,50,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,51,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,52,* SUCH DAMAGE.
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,55,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,56,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,57,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,58,* <http://www.apache.org/>.
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,61,package org.apache.commons.compress.zip;
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,64,* Simple placeholder for all those extra fields we don't want to deal with. <p>
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,66,* Assumes local file data and central directory entries are identical - unless
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,67,* told the opposite.</p>
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,69,"* @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,70,* @version $Revision: 1.1 $
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,72,public class UnrecognizedExtraField
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,73,implements ZipExtraField
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,76,* Extra field data in central directory - without Header-ID or length
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,77,* specifier.
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,79,* @since 1.1
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,81,private byte[] m_centralData;
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,84,* The Header-ID.
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,86,* @since 1.1
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,88,private ZipShort m_headerID;
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,91,* Extra field data in local file data - without Header-ID or length
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,92,* specifier.
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,94,* @since 1.1
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,96,private byte[] m_localData;
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,99,* Set the central directory data
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,101,* @param centralData the central directory data
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,103,public void setCentralDirectoryData( final byte[] centralData )
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,105,m_centralData = centralData;
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,109,* Set the header ID.
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,111,* @param headerID the header ID
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,112,* @deprecated Use setHeaderID() instead
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,113,* @see #setHeaderID(ZipShort)
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,115,public void setHeaderId( final ZipShort headerID )
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,117,setHeaderID( headerID );
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,121,* Set the header ID.
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,123,* @param headerID the header ID
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,125,public void setHeaderID( final ZipShort headerID )
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,127,m_headerID = headerID;
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,131,* Set the local file data.
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,133,* @param localData the local file data
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,135,public void setLocalFileDataData( final byte[] localData )
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,137,m_localData = localData;
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,141,* Get the central directory data.
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,143,* @return the central directory data.
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,145,public byte[] getCentralDirectoryData()
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,147,if( m_centralData != null )
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,149,return m_centralData;
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,151,return getLocalFileDataData();
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,155,* Get the length of the central directory in bytes.
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,157,* @return the length of the central directory in bytes.
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,159,public ZipShort getCentralDirectoryLength()
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,161,if( m_centralData != null )
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,163,return new ZipShort( m_centralData.length );
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,165,return getLocalFileDataLength();
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,169,* Get the HeaderID.
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,171,* @return the HeaderID
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,172,* @deprecated Use getHeaderID() instead
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,173,* @see #getHeaderID()
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,175,public ZipShort getHeaderId()
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,177,return m_headerID;
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,181,* Get the HeaderID.
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,183,* @return the HeaderID
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,185,public ZipShort getHeaderID()
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,187,return m_headerID;
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,191,* Get the local file data.
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,193,* @return the local file data
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,195,public byte[] getLocalFileDataData()
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,197,return m_localData;
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,201,* Get the length of local file data in bytes.
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,203,* @return the length of local file data in bytes
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,205,public ZipShort getLocalFileDataLength()
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,207,return new ZipShort( m_localData.length );
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,211,* Parse LocalFiledata out of supplied buffer.
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,213,* @param buffer the buffer to use
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,214,* @param offset the offset into buffer
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,215,* @param length then length of data
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,217,"public void parseFromLocalFileData( final byte[] buffer,"
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,218,"final int offset,"
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,219,final int length )
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,221,final byte[] fileData = new byte[ length ];
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,222,"System.arraycopy( buffer, offset, fileData, 0, length );"
True,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/zip/UnrecognizedExtraField.java,223,setLocalFileDataData( fileData );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//compress/src/java/org/apache/commons/compress/zip/ZipEntry.java,v 1.1 2003/11/23 20:07:46 bayard Exp $"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,3,* $Revision: 1.1 $
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,4,* $Date: 2003/11/23 20:07:46 $
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,8,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,10,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,11,* reserved.
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,13,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,14,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,15,* are met:
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,17,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,18,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,20,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,21,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,22,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,23,*    distribution.
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,25,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,26,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,27,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,28,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,29,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,30,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,32,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,33,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,34,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,35,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,37,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,38,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,39,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,41,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,42,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,43,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,44,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,45,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,46,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,47,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,48,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,49,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,50,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,51,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,52,* SUCH DAMAGE.
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,55,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,56,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,57,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,58,* <http://www.apache.org/>.
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,61,package org.apache.commons.compress.zip;
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,63,import java.lang.reflect.InvocationTargetException;
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,64,import java.lang.reflect.Method;
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,65,import java.util.ArrayList;
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,66,import java.util.zip.ZipException;
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,69,* Extension that adds better handling of extra fields and provides access to
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,70,* the internal and external file attributes.
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,72,"* @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,73,* @version $Revision: 1.1 $
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,75,public class ZipEntry
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,76,extends java.util.zip.ZipEntry
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,79,* Helper for JDK 1.1
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,81,* @since 1.2
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,83,private static Method c_setCompressedSizeMethod;
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,86,* Helper for JDK 1.1
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,88,* @since 1.2
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,90,private static final Object c_lockReflection = new Object();
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,93,* Helper for JDK 1.1
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,95,* @since 1.2
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,97,private static boolean c_triedToGetMethod;
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,99,private final ArrayList m_extraFields = new ArrayList();
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,101,private int m_internalAttributes;
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,102,private long m_externalAttributes;
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,105,* Helper for JDK 1.1 <-> 1.2 incompatibility.
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,107,* @since 1.2
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,109,private Long m_compressedSize;
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,112,* Creates a new zip entry with the specified name.
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,114,* @param name the name of entry
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,115,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,117,public ZipEntry( final String name )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,119,super( name );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,123,* Creates a new zip entry with fields taken from the specified zip entry.
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,125,* @param entry the JDK ZipEntry to adapt
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,126,* @exception ZipException if can not create entry
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,127,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,129,public ZipEntry( java.util.zip.ZipEntry entry )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,130,throws ZipException
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,133,"* REVISIT: call super(entry) instead of this stuff in Ant2,"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,134,"* ""copy constructor"" has not been available in JDK 1.1"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,136,super( entry.getName() );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,138,setComment( entry.getComment() );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,139,setMethod( entry.getMethod() );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,140,setTime( entry.getTime() );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,142,final long size = entry.getSize();
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,143,if( size > 0 )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,145,setSize( size );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,148,final long cSize = entry.getCompressedSize();
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,149,if( cSize > 0 )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,151,setComprSize( cSize );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,154,final long crc = entry.getCrc();
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,155,if( crc > 0 )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,157,setCrc( crc );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,160,final byte[] extra = entry.getExtra();
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,161,if( extra != null )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,163,setExtraFields( ExtraFieldUtils.parse( extra ) );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,165,else
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,167,// initializes extra data to an empty byte array
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,168,setExtra();
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,173,* Creates a new zip entry with fields taken from the specified zip entry.
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,175,* @param entry the entry to adapt
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,176,* @exception ZipException if can not create entry
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,177,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,179,public ZipEntry( final ZipEntry entry )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,180,throws ZipException
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,182,this( (java.util.zip.ZipEntry)entry );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,183,setInternalAttributes( entry.getInternalAttributes() );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,184,setExternalAttributes( entry.getExternalAttributes() );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,185,setExtraFields( entry.getExtraFields() );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,189,* Try to get a handle to the setCompressedSize method.
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,191,* @since 1.2
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,193,private static void checkSCS()
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,195,if( !c_triedToGetMethod )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,197,synchronized( c_lockReflection )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,199,c_triedToGetMethod = true;
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,200,try
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,202,c_setCompressedSizeMethod =
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,203,"java.util.zip.ZipEntry.class.getMethod( ""setCompressedSize"","
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,204,new Class[]{Long.TYPE} );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,206,catch( NoSuchMethodException nse )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,214,* Are we running JDK 1.2 or higher?
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,216,* @return Description of the Returned Value
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,217,* @since 1.2
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,219,private static boolean haveSetCompressedSize()
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,221,checkSCS();
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,222,return c_setCompressedSizeMethod != null;
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,226,* Invoke setCompressedSize via reflection.
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,228,* @param entry Description of Parameter
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,229,* @param size Description of Parameter
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,230,* @since 1.2
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,232,"private static void performSetCompressedSize( final ZipEntry entry,"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,233,final long size )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,235,final Long[] s = {new Long( size )};
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,236,try
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,238,"c_setCompressedSizeMethod.invoke( entry, s );"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,240,catch( final InvocationTargetException ite )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,242,final Throwable nested = ite.getTargetException();
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,243,"final String message = ""Exception setting the compressed size "" +"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,244,"""of "" + entry + "": "" + nested.getMessage();"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,245,throw new RuntimeException( message );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,247,catch( final Throwable t )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,249,"final String message = ""Exception setting the compressed size "" +"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,250,"""of "" + entry + "": "" + t.getMessage();"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,251,throw new RuntimeException( message );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,256,* Make this class work in JDK 1.1 like a 1.2 class. <p>
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,258,* This either stores the size for later usage or invokes setCompressedSize
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,259,* via reflection.</p>
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,261,* @param size The new ComprSize value
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,262,* @since 1.2
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,264,public void setComprSize( final long size )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,266,if( haveSetCompressedSize() )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,268,"performSetCompressedSize( this, size );"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,270,else
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,272,m_compressedSize = new Long( size );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,277,* Sets the external file attributes.
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,279,* @param externalAttributes The new ExternalAttributes value
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,280,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,282,public void setExternalAttributes( final long externalAttributes )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,284,m_externalAttributes = externalAttributes;
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,288,* Throws an Exception if extra data cannot be parsed into extra fields.
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,290,* @param extra The new Extra value
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,291,* @throws RuntimeException if fail to set extra data
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,292,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,294,public void setExtra( final byte[] extra )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,295,throws RuntimeException
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,297,try
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,299,setExtraFields( ExtraFieldUtils.parse( extra ) );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,301,catch( final Exception e )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,303,throw new RuntimeException( e.getMessage() );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,308,* Replaces all currently attached extra fields with the new array.
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,310,* @param fields The new ExtraFields value
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,311,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,313,public void setExtraFields( final ZipExtraField[] fields )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,315,m_extraFields.clear();
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,316,for( int i = 0; i < fields.length; i++ )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,318,m_extraFields.add( fields[ i ] );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,320,setExtra();
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,324,* Sets the internal file attributes.
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,326,* @param value The new InternalAttributes value
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,327,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,329,public void setInternalAttributes( final int value )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,331,m_internalAttributes = value;
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,335,* Retrieves the extra data for the central directory.
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,337,* @return The CentralDirectoryExtra value
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,338,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,340,public byte[] getCentralDirectoryExtra()
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,342,return ExtraFieldUtils.mergeCentralDirectoryData( getExtraFields() );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,346,* Override to make this class work in JDK 1.1 like a 1.2 class.
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,348,* @return The CompressedSize value
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,349,* @since 1.2
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,351,public long getCompressedSize()
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,353,if( m_compressedSize != null )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,355,// has been set explicitly and we are running in a 1.1 VM
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,356,return m_compressedSize.longValue();
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,358,return super.getCompressedSize();
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,362,* Retrieves the external file attributes.
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,364,* @return The ExternalAttributes value
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,365,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,367,public long getExternalAttributes()
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,369,return m_externalAttributes;
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,373,* Retrieves extra fields.
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,375,* @return The ExtraFields value
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,376,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,378,public ZipExtraField[] getExtraFields()
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,380,final ZipExtraField[] result = new ZipExtraField[ m_extraFields.size() ];
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,381,return (ZipExtraField[])m_extraFields.toArray( result );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,385,* Retrieves the internal file attributes.
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,387,* @return The InternalAttributes value
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,388,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,390,public int getInternalAttributes()
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,392,return m_internalAttributes;
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,396,* Retrieves the extra data for the local file data.
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,398,* @return The LocalFileDataExtra value
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,399,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,401,public byte[] getLocalFileDataExtra()
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,403,byte[] extra = getExtra();
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,404,return extra != null ? extra : new byte[ 0 ];
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,408,* Adds an extra fields - replacing an already present extra field of the
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,409,* same type.
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,411,* @param extraField The feature to be added to the ExtraField attribute
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,412,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,414,public void addExtraField( final ZipExtraField extraField )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,416,final ZipShort type = extraField.getHeaderID();
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,417,boolean done = false;
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,418,for( int i = 0; !done && i < m_extraFields.size(); i++ )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,420,final ZipExtraField other = (ZipExtraField)m_extraFields.get( i );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,421,if( other.getHeaderID().equals( type ) )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,423,"m_extraFields.set( i, extraField );"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,424,done = true;
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,427,if( !done )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,429,m_extraFields.add( extraField );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,431,setExtra();
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,435,* Overwrite clone
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,437,* @return Description of the Returned Value
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,438,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,440,public Object clone()
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,442,ZipEntry entry = null;
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,443,try
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,445,entry = new ZipEntry( (java.util.zip.ZipEntry)super.clone() );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,447,catch( final Exception e )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,449,// impossible as extra data is in correct format
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,450,e.printStackTrace();
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,451,return null;
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,454,entry.setInternalAttributes( getInternalAttributes() );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,455,entry.setExternalAttributes( getExternalAttributes() );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,456,entry.setExtraFields( getExtraFields() );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,457,return entry;
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,461,* Remove an extra fields.
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,463,* @param type Description of Parameter
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,464,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,466,public void removeExtraField( final ZipShort type )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,468,boolean done = false;
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,469,for( int i = 0; !done && i < m_extraFields.size(); i++ )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,471,if( ( (ZipExtraField)m_extraFields.get( i ) ).getHeaderID().equals( type ) )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,473,m_extraFields.remove( i );
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,474,done = true;
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,477,if( !done )
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,479,throw new java.util.NoSuchElementException();
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,481,setExtra();
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,485,* Unfortunately {@link java.util.zip.ZipOutputStream
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,486,"* java.util.zip.ZipOutputStream} seems to access the extra data directly,"
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,487,* so overriding getExtra doesn't help - we need to modify super's data
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,488,* directly.
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,490,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,492,protected void setExtra()
True,src/java/org/apache/commons/compress/zip/ZipEntry.java,src/java/org/apache/commons/compress/zip/ZipEntry.java,494,super.setExtra( ExtraFieldUtils.mergeLocalFileDataData( getExtraFields() ) );
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//compress/src/java/org/apache/commons/compress/zip/ZipExtraField.java,v 1.1 2003/11/23 20:07:46 bayard Exp $"
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,3,* $Revision: 1.1 $
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,4,* $Date: 2003/11/23 20:07:46 $
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,8,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,10,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,11,* reserved.
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,13,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,14,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,15,* are met:
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,17,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,18,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,20,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,21,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,22,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,23,*    distribution.
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,25,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,26,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,27,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,28,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,29,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,30,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,32,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,33,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,34,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,35,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,37,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,38,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,39,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,41,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,42,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,43,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,44,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,45,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,46,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,47,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,48,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,49,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,50,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,51,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,52,* SUCH DAMAGE.
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,55,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,56,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,57,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,58,* <http://www.apache.org/>.
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,61,package org.apache.commons.compress.zip;
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,63,import java.util.zip.ZipException;
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,66,* General format of extra field data. <p>
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,68,"* Extra fields usually appear twice per file, once in the local file data and"
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,69,"* once in the central directory. Usually they are the same, but they don't have"
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,70,* to be. {@link java.util.zip.ZipOutputStream java.util.zip.ZipOutputStream}
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,71,* will only use the local file data in both places.</p>
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,73,"* @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,74,* @version $Revision: 1.1 $
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,76,public interface ZipExtraField
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,79,* The Header-ID.
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,81,* @return The HeaderId value
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,82,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,84,ZipShort getHeaderID();
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,87,* Length of the extra field in the local file data - without Header-ID or
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,88,* length specifier.
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,90,* @return The LocalFileDataLength value
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,91,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,93,ZipShort getLocalFileDataLength();
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,96,* Length of the extra field in the central directory - without Header-ID or
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,97,* length specifier.
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,99,* @return The CentralDirectoryLength value
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,100,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,102,ZipShort getCentralDirectoryLength();
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,105,* The actual data to put into local file data - without Header-ID or length
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,106,* specifier.
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,108,* @return The LocalFileDataData value
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,109,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,111,byte[] getLocalFileDataData();
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,114,* The actual data to put central directory - without Header-ID or length
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,115,* specifier.
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,117,* @return The CentralDirectoryData value
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,118,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,120,byte[] getCentralDirectoryData();
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,123,* Populate data from this array as if it was in local file data.
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,125,* @param buffer the buffer to read data from
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,126,* @param offset offset into buffer to read data
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,127,* @param length the length of data
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,128,* @exception ZipException on error
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,129,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,131,"void parseFromLocalFileData( byte[] buffer, int offset, int length )"
True,src/java/org/apache/commons/compress/zip/ZipExtraField.java,src/java/org/apache/commons/compress/zip/ZipExtraField.java,132,throws ZipException;
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//compress/src/java/org/apache/commons/compress/zip/ZipLong.java,v 1.1 2003/11/23 20:07:46 bayard Exp $"
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,3,* $Revision: 1.1 $
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,4,* $Date: 2003/11/23 20:07:46 $
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,8,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,10,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,11,* reserved.
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,13,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,14,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,15,* are met:
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,17,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,18,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,20,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,21,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,22,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,23,*    distribution.
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,25,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,26,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,27,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,28,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,29,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,30,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,32,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,33,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,34,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,35,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,37,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,38,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,39,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,41,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,42,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,43,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,44,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,45,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,46,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,47,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,48,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,49,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,50,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,51,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,52,* SUCH DAMAGE.
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,55,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,56,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,57,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,58,* <http://www.apache.org/>.
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,61,package org.apache.commons.compress.zip;
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,64,* Utility class that represents a four byte integer with conversion rules for
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,65,* the big endian byte order of ZIP files.
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,67,"* @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,68,* @version $Revision: 1.1 $
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,70,public final class ZipLong
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,71,implements Cloneable
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,73,private long m_value;
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,76,* Create instance from a number.
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,78,* @param value the value
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,79,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,81,public ZipLong( final long value )
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,83,m_value = value;
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,87,* Create instance from bytes.
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,89,* @param buffer the buffer to read data from
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,90,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,92,public ZipLong( final byte[] buffer )
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,94,"this( buffer, 0 );"
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,98,* Create instance from the four bytes starting at offset.
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,100,* @param buffer buffer to read data from
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,101,* @param offset offset into buffer
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,102,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,104,"public ZipLong( final byte[] buffer, final int offset )"
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,106,m_value = ( buffer[ offset + 3 ] << 24 ) & 0xFF000000l;
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,107,m_value += ( buffer[ offset + 2 ] << 16 ) & 0xFF0000;
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,108,m_value += ( buffer[ offset + 1 ] << 8 ) & 0xFF00;
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,109,m_value += ( buffer[ offset ] & 0xFF );
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,113,* Get value as two bytes in big endian byte order.
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,115,* @return The value as bytes
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,116,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,118,public byte[] getBytes()
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,120,byte[] result = new byte[ 4 ];
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,121,result[ 0 ] = (byte)( ( m_value & 0xFF ) );
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,122,result[ 1 ] = (byte)( ( m_value & 0xFF00 ) >> 8 );
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,123,result[ 2 ] = (byte)( ( m_value & 0xFF0000 ) >> 16 );
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,124,result[ 3 ] = (byte)( ( m_value & 0xFF000000l ) >> 24 );
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,125,return result;
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,129,* Get value as Java int.
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,131,* @return The value
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,132,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,134,public long getValue()
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,136,return m_value;
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,140,* Override to make two instances with same value equal.
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,142,* @param o the object to compare against
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,143,"* @return true if equyal, false otherwise"
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,144,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,146,public boolean equals( final Object o )
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,148,if( o == null || !( o instanceof ZipLong ) )
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,150,return false;
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,152,return m_value == ( (ZipLong)o ).getValue();
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,156,* Override to make two instances with same value equal.
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,158,* @return the hashcode
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,159,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,161,public int hashCode()
True,src/java/org/apache/commons/compress/zip/ZipLong.java,src/java/org/apache/commons/compress/zip/ZipLong.java,163,return (int)m_value;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//compress/src/java/org/apache/commons/compress/zip/ZipOutputStream.java,v 1.1 2003/11/23 20:07:46 bayard Exp $"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,3,* $Revision: 1.1 $
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,4,* $Date: 2003/11/23 20:07:46 $
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,8,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,10,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,11,* reserved.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,13,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,14,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,15,* are met:
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,17,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,18,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,20,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,21,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,22,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,23,*    distribution.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,25,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,26,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,27,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,28,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,29,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,30,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,32,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,33,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,34,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,35,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,37,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,38,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,39,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,41,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,42,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,43,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,44,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,45,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,46,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,47,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,48,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,49,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,50,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,51,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,52,* SUCH DAMAGE.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,55,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,56,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,57,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,58,* <http://www.apache.org/>.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,61,package org.apache.commons.compress.zip;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,63,import java.io.IOException;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,64,import java.io.OutputStream;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,65,import java.io.UnsupportedEncodingException;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,66,import java.util.ArrayList;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,67,import java.util.Date;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,68,import java.util.Calendar;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,69,import java.util.Hashtable;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,70,import java.util.zip.CRC32;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,71,import java.util.zip.Deflater;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,72,import java.util.zip.DeflaterOutputStream;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,73,import java.util.zip.ZipException;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,76,* Reimplementation of {@link java.util.zip.ZipOutputStream
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,77,* java.util.zip.ZipOutputStream} that does handle the extended functionality of
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,78,"* this package, especially internal/external file attributes and extra fields"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,79,* with different layouts for local file data and central directory entries. <p>
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,81,* This implementation will use a Data Descriptor to store size and CRC
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,82,"* information for DEFLATED entries, this means, you don't need to calculate"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,83,"* them yourself. Unfortunately this is not possible for the STORED method, here"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,84,* setting the CRC and uncompressed size information is required before {@link
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,85,* #putNextEntry putNextEntry} will be called.</p>
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,87,"* @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,88,* @version $Revision: 1.1 $
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,90,public class ZipOutputStream
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,91,extends DeflaterOutputStream
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,94,"* Helper, a 0 as ZipShort."
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,96,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,98,"private static final byte[] ZERO = {0, 0};"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,101,"* Helper, a 0 as ZipLong."
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,103,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,105,"private static final byte[] LZERO = {0, 0, 0, 0};"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,108,* Compression method for deflated entries.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,110,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,112,public static final int DEFLATED = ZipEntry.DEFLATED;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,115,* Compression method for deflated entries.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,117,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,119,public static final int STORED = ZipEntry.STORED;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,122,* Various ZIP constants
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,125,* local file header signature
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,127,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,129,protected static final ZipLong LFH_SIG = new ZipLong( 0X04034B50L );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,131,* data descriptor signature
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,133,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,135,protected static final ZipLong DD_SIG = new ZipLong( 0X08074B50L );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,137,* central file header signature
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,139,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,141,protected static final ZipLong CFH_SIG = new ZipLong( 0X02014B50L );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,143,* end of central dir signature
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,145,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,147,protected static final ZipLong EOCD_SIG = new ZipLong( 0X06054B50L );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,150,* Smallest date/time ZIP can handle.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,152,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,154,private static final ZipLong DOS_TIME_MIN = new ZipLong( 0x00002100L );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,157,* The file comment.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,159,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,161,"private String m_comment = """";"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,164,* Compression level for next entry.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,166,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,168,private int m_level = Deflater.DEFAULT_COMPRESSION;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,171,* Default compression method for next entry.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,173,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,175,private int m_method = DEFLATED;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,178,* List of ZipEntries written so far.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,180,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,182,private final ArrayList m_entries = new ArrayList();
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,185,* CRC instance to avoid parsing DEFLATED data twice.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,187,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,189,private final CRC32 m_crc = new CRC32();
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,192,* Count the bytes written to out.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,194,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,196,private long m_written;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,199,* Data for current entry started here.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,201,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,203,private long m_dataStart;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,206,* Start of central directory.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,208,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,210,private ZipLong m_cdOffset = new ZipLong( 0 );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,213,* Length of central directory.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,215,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,217,private ZipLong m_cdLength = new ZipLong( 0 );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,220,* Holds the offsets of the LFH starts for each entry
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,222,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,224,private final Hashtable m_offsets = new Hashtable();
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,227,* The encoding to use for filenames and the file comment. <p>
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,229,* For a list of possible values see <a
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,230,"* href=""http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html"">"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,231,* http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,232,* </a>. Defaults to the platform's default character encoding.</p>
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,234,* @since 1.3
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,236,private String m_encoding;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,239,* Current entry.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,241,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,243,private ZipEntry m_entry;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,246,* Creates a new ZIP OutputStream filtering the underlying stream.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,248,* @param output the output stream to write to
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,249,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,251,public ZipOutputStream( final OutputStream output )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,253,"super( output, new Deflater( Deflater.DEFAULT_COMPRESSION, true ) );"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,257,* Convert a Date object to a DOS date/time field. <p>
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,259,* Stolen from InfoZip's <code>fileio.c</code></p>
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,261,* @param time Description of Parameter
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,262,* @return Description of the Returned Value
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,263,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,265,protected static ZipLong toDosTime( Date time )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,267,Calendar cal = Calendar.getInstance();
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,268,cal.setTime( time );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,269,int year = cal.get(Calendar.YEAR);
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,270,int month = cal.get(Calendar.MONTH) + 1;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,271,if( year < 1980 )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,273,return DOS_TIME_MIN;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,275,long value = ( ( year - 1980 ) << 25 )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,276,| ( month << 21 )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,277,| ( cal.get(Calendar.DAY_OF_MONTH) << 16 )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,278,| ( cal.get(Calendar.HOUR_OF_DAY) << 11 )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,279,| ( cal.get(Calendar.MINUTE) << 5 )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,280,| ( cal.get(Calendar.SECOND) >> 1 );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,282,byte[] result = new byte[ 4 ];
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,283,result[ 0 ] = (byte)( ( value & 0xFF ) );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,284,result[ 1 ] = (byte)( ( value & 0xFF00 ) >> 8 );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,285,result[ 2 ] = (byte)( ( value & 0xFF0000 ) >> 16 );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,286,result[ 3 ] = (byte)( ( value & 0xFF000000l ) >> 24 );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,287,return new ZipLong( result );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,291,* Set the file comment.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,293,* @param comment The new Comment value
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,294,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,296,public void setComment( String comment )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,298,m_comment = comment;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,302,* The encoding to use for filenames and the file comment. <p>
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,304,* For a list of possible values see <a
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,305,"* href=""http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html"">"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,306,* http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,307,* </a>. Defaults to the platform's default character encoding.</p>
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,309,* @param encoding The new Encoding value
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,310,* @since 1.3
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,312,public void setEncoding( String encoding )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,314,m_encoding = encoding;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,318,* Sets the compression level for subsequent entries. <p>
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,320,* Default is Deflater.DEFAULT_COMPRESSION.</p>
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,322,* @param level The new Level value
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,323,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,325,public void setLevel( int level )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,327,m_level = level;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,331,* Sets the default compression method for subsequent entries. <p>
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,333,* Default is DEFLATED.</p>
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,335,* @param method The new Method value
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,336,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,338,public void setMethod( final int method )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,340,m_method = method;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,344,* The encoding to use for filenames and the file comment.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,346,* @return null if using the platform's default character encoding.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,347,* @since 1.3
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,349,public String getEncoding()
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,351,return m_encoding;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,355,* Writes all necessary data for this entry.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,357,* @throws IOException if an IO failure causes operation to fail
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,358,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,360,public void closeEntry()
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,361,throws IOException
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,363,if( m_entry == null )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,365,return;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,368,long realCrc = m_crc.getValue();
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,369,m_crc.reset();
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,371,if( m_entry.getMethod() == DEFLATED )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,373,def.finish();
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,374,while( !def.finished() )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,376,deflate();
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,379,m_entry.setSize( def.getTotalIn() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,380,m_entry.setComprSize( def.getTotalOut() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,381,m_entry.setCrc( realCrc );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,383,def.reset();
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,385,m_written += m_entry.getCompressedSize();
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,387,else
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,389,if( m_entry.getCrc() != realCrc )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,391,"throw new ZipException( ""bad CRC checksum for entry """
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,392,"+ m_entry.getName() + "": """
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,393,+ Long.toHexString( m_entry.getCrc() )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,394,"+ "" instead of """
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,395,+ Long.toHexString( realCrc ) );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,398,if( m_entry.getSize() != m_written - m_dataStart )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,400,"throw new ZipException( ""bad size for entry """
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,401,"+ m_entry.getName() + "": """
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,402,+ m_entry.getSize()
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,403,"+ "" instead of """
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,404,+ ( m_written - m_dataStart ) );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,409,writeDataDescriptor( m_entry );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,410,m_entry = null;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,414,"* Found out by experiment, that DeflaterOutputStream.close()"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,415,* will call finish() - so we don't need to override close
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,416,* ourselves.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,419,* Finishs writing the contents and closes this as well as the underlying
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,420,* stream.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,422,* @throws IOException if an IO failure causes operation to fail
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,423,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,425,public void finish()
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,426,throws IOException
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,428,closeEntry();
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,429,m_cdOffset = new ZipLong( m_written );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,430,final int size = m_entries.size();
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,431,for( int i = 0; i < size; i++ )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,433,final ZipEntry entry = (ZipEntry)m_entries.get( i );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,434,writeCentralFileHeader( entry );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,436,m_cdLength = new ZipLong( m_written - m_cdOffset.getValue() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,437,writeCentralDirectoryEnd();
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,438,m_offsets.clear();
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,439,m_entries.clear();
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,443,* Begin writing next entry.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,445,* @param entry the entry
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,446,* @throws IOException if an IO failure causes operation to fail
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,447,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,449,public void putNextEntry( final ZipEntry entry )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,450,throws IOException
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,452,closeEntry();
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,454,m_entry = entry;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,455,m_entries.add( m_entry );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,457,if( m_entry.getMethod() == -1 )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,458,{// not specified
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,459,m_entry.setMethod( m_method );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,462,if( m_entry.getTime() == -1 )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,463,{// not specified
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,464,m_entry.setTime( System.currentTimeMillis() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,467,if( m_entry.getMethod() == STORED )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,469,if( m_entry.getSize() == -1 )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,471,"throw new ZipException( ""uncompressed size is required for STORED method"" );"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,473,if( m_entry.getCrc() == -1 )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,475,"throw new ZipException( ""crc checksum is required for STORED method"" );"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,477,m_entry.setComprSize( m_entry.getSize() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,479,else
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,481,def.setLevel( m_level );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,483,writeLocalFileHeader( m_entry );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,487,* Writes bytes to ZIP entry. <p>
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,489,"* Override is necessary to support STORED entries, as well as calculationg"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,490,* CRC automatically for DEFLATED entries.</p>
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,492,* @param buffer the buffer to write to
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,493,* @param offset the offset to write to
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,494,* @param length the length of data to write
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,495,* @exception IOException if an IO error causes operation to fail
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,497,"public void write( final byte[] buffer,"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,498,"final int offset,"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,499,final int length )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,500,throws IOException
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,502,if( m_entry.getMethod() == DEFLATED )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,504,"super.write( buffer, offset, length );"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,506,else
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,508,"out.write( buffer, offset, length );"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,509,m_written += length;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,511,"m_crc.update( buffer, offset, length );"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,515,* Retrieve the bytes for the given String in the encoding set for this
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,516,* Stream.
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,518,* @param name the name to decode
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,519,* @return the bytes for string
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,520,* @exception ZipException if fail to retrieve bytes for specified string
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,521,* @since 1.3
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,523,protected byte[] getBytes( String name )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,524,throws ZipException
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,526,if( m_encoding == null )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,528,return name.getBytes();
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,530,else
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,532,try
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,534,return name.getBytes( m_encoding );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,536,catch( UnsupportedEncodingException uee )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,538,throw new ZipException( uee.getMessage() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,544,* Writes the &quot;End of central dir record&quot;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,546,* @exception IOException when an IO erro causes operation to fail
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,547,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,549,protected void writeCentralDirectoryEnd()
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,550,throws IOException
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,552,out.write( EOCD_SIG.getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,554,// disk numbers
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,555,out.write( ZERO );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,556,out.write( ZERO );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,558,// number of entries
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,559,byte[] num = ( new ZipShort( m_entries.size() ) ).getBytes();
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,560,out.write( num );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,561,out.write( num );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,563,// length and location of CD
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,564,out.write( m_cdLength.getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,565,out.write( m_cdOffset.getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,567,// ZIP file comment
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,568,byte[] data = getBytes( m_comment );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,569,out.write( ( new ZipShort( data.length ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,570,out.write( data );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,574,* Writes the central file header entry
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,576,* @param entry the zip entry
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,577,* @throws IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,578,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,580,protected void writeCentralFileHeader( final ZipEntry entry )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,581,throws IOException
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,583,out.write( CFH_SIG.getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,584,m_written += 4;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,586,// version made by
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,587,out.write( ( new ZipShort( 20 ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,588,m_written += 2;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,590,// version needed to extract
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,591,// general purpose bit flag
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,592,if( entry.getMethod() == DEFLATED )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,594,// requires version 2 as we are going to store length info
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,595,// in the data descriptor
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,596,out.write( ( new ZipShort( 20 ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,598,"// bit3 set to signal, we use a data descriptor"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,599,out.write( ( new ZipShort( 8 ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,601,else
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,603,out.write( ( new ZipShort( 10 ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,604,out.write( ZERO );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,606,m_written += 4;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,608,// compression method
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,609,out.write( ( new ZipShort( entry.getMethod() ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,610,m_written += 2;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,612,// last mod. time and date
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,613,out.write( toDosTime( new Date( entry.getTime() ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,614,m_written += 4;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,616,// CRC
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,617,// compressed length
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,618,// uncompressed length
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,619,out.write( ( new ZipLong( entry.getCrc() ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,620,out.write( ( new ZipLong( entry.getCompressedSize() ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,621,out.write( ( new ZipLong( entry.getSize() ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,622,m_written += 12;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,624,// file name length
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,625,byte[] name = getBytes( entry.getName() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,626,out.write( ( new ZipShort( name.length ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,627,m_written += 2;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,629,// extra field length
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,630,byte[] extra = entry.getCentralDirectoryExtra();
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,631,out.write( ( new ZipShort( extra.length ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,632,m_written += 2;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,634,// file comment length
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,635,String comm = entry.getComment();
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,636,if( comm == null )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,638,"comm = """";"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,640,byte[] comment = getBytes( comm );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,641,out.write( ( new ZipShort( comment.length ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,642,m_written += 2;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,644,// disk number start
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,645,out.write( ZERO );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,646,m_written += 2;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,648,// internal file attributes
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,649,out.write( ( new ZipShort( entry.getInternalAttributes() ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,650,m_written += 2;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,652,// external file attributes
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,653,out.write( ( new ZipLong( entry.getExternalAttributes() ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,654,m_written += 4;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,656,// relative offset of LFH
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,657,out.write( ( (ZipLong)m_offsets.get( entry ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,658,m_written += 4;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,660,// file name
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,661,out.write( name );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,662,m_written += name.length;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,664,// extra field
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,665,out.write( extra );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,666,m_written += extra.length;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,668,// file comment
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,669,out.write( comment );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,670,m_written += comment.length;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,674,* Writes the data descriptor entry
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,676,* @param ze Description of Parameter
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,677,* @throws IOException if an IO failure causes operation to fail
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,678,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,680,protected void writeDataDescriptor( ZipEntry ze )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,681,throws IOException
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,683,if( ze.getMethod() != DEFLATED )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,685,return;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,687,out.write( DD_SIG.getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,688,out.write( ( new ZipLong( m_entry.getCrc() ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,689,out.write( ( new ZipLong( m_entry.getCompressedSize() ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,690,out.write( ( new ZipLong( m_entry.getSize() ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,691,m_written += 16;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,695,* Writes the local file header entry
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,697,* @param entry the zip entry
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,698,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,699,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,701,protected void writeLocalFileHeader( final ZipEntry entry )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,702,throws IOException
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,704,"m_offsets.put( entry, new ZipLong( m_written ) );"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,706,out.write( LFH_SIG.getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,707,m_written += 4;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,709,// version needed to extract
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,710,// general purpose bit flag
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,711,if( entry.getMethod() == DEFLATED )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,713,// requires version 2 as we are going to store length info
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,714,// in the data descriptor
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,715,out.write( ( new ZipShort( 20 ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,717,"// bit3 set to signal, we use a data descriptor"
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,718,out.write( ( new ZipShort( 8 ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,720,else
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,722,out.write( ( new ZipShort( 10 ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,723,out.write( ZERO );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,725,m_written += 4;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,727,// compression method
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,728,out.write( ( new ZipShort( entry.getMethod() ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,729,m_written += 2;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,731,// last mod. time and date
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,732,out.write( toDosTime( new Date( entry.getTime() ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,733,m_written += 4;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,735,// CRC
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,736,// compressed length
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,737,// uncompressed length
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,738,if( entry.getMethod() == DEFLATED )
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,740,out.write( LZERO );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,741,out.write( LZERO );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,742,out.write( LZERO );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,744,else
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,746,out.write( ( new ZipLong( entry.getCrc() ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,747,out.write( ( new ZipLong( entry.getSize() ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,748,out.write( ( new ZipLong( entry.getSize() ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,750,m_written += 12;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,752,// file name length
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,753,byte[] name = getBytes( entry.getName() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,754,out.write( ( new ZipShort( name.length ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,755,m_written += 2;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,757,// extra field length
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,758,byte[] extra = entry.getLocalFileDataExtra();
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,759,out.write( ( new ZipShort( extra.length ) ).getBytes() );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,760,m_written += 2;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,762,// file name
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,763,out.write( name );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,764,m_written += name.length;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,766,// extra field
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,767,out.write( extra );
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,768,m_written += extra.length;
True,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/zip/ZipOutputStream.java,770,m_dataStart = m_written;
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//compress/src/java/org/apache/commons/compress/zip/ZipShort.java,v 1.1 2003/11/23 20:07:46 bayard Exp $"
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,3,* $Revision: 1.1 $
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,4,* $Date: 2003/11/23 20:07:46 $
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,8,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,10,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,11,* reserved.
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,13,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,14,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,15,* are met:
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,17,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,18,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,20,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,21,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,22,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,23,*    distribution.
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,25,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,26,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,27,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,28,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,29,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,30,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,32,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,33,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,34,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,35,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,37,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,38,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,39,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,41,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,42,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,43,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,44,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,45,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,46,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,47,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,48,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,49,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,50,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,51,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,52,* SUCH DAMAGE.
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,55,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,56,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,57,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,58,* <http://www.apache.org/>.
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,61,package org.apache.commons.compress.zip;
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,64,* Utility class that represents a two byte integer with conversion rules for
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,65,* the big endian byte order of ZIP files.
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,67,"* @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,68,* @version $Revision: 1.1 $
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,70,public final class ZipShort
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,71,implements Cloneable
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,73,private int m_value;
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,76,* Create instance from a number.
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,78,* @param value Description of Parameter
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,79,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,81,public ZipShort( int value )
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,83,this.m_value = value;
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,87,* Create instance from bytes.
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,89,* @param bytes Description of Parameter
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,90,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,92,public ZipShort( byte[] bytes )
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,94,"this( bytes, 0 );"
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,98,* Create instance from the two bytes starting at offset.
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,100,* @param bytes Description of Parameter
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,101,* @param offset Description of Parameter
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,102,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,104,"public ZipShort( byte[] bytes, int offset )"
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,106,m_value = ( bytes[ offset + 1 ] << 8 ) & 0xFF00;
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,107,m_value += ( bytes[ offset ] & 0xFF );
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,111,* Get value as two bytes in big endian byte order.
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,113,* @return The Bytes value
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,114,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,116,public byte[] getBytes()
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,118,byte[] result = new byte[ 2 ];
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,119,result[ 0 ] = (byte)( m_value & 0xFF );
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,120,result[ 1 ] = (byte)( ( m_value & 0xFF00 ) >> 8 );
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,121,return result;
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,125,* Get value as Java int.
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,127,* @return The Value value
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,128,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,130,public int getValue()
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,132,return m_value;
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,136,* Override to make two instances with same value equal.
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,138,* @param o Description of Parameter
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,139,* @return Description of the Returned Value
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,140,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,142,public boolean equals( Object o )
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,144,if( o == null || !( o instanceof ZipShort ) )
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,146,return false;
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,148,return m_value == ( (ZipShort)o ).getValue();
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,152,* Override to make two instances with same value equal.
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,154,* @return Description of the Returned Value
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,155,* @since 1.1
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,157,public int hashCode()
True,src/java/org/apache/commons/compress/zip/ZipShort.java,src/java/org/apache/commons/compress/zip/ZipShort.java,159,return m_value;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,2,* Copyright (C) The Apache Software Foundation. All rights reserved.
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,4,* This software is published under the terms of the Apache Software License
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,5,"* version 1.1, a copy of which has been included with this distribution in"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,6,* the LICENSE.txt file.
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,8,package org.apache.commons.compress.tar;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,10,import java.io.BufferedInputStream;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,11,import java.io.File;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,12,import java.io.FileInputStream;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,13,import java.io.FileOutputStream;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,14,import java.io.IOException;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,15,import java.io.InputStream;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,16,import java.io.OutputStream;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,17,import junit.framework.TestCase;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,20,* Test case for all tar resources.
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,22,* @todo Find V7 tar and do tests against it
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,23,"* @author <a href=""mailto:peter@apache.org"">Peter Donald</a>"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,24,* @version $Revision: 1.1 $ $Date: 2003/11/23 20:07:47 $
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,26,public final class TarTestCase
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,27,extends TestCase
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,29,private static final char SP = File.separatorChar;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,30,"private static final String BASE_DATA_NAME = ""data.txt"";"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,31,"private static final String LFN_PART = ""a-b-c-d-e-f-g-h-i-j/"";"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,32,private static final String LONG_FILE_NAME =
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,33,"LFN_PART + LFN_PART + LFN_PART + LFN_PART + LFN_PART + ""a"";"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,35,private static final String BASEDIR = calcBaseDir();
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,37,private static final File BASEDIR_FILE = new File( BASEDIR );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,38,private static final File POSIX_TAR_FILE =
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,39,"new File( BASEDIR_FILE, ""posix.tar"" );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,40,//    private static final File V7_TAR_FILE =
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,41,"//        new File( BASEDIR_FILE, ""v7.tar"" );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,42,private static final File GNU_TAR_FILE =
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,43,"new File( BASEDIR_FILE, ""gnu.tar"" );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,44,private static final File DATA_FILE1 =
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,45,"new File( BASEDIR_FILE, BASE_DATA_NAME );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,46,"private static final String USER_NAME = ""avalon"";"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,47,"private static final String GROUP_NAME = ""excalibur"";"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,48,private static final long SIZE = DATA_FILE1.length();
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,49,private static final int GROUP_ID = 0;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,50,private static final int USER_ID = 0;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,51,private static final int MODE = 0100000;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,52,private static final int MOD_TIME = 0;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,54,public TarTestCase()
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,56,"this( ""Tar Test Case"" );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,59,public TarTestCase( String name )
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,61,super( name );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,64,private static String calcBaseDir()
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,66,final String name = TarTestCase.class.getName();
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,67,final int size = name.length();
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,68,final String filename =
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,69,"name.substring( 0, size - 11 ).replace( '.', SP );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,70,"return ""target"" + SP + ""tests"" + SP +"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,71,SP + filename + SP;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,74,public void testReadPosixTar()
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,75,throws Exception
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,77,"compareTar( BASE_DATA_NAME, POSIX_TAR_FILE );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,80,public void testReadGnuTar()
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,81,throws Exception
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,83,"compareTar( LONG_FILE_NAME, GNU_TAR_FILE );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,86,public void testWritePosixTar()
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,87,throws Exception
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,89,"//final File temp = new File( BASEDIR_FILE, ""posix2.tar"" );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,90,"final File temp = File.createTempFile( ""delete-me"", ""tar"" );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,91,final FileOutputStream fileOutput = new FileOutputStream( temp );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,92,final TarOutputStream output = new TarOutputStream( fileOutput );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,93,//output.setBufferDebug( true );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,94,final TarEntry entry = new TarEntry( BASE_DATA_NAME );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,95,setupEntry( entry );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,96,output.putNextEntry( entry );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,98,final FileInputStream fileInput = new FileInputStream( DATA_FILE1 );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,99,output.copyEntryContents( fileInput );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,100,output.closeEntry();
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,101,shutdownStream( fileInput );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,102,shutdownStream( output );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,103,shutdownStream( fileOutput );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,105,"assertTrue( ""Tar files Equal"", contentEquals( temp, POSIX_TAR_FILE ) );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,106,temp.delete();
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,109,public void testWriteGnuTar()
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,110,throws Exception
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,112,"//final File temp = new File( BASEDIR_FILE, ""gnu2.tar"" );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,113,"final File temp = File.createTempFile( ""delete-me"", ""tar"" );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,114,final FileOutputStream fileOutput = new FileOutputStream( temp );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,115,final TarOutputStream output = new TarOutputStream( fileOutput );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,116,//output.setBufferDebug( true );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,117,output.setLongFileMode( TarOutputStream.LONGFILE_GNU );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,118,final TarEntry entry = new TarEntry( LONG_FILE_NAME );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,119,setupEntry( entry );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,120,output.putNextEntry( entry );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,122,final FileInputStream fileInput = new FileInputStream( DATA_FILE1 );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,123,output.copyEntryContents( fileInput );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,124,output.closeEntry();
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,125,shutdownStream( fileInput );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,126,shutdownStream( output );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,127,shutdownStream( fileOutput );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,129,//Have to compare it this way as the contents will differ
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,130,//due to entry created for second part of name
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,131,"compareTar( LONG_FILE_NAME, temp );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,132,temp.delete();
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,135,private void setupEntry( final TarEntry entry )
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,137,entry.setModTime( MOD_TIME );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,138,entry.setSize( SIZE );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,139,entry.setUserID( USER_ID );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,140,entry.setGroupID( GROUP_ID );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,141,entry.setUserName( USER_NAME );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,142,entry.setGroupName( GROUP_NAME );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,143,entry.setMode( MODE );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,146,private void checkEntry( final TarEntry entry )
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,148,"assertEquals( ""Entry size"", SIZE, entry.getSize() );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,149,"assertEquals( ""Entry User ID"", USER_ID, entry.getUserID() );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,150,"assertEquals( ""Entry Group ID"", GROUP_ID, entry.getGroupID() );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,151,"assertEquals( ""Entry User name"", USER_NAME, entry.getUserName() );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,152,"assertEquals( ""Entry group name"", GROUP_NAME, entry.getGroupName() );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,153,"assertEquals( ""Entry mode"", MODE, entry.getMode() );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,154,"assertEquals( ""Entry mode"", MOD_TIME, entry.getModTime().getTime() / 1000 );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,158,* Read tar entry with specified name from tar file1 and compare
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,159,* against data file DATA_FILE1.
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,161,* @param entryName the expected name of entry
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,162,* @param file1 the tar file comparing
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,163,* @throws IOException if an error occurs
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,165,"private void compareTar( final String entryName,"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,166,final File file1 )
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,167,throws IOException
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,169,final FileInputStream fileInput = new FileInputStream( file1 );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,170,final TarInputStream input = new TarInputStream( fileInput );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,171,//input.setDebug( true );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,172,final TarEntry entry = input.getNextEntry();
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,174,"assertEquals( ""Entry name"", entryName, entry.getName() );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,175,checkEntry( entry );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,177,"final File temp = new File( BASEDIR_FILE, entryName.length() + ""data.txt"" );//File.createTempFile( ""delete-me"", ""tar"" );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,178,final FileOutputStream output = new FileOutputStream( temp );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,179,input.copyEntryContents( output );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,180,shutdownStream( output );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,182,"assertNull( ""Next Entry"", input.getNextEntry() );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,184,shutdownStream( input );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,186,"assertTrue( ""Data Equals"", contentEquals( temp, DATA_FILE1 ) );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,187,temp.delete();
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,191,* Compare the contents of two files to determine if they are equal or not.
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,193,* @param file1 the first file
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,194,* @param file2 the second file
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,195,"* @return true if the content of the files are equal or they both don't exist, false otherwise"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,197,"private boolean contentEquals( final File file1, final File file2 )"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,198,throws IOException
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,200,final boolean file1Exists = file1.exists();
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,201,if( file1Exists != file2.exists() )
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,203,return false;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,206,if( !file1Exists )
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,208,// two not existing files are equal
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,209,return true;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,212,if( file1.isDirectory() || file2.isDirectory() )
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,214,// don't want to compare directory contents
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,215,return false;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,218,InputStream input1 = null;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,219,InputStream input2 = null;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,220,try
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,222,input1 = new FileInputStream( file1 );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,223,input2 = new FileInputStream( file2 );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,224,"return contentEquals( input1, input2 );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,227,finally
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,229,shutdownStream( input1 );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,230,shutdownStream( input2 );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,235,* Compare the contents of two Streams to determine if they are equal or not.
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,237,* @param input1 the first stream
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,238,* @param input2 the second stream
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,239,"* @return true if the content of the streams are equal or they both don't exist, false otherwise"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,241,"private boolean contentEquals( final InputStream input1,"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,242,final InputStream input2 )
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,243,throws IOException
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,245,final InputStream bufferedInput1 = new BufferedInputStream( input1 );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,246,final InputStream bufferedInput2 = new BufferedInputStream( input2 );
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,248,int count = 0;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,249,int ch = bufferedInput1.read();
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,250,while( -1 != ch )
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,252,final int ch2 = bufferedInput2.read();
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,253,count++;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,254,if( ch != ch2 )
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,256,"System.out.println( ""count = "" + count );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,257,"System.out.println( ""ch2 = "" + ch2 );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,258,"System.out.println( ""ch = "" + ch );"
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,259,return false;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,261,ch = bufferedInput1.read();
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,264,final int ch2 = bufferedInput2.read();
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,265,if( -1 != ch2 )
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,267,return false;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,269,else
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,271,return true;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,275,private void shutdownStream( final InputStream input )
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,277,if( null == input )
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,279,return;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,282,try
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,284,input.close();
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,286,catch( final IOException ioe )
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,291,private void shutdownStream( final OutputStream output )
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,293,if( null == output )
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,295,return;
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,298,try
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,300,output.close();
True,src/test/org/apache/commons/compress/tar/TarTestCase.java,src/test/org/apache/commons/compress/tar/TarTestCase.java,302,catch( final IOException ioe )
True,src/test/org/apache/commons/compress/tar/TarTestSuite.java,src/test/org/apache/commons/compress/tar/TarTestSuite.java,2,* Copyright  The Apache Software Foundation. All rights reserved.
True,src/test/org/apache/commons/compress/tar/TarTestSuite.java,src/test/org/apache/commons/compress/tar/TarTestSuite.java,4,* This software is published under the terms of the Apache Software License
True,src/test/org/apache/commons/compress/tar/TarTestSuite.java,src/test/org/apache/commons/compress/tar/TarTestSuite.java,5,"* version 1.1, a copy of which has been included with this distribution in"
True,src/test/org/apache/commons/compress/tar/TarTestSuite.java,src/test/org/apache/commons/compress/tar/TarTestSuite.java,6,* the LICENSE.txt file.
True,src/test/org/apache/commons/compress/tar/TarTestSuite.java,src/test/org/apache/commons/compress/tar/TarTestSuite.java,8,package org.apache.commons.compress.tar;
True,src/test/org/apache/commons/compress/tar/TarTestSuite.java,src/test/org/apache/commons/compress/tar/TarTestSuite.java,10,import junit.framework.Test;
True,src/test/org/apache/commons/compress/tar/TarTestSuite.java,src/test/org/apache/commons/compress/tar/TarTestSuite.java,11,import junit.framework.TestSuite;
True,src/test/org/apache/commons/compress/tar/TarTestSuite.java,src/test/org/apache/commons/compress/tar/TarTestSuite.java,14,* A basic test suite that tests all the tar package.
True,src/test/org/apache/commons/compress/tar/TarTestSuite.java,src/test/org/apache/commons/compress/tar/TarTestSuite.java,16,public class TarTestSuite
True,src/test/org/apache/commons/compress/tar/TarTestSuite.java,src/test/org/apache/commons/compress/tar/TarTestSuite.java,18,public static Test suite()
True,src/test/org/apache/commons/compress/tar/TarTestSuite.java,src/test/org/apache/commons/compress/tar/TarTestSuite.java,20,"final TestSuite suite = new TestSuite( ""Tar Utilities"" );"
True,src/test/org/apache/commons/compress/tar/TarTestSuite.java,src/test/org/apache/commons/compress/tar/TarTestSuite.java,21,return suite;
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,2,* Copyright (C) The Apache Software Foundation. All rights reserved.
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,4,* This software is published under the terms of the Apache Software License
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,5,"* version 1.1, a copy of which has been included with this distribution in"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,6,* the LICENSE.txt file.
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,8,package org.apache.commons.compress.zip;
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,10,import java.util.zip.ZipException;
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,11,import junit.framework.TestCase;
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,14,* JUnit testcases AsiExtraField.
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,16,"* @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,18,public class AsiExtraFieldTestCase
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,19,extends TestCase
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,20,implements UnixStat
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,22,public AsiExtraFieldTestCase( final String name )
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,24,super( name );
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,28,* Test file mode magic.
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,30,public void testModes()
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,32,final AsiExtraField field = new AsiExtraField();
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,33,field.setMode( 0123 );
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,34,"assertEquals( ""plain file"", 0100123, field.getMode() );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,35,field.setDirectory( true );
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,36,"assertEquals( ""directory"", 040123, field.getMode() );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,37,"field.setLinkedFile( ""test"" );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,38,"assertEquals( ""symbolic link"", 0120123, field.getMode() );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,41,private AsiExtraField createField()
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,43,final AsiExtraField field = new AsiExtraField();
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,44,field.setMode( 0123 );
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,45,field.setUserId( 5 );
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,46,field.setGroupId( 6 );
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,47,return field;
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,50,public void testContent1()
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,52,final AsiExtraField field = createField();
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,53,final byte[] data = field.getLocalFileDataData();
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,55,"// CRC manually calculated, sorry"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,56,"final byte[] expect = {(byte)0xC6, 0x02, 0x78, (byte)0xB6, // CRC"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,57,"0123, (byte)0x80, // mode"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,58,"0, 0, 0, 0, // link length"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,59,"5, 0, 6, 0};                        // uid, gid"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,60,"assertEquals( ""no link"", expect.length, data.length );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,61,for( int i = 0; i < expect.length; i++ )
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,63,"assertEquals( ""no link, byte "" + i, expect[ i ], data[ i ] );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,66,"field.setLinkedFile( ""test"" );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,69,public void testContent2()
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,71,final AsiExtraField field = createField();
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,72,"field.setLinkedFile( ""test"" );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,74,final byte[] data = field.getLocalFileDataData();
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,75,"final byte[] expect = new byte[]{0x75, (byte)0x8E, 0x41, (byte)0xFD, // CRC"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,76,"0123, (byte)0xA0, // mode"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,77,"4, 0, 0, 0, // link length"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,78,"5, 0, 6, 0, // uid, gid"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,79,"(byte)'t', (byte)'e', (byte)'s', (byte)'t'};"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,80,"assertEquals( ""no link"", expect.length, data.length );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,81,for( int i = 0; i < expect.length; i++ )
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,83,"assertEquals( ""no link, byte "" + i, expect[ i ], data[ i ] );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,88,public void testReparse1()
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,89,throws ZipException
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,91,"// CRC manually calculated, sorry"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,92,"final byte[] data = {(byte)0xC6, 0x02, 0x78, (byte)0xB6, // CRC"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,93,"0123, (byte)0x80, // mode"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,94,"0, 0, 0, 0, // link length"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,95,"5, 0, 6, 0};                        // uid, gid"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,96,final AsiExtraField field = new AsiExtraField();
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,97,"field.parseFromLocalFileData( data, 0, data.length );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,99,"assertEquals( ""length plain file"", data.length,"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,100,field.getLocalFileDataLength().getValue() );
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,101,"assertTrue( ""plain file, no link"", !field.isLink() );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,102,"assertTrue( ""plain file, no dir"", !field.isDirectory() );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,103,"assertEquals( ""mode plain file"", FILE_FLAG | 0123, field.getMode() );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,104,"assertEquals( ""uid plain file"", 5, field.getUserId() );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,105,"assertEquals( ""gid plain file"", 6, field.getGroupID() );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,108,public void testReparse2()
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,109,throws ZipException
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,111,"final byte[] data = new byte[]{0x75, (byte)0x8E, 0x41, (byte)0xFD, // CRC"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,112,"0123, (byte)0xA0, // mode"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,113,"4, 0, 0, 0, // link length"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,114,"5, 0, 6, 0, // uid, gid"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,115,"(byte)'t', (byte)'e', (byte)'s', (byte)'t'};"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,116,final AsiExtraField field = new AsiExtraField();
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,117,"field.parseFromLocalFileData( data, 0, data.length );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,118,"assertEquals( ""length link"", data.length,"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,119,field.getLocalFileDataLength().getValue() );
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,120,"assertTrue( ""link, is link"", field.isLink() );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,121,"assertTrue( ""link, no dir"", !field.isDirectory() );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,122,"assertEquals( ""mode link"", LINK_FLAG | 0123, field.getMode() );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,123,"assertEquals( ""uid link"", 5, field.getUserId() );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,124,"assertEquals( ""gid link"", 6, field.getGroupID() );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,125,"assertEquals( ""test"", field.getLinkedFile() );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,128,public void testReparse3()
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,129,throws ZipException
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,131,"final byte[] data = new byte[]{(byte)0x8E, 0x01, (byte)0xBF, (byte)0x0E, // CRC"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,132,"0123, (byte)0x40, // mode"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,133,"0, 0, 0, 0, // link"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,134,"5, 0, 6, 0};                          // uid, gid"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,135,final AsiExtraField field = new AsiExtraField();
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,136,"field.parseFromLocalFileData( data, 0, data.length );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,137,"assertEquals( ""length dir"", data.length,"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,138,field.getLocalFileDataLength().getValue() );
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,139,"assertTrue( ""dir, no link"", !field.isLink() );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,140,"assertTrue( ""dir, is dir"", field.isDirectory() );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,141,"assertEquals( ""mode dir"", DIR_FLAG | 0123, field.getMode() );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,142,"assertEquals( ""uid dir"", 5, field.getUserId() );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,143,"assertEquals( ""gid dir"", 6, field.getGroupID() );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,146,public void testReparse4()
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,147,throws Exception
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,149,"final byte[] data = new byte[]{0, 0, 0, 0, // bad CRC"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,150,"0123, (byte)0x40, // mode"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,151,"0, 0, 0, 0, // link"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,152,"5, 0, 6, 0};                          // uid, gid"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,153,final AsiExtraField field = new AsiExtraField();
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,154,try
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,156,"field.parseFromLocalFileData( data, 0, data.length );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,157,"fail( ""should raise bad CRC exception"" );"
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,159,catch( Exception e )
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,161,"assertEquals( ""bad CRC checksum 0 instead of ebf018e"","
True,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java,162,e.getMessage() );
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,2,* Copyright (C) The Apache Software Foundation. All rights reserved.
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,4,* This software is published under the terms of the Apache Software License
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,5,"* version 1.1, a copy of which has been included with this distribution in"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,6,* the LICENSE.txt file.
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,8,package org.apache.commons.compress.zip;
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,10,import junit.framework.TestCase;
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,12,* JUnit testcases ExtraFieldUtils.
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,14,"* @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,16,public class ExtraFieldUtilsTestCase
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,17,extends TestCase
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,18,implements UnixStat
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,20,private AsiExtraField m_field;
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,21,private UnrecognizedExtraField m_dummy;
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,22,private byte[] m_data;
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,23,private byte[] m_local;
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,25,public ExtraFieldUtilsTestCase( final String name )
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,27,super( name );
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,30,public void setUp()
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,32,m_field = new AsiExtraField();
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,33,m_field.setMode( 0755 );
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,34,m_field.setDirectory( true );
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,35,m_dummy = new UnrecognizedExtraField();
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,36,m_dummy.setHeaderId( new ZipShort( 1 ) );
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,37,m_dummy.setLocalFileDataData( new byte[ 0 ] );
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,38,m_dummy.setCentralDirectoryData( new byte[]{0} );
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,40,m_local = m_field.getLocalFileDataData();
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,41,final byte[] dummyLocal = m_dummy.getLocalFileDataData();
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,42,m_data = new byte[ 4 + m_local.length + 4 + dummyLocal.length ];
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,43,"System.arraycopy( m_field.getHeaderID().getBytes(), 0, m_data, 0, 2 );"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,44,"System.arraycopy( m_field.getLocalFileDataLength().getBytes(), 0, m_data, 2, 2 );"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,45,"System.arraycopy( m_local, 0, m_data, 4, m_local.length );"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,46,"System.arraycopy( m_dummy.getHeaderID().getBytes(), 0, m_data,"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,47,"4 + m_local.length, 2 );"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,48,"System.arraycopy( m_dummy.getLocalFileDataLength().getBytes(), 0, m_data,"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,49,"4 + m_local.length + 2, 2 );"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,50,"System.arraycopy( dummyLocal, 0, m_data,"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,51,"4 + m_local.length + 4, dummyLocal.length );"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,56,* test parser.
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,58,public void testParse() throws Exception
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,60,final ZipExtraField[] extraField = ExtraFieldUtils.parse( m_data );
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,61,"assertEquals( ""number of fields"", 2, extraField.length );"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,62,"assertTrue( ""type field 1"", extraField[ 0 ] instanceof AsiExtraField );"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,63,"assertEquals( ""mode field 1"", 040755,"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,64,( (AsiExtraField)extraField[ 0 ] ).getMode() );
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,65,"assertTrue( ""type field 2"", extraField[ 1 ] instanceof UnrecognizedExtraField );"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,66,"assertEquals( ""data length field 2"", 0,"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,67,extraField[ 1 ].getLocalFileDataLength().getValue() );
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,69,final byte[] data2 = new byte[ m_data.length - 1 ];
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,70,"System.arraycopy( m_data, 0, data2, 0, data2.length );"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,71,try
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,73,ExtraFieldUtils.parse( data2 );
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,74,"fail( ""data should be invalid"" );"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,76,catch( Exception e )
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,78,"assertEquals( ""message"","
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,79,"""data starting at "" + ( 4 + m_local.length ) + "" is in unknown format"","
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,80,e.getMessage() );
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,85,* Test merge methods
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,87,public void testMerge()
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,89,final byte[] local =
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,90,"ExtraFieldUtils.mergeLocalFileDataData( new ZipExtraField[]{m_field, m_dummy} );"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,91,"assertEquals( ""local length"", m_data.length, local.length );"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,92,for( int i = 0; i < local.length; i++ )
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,94,"assertEquals( ""local byte "" + i, m_data[ i ], local[ i ] );"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,97,final byte[] dummyCentral = m_dummy.getCentralDirectoryData();
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,98,final byte[] data2 = new byte[ 4 + m_local.length + 4 + dummyCentral.length ];
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,99,"System.arraycopy( m_data, 0, data2, 0, 4 + m_local.length + 2 );"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,100,"System.arraycopy( m_dummy.getCentralDirectoryLength().getBytes(), 0,"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,101,"data2, 4 + m_local.length + 2, 2 );"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,102,"System.arraycopy( dummyCentral, 0, data2,"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,103,"4 + m_local.length + 4, dummyCentral.length );"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,105,final byte[] central =
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,106,"ExtraFieldUtils.mergeCentralDirectoryData( new ZipExtraField[]{m_field, m_dummy} );"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,107,"assertEquals( ""central length"", data2.length, central.length );"
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,108,for( int i = 0; i < central.length; i++ )
True,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java,110,"assertEquals( ""central byte "" + i, data2[ i ], central[ i ] );"
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,2,* Copyright (C) The Apache Software Foundation. All rights reserved.
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,4,* This software is published under the terms of the Apache Software License
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,5,"* version 1.1, a copy of which has been included with this distribution in"
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,6,* the LICENSE.txt file.
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,8,package org.apache.commons.compress.zip;
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,10,import java.util.NoSuchElementException;
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,11,import junit.framework.TestCase;
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,14,* JUnit testcases ZipEntry.
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,16,"* @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,18,public class ZipEntryTestCase
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,19,extends TestCase
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,21,public ZipEntryTestCase( final String name )
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,23,super( name );
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,27,* test handling of extra fields
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,29,public void testExtraFields()
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,31,final AsiExtraField field = createField();
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,32,final UnrecognizedExtraField extraField = createExtraField();
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,34,"final ZipEntry entry = new ZipEntry( ""test/"" );"
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,35,"entry.setExtraFields( new ZipExtraField[]{field, extraField} );"
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,36,final byte[] data1 = entry.getExtra();
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,37,ZipExtraField[] result = entry.getExtraFields();
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,38,"assertEquals( ""first pass"", 2, result.length );"
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,39,"assertSame( field, result[ 0 ] );"
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,40,"assertSame( extraField, result[ 1 ] );"
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,42,UnrecognizedExtraField u2 = new UnrecognizedExtraField();
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,43,u2.setHeaderId( new ZipShort( 1 ) );
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,44,u2.setLocalFileDataData( new byte[]{1} );
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,46,entry.addExtraField( u2 );
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,47,byte[] data2 = entry.getExtra();
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,48,result = entry.getExtraFields();
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,49,"assertEquals( ""second pass"", 2, result.length );"
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,50,"assertSame( field, result[ 0 ] );"
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,51,"assertSame( u2, result[ 1 ] );"
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,52,"assertEquals( ""length second pass"", data1.length + 1, data2.length );"
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,54,UnrecognizedExtraField u3 = new UnrecognizedExtraField();
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,55,u3.setHeaderId( new ZipShort( 2 ) );
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,56,u3.setLocalFileDataData( new byte[]{1} );
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,57,entry.addExtraField( u3 );
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,58,result = entry.getExtraFields();
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,59,"assertEquals( ""third pass"", 3, result.length );"
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,61,entry.removeExtraField( new ZipShort( 1 ) );
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,62,byte[] data3 = entry.getExtra();
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,63,result = entry.getExtraFields();
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,64,"assertEquals( ""fourth pass"", 2, result.length );"
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,65,"assertSame( field, result[ 0 ] );"
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,66,"assertSame( u3, result[ 1 ] );"
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,67,"assertEquals( ""length fourth pass"", data2.length, data3.length );"
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,69,try
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,71,entry.removeExtraField( new ZipShort( 1 ) );
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,72,"fail( ""should be no such element"" );"
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,74,catch( final NoSuchElementException nse )
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,79,private UnrecognizedExtraField createExtraField()
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,81,UnrecognizedExtraField extraField = new UnrecognizedExtraField();
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,82,extraField.setHeaderId( new ZipShort( 1 ) );
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,83,extraField.setLocalFileDataData( new byte[ 0 ] );
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,84,return extraField;
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,87,private AsiExtraField createField()
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,89,final AsiExtraField field = new AsiExtraField();
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,90,field.setDirectory( true );
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,91,field.setMode( 0755 );
True,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java,92,return field;
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,2,* Copyright (C) The Apache Software Foundation. All rights reserved.
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,4,* This software is published under the terms of the Apache Software License
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,5,"* version 1.1, a copy of which has been included with this distribution in"
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,6,* the LICENSE.txt file.
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,8,package org.apache.commons.compress.zip;
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,10,import junit.framework.TestCase;
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,13,* JUnit 3 testcases for org.apache.tools.zip.ZipLong.
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,15,"* @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,17,public class ZipLongTestCase
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,18,extends TestCase
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,21,public ZipLongTestCase( final String name )
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,23,super( name );
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,27,* Test conversion to bytes.
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,29,public void testToBytes()
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,31,final ZipLong zipLong = new ZipLong( 0x12345678 );
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,32,final byte[] result = zipLong.getBytes();
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,33,"assertEquals( ""length getBytes"", 4, result.length );"
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,34,"assertEquals( ""first byte getBytes"", 0x78, result[ 0 ] );"
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,35,"assertEquals( ""second byte getBytes"", 0x56, result[ 1 ] );"
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,36,"assertEquals( ""third byte getBytes"", 0x34, result[ 2 ] );"
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,37,"assertEquals( ""fourth byte getBytes"", 0x12, result[ 3 ] );"
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,41,* Test conversion from bytes.
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,43,public void testFromBytes()
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,45,"final byte[] value = new byte[]{0x78, 0x56, 0x34, 0x12};"
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,46,final ZipLong zipLong = new ZipLong( value );
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,47,"assertEquals( ""value from bytes"", 0x12345678, zipLong.getValue() );"
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,51,* Test the contract of the equals method.
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,53,public void testEquals()
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,55,final ZipLong zipLong1 = new ZipLong( 0x12345678 );
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,56,final ZipLong zipLong2 = new ZipLong( 0x12345678 );
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,57,final ZipLong zipLong3 = new ZipLong( 0x87654321 );
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,59,"assertTrue( ""reflexive"", zipLong1.equals( zipLong1 ) );"
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,61,"assertTrue( ""works"", zipLong1.equals( zipLong2 ) );"
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,62,"assertTrue( ""works, part two"", !zipLong1.equals( zipLong3 ) );"
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,64,"assertTrue( ""symmetric"", zipLong2.equals( zipLong1 ) );"
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,66,"assertTrue( ""null handling"", !zipLong1.equals( null ) );"
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,67,"assertTrue( ""non ZipLong handling"", !zipLong1.equals( new Integer( 0x1234 ) ) );"
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,71,* Test sign handling.
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,73,public void testSign()
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,75,final ZipLong zipLong =
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,76,"new ZipLong( new byte[]{(byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF} );"
True,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/zip/ZipLongTestCase.java,77,"assertEquals( 0x00000000FFFFFFFFl, zipLong.getValue() );"
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,2,* Copyright (C) The Apache Software Foundation. All rights reserved.
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,4,* This software is published under the terms of the Apache Software License
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,5,"* version 1.1, a copy of which has been included with this distribution in"
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,6,* the LICENSE.txt file.
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,8,package org.apache.commons.compress.zip;
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,10,import junit.framework.TestCase;
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,13,* JUnit 3 testcases for org.apache.tools.zip.ZipShort.
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,15,"* @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,17,public class ZipShortTestCase
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,18,extends TestCase
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,20,public ZipShortTestCase( String name )
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,22,super( name );
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,26,* Test conversion to bytes.
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,28,public void testToBytes()
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,30,final ZipShort zipShort = new ZipShort( 0x1234 );
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,31,byte[] result = zipShort.getBytes();
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,32,"assertEquals( ""length getBytes"", 2, result.length );"
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,33,"assertEquals( ""first byte getBytes"", 0x34, result[ 0 ] );"
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,34,"assertEquals( ""second byte getBytes"", 0x12, result[ 1 ] );"
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,38,* Test conversion from bytes.
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,40,public void testFromBytes()
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,42,"byte[] val = new byte[]{0x34, 0x12};"
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,43,final ZipShort zipShort = new ZipShort( val );
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,44,"assertEquals( ""value from bytes"", 0x1234, zipShort.getValue() );"
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,48,* Test the contract of the equals method.
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,50,public void testEquals()
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,52,final ZipShort zipShort = new ZipShort( 0x1234 );
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,53,final ZipShort zipShort2 = new ZipShort( 0x1234 );
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,54,final ZipShort zipShort3 = new ZipShort( 0x5678 );
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,56,"assertTrue( ""reflexive"", zipShort.equals( zipShort ) );"
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,58,"assertTrue( ""works"", zipShort.equals( zipShort2 ) );"
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,59,"assertTrue( ""works, part two"", !zipShort.equals( zipShort3 ) );"
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,61,"assertTrue( ""symmetric"", zipShort2.equals( zipShort ) );"
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,63,"assertTrue( ""null handling"", !zipShort.equals( null ) );"
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,64,"assertTrue( ""non ZipShort handling"", !zipShort.equals( new Integer( 0x1234 ) ) );"
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,68,* Test sign handling.
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,70,public void testSign()
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,72,"final ZipShort zipShort = new ZipShort( new byte[]{(byte)0xFF, (byte)0xFF} );"
True,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/zip/ZipShortTestCase.java,73,"assertEquals( 0x0000FFFF, zipShort.getValue() );"

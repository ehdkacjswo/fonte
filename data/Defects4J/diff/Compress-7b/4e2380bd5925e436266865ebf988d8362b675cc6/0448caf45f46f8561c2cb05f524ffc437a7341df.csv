is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,19,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,21,import java.io.UnsupportedEncodingException;
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,22,import java.util.zip.CRC32;
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,23,import java.util.zip.ZipException;
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,26,* A common base class for Unicode extra information extra fields.
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,28,public abstract class AbstractUnicodeExtraField implements ZipExtraField {
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,29,private long nameCRC32;
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,30,private byte[] unicodeName;
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,31,private byte[] data;
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,33,protected AbstractUnicodeExtraField() {
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,37,* Assemble as unicode path extension form the name and encoding
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,38,* of the orginal zip entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,40,* @param name The file name or comment.
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,41,* @param zipEncoding The encoding of the filenames in the zip
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,42,"* file, usually <code>""CP437""</code>."
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,44,"protected AbstractUnicodeExtraField(String name, String zipEncoding) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,46,"byte[] filename = ZipEncodingHelper.encodeName(name, zipEncoding);"
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,48,CRC32 crc32 = new CRC32();
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,49,crc32.update(filename);
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,50,nameCRC32 = crc32.getValue();
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,52,try {
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,53,"unicodeName = name.getBytes(""UTF-8"");"
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,54,} catch (UnsupportedEncodingException e) {
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,55,"throw new RuntimeException(""FATAL: UTF-8 encoding not supported."","
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,56,e);
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,60,private void assembleData() {
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,61,if (unicodeName == null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,62,return;
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,65,data = new byte[5 + unicodeName.length];
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,66,// version 1
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,67,data[0] = 0x01;
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,68,"System.arraycopy(ZipLong.getBytes(nameCRC32), 0, data, 1, 4);"
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,69,"System.arraycopy(unicodeName, 0, data, 5, unicodeName.length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,73,* @return The CRC32 checksum of the filename or comment as
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,74,*         encoded in the central directory of the zip file.
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,76,public long getNameCRC32() {
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,77,return nameCRC32;
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,81,* @param nameCRC32 The CRC32 checksum of the filename as encoded
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,82,*         in the central directory of the zip file to set.
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,84,public void setNameCRC32(long nameCRC32) {
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,85,nameCRC32 = nameCRC32;
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,86,data = null;
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,90,* @return The utf-8 encoded name.
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,92,public byte[] getUnicodeName() {
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,93,return unicodeName;
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,97,* @param unicodeName The utf-8 encoded name to set.
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,99,public void setUnicodeName(byte[] unicodeName) {
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,100,unicodeName = unicodeName;
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,101,data = null;
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,104,public byte[] getCentralDirectoryData() {
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,105,if (data == null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,106,this.assembleData();
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,108,return data;
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,111,public ZipShort getCentralDirectoryLength() {
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,112,if (data == null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,113,assembleData();
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,115,return new ZipShort(data.length);
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,118,public byte[] getLocalFileDataData() {
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,119,return getCentralDirectoryData();
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,122,public ZipShort getLocalFileDataLength() {
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,123,return getCentralDirectoryLength();
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,126,"public void parseFromLocalFileData(byte[] buffer, int offset, int length)"
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,127,throws ZipException {
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,129,if (length < 5) {
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,130,"throw new ZipException(""UniCode path extra data must have at least"""
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,131,"+ "" 5 bytes."");"
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,134,int version = buffer[offset];
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,136,if (version != 0x01) {
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,137,"throw new ZipException(""Unsupported version ["" + version"
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,138,"+ ""] for UniCode path extra data."");"
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,141,"nameCRC32 = ZipLong.getValue(buffer, offset + 1);"
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,142,unicodeName = new byte[length - 5];
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,143,"System.arraycopy(buffer, offset + 5, unicodeName, 0, length - 5);"
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,144,data = null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,46,register(UnicodePathExtraField.class);
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,47,register(UnicodeCommentExtraField.class);
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,19,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,22,* Info-ZIP Unicode Comment Extra Field (0x6375):
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,24,* <p>Stores the UTF-8 version of the file comment as stored in the
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,25,* central directory header.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,27,* <pre>
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,28,*         Value         Size        Description
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,30,"*  (UCom) 0x6375        Short       tag for this extra block type (""uc"")"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,31,*         TSize         Short       total data size for this block
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,32,"*         Version       1 byte      version of this extra field, currently 1"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,33,*         ComCRC32      4 bytes     Comment Field CRC32 Checksum
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,34,*         UnicodeCom    Variable    UTF-8 version of the entry comment
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,35,* </pre>
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,37,public class UnicodeCommentExtraField extends AbstractUnicodeExtraField {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,39,public static final ZipShort UCOM_ID = new ZipShort(0x6375);
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,41,public UnicodeCommentExtraField () {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,45,* Assemble as unicode comment extension form the comment and
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,46,* encoding of the orginal zip entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,48,* @param name The file name
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,49,"* @param zipEncoding The encoding of the comment in the zip file,"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,50,"* usually <code>""CP437""</code>."
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,52,"public UnicodeCommentExtraField(String name, String zipEncoding) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,53,"super(name, zipEncoding);"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,56,public ZipShort getHeaderId() {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,57,return UCOM_ID;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,19,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,22,* Info-ZIP Unicode Path Extra Field (0x7075):
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,24,* <p>Stores the UTF-8 version of the file name field as stored in the
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,25,* local header and central directory header.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,27,* <pre>
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,28,*         Value         Size        Description
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,30,"* (UPath) 0x7075        Short       tag for this extra block type (""up"")"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,31,*         TSize         Short       total data size for this block
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,32,"*         Version       1 byte      version of this extra field, currently 1"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,33,*         NameCRC32     4 bytes     File Name Field CRC32 Checksum
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,34,*         UnicodeName   Variable    UTF-8 version of the entry File Name
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,35,* </pre>
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,37,public class UnicodePathExtraField extends AbstractUnicodeExtraField {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,39,public static final ZipShort UPATH_ID = new ZipShort(0x7075);
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,41,public UnicodePathExtraField () {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,45,* Assemble as unicode path extension form the name and encoding
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,46,* of the orginal zip entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,48,* @param name The file name
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,49,* @param zipEncoding The encoding of the filename in the zip
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,50,"* file, usually <code>""CP437""</code>."
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,52,"public UnicodePathExtraField(String name, String zipEncoding) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,53,"super(name, zipEncoding);"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,56,public ZipShort getHeaderId() {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,57,return UPATH_ID;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,19,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,21,import java.nio.ByteBuffer;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,22,import java.nio.CharBuffer;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,23,import java.nio.charset.Charset;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,24,import java.nio.charset.CharsetEncoder;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,25,import java.nio.charset.CoderResult;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,26,import java.nio.charset.CodingErrorAction;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,29,* Static helper functions for robustly encoding filenames in zip files.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,31,abstract class ZipEncodingHelper {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,34,"* Grow a byte buffer, so it has a minimal capacity or at least"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,35,* the double capacity of the original buffer
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,37,* @param b The original buffer.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,38,* @param newCapacity The minimal requested new capacity.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,39,* @return A byte buffer <code>r</code> with
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,40,"*         <code>r.capacity() = max(b.capacity()*2,newCapacity)</code> and"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,41,*         all the data contained in <code>b</code> copied to the beginning
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,42,*         of <code>r</code>.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,45,"static ByteBuffer growBuffer(ByteBuffer b, int newCapacity) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,46,b.limit(b.position());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,47,b.rewind();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,49,int c2 = b.capacity() * 2;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,50,ByteBuffer on = ByteBuffer.allocate(c2 < newCapacity ? newCapacity : c2);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,52,on.put(b);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,53,return on;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,58,"* The hexadecimal digits <code>0,...,9,A,...,F</code> encoded as"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,59,* ASCII bytes.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,61,private static final byte[] HEX_DIGITS =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,62,new byte [] {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,63,"0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,64,"0x42, 0x43, 0x44, 0x45, 0x46"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,68,* Encode a filename or a comment to a byte array suitable for
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,69,* storing it to a serialized zip entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,71,"* Examples (in pseudo-notation, right hand side is C-style notation):"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,72,* <pre>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,73,"*  encodeName(""\u20AC_for_Dollar.txt"",""CP437"") = ""%U20AC_for_Dollar.txt"""
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,74,"*  encodeName(""\u00D6lf\u00E4sser.txt"",""CP437"") = ""\231lf\204sser.txt"""
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,75,* </pre>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,77,* @param name The filename or comment with possible non-ASCII
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,78,* unicode characters.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,79,* @param encoding A valid encoding name. The standard zip
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,80,"*                 encoding is <code>""CP437""</code>,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,81,"*                 <code>""UTF-8""</code> is supported in ZIP file"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,82,*                 version <code>6.3</code> or later.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,83,* @return A byte array containing the mapped file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,84,*         name. Unmappable characters or malformed character
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,85,*         sequences are mapped to a sequence of utf-16 words
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,86,*         encoded in the format <code>%Uxxxx</code>.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,88,"static final byte[] encodeName(String name, String encoding) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,89,Charset cs = Charset.forName(encoding);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,90,CharsetEncoder enc = cs.newEncoder();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,92,enc.onMalformedInput(CodingErrorAction.REPORT);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,93,enc.onUnmappableCharacter(CodingErrorAction.REPORT);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,95,CharBuffer cb = CharBuffer.wrap(name);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,96,ByteBuffer out = ByteBuffer.allocate(name.length()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,97,+ (name.length() + 1) / 2);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,99,while (cb.remaining() > 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,100,"CoderResult res = enc.encode(cb, out,true);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,102,if (res.isUnmappable() || res.isMalformed()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,104,// write the unmappable characters in utf-16
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,105,// pseudo-URL encoding style to ByteBuffer.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,106,if (res.length() * 6 > out.remaining()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,107,"out = growBuffer(out,out.position() + res.length() * 6);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,110,for (int i=0; i<res.length(); ++i) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,111,out.put((byte) '%');
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,112,out.put((byte) 'U');
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,114,char c = cb.get();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,116,out.put(HEX_DIGITS[(c >> 12)&0x0f]);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,117,out.put(HEX_DIGITS[(c >> 8)&0x0f]);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,118,out.put(HEX_DIGITS[(c >> 4)&0x0f]);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,119,out.put(HEX_DIGITS[c & 0x0f]);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,122,} else if (res.isOverflow()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,124,"out = growBuffer(out, 0);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,126,} else if (res.isUnderflow()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,128,enc.flush(out);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,129,break;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,134,byte [] ret = new byte[out.position()];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,135,out.rewind();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,136,out.get(ret);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,138,return ret;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,142,"* Return, whether a filename or a comment may be encoded to a"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,143,* byte array suitable for storing it to a serialized zip entry
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,144,* without any losses.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,146,"* Examples (in pseudo-notation, right hand side is C-style notation):"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,147,* <pre>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,148,"*  canEncodeName(""\u20AC_for_Dollar.txt"",""CP437"") = false"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,149,"*  canEncodeName(""\u20AC_for_Dollar.txt"",""UTF-8"") = true"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,150,"*  canEncodeName(""\u00D6lf\u00E4sser.txt"",""CP437"") = true"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,151,* </pre>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,153,* @param name The filename or comment with possible non-ASCII
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,154,* unicode characters.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,155,* @param encoding A valid encoding name. The standard zip
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,156,"*                 encoding is <code>""CP437""</code>,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,157,"*                 <code>""UTF-8""</code> is supported in ZIP file"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,158,*                 version <code>6.3</code> or later.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,159,* @return Whether the given encoding may encode the given name.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,161,"static final boolean canEncodeName(String name, String encoding) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,163,Charset cs = Charset.forName(encoding);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,165,CharsetEncoder enc = cs.newEncoder();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,166,enc.onMalformedInput(CodingErrorAction.REPORT);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,167,enc.onUnmappableCharacter(CodingErrorAction.REPORT);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,169,return enc.canEncode(name);

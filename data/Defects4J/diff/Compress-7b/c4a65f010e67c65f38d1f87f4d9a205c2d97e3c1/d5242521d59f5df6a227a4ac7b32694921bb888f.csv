is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,37, Factory to create Archive[In|Out]putStreams from names
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,38, or the first bytes of the InputStream. In order add other
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,39, implementations you should extend ArchiveStreamFactory
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,40, and override the appropriate methods (and call their implementation
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,41, from super of course)
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,37,* Factory to create Archive[In|Out]putStreams from names or the first bytes of
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,38,* the InputStream. In order add other implementations you should extend
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,39,* ArchiveStreamFactory and override the appropriate methods (and call their
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,40,* implementation from super of course)
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,43, TODO add example here
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,42,* TODO add example here
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,49,"ublic ArchiveInputStream createArchiveInputStream( final String archiverName, final InputStream in ) throws ArchiveException {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,47,public ArchiveInputStream createArchiveInputStream(
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,48,"final String archiverName, final InputStream in)"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,49,throws ArchiveException {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,50,if (archiverName == null || in == null) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,51,"throw new IllegalArgumentException(""Archivername must not be null."");"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,52," else if(""zip"".equalsIgnoreCase(archiverName)) {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,56,"} else if (""zip"".equalsIgnoreCase(archiverName)) {"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,54," else if(""tar"".equalsIgnoreCase(archiverName)) {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,58,"} else if (""tar"".equalsIgnoreCase(archiverName)) {"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,56," else if(""jar"".equalsIgnoreCase(archiverName)) {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,60,"} else if (""jar"".equalsIgnoreCase(archiverName)) {"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,58," else if(""cpio"".equalsIgnoreCase(archiverName)) {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,62,"} else if (""cpio"".equalsIgnoreCase(archiverName)) {"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,61,eturn null;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,65,"throw new ArchiveException(""Archiver: "" + archiverName + "" not found."");"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,64,"ublic ArchiveOutputStream createArchiveOutputStream( final String archiverName, final OutputStream out ) throws ArchiveException {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,68,public ArchiveOutputStream createArchiveOutputStream(
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,69,"final String archiverName, final OutputStream out)"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,70,throws ArchiveException {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,71,if (archiverName == null || out == null) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,72,throw new IllegalArgumentException(
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,73,"""Archivername and stream must not be null."");"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,67," else if(""zip"".equalsIgnoreCase(archiverName)) {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,78,"} else if (""zip"".equalsIgnoreCase(archiverName)) {"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,69," else if(""tar"".equalsIgnoreCase(archiverName)) {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,80,"} else if (""tar"".equalsIgnoreCase(archiverName)) {"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,71," else if(""jar"".equalsIgnoreCase(archiverName)) {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,82,"} else if (""jar"".equalsIgnoreCase(archiverName)) {"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,73," else if(""cpio"".equalsIgnoreCase(archiverName)) {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,84,"} else if (""cpio"".equalsIgnoreCase(archiverName)) {"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,76,eturn null;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,87,"throw new ArchiveException(""Archiver: "" + archiverName + "" not found."");"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,79,ublic ArchiveInputStream createArchiveInputStream( final InputStream input ) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,90,public ArchiveInputStream createArchiveInputStream(final InputStream in)
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,91,throws ArchiveException {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,92,if (in == null) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,93,"throw new IllegalArgumentException(""Stream must not be null."");"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,96,if (!in.markSupported()) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,97,"throw new IllegalArgumentException(""Mark is not supported."");"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,82,nput.mark(signature.length);
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,83,nt signatureLength = input.read(signature);
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,84,/ TODO if reset is not supported pass on the IOException or return null?
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,85,nput.reset();
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,101,in.mark(signature.length);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,102,try {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,103,int signatureLength = in.read(signature);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,104,in.reset();
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,105,"if (ZipArchiveInputStream.matches(signature, signatureLength)) {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,106,return new ZipArchiveInputStream(in);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,107,} else if (JarArchiveInputStream
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,108,".matches(signature, signatureLength)) {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,109,return new JarArchiveInputStream(in);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,110,} else if (TarArchiveInputStream
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,111,".matches(signature, signatureLength)) {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,112,return new TarArchiveInputStream(in);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,113,"} else if (ArArchiveInputStream.matches(signature, signatureLength)) {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,114,return new ArArchiveInputStream(in);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,115,"} else if (CpioArchiveInputStream.matches(signature,"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,116,signatureLength)) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,117,return new CpioArchiveInputStream(in);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,119,} catch (IOException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,120,throw new ArchiveException(
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,121,"""Could not use reset and mark operations."", e);"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,87,"f(ZipArchiveInputStream.matches(signature, signatureLength)) {"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,88,eturn new ZipArchiveInputStream(input);
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,89," else if(JarArchiveInputStream.matches(signature, signatureLength)) {"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,90,eturn new JarArchiveInputStream(input);
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,91," else if(TarArchiveInputStream.matches(signature, signatureLength)) {"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,92,eturn new TarArchiveInputStream(input);
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,93," else if(ArArchiveInputStream.matches(signature, signatureLength)) {"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,94,eturn new ArArchiveInputStream(input);
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,95," else if(CpioArchiveInputStream.matches(signature, signatureLength)) {"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,96,eturn new CpioArchiveInputStream(input);
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,98,eturn null;
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,124,throw new ArchiveException(
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,125,"""No Archiver not found for this stream signature"");"
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,31, Factory to create Compressor[In|Out]putStreams from names
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,32, In order add other implementations you should extend CompressorStreamFactory
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,33, and override the appropriate methods (and call their implementation
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,34, from super of course)
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,31,* Factory to create Compressor[In|Out]putStreams from names In order add other
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,32,* implementations you should extend CompressorStreamFactory and override the
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,33,* appropriate methods (and call their implementation from super of course)
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,36, TODO add example here
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,35,* TODO add example here
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,41,"ublic CompressorInputStream createCompressorInputStream( final String name, final InputStream in ) throws CompressorException {"
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,42,ry {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,40,"public CompressorInputStream createCompressorInputStream(final String name,"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,41,final InputStream in) throws CompressorException {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,42,if (name == null || in == null) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,43,throw new IllegalArgumentException(
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,44,"""Compressor name and stream must not be null."");"
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,44,"f(""gz"".equalsIgnoreCase(name)) {"
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,45,eturn new GzipCompressorInputStream(in);
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,46," else if(""bzip2"".equalsIgnoreCase(name)) {"
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,47,eturn new BZip2CompressorInputStream(in);
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,50,eturn null;
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,52, catch (IOException e) {
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,53,"hrow new CompressorException(""Could not create CompressorInputStream"", e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,47,try {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,48,"if (""gz"".equalsIgnoreCase(name)) {"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,49,return new GzipCompressorInputStream(in);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,50,"} else if (""bzip2"".equalsIgnoreCase(name)) {"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,51,return new BZip2CompressorInputStream(in);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,53,"throw new CompressorException(""Compressor: "" + name + "" not found."");"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,54,} catch (IOException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,55,throw new CompressorException(
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,56,"""Could not create CompressorInputStream"", e);"
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,57,"ublic CompressorOutputStream createCompressorOutputStream( final String name, final OutputStream out ) throws CompressorException {"
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,58,ry {
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,60,"f(""gz"".equalsIgnoreCase(name)) {"
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,61,eturn new GzipCompressorOutputStream(out);
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,62," else if(""bzip2"".equalsIgnoreCase(name)) {"
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,63,eturn new BZip2CompressorOutputStream(out);
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,65,eturn null;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,60,public CompressorOutputStream createCompressorOutputStream(
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,61,"final String name, final OutputStream out)"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,62,throws CompressorException {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,63,if (name == null || out == null) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,64,throw new IllegalArgumentException(
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,65,"""Compressor name and stream must not be null."");"
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,67, catch (IOException e) {
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,68,"hrow new CompressorException(""Could not create CompressorOutputStream"", e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,68,try {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,69,"if (""gz"".equalsIgnoreCase(name)) {"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,70,return new GzipCompressorOutputStream(out);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,71,"} else if (""bzip2"".equalsIgnoreCase(name)) {"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,72,return new BZip2CompressorOutputStream(out);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,74,"throw new CompressorException(""Compressor: "" + name + "" not found."");"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,75,} catch (IOException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,76,throw new CompressorException(
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,77,"""Could not create CompressorOutputStream"", e);"

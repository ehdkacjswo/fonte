is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,23,mport java.util.Collections;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,25,import java.util.Collections;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,26,import java.util.HashSet;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,28,import java.util.Set;
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,28, <p>Assists in implementing {@link Object#hashCode()} methods.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,30, <p> This class enables a good <code>hashCode</code> method to be built for any class. It
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,31, follows the rules laid out in the book
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,32," <a href=""http://java.sun.com/docs/books/effective/index.html"">Effective Java</a>"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,33, by Joshua Bloch. Writing a good <code>hashCode</code> method is actually quite
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,34, difficult. This class aims to simplify the process.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,36, <p>All relevant fields from the object should be included in the
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,37," <code>hashCode</code> method. Derived fields may be excluded. In general, any"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,38, field used in the <code>equals</code> method must be used in the <code>hashCode</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,39, method.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,41, <p>To use this class write code as follows:</p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,31,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,32,* Assists in implementing {@link Object#hashCode()} methods.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,33,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,35,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,36,* This class enables a good <code>hashCode</code> method to be built for any class. It follows the rules laid out in
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,37,"* the book <a href=""http://java.sun.com/docs/books/effective/index.html"">Effective Java</a> by Joshua Bloch. Writing a"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,38,* good <code>hashCode</code> method is actually quite difficult. This class aims to simplify the process.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,39,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,41,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,42,* All relevant fields from the object should be included in the <code>hashCode</code> method. Derived fields may be
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,43,"* excluded. In general, any field used in the <code>equals</code> method must be used in the <code>hashCode</code>"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,44,* method.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,45,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,47,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,48,* To use this class write code as follows:
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,49,* </p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,61," <p>If required, the superclass <code>hashCode()</code> can be added"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,62, using {@link #appendSuper}.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,64," <p>Alternatively, there is a method that uses reflection to determine"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,65," the fields to test. Because these fields are usually private, the method,"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,66," <code>reflectionHashCode</code>, uses <code>AccessibleObject.setAccessible</code> to"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,67," change the visibility of the fields. This will fail under a security manager,"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,68, unless the appropriate permissions are set up correctly. It is also slower
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,69, than testing explicitly.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,71, <p>A typical invocation for this method would look like:</p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,70,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,71,"* If required, the superclass <code>hashCode()</code> can be added using {@link #appendSuper}."
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,72,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,74,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,75,"* Alternatively, there is a method that uses reflection to determine the fields to test. Because these fields are"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,76,"* usually private, the method, <code>reflectionHashCode</code>, uses <code>AccessibleObject.setAccessible</code>"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,77,"* to change the visibility of the fields. This will fail under a security manager, unless the appropriate permissions"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,78,* are set up correctly. It is also slower than testing explicitly.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,79,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,81,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,82,* A typical invocation for this method would look like:
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,83,* </p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,87, Constant to use in building the hashCode.
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,89,rivate final int iConstant;
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,91, Running total of the hashCode.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,99,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,100,* A registry of objects used by reflection methods to detect cyclical object references and avoid infinite loops.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,101,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,103,* @since 2.3
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,93,rivate int iTotal = 0;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,105,private static ThreadLocal registry = new ThreadLocal() {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,106,protected synchronized Object initialValue() {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,107,"// The HashSet implementation is not synchronized,"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,108,// which is just what we need here.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,109,return new HashSet();
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,96, <p>Uses two hard coded choices for the constants
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,97, needed to build a <code>hashCode</code>.</p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,114,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,115,* Returns the registry of objects being traversed by the reflection methods in the current thread.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,116,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,118,* @return Set the registry of objects being traversed
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,119,* @since 2.3
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,99,ublic HashCodeBuilder() {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,100,Constant = 37;
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,101,Total = 17;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,121,static Set getRegistry() {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,122,return (Set) registry.get();
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,105," <p>Two randomly chosen, non-zero, odd numbers must be passed in."
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,106," Ideally these should be different for each class, however this is"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,107, not vital.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,109," <p>Prime numbers are preferred, especially for the multiplier.</p>"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,111," @param initialNonZeroOddNumber  a non-zero, odd number used as the initial value"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,112," @param multiplierNonZeroOddNumber  a non-zero, odd number used as the multiplier"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,113, @throws IllegalArgumentException if the number is zero or even
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,115,"ublic HashCodeBuilder(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber) {"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,116,f (initialNonZeroOddNumber == 0) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,117,"hrow new IllegalArgumentException(""HashCodeBuilder requires a non zero initial value"");"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,119,f (initialNonZeroOddNumber % 2 == 0) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,120,"hrow new IllegalArgumentException(""HashCodeBuilder requires an odd initial value"");"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,122,f (multiplierNonZeroOddNumber == 0) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,123,"hrow new IllegalArgumentException(""HashCodeBuilder requires a non zero multiplier"");"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,125,f (multiplierNonZeroOddNumber % 2 == 0) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,126,"hrow new IllegalArgumentException(""HashCodeBuilder requires an odd multiplier"");"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,128,Constant = multiplierNonZeroOddNumber;
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,129,Total = initialNonZeroOddNumber;
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,135, <p>This method uses reflection to build a valid hash code.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,137, <p>This constructor uses two hard coded choices for the constants
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,138, needed to build a hash code.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,140, <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,141, fields. This means that it will throw a security exception if run under
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,142," a security manager, if the permissions are not set up correctly. It is"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,143, also not as efficient as testing explicitly.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,145," <p>Transient members will be not be used, as they are likely derived"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,146," fields, and not part of the value of the <code>Object</code>.</p>"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,148, <p>Static fields will not be tested. Superclass fields will be included.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,150, @param object  the Object to create a <code>hashCode</code> for
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,151, @return int hash code
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,152, @throws IllegalArgumentException if the object is <code>null</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,126,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,127,* Returns <code>true</code> if the registry contains the given object. Used by the reflection methods to avoid
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,128,* infinite loops.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,129,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,131,* @param value
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,132,*            The object to lookup in the registry.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,133,* @return boolean <code>true</code> if the registry contains the given object.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,134,* @since 2.3
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,154,ublic static int reflectionHashCode(Object object) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,155,"eturn reflectionHashCode(17, 37, object, false, null, null);"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,136,static boolean isRegistered(Object value) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,137,return getRegistry().contains(toIdentityHashCodeInteger(value));
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,159, <p>This method uses reflection to build a valid hash code.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,161, <p>This constructor uses two hard coded choices for the constants
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,162, needed to build a hash code.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,164, <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,165, fields. This means that it will throw a security exception if run under
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,166," a security manager, if the permissions are not set up correctly. It is"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,167, also not as efficient as testing explicitly.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,169," <p>Transient members will be not be used, as they are likely derived"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,170," fields, and not part of the value of the <code>Object</code>.</p>"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,172, <p>Static fields will not be tested. Superclass fields will be included.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,174, @param object  the Object to create a <code>hashCode</code> for
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,175, @param excludeFields  Collection of String field names to exclude from use in calculation of hash code
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,176, @return int hash code
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,177, @throws IllegalArgumentException if the object is <code>null</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,179,"ublic static int reflectionHashCode(Object object, Collection /*String*/ excludeFields) {"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,180,"eturn reflectionHashCode(object, ReflectionToStringBuilder.toNoNullStringArray(excludeFields));"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,141,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,142,* Appends the fields and values defined by the given object of the given <code>Class</code>.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,143,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,145,* @param object
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,146,*            the object to append details of
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,147,* @param clazz
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,148,*            the class to append details of
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,149,* @param builder
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,150,*            the builder to append to
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,151,* @param useTransients
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,152,*            whether to use transient fields
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,153,* @param excludeFields
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,154,*            Collection of String field names to exclude from use in calculation of hash code
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,156,"private static void reflectionAppend(Object object, Class clazz, HashCodeBuilder builder, boolean useTransients,"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,157,String[] excludeFields) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,158,if (isRegistered(object)) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,159,return;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,161,try {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,162,register(object);
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,163,Field[] fields = clazz.getDeclaredFields();
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,164,List excludedFieldList = excludeFields != null ? Arrays.asList(excludeFields) : Collections.EMPTY_LIST;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,165,"AccessibleObject.setAccessible(fields, true);"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,166,for (int i = 0; i < fields.length; i++) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,167,Field field = fields[i];
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,168,if (!excludedFieldList.contains(field.getName())
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,169,&& (field.getName().indexOf('$') == -1)
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,170,&& (useTransients || !Modifier.isTransient(field.getModifiers()))
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,171,&& (!Modifier.isStatic(field.getModifiers()))) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,172,try {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,173,Object fieldValue = field.get(object);
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,174,builder.append(fieldValue);
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,175,} catch (IllegalAccessException e) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,176,// this can't happen. Would get a Security exception instead
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,177,// throw a runtime exception in case the impossible happens.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,178,"throw new InternalError(""Unexpected IllegalAccessException"");"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,182,} finally {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,183,unregister(object);
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,184, <p>This method uses reflection to build a valid hash code.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,186, <p>This constructor uses two hard coded choices for the constants
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,187, needed to build a hash code.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,189, <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,190, fields. This means that it will throw a security exception if run under
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,191," a security manager, if the permissions are not set up correctly. It is"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,192, also not as efficient as testing explicitly.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,194," <p>Transient members will be not be used, as they are likely derived"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,195," fields, and not part of the value of the <code>Object</code>.</p>"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,197, <p>Static fields will not be tested. Superclass fields will be included.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,199, @param object  the Object to create a <code>hashCode</code> for
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,200, @param excludeFields  array of field names to exclude from use in calculation of hash code
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,188,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,189,* This method uses reflection to build a valid hash code.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,190,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,192,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,193,* It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,194,"* throw a security exception if run under a security manager, if the permissions are not set up correctly. It is"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,195,* also not as efficient as testing explicitly.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,196,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,198,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,199,"* Transient members will be not be used, as they are likely derived fields, and not part of the value of the"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,200,* <code>Object</code>.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,201,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,203,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,204,* Static fields will not be tested. Superclass fields will be included.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,205,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,207,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,208,"* Two randomly chosen, non-zero, odd numbers must be passed in. Ideally these should be different for each class,"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,209,"* however this is not vital. Prime numbers are preferred, especially for the multiplier."
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,210,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,212,* @param initialNonZeroOddNumber
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,213,"*            a non-zero, odd number used as the initial value"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,214,* @param multiplierNonZeroOddNumber
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,215,"*            a non-zero, odd number used as the multiplier"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,216,* @param object
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,217,*            the Object to create a <code>hashCode</code> for
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,202, @throws IllegalArgumentException if the object is <code>null</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,219,* @throws IllegalArgumentException
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,220,*             if the Object is <code>null</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,221,* @throws IllegalArgumentException
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,222,*             if the number is zero or even
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,204,"ublic static int reflectionHashCode(Object object, String[] excludeFields) {"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,205,"eturn reflectionHashCode(17, 37, object, false, null, excludeFields);"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,224,"public static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object) {"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,225,"return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, false, null, null);"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,209, <p>This method uses reflection to build a valid hash code.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,211, <p>This constructor uses two hard coded choices for the constants needed
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,212, to build a hash code.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,214, <p> It uses <code>AccessibleObject.setAccessible</code> to gain access to private
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,215, fields. This means that it will throw a security exception if run under
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,216," a security manager, if the permissions are not set up correctly. It is"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,217, also not as efficient as testing explicitly.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,219," <P>If the TestTransients parameter is set to <code>true</code>, transient"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,220," members will be tested, otherwise they are ignored, as they are likely"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,221," derived fields, and not part of the value of the <code>Object</code>.</p>"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,223, <p>Static fields will not be tested. Superclass fields will be included.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,225, @param object  the Object to create a <code>hashCode</code> for
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,226, @param testTransients  whether to include transient fields
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,229,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,230,* This method uses reflection to build a valid hash code.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,231,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,233,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,234,* It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,235,"* throw a security exception if run under a security manager, if the permissions are not set up correctly. It is"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,236,* also not as efficient as testing explicitly.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,237,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,239,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,240,"* If the TestTransients parameter is set to <code>true</code>, transient members will be tested, otherwise they"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,241,"* are ignored, as they are likely derived fields, and not part of the value of the <code>Object</code>."
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,242,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,244,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,245,* Static fields will not be tested. Superclass fields will be included.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,246,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,248,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,249,"* Two randomly chosen, non-zero, odd numbers must be passed in. Ideally these should be different for each class,"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,250,"* however this is not vital. Prime numbers are preferred, especially for the multiplier."
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,251,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,253,* @param initialNonZeroOddNumber
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,254,"*            a non-zero, odd number used as the initial value"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,255,* @param multiplierNonZeroOddNumber
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,256,"*            a non-zero, odd number used as the multiplier"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,257,* @param object
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,258,*            the Object to create a <code>hashCode</code> for
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,259,* @param testTransients
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,260,*            whether to include transient fields
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,228, @throws IllegalArgumentException if the object is <code>null</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,230,"ublic static int reflectionHashCode(Object object, boolean testTransients) {"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,231,"eturn reflectionHashCode(17, 37, object, testTransients, null, null);"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,262,* @throws IllegalArgumentException
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,263,*             if the Object is <code>null</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,264,* @throws IllegalArgumentException
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,265,*             if the number is zero or even
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,267,"public static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object,"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,268,boolean testTransients) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,269,"return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, testTransients, null,"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,270,null);
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,235, <p>This method uses reflection to build a valid hash code.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,237, <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,238, fields. This means that it will throw a security exception if run under
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,239," a security manager, if the permissions are not set up correctly. It is"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,240, also not as efficient as testing explicitly.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,242," <p>Transient members will be not be used, as they are likely derived"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,243," fields, and not part of the value of the <code>Object</code>.</p>"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,245, <p>Static fields will not be tested. Superclass fields will be included.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,247," <p>Two randomly chosen, non-zero, odd numbers must be passed in. Ideally"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,248," these should be different for each class, however this is not vital."
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,249," Prime numbers are preferred, especially for the multiplier.</p>"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,251," @param initialNonZeroOddNumber  a non-zero, odd number used as the initial value"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,252," @param multiplierNonZeroOddNumber  a non-zero, odd number used as the multiplier"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,253, @param object  the Object to create a <code>hashCode</code> for
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,274,"* Calls {@link #reflectionHashCode(int, int, Object, boolean, Class, String[])} with excludeFields set to"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,275,* <code>null</code>.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,277,* @param initialNonZeroOddNumber
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,278,"*            a non-zero, odd number used as the initial value"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,279,* @param multiplierNonZeroOddNumber
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,280,"*            a non-zero, odd number used as the multiplier"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,281,* @param object
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,282,*            the Object to create a <code>hashCode</code> for
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,283,* @param testTransients
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,284,*            whether to include transient fields
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,285,* @param reflectUpToClass
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,286,"*            the superclass to reflect up to (inclusive), may be <code>null</code>"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,255, @throws IllegalArgumentException if the Object is <code>null</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,256, @throws IllegalArgumentException if the number is zero or even
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,258,ublic static int reflectionHashCode(
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,259,"nt initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object) {"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,260,"eturn reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, false, null, null);"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,289,"public static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object,"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,290,"boolean testTransients, Class reflectUpToClass) {"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,291,"return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, testTransients,"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,292,"reflectUpToClass, null);"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,264, <p>This method uses reflection to build a valid hash code.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,266, <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,267, fields. This means that it will throw a security exception if run under
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,268," a security manager, if the permissions are not set up correctly. It is also"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,269, not as efficient as testing explicitly.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,271," <p>If the TestTransients parameter is set to <code>true</code>, transient"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,272," members will be tested, otherwise they are ignored, as they are likely"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,273," derived fields, and not part of the value of the <code>Object</code>.</p>"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,275, <p>Static fields will not be tested. Superclass fields will be included.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,277," <p>Two randomly chosen, non-zero, odd numbers must be passed in. Ideally"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,278," these should be different for each class, however this is not vital."
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,279," Prime numbers are preferred, especially for the multiplier.</p>"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,281," @param initialNonZeroOddNumber  a non-zero, odd number used as the initial value"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,282," @param multiplierNonZeroOddNumber  a non-zero, odd number used as the multiplier"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,283, @param object  the Object to create a <code>hashCode</code> for
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,284, @param testTransients  whether to include transient fields
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,285, @return int hash code
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,286, @throws IllegalArgumentException if the Object is <code>null</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,287, @throws IllegalArgumentException if the number is zero or even
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,289,ublic static int reflectionHashCode(
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,290,"nt initialNonZeroOddNumber, int multiplierNonZeroOddNumber,"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,291,"bject object, boolean testTransients) {"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,292,"eturn reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber,"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,293,"bject, testTransients, null, null"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,297,"ublic static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber,"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,298,"bject object, boolean testTransients, Class reflectUpToClass)"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,300,"eturn reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object,"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,301,"estTransients, reflectUpToClass, null);"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,305, <p>This method uses reflection to build a valid hash code.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,307, <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,308, fields. This means that it will throw a security exception if run under
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,309," a security manager, if the permissions are not set up correctly. It is also"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,310, not as efficient as testing explicitly.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,312," <p>If the TestTransients parameter is set to <code>true</code>, transient"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,313," members will be tested, otherwise they are ignored, as they are likely"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,314," derived fields, and not part of the value of the <code>Object</code>.</p>"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,316, <p>Static fields will not be included. Superclass fields will be included
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,317, up to and including the specified superclass. A null superclass is treated
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,318, as java.lang.Object.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,320," <p>Two randomly chosen, non-zero, odd numbers must be passed in. Ideally"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,321," these should be different for each class, however this is not vital."
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,322," Prime numbers are preferred, especially for the multiplier.</p>"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,324," @param initialNonZeroOddNumber  a non-zero, odd number used as the initial value"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,325," @param multiplierNonZeroOddNumber  a non-zero, odd number used as the multiplier"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,326, @param object  the Object to create a <code>hashCode</code> for
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,327, @param testTransients  whether to include transient fields
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,328," @param reflectUpToClass  the superclass to reflect up to (inclusive),"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,329,  may be <code>null</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,330, @param excludeFields  array of field names to exclude from use in calculation of hash code
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,296,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,297,* This method uses reflection to build a valid hash code.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,298,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,300,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,301,* It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,302,"* throw a security exception if run under a security manager, if the permissions are not set up correctly. It is"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,303,* also not as efficient as testing explicitly.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,304,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,306,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,307,"* If the TestTransients parameter is set to <code>true</code>, transient members will be tested, otherwise they"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,308,"* are ignored, as they are likely derived fields, and not part of the value of the <code>Object</code>."
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,309,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,311,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,312,* Static fields will not be included. Superclass fields will be included up to and including the specified
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,313,* superclass. A null superclass is treated as java.lang.Object.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,314,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,316,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,317,"* Two randomly chosen, non-zero, odd numbers must be passed in. Ideally these should be different for each class,"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,318,"* however this is not vital. Prime numbers are preferred, especially for the multiplier."
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,319,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,321,* @param initialNonZeroOddNumber
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,322,"*            a non-zero, odd number used as the initial value"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,323,* @param multiplierNonZeroOddNumber
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,324,"*            a non-zero, odd number used as the multiplier"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,325,* @param object
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,326,*            the Object to create a <code>hashCode</code> for
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,327,* @param testTransients
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,328,*            whether to include transient fields
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,329,* @param reflectUpToClass
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,330,"*            the superclass to reflect up to (inclusive), may be <code>null</code>"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,331,* @param excludeFields
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,332,*            array of field names to exclude from use in calculation of hash code
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,332, @throws IllegalArgumentException if the Object is <code>null</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,333, @throws IllegalArgumentException if the number is zero or even
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,334,* @throws IllegalArgumentException
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,335,*             if the Object is <code>null</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,336,* @throws IllegalArgumentException
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,337,*             if the number is zero or even
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,336,ublic static int reflectionHashCode(
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,337,"nt initialNonZeroOddNumber,"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,338,"nt multiplierNonZeroOddNumber,"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,339,"bject object,"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,340,"oolean testTransients,"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,341,"lass reflectUpToClass,"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,342,tring[] excludeFields) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,340,"public static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object,"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,341,"boolean testTransients, Class reflectUpToClass, String[] excludeFields) {"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,358, <p>Appends the fields and values defined by the given object of the
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,359, given <code>Class</code>.</p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,357,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,358,* This method uses reflection to build a valid hash code.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,359,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,361,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,362,* This constructor uses two hard coded choices for the constants needed to build a hash code.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,363,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,365,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,366,* It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,367,"* throw a security exception if run under a security manager, if the permissions are not set up correctly. It is"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,368,* also not as efficient as testing explicitly.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,369,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,371,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,372,"* Transient members will be not be used, as they are likely derived fields, and not part of the value of the"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,373,* <code>Object</code>.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,374,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,376,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,377,* Static fields will not be tested. Superclass fields will be included.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,378,* </p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,361, @param object  the object to append details of
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,362, @param clazz  the class to append details of
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,363, @param builder  the builder to append to
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,364, @param useTransients  whether to use transient fields
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,365, @param excludeFields  Collection of String field names to exclude from use in calculation of hash code
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,380,* @param object
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,381,*            the Object to create a <code>hashCode</code> for
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,382,* @return int hash code
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,383,* @throws IllegalArgumentException
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,384,*             if the object is <code>null</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,367,rivate static void reflectionAppend(
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,368,"bject object,"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,369,"lass clazz,"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,370,"ashCodeBuilder builder,"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,371,"oolean useTransients,"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,372,tring[] excludeFields) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,373,ield[] fields = clazz.getDeclaredFields();
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,374,ist excludedFieldList = excludeFields != null ? Arrays.asList(excludeFields) : Collections.EMPTY_LIST;
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,375,"ccessibleObject.setAccessible(fields, true);"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,376,or (int i = 0; i < fields.length; i++) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,377,ield f = fields[i];
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,378,f (!excludedFieldList.contains(f.getName())
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,379,& (f.getName().indexOf('$') == -1)
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,380,& (useTransients || !Modifier.isTransient(f.getModifiers()))
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,381,& (!Modifier.isStatic(f.getModifiers()))) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,382,ry {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,383,uilder.append(f.get(object));
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,384, catch (IllegalAccessException e) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,385,/this can't happen. Would get a Security exception instead
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,386,/throw a runtime exception in case the impossible happens.
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,387,"hrow new InternalError(""Unexpected IllegalAccessException"");"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,386,public static int reflectionHashCode(Object object) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,387,"return reflectionHashCode(17, 37, object, false, null, null);"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,396, <p>Adds the result of super.hashCode() to this builder.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,398, @param superHashCode  the result of calling <code>super.hashCode()</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,399," @return this HashCodeBuilder, used to chain calls."
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,400, @since 2.0
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,391,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,392,* This method uses reflection to build a valid hash code.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,393,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,395,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,396,* This constructor uses two hard coded choices for the constants needed to build a hash code.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,397,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,399,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,400,* It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,401,"* throw a security exception if run under a security manager, if the permissions are not set up correctly. It is"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,402,* also not as efficient as testing explicitly.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,403,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,405,* <P>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,406,"* If the TestTransients parameter is set to <code>true</code>, transient members will be tested, otherwise they"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,407,"* are ignored, as they are likely derived fields, and not part of the value of the <code>Object</code>."
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,408,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,410,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,411,* Static fields will not be tested. Superclass fields will be included.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,412,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,414,* @param object
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,415,*            the Object to create a <code>hashCode</code> for
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,416,* @param testTransients
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,417,*            whether to include transient fields
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,418,* @return int hash code
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,419,* @throws IllegalArgumentException
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,420,*             if the object is <code>null</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,402,ublic HashCodeBuilder appendSuper(int superHashCode) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,403,Total = iTotal * iConstant + superHashCode;
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,404,eturn this;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,422,"public static int reflectionHashCode(Object object, boolean testTransients) {"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,423,"return reflectionHashCode(17, 37, object, testTransients, null, null);"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,410, <p>Append a <code>hashCode</code> for an <code>Object</code>.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,412, @param object  the Object to add to the <code>hashCode</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,413, @return this
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,427,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,428,* This method uses reflection to build a valid hash code.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,429,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,431,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,432,* This constructor uses two hard coded choices for the constants needed to build a hash code.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,433,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,435,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,436,* It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,437,"* throw a security exception if run under a security manager, if the permissions are not set up correctly. It is"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,438,* also not as efficient as testing explicitly.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,439,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,441,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,442,"* Transient members will be not be used, as they are likely derived fields, and not part of the value of the"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,443,* <code>Object</code>.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,444,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,446,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,447,* Static fields will not be tested. Superclass fields will be included.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,448,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,450,* @param object
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,451,*            the Object to create a <code>hashCode</code> for
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,452,* @param excludeFields
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,453,*            Collection of String field names to exclude from use in calculation of hash code
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,454,* @return int hash code
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,455,* @throws IllegalArgumentException
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,456,*             if the object is <code>null</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,415,ublic HashCodeBuilder append(Object object) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,416,f (object == null) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,417,Total = iTotal * iConstant;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,458,"public static int reflectionHashCode(Object object, Collection /* String */excludeFields) {"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,459,"return reflectionHashCode(object, ReflectionToStringBuilder.toNoNullStringArray(excludeFields));"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,419, else {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,420,f (object.getClass().isArray() == false) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,421,"/the simple case, not an array, just the element"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,422,Total = iTotal * iConstant + object.hashCode();
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,424, else {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,425,"/'Switch' on type of array, to dispatch to the correct handler"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,426,/ This handles multi dimensional arrays
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,427,f (object instanceof long[]) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,428,ppend((long[]) object);
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,429, else if (object instanceof int[]) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,430,ppend((int[]) object);
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,431, else if (object instanceof short[]) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,432,ppend((short[]) object);
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,433, else if (object instanceof char[]) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,434,ppend((char[]) object);
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,435, else if (object instanceof byte[]) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,436,ppend((byte[]) object);
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,437, else if (object instanceof double[]) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,438,ppend((double[]) object);
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,439, else if (object instanceof float[]) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,440,ppend((float[]) object);
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,441, else if (object instanceof boolean[]) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,442,ppend((boolean[]) object);
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,443, else {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,444,/ Not an array of primitives
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,445,ppend((Object[]) object);
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,449,eturn this;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,465,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,466,* This method uses reflection to build a valid hash code.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,467,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,469,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,470,* This constructor uses two hard coded choices for the constants needed to build a hash code.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,471,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,473,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,474,* It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,475,"* throw a security exception if run under a security manager, if the permissions are not set up correctly. It is"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,476,* also not as efficient as testing explicitly.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,477,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,479,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,480,"* Transient members will be not be used, as they are likely derived fields, and not part of the value of the"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,481,* <code>Object</code>.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,482,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,484,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,485,* Static fields will not be tested. Superclass fields will be included.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,486,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,488,* @param object
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,489,*            the Object to create a <code>hashCode</code> for
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,490,* @param excludeFields
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,491,*            array of field names to exclude from use in calculation of hash code
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,492,* @return int hash code
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,493,* @throws IllegalArgumentException
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,494,*             if the object is <code>null</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,496,"public static int reflectionHashCode(Object object, String[] excludeFields) {"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,497,"return reflectionHashCode(17, 37, object, false, null, excludeFields);"
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,453, <p>Append a <code>hashCode</code> for a <code>long</code>.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,455, @param value  the long to add to the <code>hashCode</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,456, @return this
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,501,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,502,* Registers the given object. Used by the reflection methods to avoid infinite loops.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,503,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,505,* @param value
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,506,*            The object to register.
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,458,ublic HashCodeBuilder append(long value) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,459,Total = iTotal * iConstant + ((int) (value ^ (value >> 32)));
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,460,eturn this;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,508,static void register(Object value) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,509,getRegistry().add(toIdentityHashCodeInteger(value));
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,464, <p>Append a <code>hashCode</code> for an <code>int</code>.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,466, @param value  the int to add to the <code>hashCode</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,467, @return this
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,513,* Returns an Integer for the given object's default hash code.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,515,* @see System#identityHashCode(Object)
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,516,* @param value
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,517,*            object for which the hashCode is to be calculated
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,518,* @return Default int hash code
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,469,ublic HashCodeBuilder append(int value) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,470,Total = iTotal * iConstant + value;
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,471,eturn this;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,520,private static Integer toIdentityHashCodeInteger(Object value) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,521,return new Integer(System.identityHashCode(value));
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,475, <p>Append a <code>hashCode</code> for a <code>short</code>.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,477, @param value  the short to add to the <code>hashCode</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,478, @return this
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,525,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,526,* Unregisters the given object.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,527,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,529,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,530,* Used by the reflection methods to avoid infinite loops.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,532,* @param value
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,533,*            The object to unregister.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,534,* @since 2.3
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,480,ublic HashCodeBuilder append(short value) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,481,Total = iTotal * iConstant + value;
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,482,eturn this;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,536,static void unregister(Object value) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,537,getRegistry().remove(toIdentityHashCodeInteger(value));
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,486, <p>Append a <code>hashCode</code> for a <code>char</code>.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,488, @param value  the char to add to the <code>hashCode</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,489, @return this
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,541,* Constant to use in building the hashCode.
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,491,ublic HashCodeBuilder append(char value) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,492,Total = iTotal * iConstant + value;
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,493,eturn this;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,543,private final int iConstant;
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,497, <p>Append a <code>hashCode</code> for a <code>byte</code>.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,499, @param value  the byte to add to the <code>hashCode</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,500, @return this
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,546,* Running total of the hashCode.
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,502,ublic HashCodeBuilder append(byte value) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,503,Total = iTotal * iConstant + value;
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,504,eturn this;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,548,private int iTotal = 0;
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,508, <p>Append a <code>hashCode</code> for a <code>double</code>.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,510, @param value  the double to add to the <code>hashCode</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,511, @return this
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,551,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,552,* Uses two hard coded choices for the constants needed to build a <code>hashCode</code>.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,553,* </p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,513,ublic HashCodeBuilder append(double value) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,514,eturn append(Double.doubleToLongBits(value));
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,555,public HashCodeBuilder() {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,556,iConstant = 37;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,557,iTotal = 17;
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,518, <p>Append a <code>hashCode</code> for a <code>float</code>.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,520, @param value  the float to add to the <code>hashCode</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,521, @return this
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,561,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,562,"* Two randomly chosen, non-zero, odd numbers must be passed in. Ideally these should be different for each class,"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,563,* however this is not vital.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,564,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,566,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,567,"* Prime numbers are preferred, especially for the multiplier."
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,568,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,570,* @param initialNonZeroOddNumber
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,571,"*            a non-zero, odd number used as the initial value"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,572,* @param multiplierNonZeroOddNumber
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,573,"*            a non-zero, odd number used as the multiplier"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,574,* @throws IllegalArgumentException
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,575,*             if the number is zero or even
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,523,ublic HashCodeBuilder append(float value) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,524,Total = iTotal * iConstant + Float.floatToIntBits(value);
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,525,eturn this;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,577,"public HashCodeBuilder(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber) {"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,578,if (initialNonZeroOddNumber == 0) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,579,"throw new IllegalArgumentException(""HashCodeBuilder requires a non zero initial value"");"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,581,if (initialNonZeroOddNumber % 2 == 0) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,582,"throw new IllegalArgumentException(""HashCodeBuilder requires an odd initial value"");"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,584,if (multiplierNonZeroOddNumber == 0) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,585,"throw new IllegalArgumentException(""HashCodeBuilder requires a non zero multiplier"");"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,587,if (multiplierNonZeroOddNumber % 2 == 0) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,588,"throw new IllegalArgumentException(""HashCodeBuilder requires an odd multiplier"");"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,590,iConstant = multiplierNonZeroOddNumber;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,591,iTotal = initialNonZeroOddNumber;
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,529, <p>Append a <code>hashCode</code> for a <code>boolean</code>.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,530, <p>This adds <code>iConstant * 1</code> to the <code>hashCode</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,531, and not a <code>1231</code> or <code>1237</code> as done in java.lang.Boolean.
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,532, This is in accordance with the <quote>Effective Java</quote> design. </p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,534, @param value  the boolean to add to the <code>hashCode</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,595,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,596,* Append a <code>hashCode</code> for a <code>boolean</code>.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,597,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,598,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,599,* This adds <code>iConstant * 1</code> to the <code>hashCode</code> and not a <code>1231</code> or
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,600,* <code>1237</code> as done in java.lang.Boolean. This is in accordance with the <quote>Effective Java</quote>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,601,* design.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,602,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,604,* @param value
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,605,*            the boolean to add to the <code>hashCode</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,543, <p>Append a <code>hashCode</code> for an <code>Object</code> array.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,545, @param array  the array to add to the <code>hashCode</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,614,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,615,* Append a <code>hashCode</code> for a <code>boolean</code> array.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,616,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,618,* @param array
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,619,*            the array to add to the <code>hashCode</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,548,ublic HashCodeBuilder append(Object[] array) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,622,public HashCodeBuilder append(boolean[] array) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,560, <p>Append a <code>hashCode</code> for a <code>long</code> array.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,562, @param array  the array to add to the <code>hashCode</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,636,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,637,* Append a <code>hashCode</code> for a <code>byte</code>.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,638,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,640,* @param value
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,641,*            the byte to add to the <code>hashCode</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,565,ublic HashCodeBuilder append(long[] array) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,644,public HashCodeBuilder append(byte value) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,645,iTotal = iTotal * iConstant + value;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,646,return this;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,652,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,653,* Append a <code>hashCode</code> for a <code>byte</code> array.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,654,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,656,* @param array
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,657,*            the array to add to the <code>hashCode</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,658,* @return this
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,660,public HashCodeBuilder append(byte[] array) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,577, <p>Append a <code>hashCode</code> for an <code>int</code> array.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,579, @param array  the array to add to the <code>hashCode</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,672,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,673,* Append a <code>hashCode</code> for a <code>char</code>.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,674,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,676,* @param value
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,677,*            the char to add to the <code>hashCode</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,582,ublic HashCodeBuilder append(int[] array) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,680,public HashCodeBuilder append(char value) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,681,iTotal = iTotal * iConstant + value;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,682,return this;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,686,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,687,* Append a <code>hashCode</code> for a <code>char</code> array.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,688,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,690,* @param array
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,691,*            the array to add to the <code>hashCode</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,692,* @return this
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,694,public HashCodeBuilder append(char[] array) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,594, <p>Append a <code>hashCode</code> for a <code>short</code> array.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,596, @param array  the array to add to the <code>hashCode</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,706,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,707,* Append a <code>hashCode</code> for a <code>double</code>.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,708,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,710,* @param value
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,711,*            the double to add to the <code>hashCode</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,599,ublic HashCodeBuilder append(short[] array) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,714,public HashCodeBuilder append(double value) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,715,return append(Double.doubleToLongBits(value));
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,719,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,720,* Append a <code>hashCode</code> for a <code>double</code> array.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,721,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,723,* @param array
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,724,*            the array to add to the <code>hashCode</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,725,* @return this
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,727,public HashCodeBuilder append(double[] array) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,611, <p>Append a <code>hashCode</code> for a <code>char</code> array.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,613, @param array  the array to add to the <code>hashCode</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,739,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,740,* Append a <code>hashCode</code> for a <code>float</code>.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,741,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,743,* @param value
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,744,*            the float to add to the <code>hashCode</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,616,ublic HashCodeBuilder append(char[] array) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,747,public HashCodeBuilder append(float value) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,748,iTotal = iTotal * iConstant + Float.floatToIntBits(value);
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,749,return this;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,753,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,754,* Append a <code>hashCode</code> for a <code>float</code> array.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,755,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,757,* @param array
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,758,*            the array to add to the <code>hashCode</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,759,* @return this
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,761,public HashCodeBuilder append(float[] array) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,628, <p>Append a <code>hashCode</code> for a <code>byte</code> array.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,630, @param array  the array to add to the <code>hashCode</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,773,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,774,* Append a <code>hashCode</code> for an <code>int</code>.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,775,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,777,* @param value
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,778,*            the int to add to the <code>hashCode</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,633,ublic HashCodeBuilder append(byte[] array) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,781,public HashCodeBuilder append(int value) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,782,iTotal = iTotal * iConstant + value;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,783,return this;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,787,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,788,* Append a <code>hashCode</code> for an <code>int</code> array.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,789,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,791,* @param array
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,792,*            the array to add to the <code>hashCode</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,793,* @return this
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,795,public HashCodeBuilder append(int[] array) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,645, <p>Append a <code>hashCode</code> for a <code>double</code> array.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,647, @param array  the array to add to the <code>hashCode</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,807,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,808,* Append a <code>hashCode</code> for a <code>long</code>.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,809,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,811,* @param value
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,812,*            the long to add to the <code>hashCode</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,650,ublic HashCodeBuilder append(double[] array) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,815,public HashCodeBuilder append(long value) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,816,iTotal = iTotal * iConstant + ((int) (value ^ (value >> 32)));
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,817,return this;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,821,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,822,* Append a <code>hashCode</code> for a <code>long</code> array.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,823,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,825,* @param array
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,826,*            the array to add to the <code>hashCode</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,827,* @return this
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,829,public HashCodeBuilder append(long[] array) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,662, <p>Append a <code>hashCode</code> for a <code>float</code> array.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,664, @param array  the array to add to the <code>hashCode</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,841,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,842,* Append a <code>hashCode</code> for an <code>Object</code>.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,843,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,845,* @param object
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,846,*            the Object to add to the <code>hashCode</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,667,ublic HashCodeBuilder append(float[] array) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,849,public HashCodeBuilder append(Object object) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,850,if (object == null) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,851,iTotal = iTotal * iConstant;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,853,} else {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,854,if (object.getClass().isArray() == false) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,855,"// the simple case, not an array, just the element"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,856,iTotal = iTotal * iConstant + object.hashCode();
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,858,} else {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,859,"// 'Switch' on type of array, to dispatch to the correct handler"
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,860,// This handles multi dimensional arrays
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,861,if (object instanceof long[]) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,862,append((long[]) object);
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,863,} else if (object instanceof int[]) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,864,append((int[]) object);
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,865,} else if (object instanceof short[]) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,866,append((short[]) object);
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,867,} else if (object instanceof char[]) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,868,append((char[]) object);
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,869,} else if (object instanceof byte[]) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,870,append((byte[]) object);
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,871,} else if (object instanceof double[]) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,872,append((double[]) object);
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,873,} else if (object instanceof float[]) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,874,append((float[]) object);
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,875,} else if (object instanceof boolean[]) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,876,append((boolean[]) object);
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,877,} else {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,878,// Not an array of primitives
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,879,append((Object[]) object);
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,883,return this;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,887,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,888,* Append a <code>hashCode</code> for an <code>Object</code> array.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,889,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,891,* @param array
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,892,*            the array to add to the <code>hashCode</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,893,* @return this
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,895,public HashCodeBuilder append(Object[] array) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,679, <p>Append a <code>hashCode</code> for a <code>boolean</code> array.</p>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,681, @param array  the array to add to the <code>hashCode</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,907,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,908,* Append a <code>hashCode</code> for a <code>short</code>.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,909,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,911,* @param value
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,912,*            the short to add to the <code>hashCode</code>
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,684,ublic HashCodeBuilder append(boolean[] array) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,915,public HashCodeBuilder append(short value) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,916,iTotal = iTotal * iConstant + value;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,917,return this;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,921,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,922,* Append a <code>hashCode</code> for a <code>short</code> array.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,923,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,925,* @param array
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,926,*            the array to add to the <code>hashCode</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,927,* @return this
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,929,public HashCodeBuilder append(short[] array) {
False,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,696, <p>Return the computed <code>hashCode</code>.</p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,941,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,942,* Adds the result of super.hashCode() to this builder.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,943,* </p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,945,* @param superHashCode
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,946,*            the result of calling <code>super.hashCode()</code>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,947,"* @return this HashCodeBuilder, used to chain calls."
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,948,* @since 2.0
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,950,public HashCodeBuilder appendSuper(int superHashCode) {
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,951,iTotal = iTotal * iConstant + superHashCode;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,952,return this;
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,956,* <p>
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,957,* Return the computed <code>hashCode</code>.
True,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,src/java/org/apache/commons/lang/builder/HashCodeBuilder.java,958,* </p>
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,157,"ssertEquals((17 * 37 + 7890) * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestSubObject(123456, 7890, 0)));"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,158,"ssertEquals(((17 * 37 + 7890) * 37 + 0) * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestSubObject(123456, 7890, 0), true));"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,164,"assertEquals((17 * 37 + 7890) * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestSubObject(123456, 7890,"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,165,0)));
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,166,"assertEquals(((17 * 37 + 7890) * 37 + 0) * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestSubObject("
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,167,"123456, 7890, 0), true));"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,209,"ew HashCodeBuilder(19, 41).append(obj).toHashCode()"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,210,.toHashCode());
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,218,"new HashCodeBuilder(19, 41).append(obj).toHashCode()).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,222,"ssertEquals(17 * 37 + (int) (123456789L ^ (123456789L >> 32)), new HashCodeBuilder(17, 37).append((long) 123456789L).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,230,"assertEquals(17 * 37 + (int) (123456789L ^ (123456789L >> 32)), new HashCodeBuilder(17, 37).append("
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,231,(long) 123456789L).toHashCode());
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,267,"ssertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,276,"assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,271,"ssertEquals( (17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,280,"assertEquals((17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append(obj)"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,281,.toHashCode());
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,276,"ssertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,286,"assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,280,"ssertEquals( (17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,290,"assertEquals((17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append("
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,291,(Object) obj).toHashCode());
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,286,"ssertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,297,"assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,292,"ssertEquals( (17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,303,"assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,297,"ssertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,308,"assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,303,"ssertEquals( (17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,314,"assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,309,"ssertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,320,"assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,313,"ssertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,324,"assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,318,"ssertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,329,"assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,322,"ssertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,333,"assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,328,"ssertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,339,"assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,332,"ssertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,343,"assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,337,"ssertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,348,"assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,341,"ssertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,352,"assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,347,"ssertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,358,"assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,351,"ssertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,362,"assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,356,"ssertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,367,"assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,360,"ssertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,371,"assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,366,"ssertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,377,"assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,370,"ssertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,381,"assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,375,"ssertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,386,"assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,379,"ssertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,390,"assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,385,"ssertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,396,"assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,393,"ssertEquals( (17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,404,"assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,398,"ssertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,409,"assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,406,"ssertEquals( (17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,417,"assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,412,"ssertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,423,"assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,418,"ssertEquals( (17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,429,"assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,423,"ssertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,434,"assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,429,"ssertEquals( (17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,440,"assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,435,"ssertEquals((17 * 37 + 1) * 37 + 1 , new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,446,"assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,439,"ssertEquals( (17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,450,"assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,444,"ssertEquals((17 * 37 + 1) * 37 + 1 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,455,"assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,448,"ssertEquals( (17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,459,"assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,463,"ssertEquals( (((17 * 37 + 0) * 37 + 1) * 37 + 1), new HashCodeBuilder(17, 37).append(obj).toHashCode());"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,474,"assertEquals((((17 * 37 + 0) * 37 + 1) * 37 + 1), new HashCodeBuilder(17, 37).append(obj).toHashCode());"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,472,"ssertEquals((((17 * 37 + 1) * 37 + 2) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, new String[] {}));"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,473,"ssertEquals((((17 * 37 + 1) * 37 + 2) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, new String[] {""xxx""}));"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,483,"assertEquals((((17 * 37 + 1) * 37 + 2) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, new String[]{}));"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,484,"assertEquals((((17 * 37 + 1) * 37 + 2) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, new String[]{""xxx""}));"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,475,"ssertEquals(((17 * 37 + 1) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, new String[] {""two""}));"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,476,"ssertEquals(((17 * 37 + 1) * 37 + 2), HashCodeBuilder.reflectionHashCode(x, new String[] {""three""}));"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,486,"assertEquals(((17 * 37 + 1) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, new String[]{""two""}));"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,487,"assertEquals(((17 * 37 + 1) * 37 + 2), HashCodeBuilder.reflectionHashCode(x, new String[]{""three""}));"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,478,"ssertEquals((17 * 37 + 1), HashCodeBuilder.reflectionHashCode(x, new String[] {""two"", ""three""}));"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,489,"assertEquals((17 * 37 + 1), HashCodeBuilder.reflectionHashCode(x, new String[]{""two"", ""three""}));"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,480,"ssertEquals(17, HashCodeBuilder.reflectionHashCode(x, new String[] {""one"", ""two"", ""three""}));"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,481,"ssertEquals(17, HashCodeBuilder.reflectionHashCode(x, new String[] {""one"", ""two"", ""three"", ""xxx""}));"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,491,"assertEquals(17, HashCodeBuilder.reflectionHashCode(x, new String[]{""one"", ""two"", ""three""}));"
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,492,"assertEquals(17, HashCodeBuilder.reflectionHashCode(x, new String[]{""one"", ""two"", ""three"", ""xxx""}));"
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,521,/ a.hashCode();
False,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,522,/ b.hashCode();
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,534,a.hashCode();
True,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java,535,b.hashCode();

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,4, Copyright (c) 2002-2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,4,* Copyright (c) 2003-2004 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,65, This class can split a String into many smaller strings. It aims to do a
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,66," similar job to java util StringTokenizer, however it offers much more"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,67, control and flexibility.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,65,* This class can split a String into many smaller strings.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,66,"* It aims to do a similar job to java util StringTokenizer, however it offers"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,67,"* much more control and flexibility. By default, it is setup like StringTokenizer."
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,76,* This example is based on the CSV tokenizer.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,77," ""a,b,c""       - Three tokens ""a"",""b"",""c"" (comma delimiter)"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,78," ""a, b , c""    - Three tokens ""a"",""b"",""c"" (ignored space characters stripped)"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,78,"* ""a,b,c""       - Three tokens ""a"",""b"",""c""   (comma delimiter)"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,79,"* ""a, b , c""    - Three tokens ""a"",""b"",""c""   (ignored space characters stripped)"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,82," By default, this tokenizer has the following properties:"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,83, <pre>
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,84, Property                     Default
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,86," delimiter                    ,  (comma)"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,87," quote                        ""  (double quote)"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,88, ignored                      char &lt;= 32 (as per trim)
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,89, emptyTokenAsNull             false
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,90, ignoreEmptyTokens            false
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,91, </pre>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,84,* This tokenizer has the following properties and options:
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,86,* <table>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,87,*  <tr>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,88,*   <th>Property</th><th>Type</th><th>Default</th>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,89,*  </tr>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,90,*  <tr>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,91,*   <td>delim</td><td>CharSetMatcher</td><td>{ \t\n\r\f}</td>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,92,*  </tr>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,93,*  <tr>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,94,*   <td>quote</td><td>NoneMatcher</td><td>{}</td>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,95,*  </tr>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,96,*  <tr>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,97,*   <td>ignore</td><td>NoneMatcher</td><td>{}</td>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,98,*  </tr>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,99,*  <tr>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,100,*   <td>emptyTokenAsNull</td><td>boolean</td><td>false</td>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,101,*  </tr>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,102,*  <tr>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,103,*   <td>ignoreEmptyTokens</td><td>boolean</td><td>true</td>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,104,*  </tr>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,105,* </table>
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,97," @version $Id: Tokenizer.java,v 1.3 2004/02/13 01:58:50 ggregory Exp $"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,111,"* @version $Id: Tokenizer.java,v 1.4 2004/02/14 00:31:55 scolebourne Exp $"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,99,ublic class Tokenizer implements ListIterator {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,100,/ TODO: Constructors
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,101,/ TODO: Tests
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,102,/ TODO: Static factories CSV/StringTokenizer
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,113,"public class Tokenizer implements ListIterator, Cloneable {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,121,* A Matcher which matches the tab character.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,122,* Best used for <code>delimiter</code>.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,124,public static final Matcher TAB_MATCHER = new CharMatcher('\t');
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,126,* A Matcher which matches the space character.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,127,* Best used for <code>delimiter</code>.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,129,public static final Matcher SPACE_MATCHER = new CharMatcher(' ');
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,131,"* A Matcher which matches the same characters as StringTokenizer,"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,132,"* namely space, tab, newline, formfeed."
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,133,* Best used for <code>delimiter</code>.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,135,"public static final Matcher SPLIT_MATCHER = new CharSetMatcher("" \t\n\r\f"");"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,118,ublic static final Matcher SPACES_MATCHER = new TrimMatcher();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,145,public static final Matcher TRIM_MATCHER = new TrimMatcher();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,152,private static final Tokenizer CSV_TOKENIZER_PROTOTYPE;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,153,private static final Tokenizer TSV_TOKENIZER_PROTOTYPE;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,155,static {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,156,CSV_TOKENIZER_PROTOTYPE = new Tokenizer(StringUtils.EMPTY);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,157,CSV_TOKENIZER_PROTOTYPE.setDelimiterMatcher(COMMA_MATCHER);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,158,CSV_TOKENIZER_PROTOTYPE.setQuoteMatcher(DOUBLE_QUOTE_MATCHER);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,159,CSV_TOKENIZER_PROTOTYPE.setIgnoredMatcher(TRIM_MATCHER);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,160,CSV_TOKENIZER_PROTOTYPE.setEmptyTokenAsNull(false);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,161,CSV_TOKENIZER_PROTOTYPE.setIgnoreEmptyTokens(false);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,163,TSV_TOKENIZER_PROTOTYPE = new Tokenizer(StringUtils.EMPTY);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,164,TSV_TOKENIZER_PROTOTYPE.setDelimiterMatcher(TAB_MATCHER);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,165,TSV_TOKENIZER_PROTOTYPE.setQuoteMatcher(DOUBLE_QUOTE_MATCHER);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,166,TSV_TOKENIZER_PROTOTYPE.setIgnoredMatcher(TRIM_MATCHER);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,167,TSV_TOKENIZER_PROTOTYPE.setEmptyTokenAsNull(false);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,168,TSV_TOKENIZER_PROTOTYPE.setIgnoreEmptyTokens(false);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,173,"/** The input text, null if char[] input */"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,174,private String text;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,133,rivate Matcher delim = COMMA_MATCHER;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,181,private Matcher delim = SPLIT_MATCHER;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,135,rivate Matcher quote = DOUBLE_QUOTE_MATCHER;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,183,private Matcher quote = NONE_MATCHER;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,137,rivate Matcher ignored = SPACES_MATCHER;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,185,private Matcher ignored = NONE_MATCHER;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,141,rivate boolean ignoreEmptyTokens = false;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,189,private boolean ignoreEmptyTokens = true;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,145, Constructor.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,193,* Get a tokenizer instance which parses Comma Seperated Value
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,194,"* strings.  You must call a ""reset"" method to set the string which"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,195,* you want to parse.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,197,public static final Tokenizer getCSVInstance() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,198,return (Tokenizer)(CSV_TOKENIZER_PROTOTYPE.clone());
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,202,* Get a tokenizer instance which parses Comma Seperated Value
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,203,"* strings, initializing it with the given input."
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,205,* @param input  the string to parse
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,207,public static final Tokenizer getCSVInstance(String input) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,208,Tokenizer tok = (Tokenizer)(CSV_TOKENIZER_PROTOTYPE.clone());
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,209,tok.reset(input);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,210,return tok;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,214,* Get a tokenizer instance which parses Comma Seperated Value
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,215,"* strings, initializing it with the given input."
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,217,* @param input  the text to parse
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,219,public static final Tokenizer getCSVInstance(char[] input) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,220,Tokenizer tok = (Tokenizer)(CSV_TOKENIZER_PROTOTYPE.clone());
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,221,tok.reset(input);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,222,return tok;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,226,* Get a tokenizer instance which parses Tab Seperated Value
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,227,"* strings.  You must call a ""reset"" method to set the string which"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,228,* you want to parse.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,230,public static final Tokenizer getTSVInstance() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,231,return (Tokenizer)(TSV_TOKENIZER_PROTOTYPE.clone());
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,235,* Get a tokenizer instance which parses Tab Seperated Value
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,236,"* strings, initializing it with the given input."
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,238,* @param input  the string to parse
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,240,public static final Tokenizer getTSVInstance(String input) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,241,Tokenizer tok = (Tokenizer)(TSV_TOKENIZER_PROTOTYPE.clone());
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,242,tok.reset(input);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,243,return tok;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,247,* Get a tokenizer instance which parses Tab Seperated Value
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,248,"* strings, initializing it with the given input."
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,250,* @param input  the text to parse
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,252,public static final Tokenizer getTSVInstance(char[] input) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,253,Tokenizer tok = (Tokenizer)(TSV_TOKENIZER_PROTOTYPE.clone());
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,254,tok.reset(input);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,255,return tok;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,260,"* Constructs a tokenizer splitting on space, tab, newline and formfeed"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,261,* as per StringTokenizer.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,150,his(input.toCharArray());
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,266,super();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,267,this.text = input;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,268,this.chars = input.toCharArray();  // no clone as toCharArray() clones
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,154, Constructor.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,272,"* Constructs a tokenizer splitting on space, tab, newline and formfeed"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,273,* as per StringTokenizer.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,160,"his(input.toCharArray(), delim);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,279,this(input);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,280,setDelimiterChar(delim);
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,164, Constructor.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,284,"* Constructs a tokenizer splitting on space, tab, newline and formfeed"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,285,* as per StringTokenizer.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,170,"his(input.toCharArray(), delim);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,291,this(input);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,292,setDelimiterMatcher(delim);
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,174, Constructor.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,296,"* Constructs a tokenizer splitting on space, tab, newline and formfeed"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,297,* as per StringTokenizer.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,181,"his(input.toCharArray(), delim, quote);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,304,"this(input, delim);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,305,setQuoteChar(quote);
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,185, Constructor.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,309,"* Constructs a tokenizer splitting on space, tab, newline and formfeed"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,310,* as per StringTokenizer.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,192,"his(input.toCharArray(), delim, quote);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,317,"this(input, delim);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,318,setQuoteMatcher(quote);
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,196, Constructor.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,322,"* Constructs a tokenizer splitting on space, tab, newline and formfeed"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,323,* as per StringTokenizer.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,198, @param input  the string which is to be parsed
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,325,"* @param input  the string which is to be parsed, cloned"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,329,this.text = null;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,203,his.tokenPos = 0;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,207, Constructor.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,334,"* Constructs a tokenizer splitting on space, tab, newline and formfeed"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,335,* as per StringTokenizer.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,209, @param input  the string which is to be parsed
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,337,"* @param input  the string which is to be parsed, cloned"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,218, Constructor.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,346,"* Constructs a tokenizer splitting on space, tab, newline and formfeed"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,347,* as per StringTokenizer.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,220, @param input  the string which is to be parsed
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,349,"* @param input  the string which is to be parsed, cloned"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,229, Constructor.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,358,"* Constructs a tokenizer splitting on space, tab, newline and formfeed"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,359,* as per StringTokenizer.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,231, @param input  the string which is to be parsed
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,361,"* @param input  the string which is to be parsed, cloned"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,241, Constructor.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,371,"* Constructs a tokenizer splitting on space, tab, newline and formfeed"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,372,* as per StringTokenizer.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,243, @param input  the string which is to be parsed
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,374,"* @param input  the string which is to be parsed, cloned"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,442,"* Reset this tokenizer, giving it a new input string to parse."
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,443,* In this manner you can re-use a tokenizer with the same settings
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,444,* on multiple input lines.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,446,* @param input  the new string to tokenize
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,448,public void reset(String input) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,449,reset();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,450,this.text = input;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,451,chars = input.toCharArray();  // no clone as toCharArray() clones
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,455,"* Reset this tokenizer, giving it a new input string to parse."
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,456,* In this manner you can re-use a tokenizer with the same settings
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,457,* on multiple input lines.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,459,"* @param input  the new character array to tokenize, cloned"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,461,public void reset(char [] input) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,462,reset();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,463,this.text = null;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,464,chars = (char[]) input.clone();
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,476,"/ skip all leading whitespace, unless it is the"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,633,"// Skip all leading whitespace, unless it is the"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,478,hile (start < len &&
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,479,gnored.isMatch(chars[start]) &&
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,480,delim.isMatch(chars[start]) &&
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,481,quote.isMatch(chars[start])) {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,482,tart++;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,635,int current = start;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,636,while (current < len &&
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,637,ignored.isMatch(chars[current]) &&
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,638,!delim.isMatch(chars[current]) &&
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,639,!quote.isMatch(chars[current])) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,640,current++;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,643,start = current;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,928,* Gets the String content that the tokenizer is parsing.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,930,* @return the string content being parsed
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,932,public String getContent() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,933,if (text == null) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,934,text = new String(chars);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,936,return text;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,941,* Create a new instance of this Tokenizer.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,942,* The new instance is reset so that it will be at the start of the token list.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,944,public Object clone() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,945,try {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,946,Tokenizer cloned = (Tokenizer) super.clone();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,947,// chars[] does not need additional clone as it is treated as immutable
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,948,cloned.reset();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,949,return cloned;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,951,} catch (CloneNotSupportedException ex) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,952,return null;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,804,his(chars.toCharArray());
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,994,super();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,995,this.chars = chars.toCharArray();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,996,Arrays.sort(this.chars);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,4, Copyright (c) 2002-2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,4,* Copyright (c) 2003-2004 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,93,"tok.setQuoteChar('""');"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,94,tok.setIgnoredMatcher(Tokenizer.TRIM_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,95,tok.setIgnoreEmptyTokens(false);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,126,"tok.setQuoteChar('""');"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,128,tok.setIgnoreEmptyTokens(false);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,159,"tok.setQuoteChar('""');"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,161,tok.setIgnoreEmptyTokens(false);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,192,"tok.setQuoteChar('""');"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,193,tok.setIgnoredMatcher(Tokenizer.TRIM_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,222,"tok.setQuoteChar('""');"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,223,tok.setIgnoredMatcher(Tokenizer.TRIM_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,224,tok.setIgnoreEmptyTokens(false);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,256,"tok.setQuoteChar('""');"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,257,tok.setIgnoredMatcher(Tokenizer.TRIM_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,258,tok.setIgnoreEmptyTokens(false);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,288,ok.setDelimiterMatcher(Tokenizer.SPACES_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,303,tok.setDelimiterMatcher(Tokenizer.SPACE_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,304,tok.setQuoteMatcher(Tokenizer.DOUBLE_QUOTE_MATCHER);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,320,ok.setDelimiterMatcher(Tokenizer.SPACES_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,336,tok.setDelimiterMatcher(Tokenizer.SPACE_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,337,tok.setQuoteMatcher(Tokenizer.DOUBLE_QUOTE_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,361,public void testBasic1() {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,362,"String input = ""a  b c"";"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,363,Tokenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,364,"assertEquals(""a"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,365,"assertEquals(""b"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,366,"assertEquals(""c"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,369,public void testBasic2() {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,370,"String input = ""a \nb\fc"";"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,371,Tokenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,372,"assertEquals(""a"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,373,"assertEquals(""b"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,374,"assertEquals(""c"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,377,public void testBasic3() {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,378,"String input = ""a \nb\u0001\fc"";"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,379,Tokenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,380,"assertEquals(""a"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,381,"assertEquals(""b\u0001"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,382,"assertEquals(""c"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,385,public void testBasic4() {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,386,"String input = ""a \""b\"" c"";"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,387,Tokenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,388,"assertEquals(""a"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,389,"assertEquals(""\""b\"""", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,390,"assertEquals(""c"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,393,public void testBasicQuoted1() {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,394,"String input = ""a \""b\"" c"";"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,395,"Tokenizer tok = new Tokenizer(input, ' ', '""');"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,396,"assertEquals(""a"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,397,"assertEquals(""b"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,398,"assertEquals(""c"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,401,public void testBasicDelim1() {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,402,"String input = ""a:b:c"";"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,403,"Tokenizer tok = new Tokenizer(input, ':');"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,404,"assertEquals(""a"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,405,"assertEquals(""b"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,406,"assertEquals(""c"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,409,public void testBasicDelim2() {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,410,"String input = ""a:b:c"";"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,411,"Tokenizer tok = new Tokenizer(input, ',');"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,412,"assertEquals(""a:b:c"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,415,public void testBasicEmpty1() {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,416,"String input = ""a  b c"";"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,417,Tokenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,418,tok.setIgnoreEmptyTokens(false);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,419,"assertEquals(""a"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,420,"assertEquals("""", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,421,"assertEquals(""b"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,422,"assertEquals(""c"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,425,public void testBasicEmpty2() {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,426,"String input = ""a  b c"";"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,427,Tokenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,428,tok.setIgnoreEmptyTokens(false);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,429,tok.setEmptyTokenAsNull(true);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,430,"assertEquals(""a"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,431,"assertEquals(null, tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,432,"assertEquals(""b"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,433,"assertEquals(""c"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,436,public void testGetContent() {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,437,"String input = ""a   b c \""d e\"" f "";"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,438,Tokenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,439,"assertSame(input, tok.getContent());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,441,tok = new Tokenizer(input.toCharArray());
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,442,"assertEquals(input, tok.getContent());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,445,public void testReset() {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,446,"String input = ""a b c"";"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,447,Tokenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,448,"assertEquals(""a"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,449,"assertEquals(""b"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,450,"assertEquals(""c"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,451,tok.reset();
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,452,"assertEquals(""a"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,453,"assertEquals(""b"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,454,"assertEquals(""c"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,455,"tok.reset(""d e"");"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,456,"assertEquals(""d"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,457,"assertEquals(""e"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,458,"tok.reset(""f g"".toCharArray());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,459,"assertEquals(""f"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,460,"assertEquals(""g"", tok.next());"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,463,public void testMatcher() {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,464,"assertEquals(true, Tokenizer.SPACE_MATCHER.isMatch(' '));"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,465,"assertEquals(false, Tokenizer.SPACE_MATCHER.isMatch('\n'));"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,466,"assertEquals(false, Tokenizer.SPACE_MATCHER.isMatch('\u0001'));"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,468,"assertEquals(true, Tokenizer.TRIM_MATCHER.isMatch(' '));"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,469,"assertEquals(true, Tokenizer.TRIM_MATCHER.isMatch('\n'));"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,470,"assertEquals(true, Tokenizer.TRIM_MATCHER.isMatch('\u0001'));"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,472,"assertEquals(true, Tokenizer.SPLIT_MATCHER.isMatch(' '));"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,473,"assertEquals(true, Tokenizer.SPLIT_MATCHER.isMatch('\n'));"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,474,"assertEquals(false, Tokenizer.SPLIT_MATCHER.isMatch('\u0001'));"

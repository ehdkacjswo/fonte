is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,20,import java.util.concurrent.Future;
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,21,import java.util.concurrent.TimeUnit;
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,126,* <p>
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,127,* Gets an implementation of <code>Future</code> that is immediately done
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,128,* and returns the specified constant value.
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,129,* </p>
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,130,* <p>
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,131,* This can be useful to return a simple constant immediately from the
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,132,"* concurrent processing, perhaps as part of avoiding nulls."
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,133,* A constant future can also be useful in testing.
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,134,* </p>
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,136,"* @param value  the constant value to return, may be null"
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,137,"* @return an instance of Future that will return the value, never null"
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,139,public static <T> Future<T> constantFuture(T value) {
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,140,return new ConstantFuture<T>(value);
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,143,static final class ConstantFuture<T> implements Future<T> {
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,144,/** The constant value. */
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,145,private final T value;
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,147,ConstantFuture(T value) {
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,148,this.value = value;
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,151,public boolean isDone() {
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,152,return true;
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,155,public T get() {
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,156,return value;
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,159,"public T get(long timeout, TimeUnit unit) {"
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,160,return value;
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,163,public boolean isCancelled() {
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,164,return false;
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,167,public boolean cancel(boolean mayInterruptIfRunning) {
True,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java,168,return false;
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,20,import java.util.concurrent.Future;
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,21,import java.util.concurrent.TimeUnit;
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,169,* Tests constant future.
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,171,public void testConstantFuture_Integer() throws Exception {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,172,Integer value = new Integer(5);
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,173,Future<Integer> test = ConcurrentUtils.constantFuture(value);
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,174,"assertEquals(true, test.isDone());"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,175,"assertSame(value, test.get());"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,176,"assertSame(value, test.get(1000, TimeUnit.SECONDS));"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,177,"assertSame(value, test.get(1000, null));"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,178,"assertEquals(false, test.isCancelled());"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,179,"assertEquals(false, test.cancel(true));"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,180,"assertEquals(false, test.cancel(false));"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,184,* Tests constant future.
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,186,public void testConstantFuture_null() throws Exception {
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,187,Integer value = null;
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,188,Future<Integer> test = ConcurrentUtils.constantFuture(value);
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,189,"assertEquals(true, test.isDone());"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,190,"assertSame(value, test.get());"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,191,"assertSame(value, test.get(1000, TimeUnit.SECONDS));"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,192,"assertSame(value, test.get(1000, null));"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,193,"assertEquals(false, test.isCancelled());"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,194,"assertEquals(false, test.cancel(true));"
True,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java,195,"assertEquals(false, test.cancel(false));"

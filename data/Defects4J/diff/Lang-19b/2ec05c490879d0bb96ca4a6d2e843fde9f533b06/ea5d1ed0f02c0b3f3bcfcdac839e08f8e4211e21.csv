is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,15,* limitations under the License.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,17,package org.apache.commons.lang.reflect;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,19,import java.lang.reflect.Constructor;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,20,import java.lang.reflect.InvocationTargetException;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,21,import java.lang.reflect.Modifier;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,23,import org.apache.commons.lang.ArrayUtils;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,24,import org.apache.commons.lang.ClassUtils;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,27,"* <p> Utility reflection methods focussed on constructors, modelled after {@link MethodUtils}. </p>"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,29,* <h3>Known Limitations</h3>
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,30,* <h4>Accessing Public Constructors In A Default Access Superclass</h4>
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,31,* <p>There is an issue when invoking public constructors contained in a default access superclass.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,32,* Reflection locates these constructors fine and correctly assigns them as public.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,33,"* However, an <code>IllegalAccessException</code> is thrown if the constructors is invoked.</p>"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,35,* <p><code>ConstructorUtils</code> contains a workaround for this situation.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,36,* It will attempt to call <code>setAccessible</code> on this constructor.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,37,"* If this call succeeds, then the method can be invoked as normal."
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,38,* This call will only succeed when the application has sufficient security privilages.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,39,* If this call fails then a warning will be logged and the method may fail.</p>
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,41,* @author Craig R. McClanahan
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,42,* @author Ralph Schaer
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,43,* @author Chris Audley
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,44,* @author Rey Francois
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,45,* @author Gregor Rayman
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,46,* @author Jan Sorensen
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,47,* @author Robert Burrell Donkin
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,48,* @author Rodney Waldhoff
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,49,* @since 2.5
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,50,* @version $Id$
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,52,public class ConstructorUtils {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,55,* <p>ConstructorUtils instances should NOT be constructed in standard programming.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,56,"* Instead, the class should be used as"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,57,"* <code>ConstructorUtils.invokeConstructor(cls, args)</code>.</p>"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,59,* <p>This constructor is public to permit tools that require a JavaBean
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,60,* instance to operate.</p>
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,62,public ConstructorUtils() {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,63,super();
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,67,* <p>Convenience method returning new instance of <code>klazz</code> using a single argument constructor.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,68,* The formal parameter type is inferred from the actual values of <code>arg</code>.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,69,"* See {@link #invokeExactConstructor(Class, Object[], Class[])} for more details.</p>"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,71,* <p>The signatures should be assignment compatible.</p>
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,73,* @param cls the class to be constructed.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,74,* @param arg the actual argument
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,75,* @return new instance of <code>klazz</code>
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,77,* @throws NoSuchMethodException If the constructor cannot be found
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,78,* @throws IllegalAccessException If an error occurs accessing the constructor
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,79,* @throws InvocationTargetException If an error occurs invoking the constructor
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,80,* @throws InstantiationException If an error occurs instantiating the class
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,82,"* @see #invokeConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[])"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,84,"public static Object invokeConstructor(Class cls, Object arg)"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,85,"throws NoSuchMethodException, IllegalAccessException,"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,86,"InvocationTargetException, InstantiationException {"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,87,"return invokeConstructor(cls, new Object[] { arg });"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,91,* <p>Returns new instance of <code>klazz</code> created using the actual arguments <code>args</code>.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,92,* The formal parameter types are inferred from the actual values of <code>args</code>.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,93,"* See {@link #invokeExactConstructor(Class, Object[], Class[])} for more details.</p>"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,95,* <p>The signatures should be assignment compatible.</p>
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,97,* @param cls the class to be constructed.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,98,* @param args actual argument array
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,99,* @return new instance of <code>klazz</code>
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,101,* @throws NoSuchMethodException If the constructor cannot be found
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,102,* @throws IllegalAccessException If an error occurs accessing the constructor
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,103,* @throws InvocationTargetException If an error occurs invoking the constructor
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,104,* @throws InstantiationException If an error occurs instantiating the class
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,106,"* @see #invokeConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[])"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,108,"public static Object invokeConstructor(Class cls, Object[] args)"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,109,"throws NoSuchMethodException, IllegalAccessException,"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,110,"InvocationTargetException, InstantiationException {"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,111,if (null == args) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,112,args = ArrayUtils.EMPTY_OBJECT_ARRAY;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,114,Class parameterTypes[] = new Class[args.length];
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,115,for (int i = 0; i < args.length; i++) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,116,parameterTypes[i] = args[i].getClass();
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,118,"return invokeConstructor(cls, args, parameterTypes);"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,122,* <p>Returns new instance of <code>klazz</code> created using constructor
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,123,* with signature <code>parameterTypes</code> and actual arguments <code>args</code>.</p>
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,125,* <p>The signatures should be assignment compatible.</p>
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,127,* @param cls the class to be constructed.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,128,* @param args actual argument array
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,129,* @param parameterTypes parameter types array
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,130,* @return new instance of <code>klazz</code>
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,132,* @throws NoSuchMethodException if matching constructor cannot be found
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,133,* @throws IllegalAccessException thrown on the constructor's invocation
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,134,* @throws InvocationTargetException thrown on the constructor's invocation
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,135,* @throws InstantiationException thrown on the constructor's invocation
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,136,* @see Constructor#newInstance
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,138,"public static Object invokeConstructor(Class cls, Object[] args,"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,139,"Class[] parameterTypes) throws NoSuchMethodException,"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,140,"IllegalAccessException, InvocationTargetException,"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,141,InstantiationException {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,142,if (parameterTypes == null) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,143,parameterTypes = ArrayUtils.EMPTY_CLASS_ARRAY;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,145,if (args == null) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,146,args = ArrayUtils.EMPTY_OBJECT_ARRAY;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,148,"Constructor ctor = getMatchingAccessibleConstructor(cls, parameterTypes);"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,149,if (null == ctor) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,150,throw new NoSuchMethodException(
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,151,"""No such accessible constructor on object: """
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,152,+ cls.getName());
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,154,return ctor.newInstance(args);
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,158,* <p>Convenience method returning new instance of <code>klazz</code> using a single argument constructor.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,159,* The formal parameter type is inferred from the actual values of <code>arg</code>.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,160,"* See {@link #invokeExactConstructor(Class, Object[], Class[])} for more details.</p>"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,162,* <p>The signatures should match exactly.</p>
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,164,* @param cls the class to be constructed.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,165,* @param arg the actual argument
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,166,* @return new instance of <code>klazz</code>
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,168,* @throws NoSuchMethodException If the constructor cannot be found
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,169,* @throws IllegalAccessException If an error occurs accessing the constructor
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,170,* @throws InvocationTargetException If an error occurs invoking the constructor
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,171,* @throws InstantiationException If an error occurs instantiating the class
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,173,"* @see #invokeExactConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[])"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,175,"public static Object invokeExactConstructor(Class cls, Object arg)"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,176,"throws NoSuchMethodException, IllegalAccessException,"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,177,"InvocationTargetException, InstantiationException {"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,178,"return invokeExactConstructor(cls, new Object[] { arg });"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,182,* <p>Returns new instance of <code>klazz</code> created using the actual arguments <code>args</code>.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,183,* The formal parameter types are inferred from the actual values of <code>args</code>.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,184,"* See {@link #invokeExactConstructor(Class, Object[], Class[])} for more details.</p>"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,186,* <p>The signatures should match exactly.</p>
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,188,* @param cls the class to be constructed.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,189,* @param args actual argument array
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,190,* @return new instance of <code>klazz</code>
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,192,* @throws NoSuchMethodException If the constructor cannot be found
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,193,* @throws IllegalAccessException If an error occurs accessing the constructor
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,194,* @throws InvocationTargetException If an error occurs invoking the constructor
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,195,* @throws InstantiationException If an error occurs instantiating the class
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,197,"* @see #invokeExactConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[])"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,199,"public static Object invokeExactConstructor(Class cls, Object[] args)"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,200,"throws NoSuchMethodException, IllegalAccessException,"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,201,"InvocationTargetException, InstantiationException {"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,202,if (null == args) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,203,args = ArrayUtils.EMPTY_OBJECT_ARRAY;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,205,int arguments = args.length;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,206,Class parameterTypes[] = new Class[arguments];
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,207,for (int i = 0; i < arguments; i++) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,208,parameterTypes[i] = args[i].getClass();
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,210,"return invokeExactConstructor(cls, args, parameterTypes);"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,214,* <p>Returns new instance of <code>klazz</code> created using constructor
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,215,* with signature <code>parameterTypes</code> and actual arguments
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,216,* <code>args</code>.</p>
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,218,* <p>The signatures should match exactly.</p>
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,220,* @param cls the class to be constructed.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,221,* @param args actual argument array
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,222,* @param parameterTypes parameter types array
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,223,* @return new instance of <code>klazz</code>
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,225,* @throws NoSuchMethodException if matching constructor cannot be found
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,226,* @throws IllegalAccessException thrown on the constructor's invocation
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,227,* @throws InvocationTargetException thrown on the constructor's invocation
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,228,* @throws InstantiationException thrown on the constructor's invocation
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,229,* @see Constructor#newInstance
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,231,"public static Object invokeExactConstructor(Class cls, Object[] args,"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,232,"Class[] parameterTypes) throws NoSuchMethodException,"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,233,"IllegalAccessException, InvocationTargetException,"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,234,InstantiationException {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,235,if (args == null) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,236,args = ArrayUtils.EMPTY_OBJECT_ARRAY;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,238,if (parameterTypes == null) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,239,parameterTypes = ArrayUtils.EMPTY_CLASS_ARRAY;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,241,"Constructor ctor = getAccessibleConstructor(cls, parameterTypes);"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,242,if (null == ctor) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,243,throw new NoSuchMethodException(
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,244,"""No such accessible constructor on object: """
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,245,+ cls.getName());
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,247,return ctor.newInstance(args);
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,251,* Returns a constructor with single argument.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,252,* @param cls the class to be constructed
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,253,* @param parameterType The constructor parameter type
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,254,* @return null if matching accessible constructor can not be found.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,255,* @see Class#getConstructor
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,256,* @see #getAccessibleConstructor(java.lang.reflect.Constructor)
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,258,"public static Constructor getAccessibleConstructor(Class cls,"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,259,Class parameterType) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,260,"return getAccessibleConstructor(cls, new Class[] { parameterType });"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,264,* Returns a constructor given a class and signature.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,265,* @param cls the class to be constructed
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,266,* @param parameterTypes the parameter array
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,267,* @return null if matching accessible constructor can not be found
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,268,* @see Class#getConstructor
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,269,* @see #getAccessibleConstructor(java.lang.reflect.Constructor)
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,271,"public static Constructor getAccessibleConstructor(Class cls,"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,272,Class[] parameterTypes) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,273,try {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,274,return getAccessibleConstructor(cls.getConstructor(parameterTypes));
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,275,} catch (NoSuchMethodException e) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,276,return (null);
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,281,* Returns accessible version of the given constructor.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,282,* @param ctor prototype constructor object.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,283,* @return <code>null</code> if accessible constructor can not be found.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,284,* @see java.lang.SecurityManager
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,286,public static Constructor getAccessibleConstructor(Constructor ctor) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,287,return MemberUtils.isAccessible(ctor)
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,288,&& Modifier.isPublic(ctor.getDeclaringClass().getModifiers()) ? ctor
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,289,: null;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,293,* <p>Find an accessible constructor with compatible parameters.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,294,* Compatible parameters mean that every method parameter is assignable from
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,295,"* the given parameters. In other words, it finds constructor that will take"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,296,* the parameters given.</p>
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,298,* <p>First it checks if there is constructor matching the exact signature.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,299,"* If no such, all the constructors of the class are tested if their signatures"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,300,* are assignment compatible with the parameter types.
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,301,* The first matching constructor is returned.</p>
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,303,* @param cls find constructor for this class
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,304,* @param parameterTypes find method with compatible parameters
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,305,"* @return a valid Constructor object. If there's no matching constructor, returns <code>null</code>."
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,307,"public static Constructor getMatchingAccessibleConstructor(Class cls,"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,308,Class[] parameterTypes) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,309,// see if we can find the constructor directly
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,310,// most of the time this works and it's much faster
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,311,try {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,312,Constructor ctor = cls.getConstructor(parameterTypes);
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,313,MemberUtils.setAccessibleWorkaround(ctor);
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,314,return ctor;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,315,} catch (NoSuchMethodException e) { /* SWALLOW */
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,317,Constructor result = null;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,318,// search through all constructors
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,319,Constructor[] ctors = cls.getConstructors();
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,320,for (int i = 0; i < ctors.length; i++) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,321,// compare parameters
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,322,"if (ClassUtils.isAssignable(parameterTypes, ctors[i]"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,323,".getParameterTypes(), true)) {"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,324,// get accessible version of method
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,325,Constructor ctor = getAccessibleConstructor(ctors[i]);
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,326,if (ctor != null) {
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,327,MemberUtils.setAccessibleWorkaround(ctor);
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,328,if (result == null
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,329,|| MemberUtils.compareParameterTypes(ctor
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,330,".getParameterTypes(), result"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,331,".getParameterTypes(), parameterTypes) < 0) {"
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,332,result = ctor;
True,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,src/java/org/apache/commons/lang/reflect/ConstructorUtils.java,337,return result;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,15,* limitations under the License.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,17,package org.apache.commons.lang.reflect;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,19,import java.lang.reflect.Field;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,20,import java.lang.reflect.Modifier;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,23,* Utilities for working with fields by reflection. Adapted and refactored
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,24,* from the dormant [reflect] Commons sandbox component.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,25,* <p>
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,26,* The ability is provided to break the scoping restrictions coded by the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,27,* programmer. This can allow fields to be changed that shouldn't be. This
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,28,* facility should be used with care.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,30,* @author Stephen Colebourne
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,31,* @author Matt Benson
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,32,* @since 2.5
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,33,* @version $Id$
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,35,public class FieldUtils {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,38,* FieldUtils instances should NOT be constructed in standard programming.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,39,* <p>
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,40,* This constructor is public to permit tools that require a JavaBean instance
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,41,* to operate.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,43,public FieldUtils() {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,44,super();
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,48,* Gets an accessible <code>Field</code> by name repecting scope.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,49,* Superclasses/interfaces will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,51,"* @param cls  the class to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,52,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,53,* @return the Field object
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,54,* @throws IllegalArgumentException if the class or field name is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,56,"public static Field getField(Class cls, String fieldName) {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,57,"Field field = getField(cls, fieldName, false);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,58,MemberUtils.setAccessibleWorkaround(field);
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,59,return field;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,63,* Gets an accessible <code>Field</code> by name breaking scope
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,64,* if requested. Superclasses/interfaces will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,66,"* @param cls  the class to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,67,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,68,* @param forceAccess  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,69,*  <code>setAccessible</code> method. <code>False</code> will only
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,70,*  match public fields.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,71,* @return the Field object
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,72,* @throws IllegalArgumentException if the class or field name is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,74,"public static Field getField(final Class cls, String fieldName, boolean forceAccess) {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,75,if (cls == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,76,"throw new IllegalArgumentException(""The class must not be null"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,78,if (fieldName == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,79,"throw new IllegalArgumentException(""The field name must not be null"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,81,// Sun Java 1.3 has a bugged implementation of getField hence we write the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,82,// code ourselves
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,84,// getField() will return the Field object with the declaring class
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,85,// set correctly to the class that declares the field. Thus requesting the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,86,// field on a subclass will return the field from the superclass.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,88,// priority order for lookup:
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,89,// searchclass private/protected/package/public
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,90,// superclass protected/package/public
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,91,//  private/different package blocks access to further superclasses
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,92,// implementedinterface public
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,94,// check up the superclass hierarchy
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,95,for (Class acls = cls; acls != null; acls = acls.getSuperclass()) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,96,try {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,97,Field field = acls.getDeclaredField(fieldName);
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,98,// getDeclaredField checks for non-public scopes as well
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,99,// and it returns accurate results
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,100,if (!Modifier.isPublic(field.getModifiers())) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,101,if (forceAccess) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,102,field.setAccessible(true);
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,103,} else {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,104,continue;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,107,return field;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,108,} catch (NoSuchFieldException ex) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,109,// ignore
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,112,// check the public interface case. This must be manually searched for
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,113,// incase there is a public supersuperclass field hidden by a private/package
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,114,// superclass field.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,115,Field match = null;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,116,for (Class acls = cls; acls != null; acls = acls.getSuperclass()) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,117,Class[] ints = acls.getInterfaces();
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,118,for (int i = 0; i < ints.length; i++) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,119,"// getField is fine here, because everything is public, and thus it works"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,120,try {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,121,Field test = ints[i].getField(fieldName);
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,122,if (match != null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,123,if (match.getDeclaringClass().equals(test.getDeclaringClass())) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,124,continue;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,126,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,127,"""Reference to field """
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,128,+ fieldName
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,129,"+ "" is ambiguous relative to """
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,130,+ cls
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,131,"+ ""; a matching field exists on two or more parent interfaces."");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,133,match = test;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,134,} catch (NoSuchFieldException ex) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,135,// ignore
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,139,return match;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,143,* Gets an accessible <code>Field</code> by name respecting scope.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,144,* Only the specified class will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,146,"* @param cls  the class to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,147,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,148,* @return the Field object
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,149,* @throws IllegalArgumentException if the class or field name is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,151,"public static Field getDeclaredField(Class cls, String fieldName) {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,152,"return getDeclaredField(cls, fieldName, false);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,156,* Gets an accessible <code>Field</code> by name breaking scope
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,157,* if requested. Only the specified class will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,159,"* @param cls  the class to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,160,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,161,* @param forceAccess  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,162,*  <code>setAccessible</code> method. False will only match public fields.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,163,* @return the Field object
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,164,* @throws IllegalArgumentException if the class or field name is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,166,"public static Field getDeclaredField(Class cls, String fieldName, boolean forceAccess) {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,167,if (cls == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,168,"throw new IllegalArgumentException(""The class must not be null"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,170,if (fieldName == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,171,"throw new IllegalArgumentException(""The field name must not be null"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,173,try {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,174,// only consider the specified class by using getDeclaredField()
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,175,Field field = cls.getDeclaredField(fieldName);
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,176,if (!MemberUtils.isAccessible(field)) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,177,if (forceAccess) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,178,field.setAccessible(true);
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,179,} else {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,180,return null;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,183,return field;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,184,} catch (NoSuchFieldException e) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,186,return null;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,190,* Read an accessible static Field.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,191,* @param field to read
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,192,* @return the field value
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,193,* @throws IllegalArgumentException if the field is null or not static
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,194,* @throws IllegalAccessException if the field is not accessible
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,196,public static Object readStaticField(Field field) throws IllegalAccessException {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,197,"return readStaticField(field, false);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,201,* Read a static Field.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,202,* @param field to read
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,203,* @param forceAccess  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,204,*  <code>setAccessible</code> method.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,205,* @return the field value
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,206,* @throws IllegalArgumentException if the field is null or not static
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,207,* @throws IllegalAccessException if the field is not made accessible
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,209,"public static Object readStaticField(Field field, boolean forceAccess) throws IllegalAccessException {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,210,if (field == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,211,"throw new IllegalArgumentException(""The field must not be null"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,213,if (!Modifier.isStatic(field.getModifiers())) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,214,"throw new IllegalArgumentException(""The field '"" + field.getName() + ""' is not static"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,216,"return readField(field, (Object) null, forceAccess);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,220,* Read the named public static field. Superclasses will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,221,"* @param cls  the class to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,222,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,223,* @return the value of the field
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,224,* @throws IllegalArgumentException if the class or field name is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,225,* @throws IllegalAccessException if the field is not accessible
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,227,"public static Object readStaticField(Class cls, String fieldName) throws IllegalAccessException {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,228,"return readStaticField(cls, fieldName, false);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,232,* Read the named static field. Superclasses will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,233,"* @param cls  the class to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,234,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,235,* @param forceAccess  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,236,*  <code>setAccessible</code> method. <code>False</code> will only
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,237,*  match public fields.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,238,* @return the Field object
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,239,* @throws IllegalArgumentException if the class or field name is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,240,* @throws IllegalAccessException if the field is not made accessible
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,242,"public static Object readStaticField(Class cls, String fieldName, boolean forceAccess) throws IllegalAccessException {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,243,"Field field = getField(cls, fieldName, forceAccess);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,244,if (field == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,245,"throw new IllegalArgumentException(""Cannot locate field "" + fieldName + "" on "" + cls);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,247,"//already forced access above, don't repeat it here:"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,248,"return readStaticField(field, false);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,252,* Gets a static Field value by name. The field must be public.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,253,* Only the specified class will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,255,"* @param cls  the class to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,256,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,257,* @return the value of the field
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,258,* @throws IllegalArgumentException if the class or field name is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,259,* @throws IllegalAccessException if the field is not accessible
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,261,"public static Object readDeclaredStaticField(Class cls, String fieldName) throws IllegalAccessException {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,262,"return readDeclaredStaticField(cls, fieldName, false);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,266,* Gets a static Field value by name. Only the specified class will
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,267,* be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,269,"* @param cls  the class to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,270,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,271,* @param forceAccess  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,272,*  <code>setAccessible</code> method. <code>False</code> will only
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,273,*  match public fields.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,274,* @return the Field object
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,275,* @throws IllegalArgumentException if the class or field name is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,276,* @throws IllegalAccessException if the field is not made accessible
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,278,"public static Object readDeclaredStaticField(Class cls, String fieldName, boolean forceAccess)"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,279,throws IllegalAccessException {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,280,"Field field = getDeclaredField(cls, fieldName, forceAccess);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,281,if (field == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,282,"throw new IllegalArgumentException(""Cannot locate declared field "" + cls.getName() + ""."" + fieldName);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,284,"//already forced access above, don't repeat it here:"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,285,"return readStaticField(field, false);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,289,* Read an accessible Field.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,290,* @param field  the field to use
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,291,"* @param target  the object to call on, may be null for static fields"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,292,* @return the field value
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,293,* @throws IllegalArgumentException if the field is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,294,* @throws IllegalAccessException if the field is not accessible
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,296,"public static Object readField(Field field, Object target) throws IllegalAccessException {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,297,"return readField(field, target, false);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,301,* Read a Field.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,302,* @param field  the field to use
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,303,"* @param target  the object to call on, may be null for static fields"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,304,* @param forceAccess  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,305,*  <code>setAccessible</code> method.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,306,* @return the field value
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,307,* @throws IllegalArgumentException if the field is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,308,* @throws IllegalAccessException if the field is not made accessible
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,310,"public static Object readField(Field field, Object target, boolean forceAccess) throws IllegalAccessException {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,311,if (field == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,312,"throw new IllegalArgumentException(""The field must not be null"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,314,if (forceAccess && !field.isAccessible()) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,315,field.setAccessible(true);
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,316,} else {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,317,MemberUtils.setAccessibleWorkaround(field);
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,319,return field.get(target);
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,323,* Read the named public field. Superclasses will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,324,"* @param target  the object to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,325,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,326,* @return the value of the field
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,327,* @throws IllegalArgumentException if the class or field name is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,328,* @throws IllegalAccessException if the named field is not public
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,330,"public static Object readField(Object target, String fieldName) throws IllegalAccessException {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,331,"return readField(target, fieldName, false);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,335,* Read the named field. Superclasses will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,336,"* @param target  the object to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,337,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,338,* @param forceAccess  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,339,*  <code>setAccessible</code> method. <code>False</code> will only
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,340,*  match public fields.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,341,* @return the field value
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,342,* @throws IllegalArgumentException if the class or field name is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,343,* @throws IllegalAccessException if the named field is not made accessible
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,345,"public static Object readField(Object target, String fieldName, boolean forceAccess) throws IllegalAccessException {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,346,if (target == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,347,"throw new IllegalArgumentException(""target object must not be null"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,349,Class cls = target.getClass();
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,350,"Field field = getField(cls, fieldName, forceAccess);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,351,if (field == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,352,"throw new IllegalArgumentException(""Cannot locate field "" + fieldName + "" on "" + cls);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,354,"//already forced access above, don't repeat it here:"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,355,"return readField(field, target);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,359,* Read the named public field. Only the class of the specified object will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,360,"* @param target  the object to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,361,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,362,* @return the value of the field
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,363,* @throws IllegalArgumentException if the class or field name is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,364,* @throws IllegalAccessException if the named field is not public
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,366,"public static Object readDeclaredField(Object target, String fieldName) throws IllegalAccessException {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,367,"return readDeclaredField(target, fieldName, false);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,371,* <p<>Gets a Field value by name. Only the class of the specified
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,372,* object will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,374,"* @param target  the object to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,375,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,376,* @param forceAccess  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,377,*  <code>setAccessible</code> method. <code>False</code> will only
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,378,*  match public fields.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,379,* @return the Field object
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,380,* @throws IllegalArgumentException if <code>target</code> or <code>fieldName</code> is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,381,* @throws IllegalAccessException if the field is not made accessible
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,383,"public static Object readDeclaredField(Object target, String fieldName, boolean forceAccess) throws IllegalAccessException {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,384,if (target == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,385,"throw new IllegalArgumentException(""target object must not be null"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,387,Class cls = target.getClass();
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,388,"Field field = getDeclaredField(cls, fieldName, forceAccess);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,389,if (field == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,390,"throw new IllegalArgumentException(""Cannot locate declared field "" + cls.getName() + ""."" + fieldName);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,392,"//already forced access above, don't repeat it here:"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,393,"return readField(field, target);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,397,* Write a public static Field.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,398,* @param field to write
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,399,* @param value to set
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,400,* @throws IllegalArgumentException if the field is null or not static
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,401,* @throws IllegalAccessException if the field is not public or is final
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,403,"public static void writeStaticField(Field field, Object value) throws IllegalAccessException {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,404,"writeStaticField(field, value, false);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,408,* Write a static Field.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,409,* @param field to write
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,410,* @param value to set
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,411,* @param forceAccess  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,412,*  <code>setAccessible</code> method. <code>False</code> will only
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,413,*  match public fields.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,414,* @throws IllegalArgumentException if the field is null or not static
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,415,* @throws IllegalAccessException if the field is not made accessible or is final
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,417,"public static void writeStaticField(Field field, Object value, boolean forceAccess) throws IllegalAccessException {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,418,if (field == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,419,"throw new IllegalArgumentException(""The field must not be null"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,421,if (!Modifier.isStatic(field.getModifiers())) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,422,"throw new IllegalArgumentException(""The field '"" + field.getName() + ""' is not static"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,424,"writeField(field, (Object) null, value, forceAccess);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,428,* Write a named public static Field. Superclasses will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,429,* @param cls Class on which the Field is to be found
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,430,* @param fieldName to write
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,431,* @param value to set
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,432,* @throws IllegalArgumentException if the field cannot be located or is not static
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,433,* @throws IllegalAccessException if the field is not public or is final
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,435,"public static void writeStaticField(Class cls, String fieldName, Object value) throws IllegalAccessException {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,436,"writeStaticField(cls, fieldName, value, false);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,440,* Write a named static Field. Superclasses will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,441,* @param cls Class on which the Field is to be found
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,442,* @param fieldName to write
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,443,* @param value to set
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,444,* @param forceAccess  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,445,*  <code>setAccessible</code> method. <code>False</code> will only
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,446,*  match public fields.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,447,* @throws IllegalArgumentException if the field cannot be located or is not static
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,448,* @throws IllegalAccessException if the field is not made accessible or is final
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,450,"public static void writeStaticField(Class cls, String fieldName, Object value, boolean forceAccess)"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,451,throws IllegalAccessException {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,452,"Field field = getField(cls, fieldName, forceAccess);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,453,if (field == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,454,"throw new IllegalArgumentException(""Cannot locate field "" + fieldName + "" on "" + cls);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,456,"//already forced access above, don't repeat it here:"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,457,"writeStaticField(field, value);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,461,* Write a named public static Field. Only the specified class will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,462,* @param cls Class on which the Field is to be found
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,463,* @param fieldName to write
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,464,* @param value to set
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,465,* @throws IllegalArgumentException if the field cannot be located or is not static
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,466,* @throws IllegalAccessException if the field is not public or is final
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,468,"public static void writeDeclaredStaticField(Class cls, String fieldName, Object value)"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,469,throws IllegalAccessException {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,470,"writeDeclaredStaticField(cls, fieldName, value, false);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,474,* Write a named static Field. Only the specified class will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,475,* @param cls Class on which the Field is to be found
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,476,* @param fieldName to write
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,477,* @param value to set
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,478,* @param forceAccess  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,479,*  <code>setAccessible</code> method. <code>False</code> will only
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,480,*  match public fields.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,481,* @throws IllegalArgumentException if the field cannot be located or is not static
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,482,* @throws IllegalAccessException if the field is not made accessible or is final
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,484,"public static void writeDeclaredStaticField(Class cls, String fieldName, Object value, boolean forceAccess)"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,485,throws IllegalAccessException {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,486,"Field field = getDeclaredField(cls, fieldName, forceAccess);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,487,if (field == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,488,"throw new IllegalArgumentException(""Cannot locate declared field "" + cls.getName() + ""."" + fieldName);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,490,"//already forced access above, don't repeat it here:"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,491,"writeField(field, (Object) null, value);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,495,* Write an accessible field.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,496,* @param field to write
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,497,"* @param target  the object to call on, may be null for static fields"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,498,* @param value to set
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,499,* @throws IllegalArgumentException if the field is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,500,* @throws IllegalAccessException if the field is not accessible or is final
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,502,"public static void writeField(Field field, Object target, Object value) throws IllegalAccessException {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,503,"writeField(field, target, value, false);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,507,* Write a field.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,508,* @param field to write
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,509,"* @param target  the object to call on, may be null for static fields"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,510,* @param value to set
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,511,* @param forceAccess  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,512,*  <code>setAccessible</code> method. <code>False</code> will only
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,513,*  match public fields.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,514,* @throws IllegalArgumentException if the field is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,515,* @throws IllegalAccessException if the field is not made accessible or is final
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,517,"public static void writeField(Field field, Object target, Object value, boolean forceAccess) throws IllegalAccessException {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,518,if (field == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,519,"throw new IllegalArgumentException(""The field must not be null"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,521,if (forceAccess && !field.isAccessible()) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,522,field.setAccessible(true);
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,523,} else {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,524,MemberUtils.setAccessibleWorkaround(field);
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,526,"field.set(target, value);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,530,* Write a public field. Superclasses will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,531,"* @param target  the object to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,532,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,533,* @param value to set
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,534,* @throws IllegalArgumentException if <code>target</code> or <code>fieldName</code> is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,535,* @throws IllegalAccessException if the field is not accessible
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,537,"public static void writeField(Object target, String fieldName, Object value) throws IllegalAccessException {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,538,"writeField(target, fieldName, value, false);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,542,* Write a field. Superclasses will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,543,"* @param target  the object to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,544,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,545,* @param value to set
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,546,* @param forceAccess  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,547,*  <code>setAccessible</code> method. <code>False</code> will only
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,548,*  match public fields.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,549,* @throws IllegalArgumentException if <code>target</code> or <code>fieldName</code> is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,550,* @throws IllegalAccessException if the field is not made accessible
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,552,"public static void writeField(Object target, String fieldName, Object value, boolean forceAccess)"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,553,throws IllegalAccessException {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,554,if (target == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,555,"throw new IllegalArgumentException(""target object must not be null"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,557,Class cls = target.getClass();
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,558,"Field field = getField(cls, fieldName, forceAccess);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,559,if (field == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,560,"throw new IllegalArgumentException(""Cannot locate declared field "" + cls.getName() + ""."" + fieldName);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,562,"//already forced access above, don't repeat it here:"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,563,"writeField(field, target, value);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,567,* Write a public field. Only the specified class will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,568,"* @param target  the object to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,569,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,570,* @param value to set
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,571,* @param forceAccess  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,572,*  <code>setAccessible</code> method. <code>False</code> will only
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,573,*  match public fields.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,574,* @throws IllegalArgumentException if <code>target</code> or <code>fieldName</code> is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,575,* @throws IllegalAccessException if the field is not made accessible
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,577,"public static void writeDeclaredField(Object target, String fieldName, Object value) throws IllegalAccessException {"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,578,"writeDeclaredField(target, fieldName, value, false);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,582,* Write a public field. Only the specified class will be considered.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,583,"* @param target  the object to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,584,* @param fieldName  the field name to obtain
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,585,* @param value to set
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,586,* @param forceAccess  whether to break scope restrictions using the
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,587,*  <code>setAccessible</code> method. <code>False</code> will only
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,588,*  match public fields.
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,589,* @throws IllegalArgumentException if <code>target</code> or <code>fieldName</code> is null
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,590,* @throws IllegalAccessException if the field is not made accessible
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,592,"public static void writeDeclaredField(Object target, String fieldName, Object value, boolean forceAccess)"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,593,throws IllegalAccessException {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,594,if (target == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,595,"throw new IllegalArgumentException(""target object must not be null"");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,597,Class cls = target.getClass();
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,598,"Field field = getDeclaredField(cls, fieldName, forceAccess);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,599,if (field == null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,600,"throw new IllegalArgumentException(""Cannot locate declared field "" + cls.getName() + ""."" + fieldName);"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,602,"//already forced access above, don't repeat it here:"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,603,"writeField(field, target, value);"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,15,* limitations under the License.
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,17,package org.apache.commons.lang.reflect;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,19,import java.lang.reflect.AccessibleObject;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,20,import java.lang.reflect.Member;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,21,import java.lang.reflect.Method;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,22,import java.lang.reflect.Modifier;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,24,import org.apache.commons.lang.ArrayUtils;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,25,import org.apache.commons.lang.ClassUtils;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,26,import org.apache.commons.lang.SystemUtils;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,29,"* Contains common code for working with Methods/Constructors, extracted and"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,30,* refactored from <code>MethodUtils</code> when it was imported from Commons BeanUtils.
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,32,* @author Steve Cohen
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,33,* @author Matt Benson
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,34,* @since 2.5
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,35,* @version $Id$
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,37,abstract class MemberUtils {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,38,// TODO extract an interface to implement compareParameterSets(...)?
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,40,private static final int ACCESS_TEST = Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,42,private static final Method IS_SYNTHETIC;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,43,static {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,44,Method isSynthetic = null;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,45,if (SystemUtils.isJavaVersionAtLeast(1.5f)) {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,46,// cannot call synthetic methods:
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,47,try {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,48,"isSynthetic = Member.class.getMethod(""isSynthetic"","
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,49,ArrayUtils.EMPTY_CLASS_ARRAY);
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,50,} catch (Exception e) {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,53,IS_SYNTHETIC = isSynthetic;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,56,"/** Array of primitive number types ordered by ""promotability"" */"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,57,"private static final Class[] ORDERED_PRIMITIVE_TYPES = { Byte.TYPE,"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,58,"Short.TYPE, Character.TYPE, Integer.TYPE, Long.TYPE, Float.TYPE,"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,59,Double.TYPE };
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,62,* XXX Default access superclass workaround
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,64,* When a public class has a default access superclass with public
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,65,"* members, these members are accessible. Calling them from"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,66,"* compiled code works fine. Unfortunately, on some JVMs, using reflection to invoke these"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,67,* members seems to (wrongly) to prevent access even when the
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,68,* modifer is public. Calling setAccessible(true) solves the problem
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,69,* but will only work from sufficiently privileged code. Better
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,70,* workarounds would be gratefully accepted.
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,71,* @param o the AccessibleObject to set as accessible
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,73,static void setAccessibleWorkaround(AccessibleObject o) {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,74,if (o == null || o.isAccessible()) {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,75,return;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,77,Member m = (Member) o;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,78,if (Modifier.isPublic(m.getModifiers()) && isPackageAccess(m.getDeclaringClass().getModifiers())) {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,79,try {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,80,o.setAccessible(true);
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,81,} catch (SecurityException e) {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,82,// ignore in favor of subsequent IllegalAccessException
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,88,* Learn whether a given set of modifiers implies package access.
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,89,* @param modifiers to test
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,90,* @return true unless package/protected/private modifier detected
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,92,static boolean isPackageAccess(int modifiers) {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,93,return (modifiers & ACCESS_TEST) == 0;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,97,* Check a Member for basic accessibility.
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,98,* @param m Member to check
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,99,* @return true if <code>m</code> is accessible
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,101,static boolean isAccessible(Member m) {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,102,return m != null && Modifier.isPublic(m.getModifiers())
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,103,&& !isSynthetic(m);
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,107,"* Try to learn whether a given member, on JDK >= 1.5, is synthetic."
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,108,* @param m Member to check
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,109,* @return true if <code>m</code> was introduced by the compiler.
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,111,static boolean isSynthetic(Member m) {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,112,if (IS_SYNTHETIC != null) {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,113,try {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,114,"return ((Boolean) IS_SYNTHETIC.invoke(m, null)).booleanValue();"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,115,} catch (Exception e) {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,118,return false;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,122,* Compare the relative fitness of two sets of parameter types in terms of
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,123,"* matching a third set of runtime parameter types, such that a list ordered"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,124,* by the results of the comparison would return the best match first (least).
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,126,"* @param left the ""left"" parameter set"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,127,"* @param right the ""right"" parameter set"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,128,* @param actual the runtime parameter types to match against <code>left</code>/<code>right</code>
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,129,* @return int consistent with <code>compare</code> semantics
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,131,"static int compareParameterTypes(Class[] left, Class[] right, Class[] actual) {"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,132,"float leftCost = getTotalTransformationCost(actual, left);"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,133,"float rightCost = getTotalTransformationCost(actual, right);"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,134,return leftCost < rightCost ? -1 : rightCost < leftCost ? 1 : 0;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,138,* Returns the sum of the object transformation cost for each class in the source
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,139,* argument list.
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,140,* @param srcArgs The source arguments
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,141,* @param destArgs The destination arguments
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,142,* @return The total transformation cost
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,144,"private static float getTotalTransformationCost(Class[] srcArgs,"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,145,Class[] destArgs) {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,146,float totalCost = 0.0f;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,147,for (int i = 0; i < srcArgs.length; i++) {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,148,"Class srcClass, destClass;"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,149,srcClass = srcArgs[i];
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,150,destClass = destArgs[i];
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,151,"totalCost += getObjectTransformationCost(srcClass, destClass);"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,153,return totalCost;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,157,* Gets the number of steps required needed to turn the source class into the
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,158,* destination class. This represents the number of steps in the object hierarchy
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,159,* graph.
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,160,* @param srcClass The source class
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,161,* @param destClass The destination class
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,162,* @return The cost of transforming an object
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,164,"private static float getObjectTransformationCost(Class srcClass,"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,165,Class destClass) {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,166,if (destClass.isPrimitive()) {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,167,"return getPrimitivePromotionCost(srcClass, destClass);"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,169,float cost = 0.0f;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,170,while (destClass != null && !destClass.equals(srcClass)) {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,171,if (destClass.isInterface()
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,172,"&& ClassUtils.isAssignable(srcClass, destClass)) {"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,173,// slight penalty for interface match.
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,174,"// we still want an exact match to override an interface match,"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,175,// but
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,176,// an interface match should override anything where we have to
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,177,// get a superclass.
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,178,cost += 0.25f;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,179,break;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,181,cost++;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,182,destClass = destClass.getSuperclass();
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,185,"* If the destination class is null, we've travelled all the way up to"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,186,* an Object match. We'll penalize this by adding 1.5 to the cost.
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,188,if (destClass == null) {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,189,cost += 1.5f;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,191,return cost;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,195,* Get the number of steps required to promote a primitive number to another type.
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,196,* @param srcClass the (primitive) source class
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,197,* @param destClass the (primitive) destination class
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,198,* @return The cost of promoting the primitive
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,200,"private static float getPrimitivePromotionCost(final Class srcClass,"
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,201,final Class destClass) {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,202,float cost = 0.0f;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,203,Class cls = srcClass;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,204,if (!cls.isPrimitive()) {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,205,// slight unwrapping penalty
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,206,cost += 0.1f;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,207,cls = ClassUtils.wrapperToPrimitive(cls);
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,209,for (int i = 0; cls != destClass && i < ORDERED_PRIMITIVE_TYPES.length; i++) {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,210,if (cls == ORDERED_PRIMITIVE_TYPES[i]) {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,211,cost += 0.1f;
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,212,if (i < ORDERED_PRIMITIVE_TYPES.length - 1) {
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,213,cls = ORDERED_PRIMITIVE_TYPES[i + 1];
True,src/java/org/apache/commons/lang/reflect/MemberUtils.java,src/java/org/apache/commons/lang/reflect/MemberUtils.java,217,return cost;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,15,* limitations under the License.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,17,package org.apache.commons.lang.reflect;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,19,import java.lang.reflect.InvocationTargetException;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,20,import java.lang.reflect.Method;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,21,import java.lang.reflect.Modifier;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,23,import java.util.Arrays;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,24,import java.util.WeakHashMap;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,26,import org.apache.commons.lang.ArrayUtils;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,27,import org.apache.commons.lang.ClassUtils;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,30,"* <p> Utility reflection methods focused on methods, originally from Commons BeanUtils."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,31,"* Differences from the BeanUtils version may be noted, especially where similar functionality"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,32,* already existed within Lang.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,33,* </p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,35,* <h3>Known Limitations</h3>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,36,* <h4>Accessing Public Methods In A Default Access Superclass</h4>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,37,* <p>There is an issue when invoking public methods contained in a default access superclass on JREs prior to 1.4.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,38,* Reflection locates these methods fine and correctly assigns them as public.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,39,"* However, an <code>IllegalAccessException</code> is thrown if the method is invoked.</p>"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,41,* <p><code>MethodUtils</code> contains a workaround for this situation.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,42,* It will attempt to call <code>setAccessible</code> on this method.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,43,"* If this call succeeds, then the method can be invoked as normal."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,44,* This call will only succeed when the application has sufficient security privileges.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,45,* If this call fails then the method may fail.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,47,* @author Craig R. McClanahan
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,48,* @author Ralph Schaer
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,49,* @author Chris Audley
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,50,* @author Rey Fran&#231;ois
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,51,* @author Gregor Ra&#253;man
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,52,* @author Jan Sorensen
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,53,* @author Robert Burrell Donkin
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,54,* @author Niall Pemberton
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,55,* @author Matt Benson
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,56,* @since 2.5
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,57,* @version $Id$
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,59,public class MethodUtils {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,62,* Stores a cache of MethodDescriptor -> Method in a WeakHashMap.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,63,* <p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,64,* The keys into this map only ever exist as temporary variables within
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,65,"* methods of this class, and are never exposed to users of this class."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,66,* This means that the WeakHashMap is used only as a mechanism for
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,67,"* limiting the size of the cache, ie a way to tell the garbage collector"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,68,* that the contents of the cache can be completely garbage-collected
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,69,* whenever it needs the memory. Whether this is a good approach to
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,70,* this problem is doubtful; something like the commons-collections
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,71,* LRUMap may be more appropriate (though of course selecting an
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,72,* appropriate size is an issue).
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,73,* <p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,74,* This static variable is safe even when this code is deployed via a
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,75,* shared classloader because it is keyed via a MethodDescriptor object
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,76,* which has a Class as one of its members and that member is used in
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,77,* the MethodDescriptor.equals method. So two components that load the same
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,78,* class via different classloaders will generate non-equal MethodDescriptor
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,79,* objects and hence end up with different entries in the map.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,81,"private static final WeakHashMap/* <MethodDescriptor, Method> */cache = new WeakHashMap();"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,84,* Indicates whether methods should be cached for improved performance.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,85,* <p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,86,* Note that when this class is deployed via a shared classloader in
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,87,"* a container, this will affect all webapps. However making this"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,88,* configurable per webapp would mean having a map keyed by context classloader
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,89,* which may introduce memory-leak problems.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,91,private static boolean cacheMethods = true;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,94,* <p>MethodUtils instances should NOT be constructed in standard programming.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,95,"* Instead, the class should be used as"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,96,* <code>MethodUtils.getAccessibleMethod(method)</code>.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,98,* <p>This constructor is public to permit tools that require a JavaBean
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,99,* instance to operate.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,101,public MethodUtils() {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,102,super();
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,106,"* Set whether methods should be cached for greater performance or not,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,107,* default is <code>true</code>.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,109,* @param cacheMethods <code>true</code> if methods should be
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,110,"* cached for greater performance, otherwise <code>false</code>"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,112,public static synchronized void setCacheMethods(boolean cacheMethods) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,113,MethodUtils.cacheMethods = cacheMethods;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,114,if (!MethodUtils.cacheMethods) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,115,clearCache();
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,120,* Clear the method cache.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,121,* @return the number of cached methods cleared
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,123,public static synchronized int clearCache() {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,124,int size = cache.size();
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,125,cache.clear();
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,126,return size;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,130,* <p>Invoke a named method whose parameter type matches the object type.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,132,"* <p>This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String, Class[])}.</p>"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,134,* <p>This method supports calls to methods taking primitive parameters
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,135,"* via passing in wrapping classes. So, for example, a <code>Boolean</code> object"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,136,* would match a <code>boolean</code> primitive.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,138,* <p> This is a convenient wrapper for
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,139,"* {@link #invokeMethod(Object object, String methodName, Object[] args)}."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,140,* </p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,142,* @param object invoke method on this object
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,143,* @param methodName get method with this name
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,144,* @param arg use this argument
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,145,* @return The value returned by the invoked method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,147,* @throws NoSuchMethodException if there is no such accessible method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,148,* @throws InvocationTargetException wraps an exception thrown by the method invoked
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,149,* @throws IllegalAccessException if the requested method is not accessible via reflection
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,151,"public static Object invokeMethod(Object object, String methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,152,"Object arg) throws NoSuchMethodException, IllegalAccessException,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,153,InvocationTargetException {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,154,"return invokeMethod(object, methodName, new Object[] { arg });"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,158,* <p>Invoke a named method whose parameter type matches the object type.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,160,"* <p>This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String, Class[])}.</p>"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,162,* <p>This method supports calls to methods taking primitive parameters
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,163,"* via passing in wrapping classes. So, for example, a <code>Boolean</code> object"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,164,* would match a <code>boolean</code> primitive.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,166,* <p> This is a convenient wrapper for
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,167,"* {@link #invokeMethod(Object object,String methodName, Object[] args, Class[] parameterTypes)}."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,168,* </p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,170,* @param object invoke method on this object
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,171,* @param methodName get method with this name
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,172,* @param args use these arguments - treat null as empty array
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,173,* @return The value returned by the invoked method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,175,* @throws NoSuchMethodException if there is no such accessible method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,176,* @throws InvocationTargetException wraps an exception thrown by the method invoked
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,177,* @throws IllegalAccessException if the requested method is not accessible via reflection
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,179,"public static Object invokeMethod(Object object, String methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,180,"Object[] args) throws NoSuchMethodException,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,181,"IllegalAccessException, InvocationTargetException {"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,182,if (args == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,183,args = ArrayUtils.EMPTY_OBJECT_ARRAY;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,185,int arguments = args.length;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,186,Class[] parameterTypes = new Class[arguments];
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,187,for (int i = 0; i < arguments; i++) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,188,parameterTypes[i] = args[i].getClass();
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,190,"return invokeMethod(object, methodName, args, parameterTypes);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,194,* <p>Invoke a named method whose parameter type matches the object type.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,196,"* <p>This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String, Class[])}.</p>"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,198,* <p>This method supports calls to methods taking primitive parameters
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,199,"* via passing in wrapping classes. So, for example, a <code>Boolean</code> object"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,200,* would match a <code>boolean</code> primitive.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,202,* @param object invoke method on this object
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,203,* @param methodName get method with this name
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,204,* @param args use these arguments - treat null as empty array
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,205,* @param parameterTypes match these parameters - treat null as empty array
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,206,* @return The value returned by the invoked method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,208,* @throws NoSuchMethodException if there is no such accessible method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,209,* @throws InvocationTargetException wraps an exception thrown by the method invoked
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,210,* @throws IllegalAccessException if the requested method is not accessible via reflection
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,212,"public static Object invokeMethod(Object object, String methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,213,"Object[] args, Class[] parameterTypes)"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,214,"throws NoSuchMethodException, IllegalAccessException,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,215,InvocationTargetException {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,216,if (parameterTypes == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,217,parameterTypes = ArrayUtils.EMPTY_CLASS_ARRAY;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,219,if (args == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,220,args = ArrayUtils.EMPTY_OBJECT_ARRAY;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,222,"Method method = getMatchingAccessibleMethod(object.getClass(),"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,223,"methodName, parameterTypes);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,224,if (method == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,225,"throw new NoSuchMethodException(""No such accessible method: """
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,226,"+ methodName + ""() on object: """
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,227,+ object.getClass().getName());
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,229,"return method.invoke(object, args);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,233,* <p>Invoke a method whose parameter type matches exactly the object
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,234,* type.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,236,* <p> This is a convenient wrapper for
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,237,"* {@link #invokeExactMethod(Object object,String methodName,Object [] args)}."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,238,* </p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,240,* @param object invoke method on this object
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,241,* @param methodName get method with this name
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,242,* @param arg use this argument
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,243,* @return The value returned by the invoked method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,245,* @throws NoSuchMethodException if there is no such accessible method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,246,* @throws InvocationTargetException wraps an exception thrown by the
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,247,*  method invoked
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,248,* @throws IllegalAccessException if the requested method is not accessible
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,249,*  via reflection
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,251,"public static Object invokeExactMethod(Object object, String methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,252,"Object arg) throws NoSuchMethodException, IllegalAccessException,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,253,InvocationTargetException {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,254,"return invokeExactMethod(object, methodName, new Object[] { arg });"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,258,* <p>Invoke a method whose parameter types match exactly the object
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,259,* types.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,261,* <p> This uses reflection to invoke the method obtained from a call to
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,262,* <code>getAccessibleMethod()</code>.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,264,* @param object invoke method on this object
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,265,* @param methodName get method with this name
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,266,* @param args use these arguments - treat null as empty array
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,267,* @return The value returned by the invoked method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,269,* @throws NoSuchMethodException if there is no such accessible method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,270,* @throws InvocationTargetException wraps an exception thrown by the
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,271,*  method invoked
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,272,* @throws IllegalAccessException if the requested method is not accessible
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,273,*  via reflection
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,275,"public static Object invokeExactMethod(Object object, String methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,276,"Object[] args) throws NoSuchMethodException,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,277,"IllegalAccessException, InvocationTargetException {"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,278,if (args == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,279,args = ArrayUtils.EMPTY_OBJECT_ARRAY;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,281,int arguments = args.length;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,282,Class[] parameterTypes = new Class[arguments];
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,283,for (int i = 0; i < arguments; i++) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,284,parameterTypes[i] = args[i].getClass();
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,286,"return invokeExactMethod(object, methodName, args, parameterTypes);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,290,* <p>Invoke a method whose parameter types match exactly the parameter
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,291,* types given.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,293,* <p>This uses reflection to invoke the method obtained from a call to
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,294,* <code>getAccessibleMethod()</code>.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,296,* @param object invoke method on this object
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,297,* @param methodName get method with this name
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,298,* @param args use these arguments - treat null as empty array
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,299,* @param parameterTypes match these parameters - treat null as empty array
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,300,* @return The value returned by the invoked method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,302,* @throws NoSuchMethodException if there is no such accessible method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,303,* @throws InvocationTargetException wraps an exception thrown by the
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,304,*  method invoked
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,305,* @throws IllegalAccessException if the requested method is not accessible
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,306,*  via reflection
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,308,"public static Object invokeExactMethod(Object object, String methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,309,"Object[] args, Class[] parameterTypes)"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,310,"throws NoSuchMethodException, IllegalAccessException,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,311,InvocationTargetException {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,312,if (args == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,313,args = ArrayUtils.EMPTY_OBJECT_ARRAY;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,315,if (parameterTypes == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,316,parameterTypes = ArrayUtils.EMPTY_CLASS_ARRAY;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,318,"Method method = getAccessibleMethod(object.getClass(), methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,319,parameterTypes);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,320,if (method == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,321,"throw new NoSuchMethodException(""No such accessible method: """
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,322,"+ methodName + ""() on object: """
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,323,+ object.getClass().getName());
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,325,"return method.invoke(object, args);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,329,* <p>Invoke a static method whose parameter types match exactly the parameter
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,330,* types given.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,332,* <p>This uses reflection to invoke the method obtained from a call to
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,333,"* {@link #getAccessibleMethod(Class, String, Class[])}.</p>"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,335,* @param cls invoke static method on this class
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,336,* @param methodName get method with this name
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,337,* @param args use these arguments - treat null as empty array
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,338,* @param parameterTypes match these parameters - treat null as empty array
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,339,* @return The value returned by the invoked method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,341,* @throws NoSuchMethodException if there is no such accessible method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,342,* @throws InvocationTargetException wraps an exception thrown by the
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,343,*  method invoked
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,344,* @throws IllegalAccessException if the requested method is not accessible
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,345,*  via reflection
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,347,"public static Object invokeExactStaticMethod(Class cls, String methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,348,"Object[] args, Class[] parameterTypes)"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,349,"throws NoSuchMethodException, IllegalAccessException,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,350,InvocationTargetException {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,351,if (args == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,352,args = ArrayUtils.EMPTY_OBJECT_ARRAY;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,354,if (parameterTypes == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,355,parameterTypes = ArrayUtils.EMPTY_CLASS_ARRAY;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,357,"Method method = getAccessibleMethod(cls, methodName, parameterTypes);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,358,if (method == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,359,"throw new NoSuchMethodException(""No such accessible method: """
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,360,"+ methodName + ""() on class: "" + cls.getName());"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,362,"return method.invoke(null, args);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,366,* <p>Invoke a named static method whose parameter type matches the object type.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,368,"* <p>This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String, Class[])}.</p>"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,370,* <p>This method supports calls to methods taking primitive parameters
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,371,"* via passing in wrapping classes. So, for example, a <code>Boolean</code> class"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,372,* would match a <code>boolean</code> primitive.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,374,* <p> This is a convenient wrapper for
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,375,"* {@link #invokeStaticMethod(Class objectClass,String methodName,Object [] args)}."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,376,* </p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,378,* @param cls invoke static method on this class
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,379,* @param methodName get method with this name
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,380,* @param arg use this argument
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,381,* @return The value returned by the invoked method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,383,* @throws NoSuchMethodException if there is no such accessible method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,384,* @throws InvocationTargetException wraps an exception thrown by the
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,385,*  method invoked
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,386,* @throws IllegalAccessException if the requested method is not accessible
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,387,*  via reflection
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,389,"public static Object invokeStaticMethod(Class cls, String methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,390,"Object arg) throws NoSuchMethodException, IllegalAccessException,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,391,InvocationTargetException {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,392,"return invokeStaticMethod(cls, methodName, new Object[] { arg });"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,396,* <p>Invoke a named static method whose parameter type matches the object type.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,398,"* <p>This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String, Class[])}.</p>"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,400,* <p>This method supports calls to methods taking primitive parameters
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,401,"* via passing in wrapping classes. So, for example, a <code>Boolean</code> class"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,402,* would match a <code>boolean</code> primitive.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,404,* <p> This is a convenient wrapper for
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,405,"* {@link #invokeStaticMethod(Class objectClass,String methodName,Object [] args,Class[] parameterTypes)}."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,406,* </p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,408,* @param cls invoke static method on this class
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,409,* @param methodName get method with this name
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,410,* @param args use these arguments - treat null as empty array
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,411,* @return The value returned by the invoked method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,413,* @throws NoSuchMethodException if there is no such accessible method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,414,* @throws InvocationTargetException wraps an exception thrown by the
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,415,*  method invoked
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,416,* @throws IllegalAccessException if the requested method is not accessible
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,417,*  via reflection
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,419,"public static Object invokeStaticMethod(Class cls, String methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,420,"Object[] args) throws NoSuchMethodException,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,421,"IllegalAccessException, InvocationTargetException {"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,422,if (args == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,423,args = ArrayUtils.EMPTY_OBJECT_ARRAY;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,425,int arguments = args.length;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,426,Class[] parameterTypes = new Class[arguments];
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,427,for (int i = 0; i < arguments; i++) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,428,parameterTypes[i] = args[i].getClass();
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,430,"return invokeStaticMethod(cls, methodName, args, parameterTypes);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,434,* <p>Invoke a named static method whose parameter type matches the object type.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,436,"* <p>This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String, Class[])}.</p>"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,438,* <p>This method supports calls to methods taking primitive parameters
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,439,"* via passing in wrapping classes. So, for example, a <code>Boolean</code> class"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,440,* would match a <code>boolean</code> primitive.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,443,* @param cls invoke static method on this class
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,444,* @param methodName get method with this name
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,445,* @param args use these arguments - treat null as empty array
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,446,* @param parameterTypes match these parameters - treat null as empty array
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,447,* @return The value returned by the invoked method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,449,* @throws NoSuchMethodException if there is no such accessible method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,450,* @throws InvocationTargetException wraps an exception thrown by the
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,451,*  method invoked
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,452,* @throws IllegalAccessException if the requested method is not accessible
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,453,*  via reflection
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,455,"public static Object invokeStaticMethod(Class cls, String methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,456,"Object[] args, Class[] parameterTypes)"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,457,"throws NoSuchMethodException, IllegalAccessException,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,458,InvocationTargetException {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,459,if (parameterTypes == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,460,parameterTypes = ArrayUtils.EMPTY_CLASS_ARRAY;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,462,if (args == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,463,args = ArrayUtils.EMPTY_OBJECT_ARRAY;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,465,"Method method = getMatchingAccessibleMethod(cls, methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,466,parameterTypes);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,467,if (method == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,468,"throw new NoSuchMethodException(""No such accessible method: """
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,469,"+ methodName + ""() on class: "" + cls.getName());"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,471,"return method.invoke(null, args);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,475,* <p>Invoke a static method whose parameter type matches exactly the object
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,476,* type.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,478,* <p> This is a convenient wrapper for
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,479,"* {@link #invokeExactStaticMethod(Class objectClass,String methodName,Object [] args)}."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,480,* </p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,482,* @param cls invoke static method on this class
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,483,* @param methodName get method with this name
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,484,* @param arg use this argument
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,485,* @return The value returned by the invoked method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,487,* @throws NoSuchMethodException if there is no such accessible method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,488,* @throws InvocationTargetException wraps an exception thrown by the
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,489,*  method invoked
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,490,* @throws IllegalAccessException if the requested method is not accessible
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,491,*  via reflection
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,493,"public static Object invokeExactStaticMethod(Class cls, String methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,494,"Object arg) throws NoSuchMethodException, IllegalAccessException,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,495,InvocationTargetException {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,496,"return invokeExactStaticMethod(cls, methodName, new Object[] { arg });"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,500,* <p>Invoke a static method whose parameter types match exactly the object
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,501,* types.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,503,* <p> This uses reflection to invoke the method obtained from a call to
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,504,"* {@link #getAccessibleMethod(Class, String, Class[])}.</p>"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,506,* @param cls invoke static method on this class
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,507,* @param methodName get method with this name
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,508,* @param args use these arguments - treat null as empty array
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,509,* @return The value returned by the invoked method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,511,* @throws NoSuchMethodException if there is no such accessible method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,512,* @throws InvocationTargetException wraps an exception thrown by the
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,513,*  method invoked
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,514,* @throws IllegalAccessException if the requested method is not accessible
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,515,*  via reflection
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,517,"public static Object invokeExactStaticMethod(Class cls, String methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,518,"Object[] args) throws NoSuchMethodException,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,519,"IllegalAccessException, InvocationTargetException {"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,520,if (args == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,521,args = ArrayUtils.EMPTY_OBJECT_ARRAY;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,523,int arguments = args.length;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,524,Class[] parameterTypes = new Class[arguments];
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,525,for (int i = 0; i < arguments; i++) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,526,parameterTypes[i] = args[i].getClass();
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,528,"return invokeExactStaticMethod(cls, methodName, args, parameterTypes);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,532,"* <p>Return an accessible method (that is, one that can be invoked via"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,533,* reflection) with given name and a single parameter.  If no such method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,534,"* can be found, return <code>null</code>."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,535,"* Basically, a convenience wrapper that constructs a <code>Class</code>"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,536,* array for you.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,538,* @param cls get method from this class
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,539,* @param methodName get method with this name
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,540,* @param parameterType taking this type of parameter
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,541,* @return The accessible method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,543,"public static Method getAccessibleMethod(Class cls, String methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,544,Class parameterType) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,545,"return getAccessibleMethod(cls, methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,546,new Class[] { parameterType });
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,550,"* <p>Return an accessible method (that is, one that can be invoked via"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,551,* reflection) with given name and parameters.  If no such method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,552,"* can be found, return <code>null</code>."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,553,* This is just a convenient wrapper for
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,554,* {@link #getAccessibleMethod(Method method)}.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,556,* @param cls get method from this class
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,557,* @param methodName get method with this name
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,558,* @param parameterTypes with these parameters types
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,559,* @return The accessible method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,561,"public static Method getAccessibleMethod(Class cls, String methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,562,Class[] parameterTypes) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,563,try {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,564,"MethodDescriptor md = new MethodDescriptor(cls, methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,565,"parameterTypes, true);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,566,// Check the cache first
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,567,Method method = getCachedMethod(md);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,568,if (method != null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,569,return method;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,571,"method = getAccessibleMethod(cls.getMethod(methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,572,parameterTypes));
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,573,"cacheMethod(md, method);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,574,return method;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,575,} catch (NoSuchMethodException e) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,576,return (null);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,581,"* <p>Return an accessible method (that is, one that can be invoked via"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,582,* reflection) that implements the specified Method.  If no such method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,583,"* can be found, return <code>null</code>.</p>"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,585,* @param method The method that we wish to call
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,586,* @return The accessible method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,588,public static Method getAccessibleMethod(Method method) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,589,if (!MemberUtils.isAccessible(method)) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,590,return null;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,592,"// If the declaring class is public, we are done"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,593,Class cls = method.getDeclaringClass();
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,594,if (Modifier.isPublic(cls.getModifiers())) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,595,return method;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,597,String methodName = method.getName();
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,598,Class[] parameterTypes = method.getParameterTypes();
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,600,// Check the implemented interfaces and subinterfaces
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,601,"method = getAccessibleMethodFromInterfaceNest(cls, methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,602,parameterTypes);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,604,// Check the superclass chain
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,605,if (method == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,606,"method = getAccessibleMethodFromSuperclass(cls, methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,607,parameterTypes);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,609,return method;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,613,"* <p>Return an accessible method (that is, one that can be invoked via"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,614,* reflection) by scanning through the superclasses. If no such method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,615,"* can be found, return <code>null</code>.</p>"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,617,* @param cls Class to be checked
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,618,* @param methodName Method name of the method we wish to call
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,619,* @param parameterTypes The parameter type signatures
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,621,"private static Method getAccessibleMethodFromSuperclass(Class cls,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,622,"String methodName, Class[] parameterTypes) {"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,623,Class parentClass = cls.getSuperclass();
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,624,while (parentClass != null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,625,if (Modifier.isPublic(parentClass.getModifiers())) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,626,try {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,627,"return parentClass.getMethod(methodName, parameterTypes);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,628,} catch (NoSuchMethodException e) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,629,return null;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,632,parentClass = parentClass.getSuperclass();
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,634,return null;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,638,"* <p>Return an accessible method (that is, one that can be invoked via"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,639,"* reflection) that implements the specified method, by scanning through"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,640,* all implemented interfaces and subinterfaces.  If no such method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,641,"* can be found, return <code>null</code>.</p>"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,643,* <p> There isn't any good reason why this method must be private.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,644,* It is because there doesn't seem any reason why other classes should
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,645,* call this rather than the higher level methods.</p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,647,* @param cls Parent class for the interfaces to be checked
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,648,* @param methodName Method name of the method we wish to call
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,649,* @param parameterTypes The parameter type signatures
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,651,"private static Method getAccessibleMethodFromInterfaceNest(Class cls,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,652,"String methodName, Class[] parameterTypes) {"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,653,Method method = null;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,655,// Search up the superclass chain
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,656,for (; cls != null; cls = cls.getSuperclass()) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,658,// Check the implemented interfaces of the parent class
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,659,Class[] interfaces = cls.getInterfaces();
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,660,for (int i = 0; i < interfaces.length; i++) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,661,// Is this interface public?
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,662,if (!Modifier.isPublic(interfaces[i].getModifiers())) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,663,continue;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,665,// Does the method exist on this interface?
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,666,try {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,667,"method = interfaces[i].getDeclaredMethod(methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,668,parameterTypes);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,669,} catch (NoSuchMethodException e) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,671,"* Swallow, if no method is found after the loop then this"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,672,* method returns null.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,675,if (method != null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,676,break;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,678,// Recursively check our parent interfaces
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,679,"method = getAccessibleMethodFromInterfaceNest(interfaces[i],"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,680,"methodName, parameterTypes);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,681,if (method != null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,682,break;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,686,return method;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,690,* <p>Find an accessible method that matches the given name and has compatible parameters.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,691,* Compatible parameters mean that every method parameter is assignable from
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,692,* the given parameters.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,693,"* In other words, it finds a method with the given name"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,694,* that will take the parameters given.<p>
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,696,* <p>This method is used by
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,697,* {@link
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,698,"* #invokeMethod(Object object, String methodName, Object[] args, Class[] parameterTypes)}."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,700,* <p>This method can match primitive parameter by passing in wrapper classes.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,701,"* For example, a <code>Boolean</code> will match a primitive <code>boolean</code>"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,702,* parameter.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,704,* @param cls find method in this class
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,705,* @param methodName find method with this name
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,706,* @param parameterTypes find method with most compatible parameters
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,707,* @return The accessible method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,709,"public static Method getMatchingAccessibleMethod(Class cls,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,710,"String methodName, Class[] parameterTypes) {"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,711,"MethodDescriptor md = new MethodDescriptor(cls, methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,712,"parameterTypes, false);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,713,// Check the cache first
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,714,Method method = getCachedMethod(md);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,715,if (method != null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,716,return method;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,718,// see if we can find the method directly
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,719,// most of the time this works and it's much faster
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,720,try {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,721,"method = cls.getMethod(methodName, parameterTypes);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,722,MemberUtils.setAccessibleWorkaround(method);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,723,"cacheMethod(md, method);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,724,return method;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,725,} catch (NoSuchMethodException e) { /* SWALLOW */
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,727,// search through all methods
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,728,Method bestMatch = null;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,729,Method[] methods = cls.getMethods();
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,730,"for (int i = 0, size = methods.length; i < size; i++) {"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,731,if (methods[i].getName().equals(methodName)) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,732,// compare parameters
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,733,"if (ClassUtils.isAssignable(parameterTypes, methods[i]"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,734,".getParameterTypes(), true)) {"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,735,// get accessible version of method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,736,Method accessibleMethod = getAccessibleMethod(methods[i]);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,737,if (accessibleMethod != null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,738,if (bestMatch == null
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,739,|| MemberUtils.compareParameterTypes(
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,740,"accessibleMethod.getParameterTypes(),"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,741,"bestMatch.getParameterTypes(),"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,742,parameterTypes) < 0) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,743,bestMatch = accessibleMethod;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,749,if (bestMatch != null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,750,MemberUtils.setAccessibleWorkaround(bestMatch);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,751,"cacheMethod(md, bestMatch);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,753,return bestMatch;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,757,"* Return the method from the cache, if present."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,759,* @param md The method descriptor
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,760,* @return The cached method
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,762,private static Method getCachedMethod(MethodDescriptor md) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,763,if (cacheMethods) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,764,return (Method) cache.get(md);
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,766,return null;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,770,* Add a method to the cache.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,772,* @param md The method descriptor
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,773,* @param method The method to cache
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,775,"private static void cacheMethod(MethodDescriptor md, Method method) {"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,776,if (cacheMethods) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,777,if (method != null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,778,"cache.put(md, method);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,784,* Represents the key to looking up a Method by reflection.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,786,private static class MethodDescriptor {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,787,private Class cls;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,788,private String methodName;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,789,private Class[] paramTypes;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,790,private boolean exact;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,791,private int hashCode;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,794,* The sole constructor.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,796,"* @param cls  the class to reflect, must not be null"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,797,* @param methodName  the method name to obtain
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,798,* @param paramTypes the array of classes representing the paramater types
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,799,* @param exact whether the match has to be exact.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,801,"public MethodDescriptor(Class cls, String methodName,"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,802,"Class[] paramTypes, boolean exact) {"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,803,if (cls == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,804,"throw new IllegalArgumentException(""Class cannot be null"");"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,806,if (methodName == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,807,"throw new IllegalArgumentException(""Method Name cannot be null"");"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,809,if (paramTypes == null) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,810,paramTypes = ArrayUtils.EMPTY_CLASS_ARRAY;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,812,this.cls = cls;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,813,this.methodName = methodName;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,814,this.paramTypes = paramTypes;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,815,this.exact = exact;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,816,// is this adequate? :/
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,817,this.hashCode = methodName.length();
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,821,* Checks for equality.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,822,* @param obj object to be tested for equality
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,823,"* @return true, if the object describes the same Method."
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,825,public boolean equals(Object obj) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,826,if (!(obj instanceof MethodDescriptor)) {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,827,return false;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,829,MethodDescriptor md = (MethodDescriptor) obj;
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,831,return exact == md.exact && methodName.equals(md.methodName)
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,832,&& cls.equals(md.cls)
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,833,"&& Arrays.equals(paramTypes, md.paramTypes);"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,837,* Returns the string length of method name. I.e. if the
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,838,"* hashcodes are different, the objects are different. If the"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,839,"* hashcodes are the same, need to use the equals method to"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,840,* determine equality.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,841,* @return the string length of method name.
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,843,public int hashCode() {
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,844,return hashCode;
True,src/test/org/apache/commons/lang/AllLangTestSuite.java,src/test/org/apache/commons/lang/AllLangTestSuite.java,29,import org.apache.commons.lang.reflect.ReflectTestSuite;
True,src/test/org/apache/commons/lang/AllLangTestSuite.java,src/test/org/apache/commons/lang/AllLangTestSuite.java,68,suite.addTest(ReflectTestSuite.suite());
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,17,package org.apache.commons.lang.reflect;
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,19,import java.lang.reflect.Constructor;
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,20,import java.util.Arrays;
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,21,import java.util.HashMap;
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,22,import java.util.Map;
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,24,import junit.framework.Test;
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,25,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,26,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,28,import org.apache.commons.lang.ArrayUtils;
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,29,import org.apache.commons.lang.math.NumberUtils;
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,32,* Unit tests ConstructorUtils
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,33,* @author mbenson
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,34,* @version $Id$
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,36,public class ConstructorUtilsTest extends TestCase {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,37,public static class TestBean {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,38,private String toString;
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,40,public TestBean() {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,41,"toString = ""()"";"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,44,public TestBean(int i) {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,45,"toString = ""(int)"";"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,48,public TestBean(Integer i) {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,49,"toString = ""(Integer)"";"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,52,public TestBean(double d) {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,53,"toString = ""(double)"";"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,56,public TestBean(String s) {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,57,"toString = ""(String)"";"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,60,public TestBean(Object o) {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,61,"toString = ""(Object)"";"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,64,public String toString() {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,65,return toString;
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,69,private static class PrivateClass {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,70,public PrivateClass() {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,74,private Map classCache;
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,76,public ConstructorUtilsTest(String name) {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,77,super(name);
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,78,classCache = new HashMap();
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,82,* Run the test cases as a suite.
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,83,* @return the Test
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,85,public static Test suite() {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,86,TestSuite suite = new TestSuite(ConstructorUtilsTest.class);
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,87,"suite.setName(""ConstructorUtils Tests"");"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,88,return suite;
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,91,protected void setUp() throws Exception {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,92,super.setUp();
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,93,classCache.clear();
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,96,public void testConstructor() throws Exception {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,97,assertNotNull(MethodUtils.class.newInstance());
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,100,public void testInvokeConstructor() throws Exception {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,101,"assertEquals(""()"", ConstructorUtils.invokeConstructor(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,102,ArrayUtils.EMPTY_CLASS_ARRAY).toString());
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,103,"assertEquals(""()"", ConstructorUtils.invokeConstructor(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,104,(Class[]) null).toString());
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,105,"assertEquals(""(String)"", ConstructorUtils.invokeConstructor("
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,106,"TestBean.class, """").toString());"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,107,"assertEquals(""(Object)"", ConstructorUtils.invokeConstructor("
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,108,"TestBean.class, new Object()).toString());"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,109,"assertEquals(""(Object)"", ConstructorUtils.invokeConstructor("
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,110,"TestBean.class, Boolean.TRUE).toString());"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,111,"assertEquals(""(Integer)"", ConstructorUtils.invokeConstructor("
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,112,"TestBean.class, NumberUtils.INTEGER_ONE).toString());"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,113,"assertEquals(""(int)"", ConstructorUtils.invokeConstructor("
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,114,"TestBean.class, NumberUtils.BYTE_ONE).toString());"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,115,"assertEquals(""(double)"", ConstructorUtils.invokeConstructor("
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,116,"TestBean.class, NumberUtils.LONG_ONE).toString());"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,117,"assertEquals(""(double)"", ConstructorUtils.invokeConstructor("
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,118,"TestBean.class, NumberUtils.DOUBLE_ONE).toString());"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,121,public void testInvokeExactConstructor() throws Exception {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,122,"assertEquals(""()"", ConstructorUtils.invokeExactConstructor("
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,123,"TestBean.class, ArrayUtils.EMPTY_CLASS_ARRAY).toString());"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,124,"assertEquals(""()"", ConstructorUtils.invokeExactConstructor("
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,125,"TestBean.class, (Class[]) null).toString());"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,126,"assertEquals(""(String)"", ConstructorUtils.invokeExactConstructor("
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,127,"TestBean.class, """").toString());"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,128,"assertEquals(""(Object)"", ConstructorUtils.invokeExactConstructor("
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,129,"TestBean.class, new Object()).toString());"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,130,"assertEquals(""(Integer)"", ConstructorUtils.invokeExactConstructor("
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,131,"TestBean.class, NumberUtils.INTEGER_ONE).toString());"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,132,"assertEquals(""(double)"", ConstructorUtils.invokeExactConstructor("
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,133,"TestBean.class, new Object[] { NumberUtils.DOUBLE_ONE },"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,134,new Class[] { Double.TYPE }).toString());
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,136,try {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,137,"ConstructorUtils.invokeExactConstructor(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,138,NumberUtils.BYTE_ONE);
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,139,"fail(""should throw NoSuchMethodException"");"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,140,} catch (NoSuchMethodException e) {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,142,try {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,143,"ConstructorUtils.invokeExactConstructor(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,144,NumberUtils.LONG_ONE);
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,145,"fail(""should throw NoSuchMethodException"");"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,146,} catch (NoSuchMethodException e) {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,148,try {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,149,"ConstructorUtils.invokeExactConstructor(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,150,Boolean.TRUE);
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,151,"fail(""should throw NoSuchMethodException"");"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,152,} catch (NoSuchMethodException e) {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,156,public void testGetAccessibleConstructor() throws Exception {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,157,assertNotNull(ConstructorUtils.getAccessibleConstructor(Object.class
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,158,.getConstructor(ArrayUtils.EMPTY_CLASS_ARRAY)));
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,159,assertNull(ConstructorUtils.getAccessibleConstructor(PrivateClass.class
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,160,.getConstructor(ArrayUtils.EMPTY_CLASS_ARRAY)));
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,163,public void testGetAccessibleConstructorFromDescription() throws Exception {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,164,"assertNotNull(ConstructorUtils.getAccessibleConstructor(Object.class,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,165,ArrayUtils.EMPTY_CLASS_ARRAY));
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,166,assertNull(ConstructorUtils.getAccessibleConstructor(
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,167,"PrivateClass.class, ArrayUtils.EMPTY_CLASS_ARRAY));"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,170,public void testGetMatchingAccessibleMethod() throws Exception {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,171,"expectMatchingAccessibleConstructorParameterTypes(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,172,"ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY);"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,173,"expectMatchingAccessibleConstructorParameterTypes(TestBean.class, null,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,174,ArrayUtils.EMPTY_CLASS_ARRAY);
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,175,"expectMatchingAccessibleConstructorParameterTypes(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,176,"singletonArray(String.class), singletonArray(String.class));"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,177,"expectMatchingAccessibleConstructorParameterTypes(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,178,"singletonArray(Object.class), singletonArray(Object.class));"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,179,"expectMatchingAccessibleConstructorParameterTypes(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,180,"singletonArray(Boolean.class), singletonArray(Object.class));"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,181,"expectMatchingAccessibleConstructorParameterTypes(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,182,"singletonArray(Byte.class), singletonArray(Integer.TYPE));"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,183,"expectMatchingAccessibleConstructorParameterTypes(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,184,"singletonArray(Byte.TYPE), singletonArray(Integer.TYPE));"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,185,"expectMatchingAccessibleConstructorParameterTypes(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,186,"singletonArray(Short.class), singletonArray(Integer.TYPE));"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,187,"expectMatchingAccessibleConstructorParameterTypes(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,188,"singletonArray(Short.TYPE), singletonArray(Integer.TYPE));"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,189,"expectMatchingAccessibleConstructorParameterTypes(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,190,"singletonArray(Character.class), singletonArray(Integer.TYPE));"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,191,"expectMatchingAccessibleConstructorParameterTypes(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,192,"singletonArray(Character.TYPE), singletonArray(Integer.TYPE));"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,193,"expectMatchingAccessibleConstructorParameterTypes(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,194,"singletonArray(Integer.class), singletonArray(Integer.class));"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,195,"expectMatchingAccessibleConstructorParameterTypes(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,196,"singletonArray(Integer.TYPE), singletonArray(Integer.TYPE));"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,197,"expectMatchingAccessibleConstructorParameterTypes(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,198,"singletonArray(Long.class), singletonArray(Double.TYPE));"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,199,"expectMatchingAccessibleConstructorParameterTypes(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,200,"singletonArray(Long.TYPE), singletonArray(Double.TYPE));"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,201,"expectMatchingAccessibleConstructorParameterTypes(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,202,"singletonArray(Float.class), singletonArray(Double.TYPE));"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,203,"expectMatchingAccessibleConstructorParameterTypes(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,204,"singletonArray(Float.TYPE), singletonArray(Double.TYPE));"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,205,"expectMatchingAccessibleConstructorParameterTypes(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,206,"singletonArray(Double.class), singletonArray(Double.TYPE));"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,207,"expectMatchingAccessibleConstructorParameterTypes(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,208,"singletonArray(Double.TYPE), singletonArray(Double.TYPE));"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,211,"private void expectMatchingAccessibleConstructorParameterTypes(Class cls,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,212,"Class[] requestTypes, Class[] actualTypes) {"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,213,"Constructor c = ConstructorUtils.getMatchingAccessibleConstructor(cls,"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,214,requestTypes);
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,215,"assertTrue(Arrays.toString(c.getParameterTypes()) + "" not equals """
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,216,"+ Arrays.toString(actualTypes), Arrays.equals(actualTypes, c"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,217,.getParameterTypes()));
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,220,private Class[] singletonArray(Class c) {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,221,Class[] result = (Class[]) classCache.get(c);
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,222,if (result == null) {
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,223,result = new Class[] { c };
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,224,"classCache.put(c, result);"
True,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java,226,return result;
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,17,package org.apache.commons.lang.reflect;
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,19,import java.lang.reflect.Field;
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,21,import org.apache.commons.lang.reflect.testbed.Ambig;
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,22,import org.apache.commons.lang.reflect.testbed.Foo;
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,23,import org.apache.commons.lang.reflect.testbed.PrivatelyShadowedChild;
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,24,import org.apache.commons.lang.reflect.testbed.PublicChild;
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,25,import org.apache.commons.lang.reflect.testbed.PubliclyShadowedChild;
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,26,import org.apache.commons.lang.reflect.testbed.StaticContainer;
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,27,import org.apache.commons.lang.reflect.testbed.StaticContainerChild;
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,29,import junit.framework.Test;
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,30,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,31,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,34,* Unit tests FieldUtils
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,35,* @author mbenson
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,36,* @version $Id$
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,38,public class FieldUtilsTest extends TestCase {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,40,"static final String S = ""s"";"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,41,"static final String SS = ""ss"";"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,42,static final Integer I0 = new Integer(0);
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,43,static final Integer I1 = new Integer(1);
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,44,static final Double D0 = new Double(0.0);
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,45,static final Double D1 = new Double(1.0);
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,47,private PublicChild publicChild;
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,48,private PubliclyShadowedChild publiclyShadowedChild;
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,49,private PrivatelyShadowedChild privatelyShadowedChild;
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,50,private Class parentClass = PublicChild.class.getSuperclass();
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,53,* Run the test cases as a suite.
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,54,* @return the Test
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,56,public static Test suite() {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,57,TestSuite suite = new TestSuite(FieldUtilsTest.class);
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,58,"suite.setName(""FieldUtils Tests"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,59,return suite;
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,62,protected void setUp() throws Exception {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,63,super.setUp();
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,64,StaticContainer.reset();
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,65,publicChild = new PublicChild();
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,66,publiclyShadowedChild = new PubliclyShadowedChild();
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,67,privatelyShadowedChild = new PrivatelyShadowedChild();
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,70,public void testGetField() {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,71,"assertEquals(Foo.class, FieldUtils.getField(PublicChild.class, ""VALUE"").getDeclaringClass());"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,72,"assertEquals(parentClass, FieldUtils.getField(PublicChild.class, ""s"").getDeclaringClass());"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,73,"assertNull(FieldUtils.getField(PublicChild.class, ""b""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,74,"assertNull(FieldUtils.getField(PublicChild.class, ""i""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,75,"assertNull(FieldUtils.getField(PublicChild.class, ""d""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,76,"assertEquals(Foo.class, FieldUtils.getField(PubliclyShadowedChild.class, ""VALUE"").getDeclaringClass());"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,77,"assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, ""s"")"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,78,.getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,79,"assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, ""b"")"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,80,.getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,81,"assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, ""i"")"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,82,.getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,83,"assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, ""d"")"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,84,.getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,85,"assertEquals(Foo.class, FieldUtils.getField(PrivatelyShadowedChild.class, ""VALUE"").getDeclaringClass());"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,86,"assertEquals(parentClass, FieldUtils.getField(PrivatelyShadowedChild.class, ""s"").getDeclaringClass());"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,87,"assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, ""b""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,88,"assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, ""i""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,89,"assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, ""d""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,92,public void testGetFieldForceAccess() {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,93,"assertEquals(PublicChild.class, FieldUtils.getField(PublicChild.class, ""VALUE"", true).getDeclaringClass());"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,94,"assertEquals(parentClass, FieldUtils.getField(PublicChild.class, ""s"", true).getDeclaringClass());"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,95,"assertEquals(parentClass, FieldUtils.getField(PublicChild.class, ""b"", true).getDeclaringClass());"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,96,"assertEquals(parentClass, FieldUtils.getField(PublicChild.class, ""i"", true).getDeclaringClass());"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,97,"assertEquals(parentClass, FieldUtils.getField(PublicChild.class, ""d"", true).getDeclaringClass());"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,98,"assertEquals(Foo.class, FieldUtils.getField(PubliclyShadowedChild.class, ""VALUE"", true).getDeclaringClass());"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,99,"assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, ""s"", true)"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,100,.getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,101,"assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, ""b"", true)"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,102,.getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,103,"assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, ""i"", true)"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,104,.getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,105,"assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, ""d"", true)"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,106,.getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,107,"assertEquals(Foo.class, FieldUtils.getField(PrivatelyShadowedChild.class, ""VALUE"", true).getDeclaringClass());"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,108,"assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, ""s"", true)"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,109,.getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,110,"assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, ""b"", true)"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,111,.getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,112,"assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, ""i"", true)"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,113,.getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,114,"assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, ""d"", true)"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,115,.getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,118,public void testGetDeclaredField() {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,119,"assertNull(FieldUtils.getDeclaredField(PublicChild.class, ""VALUE""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,120,"assertNull(FieldUtils.getDeclaredField(PublicChild.class, ""s""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,121,"assertNull(FieldUtils.getDeclaredField(PublicChild.class, ""b""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,122,"assertNull(FieldUtils.getDeclaredField(PublicChild.class, ""i""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,123,"assertNull(FieldUtils.getDeclaredField(PublicChild.class, ""d""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,124,"assertNull(FieldUtils.getDeclaredField(PubliclyShadowedChild.class, ""VALUE""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,125,"assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, ""s"")"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,126,.getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,127,"assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, ""b"")"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,128,.getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,129,"assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, ""i"")"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,130,.getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,131,"assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, ""d"")"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,132,.getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,133,"assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, ""VALUE""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,134,"assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, ""s""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,135,"assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, ""b""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,136,"assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, ""i""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,137,"assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, ""d""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,140,public void testGetDeclaredFieldForceAccess() {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,141,"assertEquals(PublicChild.class, FieldUtils.getDeclaredField(PublicChild.class, ""VALUE"", true)"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,142,.getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,143,"assertNull(FieldUtils.getDeclaredField(PublicChild.class, ""s"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,144,"assertNull(FieldUtils.getDeclaredField(PublicChild.class, ""b"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,145,"assertNull(FieldUtils.getDeclaredField(PublicChild.class, ""i"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,146,"assertNull(FieldUtils.getDeclaredField(PublicChild.class, ""d"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,147,"assertNull(FieldUtils.getDeclaredField(PubliclyShadowedChild.class, ""VALUE"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,148,"assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, ""s"", true)"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,149,.getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,150,"assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, ""b"", true)"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,151,.getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,152,"assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, ""i"", true)"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,153,.getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,154,"assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, ""d"", true)"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,155,.getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,156,"assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, ""VALUE"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,157,"assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, ""s"", true)"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,158,.getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,159,"assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, ""b"", true)"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,160,.getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,161,"assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, ""i"", true)"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,162,.getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,163,"assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, ""d"", true)"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,164,.getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,167,public void testReadStaticField() throws Exception {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,168,"assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, ""VALUE"")));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,171,public void testReadStaticFieldForceAccess() throws Exception {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,172,"assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, ""VALUE"")));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,173,"assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(PublicChild.class, ""VALUE"")));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,176,public void testReadNamedStaticField() throws Exception {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,177,"assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, ""VALUE""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,178,"assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, ""VALUE""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,179,"assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, ""VALUE""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,180,"assertEquals(Foo.VALUE, FieldUtils.readStaticField(PublicChild.class, ""VALUE""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,183,public void testReadNamedStaticFieldForceAccess() throws Exception {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,184,"assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, ""VALUE"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,185,"assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, ""VALUE"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,186,"assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, ""VALUE"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,187,"assertEquals(""child"", FieldUtils.readStaticField(PublicChild.class, ""VALUE"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,190,public void testReadDeclaredNamedStaticField() throws Exception {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,191,"assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, ""VALUE""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,192,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,193,"assertEquals(""child"", FieldUtils.readDeclaredStaticField(PublicChild.class, ""VALUE""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,194,"fail(""expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,195,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,196,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,198,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,199,"assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PubliclyShadowedChild.class, ""VALUE""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,200,"fail(""expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,201,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,202,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,204,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,205,"assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, ""VALUE""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,206,"fail(""expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,207,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,208,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,212,public void testReadDeclaredNamedStaticFieldForceAccess() throws Exception {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,213,"assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, ""VALUE"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,214,"assertEquals(""child"", FieldUtils.readDeclaredStaticField(PublicChild.class, ""VALUE"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,215,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,216,"assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PubliclyShadowedChild.class, ""VALUE"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,217,"fail(""expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,218,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,219,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,221,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,222,"assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, ""VALUE"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,223,"fail(""expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,224,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,225,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,229,public void testReadField() throws Exception {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,230,"Field parentS = FieldUtils.getDeclaredField(parentClass, ""s"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,231,"assertEquals(""s"", FieldUtils.readField(parentS, publicChild));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,232,"assertEquals(""s"", FieldUtils.readField(parentS, publiclyShadowedChild));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,233,"assertEquals(""s"", FieldUtils.readField(parentS, privatelyShadowedChild));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,234,"Field parentB = FieldUtils.getDeclaredField(parentClass, ""b"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,235,"assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,236,"assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,237,"assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,238,"Field parentI = FieldUtils.getDeclaredField(parentClass, ""i"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,239,"assertEquals(I0, FieldUtils.readField(parentI, publicChild));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,240,"assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,241,"assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,242,"Field parentD = FieldUtils.getDeclaredField(parentClass, ""d"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,243,"assertEquals(D0, FieldUtils.readField(parentD, publicChild));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,244,"assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,245,"assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,248,public void testReadFieldForceAccess() throws Exception {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,249,"Field parentS = FieldUtils.getDeclaredField(parentClass, ""s"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,250,parentS.setAccessible(false);
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,251,"assertEquals(""s"", FieldUtils.readField(parentS, publicChild, true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,252,"assertEquals(""s"", FieldUtils.readField(parentS, publiclyShadowedChild, true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,253,"assertEquals(""s"", FieldUtils.readField(parentS, privatelyShadowedChild, true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,254,"Field parentB = FieldUtils.getDeclaredField(parentClass, ""b"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,255,parentB.setAccessible(false);
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,256,"assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild, true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,257,"assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild, true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,258,"assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild, true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,259,"Field parentI = FieldUtils.getDeclaredField(parentClass, ""i"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,260,parentI.setAccessible(false);
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,261,"assertEquals(I0, FieldUtils.readField(parentI, publicChild, true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,262,"assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild, true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,263,"assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild, true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,264,"Field parentD = FieldUtils.getDeclaredField(parentClass, ""d"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,265,parentD.setAccessible(false);
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,266,"assertEquals(D0, FieldUtils.readField(parentD, publicChild, true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,267,"assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild, true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,268,"assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild, true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,271,public void testReadNamedField() throws Exception {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,272,"assertEquals(""s"", FieldUtils.readField(publicChild, ""s""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,273,"assertEquals(""ss"", FieldUtils.readField(publiclyShadowedChild, ""s""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,274,"assertEquals(""s"", FieldUtils.readField(privatelyShadowedChild, ""s""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,275,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,276,"assertEquals(Boolean.FALSE, FieldUtils.readField(publicChild, ""b""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,277,"fail(""expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,278,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,279,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,281,"assertEquals(Boolean.TRUE, FieldUtils.readField(publiclyShadowedChild, ""b""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,282,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,283,"assertEquals(Boolean.FALSE, FieldUtils.readField(privatelyShadowedChild, ""b""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,284,"fail(""expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,285,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,286,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,288,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,289,"assertEquals(I0, FieldUtils.readField(publicChild, ""i""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,290,"fail(""expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,291,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,292,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,294,"assertEquals(I1, FieldUtils.readField(publiclyShadowedChild, ""i""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,295,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,296,"assertEquals(I0, FieldUtils.readField(privatelyShadowedChild, ""i""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,297,"fail(""expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,298,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,299,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,301,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,302,"assertEquals(D0, FieldUtils.readField(publicChild, ""d""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,303,"fail(""expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,304,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,305,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,307,"assertEquals(D1, FieldUtils.readField(publiclyShadowedChild, ""d""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,308,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,309,"assertEquals(D0, FieldUtils.readField(privatelyShadowedChild, ""d""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,310,"fail(""expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,311,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,312,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,316,public void testReadNamedFieldForceAccess() throws Exception {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,317,"assertEquals(""s"", FieldUtils.readField(publicChild, ""s"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,318,"assertEquals(""ss"", FieldUtils.readField(publiclyShadowedChild, ""s"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,319,"assertEquals(""ss"", FieldUtils.readField(privatelyShadowedChild, ""s"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,320,"assertEquals(Boolean.FALSE, FieldUtils.readField(publicChild, ""b"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,321,"assertEquals(Boolean.TRUE, FieldUtils.readField(publiclyShadowedChild, ""b"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,322,"assertEquals(Boolean.TRUE, FieldUtils.readField(privatelyShadowedChild, ""b"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,323,"assertEquals(I0, FieldUtils.readField(publicChild, ""i"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,324,"assertEquals(I1, FieldUtils.readField(publiclyShadowedChild, ""i"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,325,"assertEquals(I1, FieldUtils.readField(privatelyShadowedChild, ""i"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,326,"assertEquals(D0, FieldUtils.readField(publicChild, ""d"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,327,"assertEquals(D1, FieldUtils.readField(publiclyShadowedChild, ""d"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,328,"assertEquals(D1, FieldUtils.readField(privatelyShadowedChild, ""d"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,331,public void testReadDeclaredNamedField() throws Exception {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,332,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,333,"assertEquals(""s"", FieldUtils.readDeclaredField(publicChild, ""s""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,334,"fail(""expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,335,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,336,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,338,"assertEquals(""ss"", FieldUtils.readDeclaredField(publiclyShadowedChild, ""s""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,339,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,340,"assertEquals(""s"", FieldUtils.readDeclaredField(privatelyShadowedChild, ""s""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,341,"fail(""expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,342,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,343,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,345,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,346,"assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publicChild, ""b""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,347,"fail(""expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,348,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,349,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,351,"assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, ""b""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,352,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,353,"assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, ""b""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,354,"fail(""expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,355,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,356,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,358,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,359,"assertEquals(I0, FieldUtils.readDeclaredField(publicChild, ""i""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,360,"fail(""expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,361,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,362,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,364,"assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, ""i""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,365,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,366,"assertEquals(I0, FieldUtils.readDeclaredField(privatelyShadowedChild, ""i""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,367,"fail(""expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,368,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,369,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,371,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,372,"assertEquals(D0, FieldUtils.readDeclaredField(publicChild, ""d""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,373,"fail(""expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,374,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,375,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,377,"assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, ""d""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,378,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,379,"assertEquals(D0, FieldUtils.readDeclaredField(privatelyShadowedChild, ""d""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,380,"fail(""expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,381,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,382,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,386,public void testReadDeclaredNamedFieldForceAccess() throws Exception {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,387,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,388,"assertEquals(""s"", FieldUtils.readDeclaredField(publicChild, ""s"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,389,"fail(""expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,390,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,391,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,393,"assertEquals(""ss"", FieldUtils.readDeclaredField(publiclyShadowedChild, ""s"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,394,"assertEquals(""ss"", FieldUtils.readDeclaredField(privatelyShadowedChild, ""s"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,395,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,396,"assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publicChild, ""b"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,397,"fail(""expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,398,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,399,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,401,"assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, ""b"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,402,"assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(privatelyShadowedChild, ""b"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,403,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,404,"assertEquals(I0, FieldUtils.readDeclaredField(publicChild, ""i"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,405,"fail(""expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,406,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,407,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,409,"assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, ""i"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,410,"assertEquals(I1, FieldUtils.readDeclaredField(privatelyShadowedChild, ""i"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,411,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,412,"assertEquals(D0, FieldUtils.readDeclaredField(publicChild, ""d"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,413,"fail(""expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,414,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,415,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,417,"assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, ""d"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,418,"assertEquals(D1, FieldUtils.readDeclaredField(privatelyShadowedChild, ""d"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,421,public void testWriteStaticField() throws Exception {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,422,"Field field = StaticContainer.class.getDeclaredField(""mutablePublic"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,423,"FieldUtils.writeStaticField(field, ""new"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,424,"assertEquals(""new"", StaticContainer.mutablePublic);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,425,"field = StaticContainer.class.getDeclaredField(""mutableProtected"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,426,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,427,"FieldUtils.writeStaticField(field, ""new"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,428,"fail(""Expected IllegalAccessException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,429,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,430,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,432,"field = StaticContainer.class.getDeclaredField(""mutablePackage"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,433,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,434,"FieldUtils.writeStaticField(field, ""new"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,435,"fail(""Expected IllegalAccessException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,436,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,437,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,439,"field = StaticContainer.class.getDeclaredField(""mutablePrivate"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,440,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,441,"FieldUtils.writeStaticField(field, ""new"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,442,"fail(""Expected IllegalAccessException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,443,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,444,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,446,"field = StaticContainer.class.getDeclaredField(""IMMUTABLE_PUBLIC"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,447,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,448,"FieldUtils.writeStaticField(field, ""new"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,449,"fail(""Expected IllegalAccessException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,450,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,451,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,453,"field = StaticContainer.class.getDeclaredField(""IMMUTABLE_PROTECTED"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,454,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,455,"FieldUtils.writeStaticField(field, ""new"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,456,"fail(""Expected IllegalAccessException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,457,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,458,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,460,"field = StaticContainer.class.getDeclaredField(""IMMUTABLE_PACKAGE"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,461,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,462,"FieldUtils.writeStaticField(field, ""new"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,463,"fail(""Expected IllegalAccessException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,464,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,465,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,467,"field = StaticContainer.class.getDeclaredField(""IMMUTABLE_PRIVATE"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,468,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,469,"FieldUtils.writeStaticField(field, ""new"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,470,"fail(""Expected IllegalAccessException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,471,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,472,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,476,public void testWriteStaticFieldForceAccess() throws Exception {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,477,"Field field = StaticContainer.class.getDeclaredField(""mutablePublic"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,478,"FieldUtils.writeStaticField(field, ""new"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,479,"assertEquals(""new"", StaticContainer.mutablePublic);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,480,"field = StaticContainer.class.getDeclaredField(""mutableProtected"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,481,"FieldUtils.writeStaticField(field, ""new"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,482,"assertEquals(""new"", StaticContainer.getMutableProtected());"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,483,"field = StaticContainer.class.getDeclaredField(""mutablePackage"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,484,"FieldUtils.writeStaticField(field, ""new"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,485,"assertEquals(""new"", StaticContainer.getMutablePackage());"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,486,"field = StaticContainer.class.getDeclaredField(""mutablePrivate"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,487,"FieldUtils.writeStaticField(field, ""new"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,488,"assertEquals(""new"", StaticContainer.getMutablePrivate());"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,489,"field = StaticContainer.class.getDeclaredField(""IMMUTABLE_PUBLIC"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,490,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,491,"FieldUtils.writeStaticField(field, ""new"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,492,"fail(""Expected IllegalAccessException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,493,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,494,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,496,"field = StaticContainer.class.getDeclaredField(""IMMUTABLE_PROTECTED"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,497,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,498,"FieldUtils.writeStaticField(field, ""new"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,499,"fail(""Expected IllegalAccessException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,500,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,501,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,503,"field = StaticContainer.class.getDeclaredField(""IMMUTABLE_PACKAGE"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,504,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,505,"FieldUtils.writeStaticField(field, ""new"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,506,"fail(""Expected IllegalAccessException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,507,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,508,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,510,"field = StaticContainer.class.getDeclaredField(""IMMUTABLE_PRIVATE"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,511,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,512,"FieldUtils.writeStaticField(field, ""new"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,513,"fail(""Expected IllegalAccessException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,514,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,515,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,519,public void testWriteNamedStaticField() throws Exception {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,520,"FieldUtils.writeStaticField(StaticContainerChild.class, ""mutablePublic"", ""new"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,521,"assertEquals(""new"", StaticContainer.mutablePublic);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,522,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,523,"FieldUtils.writeStaticField(StaticContainerChild.class, ""mutableProtected"", ""new"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,524,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,525,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,526,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,528,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,529,"FieldUtils.writeStaticField(StaticContainerChild.class, ""mutablePackage"", ""new"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,530,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,531,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,532,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,534,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,535,"FieldUtils.writeStaticField(StaticContainerChild.class, ""mutablePrivate"", ""new"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,536,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,537,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,538,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,540,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,541,"FieldUtils.writeStaticField(StaticContainerChild.class, ""IMMUTABLE_PUBLIC"", ""new"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,542,"fail(""Expected IllegalAccessException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,543,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,544,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,546,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,547,"FieldUtils.writeStaticField(StaticContainerChild.class, ""IMMUTABLE_PROTECTED"", ""new"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,548,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,549,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,550,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,552,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,553,"FieldUtils.writeStaticField(StaticContainerChild.class, ""IMMUTABLE_PACKAGE"", ""new"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,554,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,555,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,556,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,558,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,559,"FieldUtils.writeStaticField(StaticContainerChild.class, ""IMMUTABLE_PRIVATE"", ""new"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,560,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,561,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,562,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,566,public void testWriteNamedStaticFieldForceAccess() throws Exception {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,567,"FieldUtils.writeStaticField(StaticContainerChild.class, ""mutablePublic"", ""new"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,568,"assertEquals(""new"", StaticContainer.mutablePublic);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,569,"FieldUtils.writeStaticField(StaticContainerChild.class, ""mutableProtected"", ""new"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,570,"assertEquals(""new"", StaticContainer.getMutableProtected());"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,571,"FieldUtils.writeStaticField(StaticContainerChild.class, ""mutablePackage"", ""new"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,572,"assertEquals(""new"", StaticContainer.getMutablePackage());"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,573,"FieldUtils.writeStaticField(StaticContainerChild.class, ""mutablePrivate"", ""new"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,574,"assertEquals(""new"", StaticContainer.getMutablePrivate());"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,575,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,576,"FieldUtils.writeStaticField(StaticContainerChild.class, ""IMMUTABLE_PUBLIC"", ""new"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,577,"fail(""Expected IllegalAccessException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,578,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,579,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,581,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,582,"FieldUtils.writeStaticField(StaticContainerChild.class, ""IMMUTABLE_PROTECTED"", ""new"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,583,"fail(""Expected IllegalAccessException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,584,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,585,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,587,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,588,"FieldUtils.writeStaticField(StaticContainerChild.class, ""IMMUTABLE_PACKAGE"", ""new"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,589,"fail(""Expected IllegalAccessException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,590,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,591,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,593,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,594,"FieldUtils.writeStaticField(StaticContainerChild.class, ""IMMUTABLE_PRIVATE"", ""new"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,595,"fail(""Expected IllegalAccessException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,596,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,597,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,601,public void testWriteDeclaredNamedStaticField() throws Exception {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,602,"FieldUtils.writeStaticField(StaticContainer.class, ""mutablePublic"", ""new"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,603,"assertEquals(""new"", StaticContainer.mutablePublic);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,604,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,605,"FieldUtils.writeDeclaredStaticField(StaticContainer.class, ""mutableProtected"", ""new"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,606,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,607,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,608,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,610,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,611,"FieldUtils.writeDeclaredStaticField(StaticContainer.class, ""mutablePackage"", ""new"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,612,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,613,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,614,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,616,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,617,"FieldUtils.writeDeclaredStaticField(StaticContainer.class, ""mutablePrivate"", ""new"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,618,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,619,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,620,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,622,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,623,"FieldUtils.writeDeclaredStaticField(StaticContainer.class, ""IMMUTABLE_PUBLIC"", ""new"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,624,"fail(""Expected IllegalAccessException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,625,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,626,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,628,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,629,"FieldUtils.writeDeclaredStaticField(StaticContainer.class, ""IMMUTABLE_PROTECTED"", ""new"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,630,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,631,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,632,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,634,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,635,"FieldUtils.writeDeclaredStaticField(StaticContainer.class, ""IMMUTABLE_PACKAGE"", ""new"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,636,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,637,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,638,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,640,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,641,"FieldUtils.writeDeclaredStaticField(StaticContainer.class, ""IMMUTABLE_PRIVATE"", ""new"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,642,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,643,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,644,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,648,public void testWriteDeclaredNamedStaticFieldForceAccess() throws Exception {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,649,"FieldUtils.writeDeclaredStaticField(StaticContainer.class, ""mutablePublic"", ""new"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,650,"assertEquals(""new"", StaticContainer.mutablePublic);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,651,"FieldUtils.writeDeclaredStaticField(StaticContainer.class, ""mutableProtected"", ""new"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,652,"assertEquals(""new"", StaticContainer.getMutableProtected());"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,653,"FieldUtils.writeDeclaredStaticField(StaticContainer.class, ""mutablePackage"", ""new"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,654,"assertEquals(""new"", StaticContainer.getMutablePackage());"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,655,"FieldUtils.writeDeclaredStaticField(StaticContainer.class, ""mutablePrivate"", ""new"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,656,"assertEquals(""new"", StaticContainer.getMutablePrivate());"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,657,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,658,"FieldUtils.writeDeclaredStaticField(StaticContainer.class, ""IMMUTABLE_PUBLIC"", ""new"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,659,"fail(""Expected IllegalAccessException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,660,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,661,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,663,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,664,"FieldUtils.writeDeclaredStaticField(StaticContainer.class, ""IMMUTABLE_PROTECTED"", ""new"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,665,"fail(""Expected IllegalAccessException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,666,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,667,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,669,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,670,"FieldUtils.writeDeclaredStaticField(StaticContainer.class, ""IMMUTABLE_PACKAGE"", ""new"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,671,"fail(""Expected IllegalAccessException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,672,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,673,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,675,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,676,"FieldUtils.writeDeclaredStaticField(StaticContainer.class, ""IMMUTABLE_PRIVATE"", ""new"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,677,"fail(""Expected IllegalAccessException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,678,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,679,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,683,public void testWriteField() throws Exception {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,684,"Field field = parentClass.getDeclaredField(""s"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,685,"FieldUtils.writeField(field, publicChild, ""S"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,686,"assertEquals(""S"", field.get(publicChild));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,687,"field = parentClass.getDeclaredField(""b"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,688,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,689,"FieldUtils.writeField(field, publicChild, Boolean.TRUE);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,690,"fail(""Expected IllegalAccessException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,691,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,692,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,694,"field = parentClass.getDeclaredField(""i"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,695,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,696,"FieldUtils.writeField(field, publicChild, new Integer(Integer.MAX_VALUE));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,697,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,698,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,700,"field = parentClass.getDeclaredField(""d"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,701,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,702,"FieldUtils.writeField(field, publicChild, new Double(Double.MAX_VALUE));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,703,} catch (IllegalAccessException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,704,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,708,public void testWriteFieldForceAccess() throws Exception {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,709,"Field field = parentClass.getDeclaredField(""s"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,710,"FieldUtils.writeField(field, publicChild, ""S"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,711,"assertEquals(""S"", field.get(publicChild));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,712,"field = parentClass.getDeclaredField(""b"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,713,"FieldUtils.writeField(field, publicChild, Boolean.TRUE, true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,714,"assertEquals(Boolean.TRUE, field.get(publicChild));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,715,"field = parentClass.getDeclaredField(""i"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,716,"FieldUtils.writeField(field, publicChild, new Integer(Integer.MAX_VALUE), true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,717,"assertEquals(new Integer(Integer.MAX_VALUE), field.get(publicChild));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,718,"field = parentClass.getDeclaredField(""d"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,719,"FieldUtils.writeField(field, publicChild, new Double(Double.MAX_VALUE), true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,720,"assertEquals(new Double(Double.MAX_VALUE), field.get(publicChild));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,723,public void testWriteNamedField() throws Exception {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,724,"FieldUtils.writeField(publicChild, ""s"", ""S"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,725,"assertEquals(""S"", FieldUtils.readField(publicChild, ""s""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,726,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,727,"FieldUtils.writeField(publicChild, ""b"", Boolean.TRUE);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,728,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,729,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,730,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,732,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,733,"FieldUtils.writeField(publicChild, ""i"", new Integer(1));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,734,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,735,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,736,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,738,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,739,"FieldUtils.writeField(publicChild, ""d"", new Double(1.0));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,740,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,741,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,742,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,745,"FieldUtils.writeField(publiclyShadowedChild, ""s"", ""S"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,746,"assertEquals(""S"", FieldUtils.readField(publiclyShadowedChild, ""s""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,747,"FieldUtils.writeField(publiclyShadowedChild, ""b"", Boolean.FALSE);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,748,"assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, ""b""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,749,"FieldUtils.writeField(publiclyShadowedChild, ""i"", new Integer(0));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,750,"assertEquals(new Integer(0), FieldUtils.readField(publiclyShadowedChild, ""i""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,751,"FieldUtils.writeField(publiclyShadowedChild, ""d"", new Double(0.0));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,752,"assertEquals(new Double(0.0), FieldUtils.readField(publiclyShadowedChild, ""d""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,754,"FieldUtils.writeField(privatelyShadowedChild, ""s"", ""S"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,755,"assertEquals(""S"", FieldUtils.readField(privatelyShadowedChild, ""s""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,756,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,757,"FieldUtils.writeField(privatelyShadowedChild, ""b"", Boolean.TRUE);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,758,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,759,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,760,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,762,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,763,"FieldUtils.writeField(privatelyShadowedChild, ""i"", new Integer(1));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,764,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,765,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,766,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,768,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,769,"FieldUtils.writeField(privatelyShadowedChild, ""d"", new Double(1.0));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,770,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,771,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,772,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,776,public void testWriteNamedFieldForceAccess() throws Exception {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,777,"FieldUtils.writeField(publicChild, ""s"", ""S"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,778,"assertEquals(""S"", FieldUtils.readField(publicChild, ""s"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,779,"FieldUtils.writeField(publicChild, ""b"", Boolean.TRUE, true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,780,"assertEquals(Boolean.TRUE, FieldUtils.readField(publicChild, ""b"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,781,"FieldUtils.writeField(publicChild, ""i"", new Integer(1), true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,782,"assertEquals(new Integer(1), FieldUtils.readField(publicChild, ""i"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,783,"FieldUtils.writeField(publicChild, ""d"", new Double(1.0), true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,784,"assertEquals(new Double(1.0), FieldUtils.readField(publicChild, ""d"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,786,"FieldUtils.writeField(publiclyShadowedChild, ""s"", ""S"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,787,"assertEquals(""S"", FieldUtils.readField(publiclyShadowedChild, ""s"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,788,"FieldUtils.writeField(publiclyShadowedChild, ""b"", Boolean.FALSE, true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,789,"assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, ""b"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,790,"FieldUtils.writeField(publiclyShadowedChild, ""i"", new Integer(0), true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,791,"assertEquals(new Integer(0), FieldUtils.readField(publiclyShadowedChild, ""i"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,792,"FieldUtils.writeField(publiclyShadowedChild, ""d"", new Double(0.0), true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,793,"assertEquals(new Double(0.0), FieldUtils.readField(publiclyShadowedChild, ""d"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,795,"FieldUtils.writeField(privatelyShadowedChild, ""s"", ""S"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,796,"assertEquals(""S"", FieldUtils.readField(privatelyShadowedChild, ""s"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,797,"FieldUtils.writeField(privatelyShadowedChild, ""b"", Boolean.FALSE, true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,798,"assertEquals(Boolean.FALSE, FieldUtils.readField(privatelyShadowedChild, ""b"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,799,"FieldUtils.writeField(privatelyShadowedChild, ""i"", new Integer(0), true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,800,"assertEquals(new Integer(0), FieldUtils.readField(privatelyShadowedChild, ""i"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,801,"FieldUtils.writeField(privatelyShadowedChild, ""d"", new Double(0.0), true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,802,"assertEquals(new Double(0.0), FieldUtils.readField(privatelyShadowedChild, ""d"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,805,public void testWriteDeclaredNamedField() throws Exception {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,806,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,807,"FieldUtils.writeDeclaredField(publicChild, ""s"", ""S"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,808,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,809,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,810,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,812,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,813,"FieldUtils.writeDeclaredField(publicChild, ""b"", Boolean.TRUE);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,814,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,815,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,816,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,818,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,819,"FieldUtils.writeDeclaredField(publicChild, ""i"", new Integer(1));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,820,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,821,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,822,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,824,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,825,"FieldUtils.writeDeclaredField(publicChild, ""d"", new Double(1.0));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,826,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,827,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,828,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,831,"FieldUtils.writeDeclaredField(publiclyShadowedChild, ""s"", ""S"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,832,"assertEquals(""S"", FieldUtils.readDeclaredField(publiclyShadowedChild, ""s""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,833,"FieldUtils.writeDeclaredField(publiclyShadowedChild, ""b"", Boolean.FALSE);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,834,"assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, ""b""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,835,"FieldUtils.writeDeclaredField(publiclyShadowedChild, ""i"", new Integer(0));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,836,"assertEquals(new Integer(0), FieldUtils.readDeclaredField(publiclyShadowedChild, ""i""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,837,"FieldUtils.writeDeclaredField(publiclyShadowedChild, ""d"", new Double(0.0));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,838,"assertEquals(new Double(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, ""d""));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,840,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,841,"FieldUtils.writeDeclaredField(privatelyShadowedChild, ""s"", ""S"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,842,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,843,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,844,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,846,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,847,"FieldUtils.writeDeclaredField(privatelyShadowedChild, ""b"", Boolean.TRUE);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,848,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,849,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,850,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,852,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,853,"FieldUtils.writeDeclaredField(privatelyShadowedChild, ""i"", new Integer(1));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,854,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,855,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,856,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,858,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,859,"FieldUtils.writeDeclaredField(privatelyShadowedChild, ""d"", new Double(1.0));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,860,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,861,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,862,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,866,public void testWriteDeclaredNamedFieldForceAccess() throws Exception {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,867,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,868,"FieldUtils.writeDeclaredField(publicChild, ""s"", ""S"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,869,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,870,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,871,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,873,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,874,"FieldUtils.writeDeclaredField(publicChild, ""b"", Boolean.TRUE, true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,875,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,876,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,877,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,879,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,880,"FieldUtils.writeDeclaredField(publicChild, ""i"", new Integer(1), true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,881,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,882,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,883,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,885,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,886,"FieldUtils.writeDeclaredField(publicChild, ""d"", new Double(1.0), true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,887,"fail(""Expected IllegalArgumentException"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,888,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,889,// pass
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,892,"FieldUtils.writeDeclaredField(publiclyShadowedChild, ""s"", ""S"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,893,"assertEquals(""S"", FieldUtils.readDeclaredField(publiclyShadowedChild, ""s"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,894,"FieldUtils.writeDeclaredField(publiclyShadowedChild, ""b"", Boolean.FALSE, true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,895,"assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, ""b"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,896,"FieldUtils.writeDeclaredField(publiclyShadowedChild, ""i"", new Integer(0), true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,897,"assertEquals(new Integer(0), FieldUtils.readDeclaredField(publiclyShadowedChild, ""i"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,898,"FieldUtils.writeDeclaredField(publiclyShadowedChild, ""d"", new Double(0.0), true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,899,"assertEquals(new Double(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, ""d"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,901,"FieldUtils.writeDeclaredField(privatelyShadowedChild, ""s"", ""S"", true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,902,"assertEquals(""S"", FieldUtils.readDeclaredField(privatelyShadowedChild, ""s"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,903,"FieldUtils.writeDeclaredField(privatelyShadowedChild, ""b"", Boolean.FALSE, true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,904,"assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, ""b"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,905,"FieldUtils.writeDeclaredField(privatelyShadowedChild, ""i"", new Integer(0), true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,906,"assertEquals(new Integer(0), FieldUtils.readDeclaredField(privatelyShadowedChild, ""i"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,907,"FieldUtils.writeDeclaredField(privatelyShadowedChild, ""d"", new Double(0.0), true);"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,908,"assertEquals(new Double(0.0), FieldUtils.readDeclaredField(privatelyShadowedChild, ""d"", true));"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,911,public void testAmbig() {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,912,try {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,913,"FieldUtils.getField(Ambig.class, ""VALUE"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,914,"fail(""should have failed on interface field ambiguity"");"
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,915,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java,916,// pass
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,17,package org.apache.commons.lang.reflect;
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,19,import java.lang.reflect.Method;
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,20,import java.util.Arrays;
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,21,import java.util.HashMap;
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,22,import java.util.Map;
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,24,import junit.framework.Test;
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,25,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,26,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,28,import org.apache.commons.lang.ArrayUtils;
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,29,import org.apache.commons.lang.math.NumberUtils;
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,30,import org.apache.commons.lang.mutable.Mutable;
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,31,import org.apache.commons.lang.mutable.MutableObject;
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,34,* Unit tests MethodUtils
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,35,* @author mbenson
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,36,* @version $Id$
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,38,public class MethodUtilsTest extends TestCase {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,39,public static class TestBean {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,41,public static String bar() {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,42,"return ""bar()"";"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,45,public static String bar(int i) {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,46,"return ""bar(int)"";"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,49,public static String bar(Integer i) {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,50,"return ""bar(Integer)"";"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,53,public static String bar(double d) {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,54,"return ""bar(double)"";"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,57,public static String bar(String s) {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,58,"return ""bar(String)"";"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,61,public static String bar(Object o) {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,62,"return ""bar(Object)"";"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,65,public String foo() {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,66,"return ""foo()"";"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,69,public String foo(int i) {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,70,"return ""foo(int)"";"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,73,public String foo(Integer i) {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,74,"return ""foo(Integer)"";"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,77,public String foo(double d) {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,78,"return ""foo(double)"";"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,81,public String foo(String s) {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,82,"return ""foo(String)"";"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,85,public String foo(Object o) {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,86,"return ""foo(Object)"";"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,90,private static class TestMutable implements Mutable {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,91,public Object getValue() {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,92,return null;
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,95,public void setValue(Object value) {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,99,private TestBean testBean;
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,100,private Map classCache;
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,102,public MethodUtilsTest(String name) {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,103,super(name);
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,104,classCache = new HashMap();
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,108,* Run the test cases as a suite.
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,109,* @return the Test
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,111,public static Test suite() {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,112,TestSuite suite = new TestSuite(MethodUtilsTest.class);
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,113,"suite.setName(""MethodUtils Tests"");"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,114,return suite;
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,117,protected void setUp() throws Exception {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,118,super.setUp();
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,119,testBean = new TestBean();
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,120,classCache.clear();
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,123,public void testConstructor() throws Exception {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,124,assertNotNull(MethodUtils.class.newInstance());
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,127,public void testInvokeMethod() throws Exception {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,128,"assertEquals(""foo()"", MethodUtils.invokeMethod(testBean, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,129,ArrayUtils.EMPTY_CLASS_ARRAY));
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,130,"assertEquals(""foo()"", MethodUtils.invokeMethod(testBean, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,131,(Class[]) null));
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,132,"assertEquals(""foo(String)"", MethodUtils.invokeMethod(testBean, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,134,"assertEquals(""foo(Object)"", MethodUtils.invokeMethod(testBean, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,135,new Object()));
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,136,"assertEquals(""foo(Object)"", MethodUtils.invokeMethod(testBean, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,137,Boolean.TRUE));
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,138,"assertEquals(""foo(Integer)"", MethodUtils.invokeMethod(testBean, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,139,NumberUtils.INTEGER_ONE));
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,140,"assertEquals(""foo(int)"", MethodUtils.invokeMethod(testBean, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,141,NumberUtils.BYTE_ONE));
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,142,"assertEquals(""foo(double)"", MethodUtils.invokeMethod(testBean, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,143,NumberUtils.LONG_ONE));
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,144,"assertEquals(""foo(double)"", MethodUtils.invokeMethod(testBean, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,145,NumberUtils.DOUBLE_ONE));
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,148,public void testInvokeExactMethod() throws Exception {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,149,"assertEquals(""foo()"", MethodUtils.invokeMethod(testBean, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,150,ArrayUtils.EMPTY_CLASS_ARRAY));
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,151,"assertEquals(""foo()"", MethodUtils.invokeMethod(testBean, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,152,(Class[]) null));
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,153,"assertEquals(""foo(String)"", MethodUtils.invokeExactMethod(testBean,"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,154,"""foo"", """"));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,155,"assertEquals(""foo(Object)"", MethodUtils.invokeExactMethod(testBean,"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,156,"""foo"", new Object()));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,157,"assertEquals(""foo(Integer)"", MethodUtils.invokeExactMethod(testBean,"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,158,"""foo"", NumberUtils.INTEGER_ONE));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,159,"assertEquals(""foo(double)"", MethodUtils.invokeExactMethod(testBean,"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,160,"""foo"", new Object[] { NumberUtils.DOUBLE_ONE },"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,161,new Class[] { Double.TYPE }));
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,163,try {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,164,MethodUtils
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,165,".invokeExactMethod(testBean, ""foo"", NumberUtils.BYTE_ONE);"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,166,"fail(""should throw NoSuchMethodException"");"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,167,} catch (NoSuchMethodException e) {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,169,try {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,170,MethodUtils
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,171,".invokeExactMethod(testBean, ""foo"", NumberUtils.LONG_ONE);"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,172,"fail(""should throw NoSuchMethodException"");"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,173,} catch (NoSuchMethodException e) {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,175,try {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,176,"MethodUtils.invokeExactMethod(testBean, ""foo"", Boolean.TRUE);"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,177,"fail(""should throw NoSuchMethodException"");"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,178,} catch (NoSuchMethodException e) {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,182,public void testInvokeStaticMethod() throws Exception {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,183,"assertEquals(""bar()"", MethodUtils.invokeStaticMethod(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,184,"""bar"", ArrayUtils.EMPTY_CLASS_ARRAY));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,185,"assertEquals(""bar()"", MethodUtils.invokeStaticMethod(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,186,"""bar"", (Class[]) null));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,187,"assertEquals(""bar(String)"", MethodUtils.invokeStaticMethod("
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,188,"TestBean.class, ""bar"", """"));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,189,"assertEquals(""bar(Object)"", MethodUtils.invokeStaticMethod("
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,190,"TestBean.class, ""bar"", new Object()));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,191,"assertEquals(""bar(Object)"", MethodUtils.invokeStaticMethod("
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,192,"TestBean.class, ""bar"", Boolean.TRUE));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,193,"assertEquals(""bar(Integer)"", MethodUtils.invokeStaticMethod("
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,194,"TestBean.class, ""bar"", NumberUtils.INTEGER_ONE));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,195,"assertEquals(""bar(int)"", MethodUtils.invokeStaticMethod(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,196,"""bar"", NumberUtils.BYTE_ONE));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,197,"assertEquals(""bar(double)"", MethodUtils.invokeStaticMethod("
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,198,"TestBean.class, ""bar"", NumberUtils.LONG_ONE));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,199,"assertEquals(""bar(double)"", MethodUtils.invokeStaticMethod("
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,200,"TestBean.class, ""bar"", NumberUtils.DOUBLE_ONE));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,203,public void testInvokeExactStaticMethod() throws Exception {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,204,"assertEquals(""bar()"", MethodUtils.invokeStaticMethod(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,205,"""bar"", ArrayUtils.EMPTY_CLASS_ARRAY));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,206,"assertEquals(""bar()"", MethodUtils.invokeStaticMethod(TestBean.class,"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,207,"""bar"", (Class[]) null));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,208,"assertEquals(""bar(String)"", MethodUtils.invokeExactStaticMethod("
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,209,"TestBean.class, ""bar"", """"));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,210,"assertEquals(""bar(Object)"", MethodUtils.invokeExactStaticMethod("
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,211,"TestBean.class, ""bar"", new Object()));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,212,"assertEquals(""bar(Integer)"", MethodUtils.invokeExactStaticMethod("
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,213,"TestBean.class, ""bar"", NumberUtils.INTEGER_ONE));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,214,"assertEquals(""bar(double)"", MethodUtils.invokeExactStaticMethod("
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,215,"TestBean.class, ""bar"", new Object[] { NumberUtils.DOUBLE_ONE },"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,216,new Class[] { Double.TYPE }));
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,218,try {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,219,"MethodUtils.invokeExactStaticMethod(TestBean.class, ""bar"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,220,NumberUtils.BYTE_ONE);
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,221,"fail(""should throw NoSuchMethodException"");"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,222,} catch (NoSuchMethodException e) {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,224,try {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,225,"MethodUtils.invokeExactStaticMethod(TestBean.class, ""bar"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,226,NumberUtils.LONG_ONE);
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,227,"fail(""should throw NoSuchMethodException"");"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,228,} catch (NoSuchMethodException e) {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,230,try {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,231,"MethodUtils.invokeExactStaticMethod(TestBean.class, ""bar"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,232,Boolean.TRUE);
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,233,"fail(""should throw NoSuchMethodException"");"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,234,} catch (NoSuchMethodException e) {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,238,public void testGetAccessibleInterfaceMethod() throws Exception {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,240,"Class[][] p = { ArrayUtils.EMPTY_CLASS_ARRAY, null };"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,241,for (int i = 0; i < p.length; i++) {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,242,"Method method = TestMutable.class.getMethod(""getValue"", p[i]);"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,243,Method accessibleMethod = MethodUtils.getAccessibleMethod(method);
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,244,"assertNotSame(accessibleMethod, method);"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,245,"assertSame(Mutable.class, accessibleMethod.getDeclaringClass());"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,249,public void testGetAccessibleInterfaceMethodFromDescription()
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,250,throws Exception {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,251,"Class[][] p = { ArrayUtils.EMPTY_CLASS_ARRAY, null };"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,252,for (int i = 0; i < p.length; i++) {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,253,Method accessibleMethod = MethodUtils.getAccessibleMethod(
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,254,"TestMutable.class, ""getValue"", p[i]);"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,255,"assertSame(Mutable.class, accessibleMethod.getDeclaringClass());"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,259,public void testGetAccessiblePublicMethod() throws Exception {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,260,"assertSame(MutableObject.class, MethodUtils.getAccessibleMethod("
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,261,"MutableObject.class.getMethod(""getValue"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,262,ArrayUtils.EMPTY_CLASS_ARRAY)).getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,265,public void testGetAccessiblePublicMethodFromDescription() throws Exception {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,266,"assertSame(MutableObject.class, MethodUtils.getAccessibleMethod("
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,267,"MutableObject.class, ""getValue"", ArrayUtils.EMPTY_CLASS_ARRAY)"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,268,.getDeclaringClass());
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,271,public void testGetMatchingAccessibleMethod() throws Exception {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,272,"expectMatchingAccessibleMethodParameterTypes(TestBean.class, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,273,"ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY);"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,274,"expectMatchingAccessibleMethodParameterTypes(TestBean.class, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,275,"null, ArrayUtils.EMPTY_CLASS_ARRAY);"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,276,"expectMatchingAccessibleMethodParameterTypes(TestBean.class, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,277,"singletonArray(String.class), singletonArray(String.class));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,278,"expectMatchingAccessibleMethodParameterTypes(TestBean.class, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,279,"singletonArray(Object.class), singletonArray(Object.class));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,280,"expectMatchingAccessibleMethodParameterTypes(TestBean.class, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,281,"singletonArray(Boolean.class), singletonArray(Object.class));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,282,"expectMatchingAccessibleMethodParameterTypes(TestBean.class, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,283,"singletonArray(Byte.class), singletonArray(Integer.TYPE));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,284,"expectMatchingAccessibleMethodParameterTypes(TestBean.class, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,285,"singletonArray(Byte.TYPE), singletonArray(Integer.TYPE));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,286,"expectMatchingAccessibleMethodParameterTypes(TestBean.class, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,287,"singletonArray(Short.class), singletonArray(Integer.TYPE));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,288,"expectMatchingAccessibleMethodParameterTypes(TestBean.class, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,289,"singletonArray(Short.TYPE), singletonArray(Integer.TYPE));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,290,"expectMatchingAccessibleMethodParameterTypes(TestBean.class, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,291,"singletonArray(Character.class), singletonArray(Integer.TYPE));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,292,"expectMatchingAccessibleMethodParameterTypes(TestBean.class, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,293,"singletonArray(Character.TYPE), singletonArray(Integer.TYPE));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,294,"expectMatchingAccessibleMethodParameterTypes(TestBean.class, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,295,"singletonArray(Integer.class), singletonArray(Integer.class));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,296,"expectMatchingAccessibleMethodParameterTypes(TestBean.class, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,297,"singletonArray(Integer.TYPE), singletonArray(Integer.TYPE));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,298,"expectMatchingAccessibleMethodParameterTypes(TestBean.class, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,299,"singletonArray(Long.class), singletonArray(Double.TYPE));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,300,"expectMatchingAccessibleMethodParameterTypes(TestBean.class, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,301,"singletonArray(Long.TYPE), singletonArray(Double.TYPE));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,302,"expectMatchingAccessibleMethodParameterTypes(TestBean.class, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,303,"singletonArray(Float.class), singletonArray(Double.TYPE));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,304,"expectMatchingAccessibleMethodParameterTypes(TestBean.class, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,305,"singletonArray(Float.TYPE), singletonArray(Double.TYPE));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,306,"expectMatchingAccessibleMethodParameterTypes(TestBean.class, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,307,"singletonArray(Double.class), singletonArray(Double.TYPE));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,308,"expectMatchingAccessibleMethodParameterTypes(TestBean.class, ""foo"","
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,309,"singletonArray(Double.TYPE), singletonArray(Double.TYPE));"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,312,"private void expectMatchingAccessibleMethodParameterTypes(Class cls,"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,313,"String methodName, Class[] requestTypes, Class[] actualTypes) {"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,314,"Method m = MethodUtils.getMatchingAccessibleMethod(cls, methodName,"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,315,requestTypes);
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,316,"assertTrue(Arrays.toString(m.getParameterTypes()) + "" not equals """
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,317,"+ Arrays.toString(actualTypes), Arrays.equals(actualTypes, m"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,318,.getParameterTypes()));
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,321,public void testSetCacheMethods() throws Exception {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,322,MethodUtils.clearCache();
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,323,MethodUtils.setCacheMethods(true);
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,324,"MethodUtils.invokeMethod(testBean, ""foo"", """");"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,325,"assertEquals(1, MethodUtils.clearCache());"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,326,"assertEquals(0, MethodUtils.clearCache());"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,327,MethodUtils.setCacheMethods(false);
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,328,"MethodUtils.invokeMethod(testBean, ""foo"", """");"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,329,"assertEquals(0, MethodUtils.clearCache());"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,330,MethodUtils.setCacheMethods(true);
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,333,private Class[] singletonArray(Class c) {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,334,Class[] result = (Class[]) classCache.get(c);
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,335,if (result == null) {
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,336,result = new Class[] { c };
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,337,"classCache.put(c, result);"
True,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java,339,return result;
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,17,package org.apache.commons.lang.reflect;
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,19,import junit.framework.Test;
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,20,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,21,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,22,import junit.textui.TestRunner;
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,25,* Test suite for the reflect package.
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,27,* @author Matt Benson
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,28,* @version $Id$
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,30,public class ReflectTestSuite extends TestCase {
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,33,* Construct a new instance.
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,35,public ReflectTestSuite(String name) {
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,36,super(name);
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,40,* Command-line interface.
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,42,public static void main(String[] args) {
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,43,TestRunner.run(suite());
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,47,* Get the suite of tests
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,49,public static Test suite() {
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,50,TestSuite suite = new TestSuite();
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,51,"suite.setName(""Commons-Lang-Reflect Tests"");"
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,52,suite.addTest(ConstructorUtilsTest.suite());
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,53,suite.addTest(FieldUtilsTest.suite());
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,54,suite.addTest(MethodUtilsTest.suite());
True,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java,55,return suite;
True,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,17,package org.apache.commons.lang.reflect.testbed;
True,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,20,* @author mbenson
True,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,21,* @version $Id$
True,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,src/test/org/apache/commons/lang/reflect/testbed/Ambig.java,23,"public class Ambig implements Foo, Bar {"
True,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,17,package org.apache.commons.lang.reflect.testbed;
True,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,20,* @author mbenson
True,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,21,* @version $Id$
True,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,23,public interface Bar {
True,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,src/test/org/apache/commons/lang/reflect/testbed/Bar.java,24,"public static final String VALUE = ""bar"";"
True,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,17,package org.apache.commons.lang.reflect.testbed;
True,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,20,* @author mbenson
True,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,21,* @version $Id$
True,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,23,public interface Foo {
True,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,src/test/org/apache/commons/lang/reflect/testbed/Foo.java,24,"public static final String VALUE = ""foo"";"
True,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,17,package org.apache.commons.lang.reflect.testbed;
True,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,20,* @author mbenson
True,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,21,* @version $Id$
True,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,23,class Parent implements Foo {
True,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,24,"public String s = ""s"";"
True,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,25,protected boolean b = false;
True,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,26,int i = 0;
True,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,src/test/org/apache/commons/lang/reflect/testbed/Parent.java,27,private double d = 0.0;
True,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,17,package org.apache.commons.lang.reflect.testbed;
True,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,20,* @author mbenson
True,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,21,* @version $Id$
True,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,23,public class PrivatelyShadowedChild extends Parent {
True,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,24,"private String s = ""ss"";"
True,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,25,private boolean b = true;
True,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,26,private int i = 1;
True,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PrivatelyShadowedChild.java,27,private double d = 1.0;
True,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,17,package org.apache.commons.lang.reflect.testbed;
True,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,20,* @author mbenson
True,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,21,* @version $Id$
True,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,23,public class PublicChild extends Parent {
True,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,src/test/org/apache/commons/lang/reflect/testbed/PublicChild.java,24,"static final String VALUE = ""child"";"
True,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,17,package org.apache.commons.lang.reflect.testbed;
True,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,20,* @author mbenson
True,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,21,* @version $Id$
True,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,23,public class PubliclyShadowedChild extends Parent {
True,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,24,"public String s = ""ss"";"
True,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,25,public boolean b = true;
True,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,26,public int i = 1;
True,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,src/test/org/apache/commons/lang/reflect/testbed/PubliclyShadowedChild.java,27,public double d = 1.0;
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,17,package org.apache.commons.lang.reflect.testbed;
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,20,* @author mbenson
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,21,* @version $Id$
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,23,public class StaticContainer {
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,24,"public static final Object IMMUTABLE_PUBLIC = ""public"";"
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,25,"protected static final Object IMMUTABLE_PROTECTED = ""protected"";"
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,26,"static final Object IMMUTABLE_PACKAGE = """";"
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,27,"private static final Object IMMUTABLE_PRIVATE = ""private"";"
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,29,public static Object mutablePublic;
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,30,protected static Object mutableProtected;
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,31,static Object mutablePackage;
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,32,private static Object mutablePrivate;
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,34,public static void reset() {
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,35,mutablePublic = null;
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,36,mutableProtected = null;
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,37,mutablePackage = null;
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,38,mutablePrivate = null;
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,41,public static Object getMutableProtected() {
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,42,return mutableProtected;
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,45,public static Object getMutablePackage() {
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,46,return mutablePackage;
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,49,public static Object getMutablePrivate() {
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainer.java,50,return mutablePrivate;
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,17,package org.apache.commons.lang.reflect.testbed;
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,20,* @author mbenson
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,21,* @version $Id$
True,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,src/test/org/apache/commons/lang/reflect/testbed/StaticContainerChild.java,23,public class StaticContainerChild extends StaticContainer {

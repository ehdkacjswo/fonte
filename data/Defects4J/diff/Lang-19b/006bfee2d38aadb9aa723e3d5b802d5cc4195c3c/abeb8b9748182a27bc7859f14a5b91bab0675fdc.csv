is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,35, The processing then strips all the <i>ignored</i> characters from each side of the token.
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,35,* The processing then strips all the <i>ignored</i> characters from then entire string (this
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,36,"* is useful for removing things like carriage returns, and so forth)"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,37,* <p>
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,38,* The processing then strips all the <i>trimmer</i> characters from the ends of the string.
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,39,* <p>
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,38, This example is based on the CSV tokenizer.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,41," ""a, b , c""    - Three tokens ""a"",""b"",""c""   (ignored space characters stripped)"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,42," ""a, "" b "", c"" - Three tokens ""a"","" b "",""c"" (quoted text untouched)"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,44,"* "" a, b , c ""    - Three tokens ""a"",""b"",""c""   (default CSV processing trims whitespace)"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,45,"* ""a, "", b ,"", c"" - Three tokens ""a, "" , "" b "", "", c"" (quoted text untouched)"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,73," @version $Id: StrTokenizer.java,v 1.1 2004/10/06 22:29:24 scolebourne Exp $"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,76,"* @version $Id: StrTokenizer.java,v 1.2 2004/12/23 18:55:48 mattinger Exp $"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,110, Best used for <code>ignored</code>.
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,113,* Best used for <code>trimmer</code>.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,115, Best used for <code>ignored</code>.
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,118,* Best used for <code>trimmer</code>.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,125,SV_TOKENIZER_PROTOTYPE.setIgnoredMatcher(TRIM_MATCHER);
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,128,CSV_TOKENIZER_PROTOTYPE.setIgnoredMatcher(NONE_MATCHER);
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,129,CSV_TOKENIZER_PROTOTYPE.setTrimmerMatcher(TRIM_MATCHER);
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,132,SV_TOKENIZER_PROTOTYPE.setIgnoredMatcher(TRIM_MATCHER);
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,136,TSV_TOKENIZER_PROTOTYPE.setIgnoredMatcher(NONE_MATCHER);
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,137,CSV_TOKENIZER_PROTOTYPE.setTrimmerMatcher(TRIM_MATCHER);
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,158,private Matcher trimmer = TRIM_MATCHER;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,214, Gets a new tokenizer instance which parses Comma Seperated Value strings.
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,223,* Gets a new tokenizer instance which parses Comma Seperated Value strings
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,224,* initializing it with the given input.  The default for CSV processing
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,225,* will be trim whitespace from both ends (which can be overriden with
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,226,* the setTrimmer method).
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,227,* <p>
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,223, initializing it with the given input.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,225, @param input  the string to parse
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,236,* initializing it with the given input.  The default for CSV processing
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,237,* will be trim whitespace from both ends (which can be overriden with
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,238,* the setTrimmer method).
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,240,* @param input  the text to parse
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,235, initializing it with the given input.
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,250,* initializing it with the given input.  The default for CSV processing
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,251,* will be trim whitespace from both ends (which can be overriden with
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,252,* the setTrimmer method).
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,264,* The default for CSV processing will be trim whitespace from both ends
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,265,* (which can be overriden with the setTrimmer method).
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,266,* <p>
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,254, Gets a new tokenizer instance which parses Tab Seperated Value strings
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,255, initializing it with the given input.
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,274,* Gets a new tokenizer instance which parses Tab Seperated Value strings.
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,275,* The default for CSV processing will be trim whitespace from both ends
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,276,* (which can be overriden with the setTrimmer method).
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,266, Gets a new tokenizer instance which parses Tab Seperated Value strings
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,267, initializing it with the given input.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,269, @param input  the text to parse
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,286,* Gets a new tokenizer instance which parses Tab Seperated Value strings.
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,287,* The default for CSV processing will be trim whitespace from both ends
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,288,* (which can be overriden with the setTrimmer method).
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,289,* @param input  the string to parse
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,688,"ignoreLen = ignored.isMatch(chars, len, start)) >= 1 &&"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,820,"oken.append(chars, start, Math.min(pos, len) - start);"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,839,/* Trim string based on the trimmer matcher */
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,840,"while (trimmer.isMatch(chars, 1, start) > 0) {"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,841,start++;
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,844,"int length = Math.min(pos, len) - start;"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,846,"while (trimmer.isMatch(chars, 1, start + length - 1) > 0) {"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,847,length--;
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,850,for (int i=0;i<length;i++) {
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,851,"if (ignored.isMatch(chars, 1, start + i) == 0) {"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,852,token.append(chars[start + i]);
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,980,// Trimmer
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,983,* Gets the trimmer character matcher.
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,984,* <p>
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,985,* These characters are trimmed off the beginning and ending of an unquoted string.
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,986,* The default value is space (' ') and all char control characters (32 and less).
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,988,* @return the trimmer matcher in use
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,990,public Matcher getTrimmerMatcher() {
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,991,return trimmer;
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,995,* Set the matcher for characters to trim off the beginning and end of an
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,996,* unquoted string.
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,998,"* @param trimmer  the trimmer matcher to use, null ignored"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1000,public void setTrimmerMatcher(Matcher trimmer) {
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1001,if (trimmer != null) {
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1002,this.trimmer = trimmer;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1063,tatic final class CharSetMatcher implements Matcher {
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1124,public static final class CharSetMatcher implements Matcher {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1071,harSetMatcher(char chars[]) {
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1132,public CharSetMatcher(char chars[]) {

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,21,import java.util.Iterator;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,23,import org.apache.commons.lang.ClassUtils;
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,116,or (Class acls = cls; acls != null; acls = acls.getSuperclass()) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,117,lass[] ints = acls.getInterfaces();
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,118,or (int i = 0; i < ints.length; i++) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,119,"/ getField is fine here, because everything is public, and thus it works"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,120,ry {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,121,ield test = ints[i].getField(fieldName);
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,122,f (match != null) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,123,f (match.getDeclaringClass().equals(test.getDeclaringClass())) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,124,ontinue;
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,126,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,127,"Reference to field """
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,128, fieldName
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,129," "" is ambiguous relative to """
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,130, cls
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,131," ""; a matching field exists on two or more parent interfaces."");"
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,133,atch = test;
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,134, catch (NoSuchFieldException ex) {
False,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,135,/ ignore
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,119,for (Iterator intf = ClassUtils.getAllInterfaces(cls).iterator(); intf
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,120,.hasNext();) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,121,try {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,122,Field test = ((Class) intf.next()).getField(fieldName);
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,123,if (match != null) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,124,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,125,"""Reference to field """
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,126,+ fieldName
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,127,"+ "" is ambiguous relative to """
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,128,+ cls
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,129,"+ ""; a matching field exists on two or more parent interfaces."");"
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,131,match = test;
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,132,} catch (NoSuchFieldException ex) {
True,src/java/org/apache/commons/lang/reflect/FieldUtils.java,src/java/org/apache/commons/lang/reflect/FieldUtils.java,133,// ignore

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,21,import java.util.Formattable;
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,23, <p>{@code Range} represents an immutable range of comparables of the same type.</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,24, <p>The objects need to either be implementations of {@code java.lang.Comparable}
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,25, or you need to supply a {@code java.util.Comparator}. </p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,24,* <p>An immutable range of objects from a minimum to maximum point inclusive.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,26,* <p>The objects need to either be implementations of {@code Comparable}
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,27,* or you need to supply a {@code Comparator}. </p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,27, <p>#ThreadSafe# if the comparables are thread-safe</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,29,* <p>#ThreadSafe# if the objects and comparator are thread-safe</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,34, Required for serialization support.
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,37,* Serialization version.
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,58,rivate transient int hashCode = 0;
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,57,private transient int hashCode;
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,63,rivate transient String toString = null;
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,61,private transient String toString;
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,66, <p>Constructs a new {@code Range} using the specified
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,67, element as both the minimum and maximum in this range.</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,68, <p>The range uses the natural ordering of the elements to
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,69, determine where values lie in the range.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,64,* <p>Obtains a range using the specified element as both the minimum
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,65,* and maximum in this range.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,67,* <p>The range uses the natural ordering of the elements to determine where
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,68,* values lie in the range.</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,71, @param <T> the type of this {@code Range}
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,72," @param element  the value to use for this range, must not be {@code null}"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,73, @return the new range object
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,74, @throws IllegalArgumentException if the value is {@code null}
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,75, @throws ClassCastException if the value is not Comparable
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,70,* @param <T> the type of the elements in this range
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,71,"* @param element  the value to use for this range, not null"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,72,"* @return the range object, not null"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,73,* @throws IllegalArgumentException if the element is null
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,74,* @throws ClassCastException if the element is not {@code Comparable}
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,78,"eturn new Range<T>(element, element, ComparableComparator.<T>getInstance());"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,77,"return between(element, element, null);"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,82, <p>Constructs a new {@code Range} with the specified
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,83, minimum and maximum values (both inclusive).</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,84, <p>The range uses the natural ordering of the elements to
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,85, determine where values lie in the range.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,81,* <p>Obtains a range using the specified element as both the minimum
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,82,* and maximum in this range.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,84,* <p>The range uses the specified {@code Comparator} to determine where
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,85,* values lie in the range.</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,87," <p>The arguments may be passed in the order (min,max) or (max,min). The"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,88, getMinimum and getMaximum methods will return the correct values.</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,90, @param <T> the type of this {@code Range}
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,91," @param element1  first value that defines the edge of the range, inclusive"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,92," @param element2  second value that defines the edge of the range, inclusive"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,93, @return the new range object
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,94, @throws IllegalArgumentException if either value is {@code null}
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,95, @throws ClassCastException if either value is not Comparable
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,87,* @param <T> the type of the elements in this range
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,88,"* @param element  the value to use for this range, must not be {@code null}"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,89,"* @param comparator  the comparator to be used, null for natural ordering"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,90,"* @return the range object, not null"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,91,* @throws IllegalArgumentException if the element is null
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,92,* @throws ClassCastException if using natural ordering and the elements are not {@code Comparable}
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,97,"ublic static <T extends Comparable<T>> Range<T> between(T element1, T element2) {"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,98,"eturn new Range<T>( element1, element2, ComparableComparator.<T>getInstance());"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,94,"public static <T> Range<T> is(T element, Comparator<T> comparator) {"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,95,"return between(element, element, comparator);"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,102, <p>Constructs a new {@code Range} using the specified
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,103, element as both the minimum and maximum in this range.</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,104, <p>The range uses the passed in {@code Comparator} to
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,105, determine where values lie in the range.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,99,* <p>Obtains a range with the specified minimum and maximum values (both inclusive).</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,101,* <p>The range uses the natural ordering of the elements to determine where
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,102,* values lie in the range.</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,107, @param <T> the type of this {@code Range}
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,108," @param element  the value to use for this range, must not be {@code null}"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,109, @param c comparator to be used
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,110, @return the new range object
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,111, @throws IllegalArgumentException if the value is {@code null}
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,104,"* <p>The arguments may be passed in the order (min,max) or (max,min)."
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,105,* The getMinimum and getMaximum methods will return the correct values.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,107,* @param <T> the type of the elements in this range
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,108,"* @param fromInclusive  the first value that defines the edge of the range, inclusive"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,109,"* @param toInclusive  the second value that defines the edge of the range, inclusive"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,110,"* @return the range object, not null"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,111,* @throws IllegalArgumentException if either element is null
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,112,* @throws ClassCastException if the elements are not {@code Comparable}
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,113,"ublic static <T> Range<T> is(T element, Comparator<T> c) {"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,114,"eturn new Range<T>(element, element, c);"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,114,"public static <T extends Comparable<T>> Range<T> between(T fromInclusive, T toInclusive) {"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,115,"return between(fromInclusive, toInclusive, null);"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,118, <p>Constructs a new {@code Range} with the specified
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,119, minimum and maximum values (both inclusive).</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,120, <p>The range uses the passed in {@code Comparator} to
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,121, determine where values lie in the range.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,119,* <p>Obtains a range with the specified minimum and maximum values (both inclusive).</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,121,* <p>The range uses the specified {@code Comparator} to determine where
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,122,* values lie in the range.</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,123," <p>The arguments may be passed in the order (min,max) or (max,min). The"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,124, getMinimum and getMaximum methods will return the correct values.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,124,"* <p>The arguments may be passed in the order (min,max) or (max,min)."
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,125,* The getMinimum and getMaximum methods will return the correct values.</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,126, @param <T> the type of this {@code Range}
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,127," @param element1  first value that defines the edge of the range, inclusive"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,128," @param element2  second value that defines the edge of the range, inclusive"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,129, @param c comparator to be used
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,130, @return the new range object
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,131, @throws IllegalArgumentException if either value is {@code null}
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,127,* @param <T> the type of the elements in this range
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,128,"* @param fromInclusive  the first value that defines the edge of the range, inclusive"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,129,"* @param toInclusive  the second value that defines the edge of the range, inclusive"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,130,"* @param comparator  the comparator to be used, null for natural ordering"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,131,"* @return the range object, not null"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,132,* @throws IllegalArgumentException if either element is null
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,133,* @throws ClassCastException if using natural ordering and the elements are not {@code Comparable}
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,133,"ublic static <T> Range<T> between(T element1, T element2, Comparator<T> c) {"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,134,"eturn new Range<T>(element1, element2, c);"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,135,"public static <T> Range<T> between(T fromInclusive, T toInclusive, Comparator<T> comparator) {"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,136,"return new Range<T>(fromInclusive, toInclusive, comparator);"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,138, Creates a new instance of {@code Range}.
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,140,* Creates an instance.
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,140, @param element1 the first element
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,141, @param element2 the second element
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,142, @param c the comparator to be used
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,142,"* @param element1  the first element, not null"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,143,"* @param element2  the second element, not null"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,144,"* @param comparator  the comparator to be used, null for natural ordering"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,144,"rivate Range(T element1, T element2, Comparator<T> c) {"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,145,f(element1 == null || element2 == null) {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,146,"@SuppressWarnings(""unchecked"")"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,147,"private Range(T element1, T element2, Comparator<T> comparator) {"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,148,if (element1 == null || element2 == null) {
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,150,f(c == null) {
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,151,"hrow new IllegalArgumentException(""Comparator must not be null"");"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,152,if (comparator == null) {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,153,comparator = ComparableComparator.INSTANCE;
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,154,"f(c.compare(element1, element2) < 1) {"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,155,"if (comparator.compare(element1, element2) < 1) {"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,161,his.comparator = c;
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,162,this.comparator = comparator;
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,170, @return the minimum value in this range
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,171,"* @return the minimum value in this range, not null"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,173,eturn this.minimum;
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,174,return minimum;
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,179, @return the maximum value in this range
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,180,"* @return the maximum value in this range, not null"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,182,eturn this.maximum;
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,183,return maximum;
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,186, <p>Gets the comparator being used to determine if objects are within the range. </p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,187,* <p>Gets the comparator being used to determine if objects are within the range.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,189,"* <p>Natural ordering uses an internal comparator implementation, thus this"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,190,* method never returns null. See {@link #isNaturalOrdering()}.</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,188, @return the comparator being used
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,192,"* @return the comparator being used, not null"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,191,eturn this.comparator;
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,195,return comparator;
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,195, <p>Whether or not the Range is using the default natural comparison method
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,196, to compare elements. </p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,199,* <p>Whether or not the Range is using the natural ordering of the elements.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,201,"* <p>Natural ordering uses an internal comparator implementation, thus this"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,202,* method is the only way to check if a null comparator was specified.</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,198, @return whether or not the default Comparator is in use
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,204,* @return true if using natural ordering
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,200,ublic boolean isDefaultNaturalOrdering() {
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,201,eturn this.comparator == ComparableComparator.INSTANCE;
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,206,public boolean isNaturalOrdering() {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,207,return comparator == ComparableComparator.INSTANCE;
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,204,/ Include tests
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,210,// Element tests
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,208, <p>Tests whether the specified element occurs within this range.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,214,* <p>Checks whether the specified element occurs within this range.</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,210, <p>{@code null} is handled and returns {@code false}.</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,212," @param element  the element to test, may be {@code null}"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,213, @return {@code true} if the specified element occurs within this range
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,216,"* @param element  the element to check for, null returns false"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,217,* @return true if the specified element occurs within this range
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,216,f(element == null) {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,220,if (element == null) {
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,219,"eturn (comparator.compare(element, this.minimum) > -1) && (comparator.compare(element, this.maximum) < 1);"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,223,"return (comparator.compare(element, minimum) > -1) && (comparator.compare(element, maximum) < 1);"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,223, <p>Tests whether the specified element occurs before this range.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,227,* <p>Checks whether this range is after the specified element.</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,225, <p>{@code null} is handled and returns {@code false}.</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,227," @param element  the element to test, may be {@code null}"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,228, @return {@code true} if the specified element occurs before this range
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,229,"* @param element  the element to check for, null returns false"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,230,* @return true if this range is entirely after the specified element
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,230,ublic boolean elementBefore(T element) {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,232,public boolean isAfter(T element) {
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,235,"eturn this.comparator.compare(element, this.minimum) < 0;"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,236,"return comparator.compare(element, minimum) < 0;"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,239, <p>Tests whether the specified element occurs after this range.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,240,* <p>Checks whether this range starts with the specified element.</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,241, <p>{@code null} is handled and returns {@code false}.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,242,"* @param element  the element to check for, null returns false"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,243,* @return true if the specified element occurs within this range
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,245,public boolean isStartedBy(T element) {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,246,if (element == null) {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,247,return false;
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,249,"return comparator.compare(element, minimum) == 0;"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,253,* <p>Checks whether this range starts with the specified element.</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,243," @param element  the element to test, may be {@code null}"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,244, @return {@code true} if the specified element occurs after this range
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,255,"* @param element  the element to check for, null returns false"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,256,* @return true if the specified element occurs within this range
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,246,ublic boolean elementAfter(T element) {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,258,public boolean isEndedBy(T element) {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,262,"return comparator.compare(element, maximum) == 0;"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,251,"eturn this.comparator.compare(element, this.maximum) > 0;"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,266,* <p>Checks whether this range is before the specified element.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,268,"* @param element  the element to check for, null returns false"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,269,* @return true if this range is entirely before the specified element
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,271,public boolean isBefore(T element) {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,272,if (element == null) {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,273,return false;
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,275,"return comparator.compare(element, maximum) > 0;"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,255, <p>Tests where the specified element occurs relative to this range.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,279,* <p>Checks where the specified element occurs relative to this range.</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,260, @param element  the element to test
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,285,"* @param element  the element to check for, not null"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,264,f(element == null) {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,289,if (element == null) {
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,268,f(elementBefore(element)) {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,293,if (isAfter(element)) {
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,270, else
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,271,f(elementAfter(element)) {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,295,} else if (isBefore(element)) {
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,282, <p>Tests whether the specified range occurs entirely within this range.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,306,* <p>Checks whether this range contains all the elements of the specified range.</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,284, <p>{@code null} is handled and returns {@code false}.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,308,* <p>This method may fail if the ranges have two different comparators or element types.</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,286," @param range  the range to test, may be {@code null}"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,287, @return {@code true} if the specified range occurs entirely within
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,288,"  this range; otherwise, {@code false}"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,289, @throws IllegalArgumentException if the {@code Range} cannot be compared
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,310,"* @param otherRange  the range to check, null returns false"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,311,* @return true if this range contains the specified range
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,312,* @throws RuntimeException if ranges cannot be compared
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,291,ublic boolean containsAll(Range<T> range) {
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,292,f (range == null) {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,314,public boolean containsRange(Range<T> otherRange) {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,315,if (otherRange == null) {
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,295,eturn contains(range.getMinimum())
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,296,& contains(range.getMaximum());
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,318,return contains(otherRange.minimum)
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,319,&& contains(otherRange.maximum);
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,300, <p>Tests whether the specified range overlaps with this range.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,323,* <p>Checks whether this range is completely after the specified range.</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,302, <p>{@code null} is handled and returns {@code false}.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,325,* <p>This method may fail if the ranges have two different comparators or element types.</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,304," @param range  the range to test, may be {@code null}"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,305, @return {@code true} if the specified range overlaps with this
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,327,"* @param otherRange  the range to check, null returns false"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,328,* @return true if this range is completely after the specified range
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,329,* @throws RuntimeException if ranges cannot be compared
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,331,public boolean isAfterRange(Range<T> otherRange) {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,332,if (otherRange == null) {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,333,return false;
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,335,return isAfter(otherRange.maximum);
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,339,* <p>Checks whether this range is overlapped by the specified range.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,341,* <p>Two ranges overlap if there is at least one element in common.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,343,* <p>This method may fail if the ranges have two different comparators or element types.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,345,"* @param otherRange  the range to test, null returns false"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,346,* @return true if the specified range overlaps with this
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,307, @throws IllegalArgumentException if the {@code Range} cannot be compared
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,348,* @throws RuntimeException if ranges cannot be compared
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,350,public boolean isOverlappedBy(Range<T> otherRange) {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,351,if (otherRange == null) {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,352,return false;
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,354,return otherRange.contains(minimum)
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,355,|| otherRange.contains(maximum)
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,356,|| contains(otherRange.minimum);
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,360,* <p>Checks whether this range is completely before the specified range.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,362,* <p>This method may fail if the ranges have two different comparators or element types.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,364,"* @param otherRange  the range to check, null returns false"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,365,* @return true if this range is completely before the specified range
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,366,* @throws RuntimeException if ranges cannot be compared
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,309,ublic boolean overlapsWith(Range<T> range) {
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,310,f (range == null) {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,368,public boolean isBeforeRange(Range<T> otherRange) {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,369,if (otherRange == null) {
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,313,eturn range.contains(this.minimum)
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,314,| range.contains(this.maximum)
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,315,| contains(range.getMinimum());
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,372,return isBefore(otherRange.minimum);
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,324," <p>To be equal, the class, minimum and maximum must be equal.</p>"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,381,"* <p>To be equal, the minimum and maximum values must be equal, which"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,382,* ignores any differences in the comparator.</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,327, @return {@code true} if this object is equal
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,385,* @return true if this object is equal
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,338,eturn getMinimum().equals(range.getMinimum()) &&
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,339,etMaximum().equals(range.getMaximum());
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,396,return minimum.equals(range.minimum) &&
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,397,maximum.equals(range.maximum);
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,344, <p>Gets a hashCode for the range.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,402,* <p>Gets a suitable hash code for the range.</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,354,esult = 37 * result + this.minimum.hashCode();
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,355,esult = 37 * result + this.maximum.hashCode();
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,412,result = 37 * result + minimum.hashCode();
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,413,result = 37 * result + maximum.hashCode();
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,364," <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,422,* <p>The format of the String is '[<i>min</i>..<i>max</i>]'.</p>
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,373,"uf.append(""Range["");"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,374,uf.append(this.minimum);
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,375,"uf.append(',');"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,376,uf.append(this.maximum);
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,431,buf.append('[');
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,432,buf.append(minimum);
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,433,"buf.append("".."");"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,434,buf.append(maximum);
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,384,/ Taken from Commons Collections - documentation removed as not a public class
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,385,"rivate static class ComparableComparator<E extends Comparable<? super E>> implements Comparator<E>, Serializable {"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,387,rivate static final long serialVersionUID = 1L;
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,389,"SuppressWarnings(""rawtypes"") // Comparator works for all types"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,390,ublic static final ComparableComparator<?> INSTANCE = new ComparableComparator();
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,393, Returns a comparator for the specified {@code Comparable} type.
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,395, @param <E> the {@code Comparable} type
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,396, @return the comparator for this type
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,398,"SuppressWarnings(""unchecked"") // OK to cast, because comparator works for all types"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,399,ublic static <E extends Comparable<? super E>> ComparableComparator<E> getInstance() {
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,400,eturn (ComparableComparator<E>) INSTANCE;
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,404, Creates a new instance of {@code ComparableComparator}.
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,406,ublic ComparableComparator() {
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,407,uper();
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,411, Compares two objects.
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,413, @param obj1 the first object
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,414, @param obj2 the second object
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,415, @return the result of the comparison
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,417,"ublic int compare(E obj1, E obj2) {"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,418,eturn obj1.compareTo(obj2);
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,421,Override
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,422,ublic int hashCode() {
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,423,"eturn ""ComparableComparator"".hashCode();"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,443,* <p>Formats the receiver using the given format.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,445,* <p>This uses {@link Formattable} to perform the formatting. Three variables may
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,446,"* be used to embed the minimum, maximum and comparator."
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,447,"* Use {@code %1$s} for the minimum element, {@code %2$s} for the maximum element"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,448,* and {@code %3$s} for the comparator.
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,449,* The default format used by {@code toString()} is {@code [%1$s..%2$s]}.</p>
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,451,"* @param format  the format string, optionally containing {@code %1$s}, {@code %2$s} and  {@code %3$s}, not null"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,452,"* @return the formatted string, not null"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,454,public String toString(String format) {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,455,"return String.format(format, minimum, maximum, comparator);"
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,426,Override
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,427,ublic boolean equals(Object object) {
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,428,eturn (this == object) ||
False,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,429,(null != object) && (object.getClass().equals(this.getClass())));
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,459,"@SuppressWarnings({""rawtypes"", ""unchecked""})"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,460,private enum ComparableComparator implements Comparator {
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,461,INSTANCE;
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,462,"public int compare(Object obj1, Object obj2) {"
True,src/main/java/org/apache/commons/lang3/Range.java,src/main/java/org/apache/commons/lang3/Range.java,463,return ((Comparable) obj1).compareTo(obj2);
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,57,"@SuppressWarnings({ ""rawtypes"", ""unchecked"" })"
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,65,ange.is(c);
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,66,"ange.between(c, c);"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,65,Range r1 = Range.is(c);
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,66,"Range r2 = Range.between(c, c);"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,67,"assertEquals(true, r1.isNaturalOrdering());"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,68,"assertEquals(true, r2.isNaturalOrdering());"
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,140,"ssertEquals(""Range[10,20]"", str);"
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,141,"/        assertSame(str, intRange.toString());  // no longer passes - does it matter?"
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,142,"ssertEquals(""Range[-20,-10]"", Range.between(-20, -10).toString());"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,140,"assertEquals(""[10..20]"", str);"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,141,"assertEquals(""[-20..-10]"", Range.between(-20, -10).toString());"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,144,public void testToStringFormat() {
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,145,"String str = intRange.toString(""From %1$s to %2$s"");"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,146,"assertEquals(""From 10 to 20"", str);"
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,171,ublic void testElementBefore() {
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,172,ssertFalse(intRange.elementBefore(null));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,174,public void testIsAfter() {
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,175,assertFalse(intRange.isAfter(null));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,177,assertTrue(intRange.isAfter(5));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,178,assertFalse(intRange.isAfter(10));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,179,assertFalse(intRange.isAfter(15));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,180,assertFalse(intRange.isAfter(20));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,181,assertFalse(intRange.isAfter(25));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,184,public void testIsStartedBy() {
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,185,assertFalse(intRange.isStartedBy(null));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,187,assertFalse(intRange.isStartedBy(5));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,188,assertTrue(intRange.isStartedBy(10));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,189,assertFalse(intRange.isStartedBy(15));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,190,assertFalse(intRange.isStartedBy(20));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,191,assertFalse(intRange.isStartedBy(25));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,194,public void testIsEndedBy() {
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,195,assertFalse(intRange.isEndedBy(null));
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,174,ssertTrue(intRange.elementBefore(5));
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,175,ssertFalse(intRange.elementBefore(10));
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,176,ssertFalse(intRange.elementBefore(15));
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,177,ssertFalse(intRange.elementBefore(20));
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,178,ssertFalse(intRange.elementBefore(25));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,197,assertFalse(intRange.isEndedBy(5));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,198,assertFalse(intRange.isEndedBy(10));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,199,assertFalse(intRange.isEndedBy(15));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,200,assertTrue(intRange.isEndedBy(20));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,201,assertFalse(intRange.isEndedBy(25));
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,181,ublic void testElementAfter() {
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,182,ssertFalse(intRange.elementAfter(null));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,204,public void testIsBefore() {
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,205,assertFalse(intRange.isBefore(null));
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,184,ssertFalse(intRange.elementAfter(5));
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,185,ssertFalse(intRange.elementAfter(10));
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,186,ssertFalse(intRange.elementAfter(15));
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,187,ssertFalse(intRange.elementAfter(20));
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,188,ssertTrue(intRange.elementAfter(25));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,207,assertFalse(intRange.isBefore(5));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,208,assertFalse(intRange.isBefore(10));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,209,assertFalse(intRange.isBefore(15));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,210,assertFalse(intRange.isBefore(20));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,211,assertTrue(intRange.isBefore(25));
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,208,ublic void testContainsAll() {
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,230,public void testContainsRange() {
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,211,ssertFalse(intRange.containsAll(null));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,233,assertFalse(intRange.containsRange(null));
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,214,"ssertTrue(intRange.containsAll(Range.between(12, 18)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,236,"assertTrue(intRange.containsRange(Range.between(12, 18)));"
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,217,"ssertFalse(intRange.containsAll(Range.between(32, 45)));"
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,218,"ssertFalse(intRange.containsAll(Range.between(2, 8)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,239,"assertFalse(intRange.containsRange(Range.between(32, 45)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,240,"assertFalse(intRange.containsRange(Range.between(2, 8)));"
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,221,"ssertTrue(intRange.containsAll(Range.between(10, 20)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,243,"assertTrue(intRange.containsRange(Range.between(10, 20)));"
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,224,"ssertFalse(intRange.containsAll(Range.between(9, 14)));"
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,225,"ssertFalse(intRange.containsAll(Range.between(16, 21)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,246,"assertFalse(intRange.containsRange(Range.between(9, 14)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,247,"assertFalse(intRange.containsRange(Range.between(16, 21)));"
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,228,"ssertTrue(intRange.containsAll(Range.between(10, 19)));"
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,229,"ssertFalse(intRange.containsAll(Range.between(10, 21)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,250,"assertTrue(intRange.containsRange(Range.between(10, 19)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,251,"assertFalse(intRange.containsRange(Range.between(10, 21)));"
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,232,"ssertTrue(intRange.containsAll(Range.between(11, 20)));"
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,233,"ssertFalse(intRange.containsAll(Range.between(9, 20)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,254,"assertTrue(intRange.containsRange(Range.between(11, 20)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,255,"assertFalse(intRange.containsRange(Range.between(9, 20)));"
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,236,"ssertFalse(intRange.containsAll(Range.between(-11, -18)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,258,"assertFalse(intRange.containsRange(Range.between(-11, -18)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,261,public void testIsAfterRange() {
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,262,assertFalse(intRange.isAfterRange(null));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,264,"assertTrue(intRange.isAfterRange(Range.between(5, 9)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,266,"assertFalse(intRange.isAfterRange(Range.between(5, 10)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,267,"assertFalse(intRange.isAfterRange(Range.between(5, 20)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,268,"assertFalse(intRange.isAfterRange(Range.between(5, 25)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,269,"assertFalse(intRange.isAfterRange(Range.between(15, 25)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,271,"assertFalse(intRange.isAfterRange(Range.between(21, 25)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,273,"assertFalse(intRange.isAfterRange(Range.between(10, 20)));"
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,240,ublic void testOverlapsWith() {
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,276,public void testIsOverlappedBy() {
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,243,ssertFalse(intRange.overlapsWith(null));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,279,assertFalse(intRange.isOverlappedBy(null));
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,246,"ssertTrue(intRange.overlapsWith(Range.between(12, 18)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,282,"assertTrue(intRange.isOverlappedBy(Range.between(12, 18)));"
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,249,"ssertFalse(intRange.overlapsWith(Range.between(32, 45)));"
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,250,"ssertFalse(intRange.overlapsWith(Range.between(2, 8)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,285,"assertFalse(intRange.isOverlappedBy(Range.between(32, 45)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,286,"assertFalse(intRange.isOverlappedBy(Range.between(2, 8)));"
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,253,"ssertTrue(intRange.overlapsWith(Range.between(10, 20)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,289,"assertTrue(intRange.isOverlappedBy(Range.between(10, 20)));"
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,256,"ssertTrue(intRange.overlapsWith(Range.between(9, 14)));"
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,257,"ssertTrue(intRange.overlapsWith(Range.between(16, 21)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,292,"assertTrue(intRange.isOverlappedBy(Range.between(9, 14)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,293,"assertTrue(intRange.isOverlappedBy(Range.between(16, 21)));"
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,260,"ssertTrue(intRange.overlapsWith(Range.between(10, 19)));"
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,261,"ssertTrue(intRange.overlapsWith(Range.between(10, 21)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,296,"assertTrue(intRange.isOverlappedBy(Range.between(10, 19)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,297,"assertTrue(intRange.isOverlappedBy(Range.between(10, 21)));"
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,264,"ssertTrue(intRange.overlapsWith(Range.between(11, 20)));"
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,265,"ssertTrue(intRange.overlapsWith(Range.between(9, 20)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,300,"assertTrue(intRange.isOverlappedBy(Range.between(11, 20)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,301,"assertTrue(intRange.isOverlappedBy(Range.between(9, 20)));"
False,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,268,"ssertFalse(intRange.overlapsWith(Range.between(-11, -18)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,304,"assertFalse(intRange.isOverlappedBy(Range.between(-11, -18)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,307,public void testIsBeforeRange() {
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,308,assertFalse(intRange.isBeforeRange(null));
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,310,"assertFalse(intRange.isBeforeRange(Range.between(5, 9)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,312,"assertFalse(intRange.isBeforeRange(Range.between(5, 10)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,313,"assertFalse(intRange.isBeforeRange(Range.between(5, 20)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,314,"assertFalse(intRange.isBeforeRange(Range.between(5, 25)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,315,"assertFalse(intRange.isBeforeRange(Range.between(15, 25)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,317,"assertTrue(intRange.isBeforeRange(Range.between(21, 25)));"
True,src/test/java/org/apache/commons/lang3/RangeTest.java,src/test/java/org/apache/commons/lang3/RangeTest.java,319,"assertFalse(intRange.isBeforeRange(Range.between(10, 20)));"

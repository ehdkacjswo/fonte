is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,5,* reserved.
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,9,* are met:
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,17,*    distribution.
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,54,package org.apache.commons.lang.functor;
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,57,* <code>Closure</code> defines an interface implemented by classes that
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,58,* do something.
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,60,"* @author <a href=""mailto:nicolaken@apache.org"">Nicola Ken Barozzi</a>"
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,61,"* @version $Id: Closure.java,v 1.1 2002/11/05 16:44:28 bayard Exp $"
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,63,public interface Closure {
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,66,* Does what it has to.
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,68,* @param description  the extra information needed to execute the
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,69,*                     command
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,71,* @throws ClosureException (runtime) if the execution fails
True,src/java/org/apache/commons/lang/functor/Closure.java,src/java/org/apache/commons/lang/functor/Closure.java,73,public void execute(Object description);
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,5,* reserved.
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,9,* are met:
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,17,*    distribution.
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,54,package org.apache.commons.lang.functor;
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,56,import org.apache.commons.lang.exception.NestableRuntimeException;
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,58,* Exception thrown when the Comand fails to execute.
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,59,"* If required, a root cause error can be wrapped within this one."
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,61,"* @author <a href=""mailto:nicolaken@apache.org"">Nicola Ken Barozzi</a>"
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,62,"* @version $Id: ClosureException.java,v 1.1 2002/11/05 16:44:28 bayard Exp $"
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,64,public class ClosureException extends NestableRuntimeException {
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,67,* Constructs a new <code>ClosureException</code> without specified
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,68,* detail message.
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,70,public ClosureException() {
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,71,super();
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,75,* Constructs a new <code>ClosureException</code> with specified
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,76,* detail message.
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,78,* @param msg  the error message.
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,80,public ClosureException(String msg) {
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,81,super(msg);
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,85,* Constructs a new <code>ClosureException</code> with specified
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,86,* nested <code>Throwable</code> root cause.
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,88,* @param rootCause  the exception or error that caused this exception
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,89,*                   to be thrown.
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,91,public ClosureException(Throwable rootCause) {
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,92,super(rootCause);
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,96,* Constructs a new <code>ClosureException</code> with specified
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,97,* detail message and nested <code>Throwable</code> root cause.
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,99,* @param msg        the error message.
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,100,* @param rootCause  the exception or error that caused this exception
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,101,*                   to be thrown.
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,103,"public ClosureException(String msg, Throwable rootCause) {"
True,src/java/org/apache/commons/lang/functor/ClosureException.java,src/java/org/apache/commons/lang/functor/ClosureException.java,104,"super(msg, rootCause);"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,5,* reserved.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,9,* are met:
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,17,*    distribution.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,54,package org.apache.commons.lang.functor;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,56,import java.io.Serializable;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,57,import java.util.Collection;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,58,import java.util.Iterator;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,59,import java.util.Map;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,61,import org.apache.commons.lang.functor.Predicate;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,62,import org.apache.commons.lang.functor.PredicateUtils;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,63,import org.apache.commons.lang.functor.Transformer;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,64,import org.apache.commons.lang.functor.TransformerException;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,65,import org.apache.commons.lang.functor.TransformerUtils;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,67,* <code>ClosureUtils</code> provides reference implementations and utilities
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,68,* for the Closure pattern interface. The supplied commands are:
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,69,* <ul>
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,70,* <li>Invoker - invokes a method on the input object
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,71,* <li>For - repeatedly calls a command for a fixed number of times
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,72,* <li>While - repeatedly calls a command while a predicate is true
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,73,* <li>DoWhile - repeatedly calls a command while a predicate is true
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,74,* <li>Chained - chains two or more commands together
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,75,* <li>Switch - calls one command based on one or more predicates
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,76,* <li>SwitchMap - calls one command looked up from a Map
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,77,* <li>Transformer - wraps a Transformer as a Predicate
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,78,* <li>NOP - does nothing
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,79,* <li>Exception - always throws an exception
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,80,* </ul>
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,81,* All the supplied commands are Serializable.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,83,"* @author <a href=""mailto:scolebourne@joda.org"">Stephen Colebourne</a>"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,84,"* @version $Id: ClosureUtils.java,v 1.1 2002/11/05 16:44:28 bayard Exp $"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,86,public class ClosureUtils {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,89,* A Closure that always throws an exception
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,91,private static final Closure EXCEPTION_COMMAND = new ExceptionClosure();
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,93,* A Closure that does nothing
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,95,private static final Closure NOP_COMMAND = new NOPClosure();
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,98,* Restrictive constructor
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,100,protected ClosureUtils() {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,101,super();
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,105,* Gets a Closure that always throws an exception.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,106,* This could be useful during testing as a placeholder.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,108,* @return the command
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,110,public static Closure exceptionClosure() {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,111,return EXCEPTION_COMMAND;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,115,* Gets a Closure that will do nothing.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,116,* This could be useful during testing as a placeholder.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,118,* @return the command
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,120,public static Closure nopClosure() {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,121,return NOP_COMMAND;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,125,* Creates a Closure that calls a Factory each time the transformer is used.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,126,* The transformer will return the value returned by the factory.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,128,* @param transformer  the transformer to run each time in the command
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,129,* @return the command.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,131,public static Closure asClosure(Transformer transformer) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,132,if (transformer == null) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,133,"throw new IllegalArgumentException(""TransformerClosure: The transformer must not be null"");"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,135,return new TransformerClosure(transformer);
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,139,* Creates a Closure that will call the command <code>count</code> times.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,141,* @param count  the number of times to loop
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,142,* @param command  the command to call repeatedly
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,143,* @return the command
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,144,* @throws IllegalArgumentException if either argument is null
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,146,"public static Closure forClosure(int count, Closure command) {"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,147,if (count < 0) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,148,"throw new IllegalArgumentException(""ForClosure: The loop count must not be less than zero, it was "" + count);"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,150,if (command == null) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,151,"throw new IllegalArgumentException(""ForClosure: The command must not be null"");"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,153,"return new ForClosure(count, command);"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,157,* Creates a Closure that will call the command repeatedly until the
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,158,* predicate returns false.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,160,* @param predicate  the predicate to use as an end of loop test
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,161,* @param command  the command to call repeatedly
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,162,* @return the command
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,163,* @throws IllegalArgumentException if either argument is null
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,165,"public static Closure whileClosure(Predicate predicate, Closure command) {"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,166,if (predicate == null) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,167,"throw new IllegalArgumentException(""WhileClosure: The predicate must not be null"");"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,169,if (command == null) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,170,"throw new IllegalArgumentException(""WhileClosure: The command must not be null"");"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,172,"return new WhileClosure(predicate, command, false);"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,176,* Creates a Closure that will call the command once and then repeatedly
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,177,* until the predicate returns false.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,179,* @param command  the command to call repeatedly
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,180,* @param predicate  the predicate to use as an end of loop test
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,181,* @return the command
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,182,* @throws IllegalArgumentException if either argument is null
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,184,"public static Closure doWhileClosure(Closure command, Predicate predicate) {"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,185,if (command == null) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,186,"throw new IllegalArgumentException(""DoWhileClosure: The command must not be null"");"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,188,if (predicate == null) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,189,"throw new IllegalArgumentException(""DoWhileClosure: The predicate must not be null"");"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,191,"return new WhileClosure(predicate, command, true);"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,195,* Creates a Closure that will invoke a specific method on the command's
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,196,* input object by reflection.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,198,* @param methodName  the name of the method
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,199,* @return the command
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,200,* @throws IllegalArgumentException if the method name is null
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,202,public static Closure invokerClosure(String methodName) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,203,"return asClosure(TransformerUtils.invokerTransformer(methodName, null, null));"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,207,* Creates a Closure that will invoke a specific method on the command's
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,208,* input object by reflection.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,210,* @param methodName  the name of the method
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,211,* @param paramTypes  the parameter types
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,212,* @param args  the arguments
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,213,* @return the command
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,214,* @throws IllegalArgumentException if the method name is null
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,215,* @throws IllegalArgumentException if the paramTypes and args don't match
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,217,"public static Closure invokerClosure(String methodName, Class[] paramTypes, Object[] args) {"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,218,"return asClosure(TransformerUtils.invokerTransformer(methodName, paramTypes, args));"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,222,"* Create a new Closure that calls two Closures, passing the result of"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,223,* the first into the second.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,225,* @param command1  the first command
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,226,* @param command2  the second command
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,227,* @return the command
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,228,* @throws IllegalArgumentException if either command is null
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,230,"public static Closure chainedClosure(Closure command1, Closure command2) {"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,231,"Closure[] commands = new Closure[] { command1, command2 };"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,232,validate(commands);
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,233,return new ChainedClosure(commands);
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,237,"* Create a new Closure that calls each command in turn, passing the"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,238,* result into the next command.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,240,* @param commands  an array of commands to chain
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,241,* @return the command
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,242,* @throws IllegalArgumentException if the commands array is null
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,243,* @throws IllegalArgumentException if the commands array has 0 elements
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,244,* @throws IllegalArgumentException if any command in the array is null
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,246,public static Closure chainedClosure(Closure[] commands) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,247,commands = copy(commands);
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,248,validate(commands);
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,249,return new ChainedClosure(commands);
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,253,"* Create a new Closure that calls each command in turn, passing the"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,254,* result into the next command. The ordering is that of the iterator()
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,255,* method on the collection.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,257,* @param commands  a collection of commands to chain
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,258,* @return the command
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,259,* @throws IllegalArgumentException if the commands collection is null
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,260,* @throws IllegalArgumentException if the commands collection is empty
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,261,* @throws IllegalArgumentException if any command in the collection is null
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,263,public static Closure chainedClosure(Collection commands) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,264,if (commands == null) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,265,"throw new IllegalArgumentException(""ChainedClosure: The command collection must not be null"");"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,267,// convert to array like this to guarantee iterator() ordering
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,268,Closure[] cmds = new Closure[commands.size()];
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,269,int i = 0;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,270,for (Iterator it = commands.iterator(); it.hasNext();) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,271,cmds[i++] = (Closure) it.next();
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,273,validate(cmds);
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,274,return new ChainedClosure(cmds);
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,278,* Create a new Closure that calls one of two commands depending
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,279,* on the specified predicate.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,281,* @param predicate  the predicate to switch on
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,282,* @param trueClosure  the command called if the predicate is true
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,283,* @param falseClosure  the command called if the predicate is false
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,284,* @return the command
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,285,* @throws IllegalArgumentException if the predicate is null
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,286,* @throws IllegalArgumentException if either command is null
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,288,"public static Closure switchClosure(Predicate predicate, Closure trueClosure, Closure falseClosure) {"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,289,"return switchClosureInternal(new Predicate[] { predicate }, new Closure[] { trueClosure }, falseClosure);"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,293,* Create a new Closure that calls one of the commands depending
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,294,* on the predicates. The command at array location 0 is called if the
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,295,* predicate at array location 0 returned true. Each predicate is evaluated
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,296,* until one returns true.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,298,* @param predicates  an array of predicates to check
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,299,* @param commands  an array of commands to call
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,300,* @return the command
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,301,* @throws IllegalArgumentException if the either array is null
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,302,* @throws IllegalArgumentException if the either array has 0 elements
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,303,* @throws IllegalArgumentException if any element in the arrays is null
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,304,* @throws IllegalArgumentException if the arrays are different sizes
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,306,"public static Closure switchClosure(Predicate[] predicates, Closure[] commands) {"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,307,"return switchClosureInternal(copy(predicates), copy(commands), null);"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,311,* Create a new Closure that calls one of the commands depending
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,312,* on the predicates. The command at array location 0 is called if the
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,313,* predicate at array location 0 returned true. Each predicate is evaluated
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,314,"* until one returns true. If no predicates evaluate to true, the default"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,315,* command is called.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,317,* @param predicates  an array of predicates to check
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,318,* @param commands  an array of commands to call
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,319,* @param defaultClosure  the default to call if no predicate matches
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,320,* @return the command
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,321,* @throws IllegalArgumentException if the either array is null
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,322,* @throws IllegalArgumentException if the either array has 0 elements
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,323,* @throws IllegalArgumentException if any element in the arrays is null
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,324,* @throws IllegalArgumentException if the arrays are different sizes
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,326,"public static Closure switchClosure(Predicate[] predicates, Closure[] commands, Closure defaultClosure) {"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,327,"return switchClosureInternal(copy(predicates), copy(commands), defaultClosure);"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,331,* Create a new Closure that calls one of the commands depending
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,332,* on the predicates.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,333,* <p>
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,334,* The Map consists of Predicate keys and Closure values. A command
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,335,* is called if its matching predicate returns true. Each predicate is evaluated
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,336,"* until one returns true. If no predicates evaluate to true, the default"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,337,* command is called. The default command is set in the map with a
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,338,* null key. The ordering is that of the iterator() method on the entryset
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,339,* collection of the map.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,341,* @param predicatesAndClosures  a map of predicates to commands
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,342,* @return the command
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,343,* @throws IllegalArgumentException if the map is null
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,344,* @throws IllegalArgumentException if the map is empty
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,345,* @throws IllegalArgumentException if any command in the map is null
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,346,* @throws ClassCastException  if the map elements are of the wrong type
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,348,public static Closure switchClosure(Map predicatesAndClosures) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,349,Closure[] trs = null;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,350,Predicate[] preds = null;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,351,if (predicatesAndClosures == null) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,352,"throw new IllegalArgumentException(""SwitchClosure: The predicate and command map must not be null"");"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,354,// convert to array like this to guarantee iterator() ordering
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,355,Closure def = (Closure) predicatesAndClosures.remove(null);
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,356,int size = predicatesAndClosures.size();
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,357,trs = new Closure[size];
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,358,preds = new Predicate[size];
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,359,int i = 0;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,360,for (Iterator it = predicatesAndClosures.entrySet().iterator(); it.hasNext();) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,361,Map.Entry entry = (Map.Entry) it.next();
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,362,preds[i] = (Predicate) entry.getKey();
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,363,trs[i] = (Closure) entry.getValue();
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,364,i++;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,366,"return switchClosureInternal(preds, trs, def);"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,370,* Validate input and create command
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,372,"private static Closure switchClosureInternal(Predicate[] predicates, Closure[] commands, Closure defaultClosure) {"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,373,validate(predicates);
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,374,validate(commands);
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,375,if (predicates.length != commands.length) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,376,"throw new IllegalArgumentException(""SwitchClosure: The predicate and command arrays must be the same size"");"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,378,if (defaultClosure == null) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,379,defaultClosure = nopClosure();
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,381,"return new SwitchClosure(predicates, commands, defaultClosure);"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,385,* Create a new Closure that uses the input object as a key to find the
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,386,* command to call.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,387,* <p>
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,388,* The Map consists of object keys and Closure values. A command
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,389,"* is called if the input object equals the key. If there is no match, the"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,390,* default command is called. The default command is set in the map
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,391,* using a null key.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,393,* @param objectsAndClosures  a map of objects to commands
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,394,* @return the command
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,395,* @throws IllegalArgumentException if the map is null
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,396,* @throws IllegalArgumentException if the map is empty
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,397,* @throws IllegalArgumentException if any command in the map is null
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,399,public static Closure switchMapClosure(Map objectsAndClosures) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,400,Closure[] trs = null;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,401,Predicate[] preds = null;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,402,if (objectsAndClosures == null) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,403,"throw new IllegalArgumentException(""SwitchEqualsClosure: The obejct and command map must not be null"");"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,405,Closure def = (Closure) objectsAndClosures.remove(null);
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,406,int size = objectsAndClosures.size();
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,407,trs = new Closure[size];
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,408,preds = new Predicate[size];
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,409,int i = 0;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,410,for (Iterator it = objectsAndClosures.entrySet().iterator(); it.hasNext();) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,411,Map.Entry entry = (Map.Entry) it.next();
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,412,preds[i] = PredicateUtils.equalPredicate(entry.getKey());
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,413,trs[i] = (Closure) entry.getValue();
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,414,i++;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,416,"return switchClosure(preds, trs, def);"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,420,* Copy method
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,422,* @param predicates  the predicates to copy
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,424,private static Predicate[] copy(Predicate[] predicates) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,425,if (predicates == null) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,426,return null;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,428,return (Predicate[]) predicates.clone();
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,432,* Validate method
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,434,* @param predicates  the predicates to validate
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,436,private static void validate(Predicate[] predicates) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,437,if (predicates == null) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,438,"throw new IllegalArgumentException(""ClosureUtils: The predicate array must not be null"");"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,440,if (predicates.length < 1) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,441,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,442,"""ClosureUtils: At least 1 predicate must be specified in the predicate array, size was "" + predicates.length);"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,444,for (int i = 0; i < predicates.length; i++) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,445,if (predicates[i] == null) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,446,"throw new IllegalArgumentException(""ClosureUtils: The predicate array must not contain a null predicate, index "" + i + "" was null"");"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,452,* Copy method
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,454,* @param commands  the commands to copy
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,456,private static Closure[] copy(Closure[] commands) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,457,if (commands == null) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,458,return null;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,460,return (Closure[]) commands.clone();
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,464,* Validate method
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,466,* @param commands  the commands to validate
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,468,private static void validate(Closure[] commands) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,469,if (commands == null) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,470,"throw new IllegalArgumentException(""ClosureUtils: The command array must not be null"");"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,472,if (commands.length < 1) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,473,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,474,"""ClosureUtils: At least 1 command must be specified in the command array, size was "" + commands.length);"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,476,for (int i = 0; i < commands.length; i++) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,477,if (commands[i] == null) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,478,"throw new IllegalArgumentException(""ClosureUtils: The command array must not contain a null command, index "" + i + "" was null"");"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,483,// ExceptionClosure
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,487,* ExceptionClosure always throws an exception
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,489,"private static class ExceptionClosure implements Closure, Serializable {"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,492,* Constructor
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,494,private ExceptionClosure() {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,495,super();
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,499,* Always throw an exception
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,501,public void execute(Object input) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,502,"throw new ClosureException(""ExceptionClosure invoked"");"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,506,// NOPClosure
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,510,* NOPClosure does nothing
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,512,"private static class NOPClosure implements Closure, Serializable {"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,515,* Constructor
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,517,private NOPClosure() {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,518,super();
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,522,* Do nothing
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,524,public void execute(Object input) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,525,// do nothing
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,529,// TransformerClosure
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,533,* TransformerClosure returns the result of calling a Transformer.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,535,"private static class TransformerClosure implements Closure, Serializable {"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,537,private final Transformer iTransformer;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,540,* Constructor to store factory
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,542,private TransformerClosure(Transformer transformer) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,543,super();
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,544,iTransformer = transformer;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,548,* Return the result of calling the factory
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,550,public void execute(Object input) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,551,try {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,552,iTransformer.transform(input);
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,554,} catch (TransformerException ex) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,555,"throw new ClosureException(""TransformerClosure: "" + ex.getMessage(), ex);"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,560,// ChainedClosure
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,564,* ChainedClosure calls a list of commands.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,566,"private static class ChainedClosure implements Closure, Serializable {"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,568,private final Closure[] iClosures;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,571,* Constructor to store params
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,573,private ChainedClosure(Closure[] commands) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,574,super();
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,575,iClosures = commands;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,579,* Execute a list of commands
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,581,public void execute(Object input) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,582,for (int i = 0; i < iClosures.length; i++) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,583,iClosures[i].execute(input);
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,588,// SwitchClosure
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,592,* SwitchClosure calls the command whose predicate returns true.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,594,"private static class SwitchClosure implements Closure, Serializable {"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,596,private final Predicate[] iPredicates;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,597,private final Closure[] iClosures;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,598,private final Closure iDefault;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,601,* Constructor to store params
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,603,"private SwitchClosure(Predicate[] predicates, Closure[] commands, Closure defaultClosure) {"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,604,super();
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,605,iPredicates = predicates;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,606,iClosures = commands;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,607,iDefault = defaultClosure;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,611,* Execute the command whose predicate returns true
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,613,public void execute(Object input) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,614,for (int i = 0; i < iPredicates.length; i++) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,615,if (iPredicates[i].evaluate(input) == true) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,616,iClosures[i].execute(input);
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,617,return;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,620,iDefault.execute(input);
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,624,// ForClosure
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,628,* ForClosure calls the command a fixed nunmber of times.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,630,"private static class ForClosure implements Closure, Serializable {"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,632,private final int iCount;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,633,private final Closure iClosure;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,636,* Constructor to store params
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,638,"private ForClosure(int count, Closure command) {"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,639,super();
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,640,iCount = count;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,641,iClosure = command;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,645,* Execute the command count times
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,647,public void execute(Object input) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,648,for (int i = 0; i < iCount; i++) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,649,iClosure.execute(input);
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,654,// WhileClosure
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,658,* WhileClosure calls the command until the predicate is false.
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,660,"private static class WhileClosure implements Closure, Serializable {"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,662,private final Predicate iPredicate;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,663,private final Closure iClosure;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,664,private final boolean iDoLoop;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,667,* Constructor to store params
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,669,"private WhileClosure(Predicate predicate, Closure command, boolean doLoop) {"
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,670,super();
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,671,iPredicate = predicate;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,672,iClosure = command;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,673,iDoLoop = doLoop;
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,677,* Execute the command until the predicate is false
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,679,public void execute(Object input) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,680,if (iDoLoop) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,681,iClosure.execute(input);
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,683,while (iPredicate.evaluate(input)) {
True,src/java/org/apache/commons/lang/functor/ClosureUtils.java,src/java/org/apache/commons/lang/functor/ClosureUtils.java,684,iClosure.execute(input);
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,5,* reserved.
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,9,* are met:
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,17,*    distribution.
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,54,package org.apache.commons.lang.functor;
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,57,* <code>Factory</code> defines an interface implemented by classes that
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,58,* create objects.
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,60,"* @author <a href=""mailto:scolebourne@joda.org"">Stephen Colebourne</a>"
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,61,"* @version $Id: Factory.java,v 1.1 2002/11/05 16:44:28 bayard Exp $"
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,63,public interface Factory {
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,66,* Create a new object.
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,68,* @return an new object
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,69,* @throws FactoryException (runtime) if the factory cannot create an object
True,src/java/org/apache/commons/lang/functor/Factory.java,src/java/org/apache/commons/lang/functor/Factory.java,71,public Object create();
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,5,* reserved.
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,9,* are met:
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,17,*    distribution.
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,54,package org.apache.commons.lang.functor;
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,56,import org.apache.commons.lang.exception.NestableRuntimeException;
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,58,* Exception thrown when the a Factory cannot create the object as requested.
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,59,"* If required, a root cause error can be wrapped within this one."
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,61,"* @author <a href=""mailto:scolebourne@joda.org"">Stephen Colebourne</a>"
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,62,"* @version $Id: FactoryException.java,v 1.1 2002/11/05 16:44:28 bayard Exp $"
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,64,public class FactoryException extends NestableRuntimeException {
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,67,* Constructs a new <code>FactoryException</code> without specified
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,68,* detail message.
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,70,public FactoryException() {
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,71,super();
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,75,* Constructs a new <code>FactoryException</code> with specified
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,76,* detail message.
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,78,* @param msg  the error message.
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,80,public FactoryException(String msg) {
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,81,super(msg);
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,85,* Constructs a new <code>FactoryException</code> with specified
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,86,* nested <code>Throwable</code> root cause.
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,88,* @param rootCause  the exception or error that caused this exception
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,89,*                   to be thrown.
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,91,public FactoryException(Throwable rootCause) {
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,92,super(rootCause);
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,96,* Constructs a new <code>FactoryException</code> with specified
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,97,* detail message and nested <code>Throwable</code> root cause.
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,99,* @param msg        the error message.
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,100,* @param rootCause  the exception or error that caused this exception
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,101,*                   to be thrown.
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,103,"public FactoryException(String msg, Throwable rootCause) {"
True,src/java/org/apache/commons/lang/functor/FactoryException.java,src/java/org/apache/commons/lang/functor/FactoryException.java,104,"super(msg, rootCause);"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,5,* reserved.
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,9,* are met:
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,17,*    distribution.
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,54,package org.apache.commons.lang.functor;
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,56,import java.io.Serializable;
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,57,import java.lang.reflect.Constructor;
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,58,import java.lang.reflect.InvocationTargetException;
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,59,import java.lang.reflect.Method;
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,61,import org.apache.commons.lang.SerializationException;
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,62,import org.apache.commons.lang.SerializationUtils;
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,64,* <code>FactoryUtils</code> provides reference implementations and utilities
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,65,* for the Factory pattern interface. The supplied factories are:
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,66,* <ul>
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,67,* <li>Prototype - clones a specified object
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,68,* <li>Reflection - creates objects using reflection
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,69,* <li>Constant - always returns the same object
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,70,* <li>Null - always returns null
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,71,* <li>Exception - always throws an exception
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,72,* </ul>
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,73,* All the supplied factories are Serializable.
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,75,"* @author <a href=""mailto:scolebourne@joda.org"">Stephen Colebourne</a>"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,76,"* @version $Id: FactoryUtils.java,v 1.1 2002/11/05 16:44:28 bayard Exp $"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,78,public class FactoryUtils {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,81,* A factory that always throws an exception
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,83,private static final Factory EXCEPTION_FACTORY = new ExceptionFactory();
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,85,* A factory that always returns null
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,87,private static final Factory NULL_FACTORY = new ConstantFactory(null);
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,90,* Restrictive constructor
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,92,protected FactoryUtils() {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,93,super();
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,97,* Gets a Factory that always throws an exception.
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,98,* This could be useful during testing as a placeholder.
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,100,* @return the factory
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,102,public static Factory exceptionFactory() {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,103,return EXCEPTION_FACTORY;
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,107,* Gets a Factory that will return null each time the factory is used.
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,109,* @return the factory
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,111,public static Factory nullFactory() {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,112,return NULL_FACTORY;
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,116,* Creates a Factory that will return the same object each time the factory
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,117,"* is used. No check is made that the object is immutable. In general, only"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,118,* immutable objects should use the constant factory. Mutable objects should
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,119,* use the prototype factory.
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,121,* @param constantToReturn  the constant object to return each time in the factory
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,122,* @return the factory.
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,124,public static Factory constantFactory(Object constantToReturn) {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,125,return new ConstantFactory(constantToReturn);
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,129,* Creates a Factory that will return a clone of the same prototype object
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,130,* each time the factory is used. The prototype will be cloned using one of these
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,131,* techniques (in order):
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,132,* <ul>
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,133,* <li>public clone method
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,134,* <li>public copy constructor
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,135,* <li>serialization clone
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,136,* <ul>
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,138,* @param prototype  the object to clone each time in the factory
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,139,* @return the factory
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,140,* @throws IllegalArgumentException if the prototype is null
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,141,* @throws IllegalArgumentException if the prototype cannot be cloned
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,143,public static Factory prototypeFactory(Object prototype) {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,144,if (prototype == null) {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,145,"throw new IllegalArgumentException(""PrototypeFactory: The prototype must not be null"");"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,147,// TODO: move to cloneable pattern
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,148,try {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,149,"prototype.getClass().getMethod(""clone"", null);"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,150,return new PrototypeCloneFactory(prototype);
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,152,} catch (NoSuchMethodException ex) {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,153,try {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,154,prototype.getClass().getConstructor(new Class[] { prototype.getClass()});
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,155,"return new ReflectionFactory(prototype.getClass(), new Class[] { prototype.getClass()}, new Object[] { prototype });"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,157,} catch (NoSuchMethodException ex2) {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,158,if (prototype instanceof Serializable) {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,159,return new PrototypeSerializationFactory((Serializable) prototype);
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,163,"throw new IllegalArgumentException(""PrototypeFactory: The prototype must be cloneable"");"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,167,* Creates a Factory that can create objects of a specific type using
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,168,* a no-args constructor.
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,170,* @param classToInstantiate  the Class to instantiate each time in the factory
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,171,* @return the factory
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,172,* @throws IllegalArgumentException if the classToInstantiate is null
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,174,public static Factory reflectionFactory(Class classToInstantiate) {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,175,return new ReflectionFactory(classToInstantiate);
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,179,* Creates a Factory that can create objects of a specific type using
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,180,* the arguments specified to this method.
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,182,* @param classToInstantiate  the Class to instantiate each time in the factory
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,183,"* @param paramTypes  parameter types for the constructor, can be null"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,184,"* @param args  the arguments to pass to the constructor, can be null"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,185,* @return the factory
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,186,* @throws IllegalArgumentException if the classToInstantiate is null
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,187,* @throws IllegalArgumentException if the paramTypes and args don't match
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,188,* @throws IllegalArgumentException if the constructor doesn't exist
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,190,"public static Factory reflectionFactory(Class classToInstantiate, Class[] paramTypes, Object[] args) {"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,191,"return new ReflectionFactory(classToInstantiate, paramTypes, args);"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,194,// ExceptionFactory
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,198,* ExceptionFactory always throws an exception
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,200,"private static class ExceptionFactory implements Factory, Serializable {"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,203,* Constructor
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,205,private ExceptionFactory() {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,206,super();
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,210,* Always throw an exception
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,212,public Object create() {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,213,"throw new FactoryException(""ExceptionFactory invoked"");"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,217,// ConstantFactory
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,221,* ConstantFactory returns the same instance each time.
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,223,"private static class ConstantFactory implements Factory, Serializable {"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,225,private final Object iConstant;
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,228,* Constructor to store constant
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,230,private ConstantFactory(Object constant) {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,231,super();
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,232,iConstant = constant;
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,236,* Always return constant
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,238,public Object create() {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,239,return iConstant;
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,243,// PrototypeCloneFactory
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,247,* PrototypeCloneFactory creates objects by copying a prototype using the clone method.
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,249,"private static class PrototypeCloneFactory implements Factory, Serializable {"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,250,private final Object iPrototype;
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,251,private transient Method iCloneMethod;
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,254,* Constructor to store prototype
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,256,private PrototypeCloneFactory(Object prototype) {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,257,super();
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,258,if (prototype == null) {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,259,"throw new IllegalArgumentException(""PrototypeCloneFactory: The prototype must not be null"");"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,261,iPrototype = prototype;
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,263,findCloneMethod();
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,267,* Find the Clone method for the class specified.
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,269,private void findCloneMethod() {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,270,try {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,271,"iCloneMethod = iPrototype.getClass().getMethod(""clone"", null);"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,273,} catch (NoSuchMethodException ex) {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,274,"throw new IllegalArgumentException(""PrototypeCloneFactory: The clone method must exist and be public "");"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,279,* Return clone of prototype
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,281,public Object create() {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,282,// needed for post-serialization
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,283,if (iCloneMethod == null) {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,284,findCloneMethod();
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,287,try {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,288,"return iCloneMethod.invoke(iPrototype, null);"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,290,} catch (IllegalAccessException ex) {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,291,"throw new FactoryException(""ReflectionFactory: Clone method must be public"", ex);"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,292,} catch (InvocationTargetException ex) {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,293,"throw new FactoryException(""ReflectionFactory: Clone method threw an exception"", ex);"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,298,// PrototypeSerializationFactory
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,302,* PrototypeSerializationFactory creates objects by cloning a prototype using serialization.
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,304,"private static class PrototypeSerializationFactory implements Factory, Serializable {"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,306,private final Serializable iPrototype;
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,309,* Constructor to store prototype
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,311,private PrototypeSerializationFactory(Serializable prototype) {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,312,super();
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,313,if (prototype == null) {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,314,"throw new IllegalArgumentException(""PrototypeSerializationFactory: The prototype must not be null"");"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,316,iPrototype = prototype;
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,320,* Return clone of prototype by serialization
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,322,public Object create() {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,323,try {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,324,return SerializationUtils.clone(iPrototype);
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,326,} catch (SerializationException ex) {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,327,"throw new FactoryException(""PrototypeSerializationFactory: Unable to clone by serialization"", ex);"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,332,// ReflectionFactory
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,336,* ReflectionFactory creates objects using reflection.
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,338,"private static class ReflectionFactory implements Factory, Serializable {"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,340,private final Class iClassToInstantiate;
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,341,private final Class[] iParamTypes;
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,342,private final Object[] iArgs;
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,343,private transient Constructor iConstructor = null;
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,346,* Constructor
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,348,public ReflectionFactory(Class classToInstantiate) {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,349,"this(classToInstantiate, null, null);"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,352,/* builds the object factory taking all the options needed to provide
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,353,* arguments to a constructor.
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,355,"public ReflectionFactory(Class classToInstantiate, Class[] paramTypes, Object[] args) {"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,356,super();
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,357,if (classToInstantiate == null) {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,358,"throw new IllegalArgumentException(""ReflectionFactory: The class to instantiate must not be null"");"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,360,if (((paramTypes == null) && (args != null))
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,361,|| ((paramTypes != null) && (args == null))
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,362,|| ((paramTypes != null) && (args != null) && (paramTypes.length != args.length))) {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,363,"throw new IllegalArgumentException(""ReflectionFactory: The parameter types must match the arguments"");"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,366,iClassToInstantiate = classToInstantiate;
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,367,if ((paramTypes == null) && (args == null)) {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,368,iParamTypes = null;
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,369,iArgs = null;
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,370,} else {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,371,iParamTypes = (Class[]) paramTypes.clone();
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,372,iArgs = (Object[]) args.clone();
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,375,findConstructor();
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,379,* Find the Constructor for the class specified.
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,381,private void findConstructor() {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,382,try {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,383,iConstructor = iClassToInstantiate.getConstructor(iParamTypes);
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,385,} catch (NoSuchMethodException ex) {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,386,"throw new IllegalArgumentException(""ReflectionFactory: The constructor must exist and be public "");"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,391,* Create the object using a constructor
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,393,public Object create() {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,394,// needed for post-serialization
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,395,if (iConstructor == null) {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,396,findConstructor();
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,399,try {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,400,return iConstructor.newInstance(iArgs);
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,402,} catch (InstantiationException ex) {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,403,"throw new FactoryException(""ReflectionFactory: InstantiationException"", ex);"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,404,} catch (IllegalAccessException ex) {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,405,"throw new FactoryException(""ReflectionFactory: Constructor must be public"", ex);"
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,406,} catch (InvocationTargetException ex) {
True,src/java/org/apache/commons/lang/functor/FactoryUtils.java,src/java/org/apache/commons/lang/functor/FactoryUtils.java,407,"throw new FactoryException(""ReflectionFactory: Constructor threw an exception"", ex);"
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,5,* reserved.
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,9,* are met:
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,17,*    distribution.
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,54,package org.apache.commons.lang.functor;
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,57,* <code>Predicate</code> defines an interface implemented by classes that
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,58,* perform a predicate test on an object. Predicate instances can be used
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,59,* to implement queries or to do filtering.
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,61,"* @author <a href=""mailto:jstrachan@apache.org"">James Strachan</a>"
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,62,"* @author <a href=""mailto:scolebourne@joda.org"">Stephen Colebourne</a>"
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,63,"* @version $Id: Predicate.java,v 1.1 2002/11/05 16:44:28 bayard Exp $"
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,65,public interface Predicate {
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,68,* Use the specified parameter to perform a test that returns true or false.
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,70,* @param object  the object to evaluate
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,71,* @return true or false
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,72,* @throws PredicateException (runtime) if the predicate encounters a problem
True,src/java/org/apache/commons/lang/functor/Predicate.java,src/java/org/apache/commons/lang/functor/Predicate.java,74,public boolean evaluate(Object object);
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,5,* reserved.
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,9,* are met:
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,17,*    distribution.
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,54,package org.apache.commons.lang.functor;
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,56,import org.apache.commons.lang.exception.NestableRuntimeException;
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,58,* Exception thrown when the a Predicate encounters a problem.
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,59,"* If required, a root cause error can be wrapped within this one."
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,61,"* @author <a href=""mailto:scolebourne@joda.org"">Stephen Colebourne</a>"
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,62,"* @version $Id: PredicateException.java,v 1.1 2002/11/05 16:44:28 bayard Exp $"
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,64,public class PredicateException extends NestableRuntimeException {
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,67,* Constructs a new <code>PredicateException</code> without specified
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,68,* detail message.
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,70,public PredicateException() {
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,71,super();
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,75,* Constructs a new <code>PredicateException</code> with specified
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,76,* detail message.
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,78,* @param msg  the error message.
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,80,public PredicateException(String msg) {
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,81,super(msg);
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,85,* Constructs a new <code>PredicateException</code> with specified
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,86,* nested <code>Throwable</code> root cause.
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,88,* @param rootCause  the exception or error that caused this exception
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,89,*                   to be thrown.
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,91,public PredicateException(Throwable rootCause) {
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,92,super(rootCause);
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,96,* Constructs a new <code>PredicateException</code> with specified
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,97,* detail message and nested <code>Throwable</code> root cause.
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,99,* @param msg        the error message.
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,100,* @param rootCause  the exception or error that caused this exception
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,101,*                   to be thrown.
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,103,"public PredicateException(String msg, Throwable rootCause) {"
True,src/java/org/apache/commons/lang/functor/PredicateException.java,src/java/org/apache/commons/lang/functor/PredicateException.java,104,"super(msg, rootCause);"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,5,* reserved.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,9,* are met:
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,17,*    distribution.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,54,package org.apache.commons.lang.functor;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,56,import java.io.Serializable;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,57,import java.util.Collection;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,58,import java.util.HashSet;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,59,import java.util.Iterator;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,60,import java.util.Set;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,62,import org.apache.commons.lang.functor.Transformer;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,63,import org.apache.commons.lang.functor.TransformerException;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,64,import org.apache.commons.lang.functor.TransformerUtils;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,66,* <code>PredicateUtils</code> provides reference implementations and utilities
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,67,* for the Predicate pattern interface. The supplied predicates are:
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,68,* <ul>
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,69,* <li>Invoker - returns the result of a method call on the input object
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,70,* <li>InstanceOf - true if the object is an instanceof a class
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,71,* <li>Equal - true if the object equals() a specified object
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,72,* <li>Identity - true if the object == a specified object
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,73,* <li>Null - true if the object is null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,74,* <li>NotNull - true if the object is not null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,75,* <li>Unique - true if the object has not already been evaluated
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,76,* <li>And/All - true if all of the predicates are true
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,77,* <li>Or/Any - true if any of the predicates is true
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,78,* <li>Either/One - true if only one of the predicate is true
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,79,* <li>Neither/None - true if none of the predicates are true
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,80,"* <li>Not - true if the predicate is false, and vice versa"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,81,* <li>Transformer - wraps a Transformer as a Predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,82,* <li>True - always return true
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,83,* <li>False - always return false
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,84,* <li>Exception - always throws an exception
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,85,* <li>NullIsException/NullIsFalse/NullIsTrue - check for null input
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,86,* </ul>
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,87,* All the supplied predicates are Serializable.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,89,"* @author <a href=""mailto:scolebourne@joda.org"">Stephen Colebourne</a>"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,90,* @author Ola Berg
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,91,"* @version $Id: PredicateUtils.java,v 1.1 2002/11/05 16:44:28 bayard Exp $"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,93,public class PredicateUtils {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,96,* A predicate that always throws an exception
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,98,private static final Predicate EXCEPTION_PREDICATE = new ExceptionPredicate();
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,100,* A predicate that always returns true
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,102,private static final Predicate TRUE_PREDICATE = new ConstantPredicate(true);
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,104,* A predicate that always returns false
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,106,private static final Predicate FALSE_PREDICATE = new ConstantPredicate(false);
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,108,* A predicate that returns true if the object is null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,110,private static final Predicate NULL_PREDICATE = new IdentityPredicate(null);
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,112,* A predicate that returns true if the object is not null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,114,private static final Predicate NOT_NULL_PREDICATE = new NotPredicate(NULL_PREDICATE);
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,117,* Restrictive constructor
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,119,protected PredicateUtils() {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,120,super();
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,123,// Simple predicates
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,127,* Gets a Predicate that always throws an exception.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,128,* This could be useful during testing as a placeholder.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,130,* @return the factory
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,132,public static Predicate exceptionPredicate() {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,133,return EXCEPTION_PREDICATE;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,137,* Gets a Predicate that always returns true.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,139,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,141,public static Predicate truePredicate() {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,142,return TRUE_PREDICATE;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,146,* Gets a Predicate that always returns false.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,148,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,150,public static Predicate falsePredicate() {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,151,return FALSE_PREDICATE;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,155,* Gets a Predicate that checks if the input object passed in is null.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,157,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,159,public static Predicate nullPredicate() {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,160,return NULL_PREDICATE;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,164,* Gets a Predicate that checks if the input object passed in is not null.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,166,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,168,public static Predicate notNullPredicate() {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,169,return NOT_NULL_PREDICATE;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,173,* Creates a Predicate that checks if the input object is equal to the
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,174,* specified object using equals().
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,176,* @param value  the value to compare against
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,177,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,179,public static Predicate equalPredicate(Object value) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,180,if (value == null) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,181,return NULL_PREDICATE;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,183,return new EqualPredicate(value);
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,187,* Creates a Predicate that checks if the input object is equal to the
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,188,* specified object by identity.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,190,* @param value  the value to compare against
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,191,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,193,public static Predicate identityPredicate(Object value) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,194,if (value == null) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,195,return NULL_PREDICATE;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,197,return new IdentityPredicate(value);
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,201,* Creates a Predicate that checks if the object passed in is of
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,202,"* a particular type, using instanceof."
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,204,"* @param type  the type to check for, may not be null"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,205,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,206,* @throws IllegalArgumentException if the class is null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,208,public static Predicate instanceofPredicate(Class type) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,209,if (type == null) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,210,"throw new IllegalArgumentException(""InstanceofPredicate: The type to check instanceof must not be null"");"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,212,return new InstanceofPredicate(type);
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,216,* Creates a Predicate that returns true the first time an object is
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,217,"* encoutered, and false if the same object is received"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,218,* again. The comparison is by equals().
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,220,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,222,public static Predicate uniquePredicate() {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,223,// must return new instance each time
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,224,return new UniquePredicate();
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,228,* Creates a Predicate that invokes a method on the input object.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,229,"* The method must return either a boolean or a non-null Boolean,"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,230,"* and have no parameters. If the input object is null, a"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,231,* PredicateException is thrown.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,232,* <p>
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,233,"* For example, <code>PredicateUtils.invokerPredicate(""isEmpty"");</code>"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,234,* will call the <code>isEmpty</code> method on the input object to
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,235,* determine the predicate result.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,237,"* @param methodName  the method name to call on the input object, may not be null"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,238,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,239,* @throws IllegalArgumentException if the methodName is null.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,241,public static Predicate invokerPredicate(String methodName){
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,242,return asPredicate(TransformerUtils.invokerTransformer(methodName));
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,246,* Creates a Predicate that invokes a method on the input object.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,247,"* The method must return either a boolean or a non-null Boolean,"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,248,"* and have no parameters. If the input object is null, a"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,249,* PredicateException is thrown.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,250,* <p>
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,251,"* For example, <code>PredicateUtils.invokerPredicate(""isEmpty"");</code>"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,252,* will call the <code>isEmpty</code> method on the input object to
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,253,* determine the predicate result.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,255,"* @param methodName  the method name to call on the input object, may not be null"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,256,* @param paramTypes  the parameter types
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,257,* @param args  the arguments
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,258,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,259,* @throws IllegalArgumentException if the method name is null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,260,* @throws IllegalArgumentException if the paramTypes and args don't match
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,262,"public static Predicate invokerPredicate(String methodName, Class[] paramTypes, Object[] args){"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,263,"return asPredicate(TransformerUtils.invokerTransformer(methodName, paramTypes, args));"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,266,// Boolean combinations
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,270,* Create a new Predicate that returns true only if both of the specified
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,271,* predicates are true.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,273,"* @param predicate1  the first predicate, may not be null"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,274,"* @param predicate2  the second predicate, may not be null"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,275,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,276,* @throws IllegalArgumentException if either predicate is null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,278,"public static Predicate andPredicate(Predicate predicate1, Predicate predicate2) {"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,279,"return allPredicate(new Predicate[] { predicate1, predicate2 });"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,283,* Create a new Predicate that returns true only if all of the specified
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,284,* predicates are true.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,286,"* @param predicates  an array of predicates to check, may not be null"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,287,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,288,* @throws IllegalArgumentException if the predicates array is null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,289,* @throws IllegalArgumentException if the predicates array has less than 2 elements
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,290,* @throws IllegalArgumentException if any predicate in the array is null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,292,public static Predicate allPredicate(Predicate[] predicates) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,293,return new AllPredicate(validate(predicates));
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,297,* Create a new Predicate that returns true only if all of the specified
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,298,* predicates are true. The predicates are checked in iterator order.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,300,"* @param predicates  a collection of predicates to check, may not be null"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,301,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,302,* @throws IllegalArgumentException if the predicates collection is null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,303,* @throws IllegalArgumentException if the predicates collection has less than 2 elements
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,304,* @throws IllegalArgumentException if any predicate in the collection is null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,306,public static Predicate allPredicate(Collection predicates) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,307,return new AllPredicate(validate(predicates));
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,311,* Create a new Predicate that returns true if either of the specified
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,312,* predicates are true.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,314,"* @param predicate1  the first predicate, may not be null"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,315,"* @param predicate2  the second predicate, may not be null"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,316,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,317,* @throws IllegalArgumentException if either predicate is null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,319,"public static Predicate orPredicate(Predicate predicate1, Predicate predicate2) {"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,320,"return anyPredicate(new Predicate[] { predicate1, predicate2 });"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,324,* Create a new Predicate that returns true if any of the specified
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,325,* predicates are true.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,327,"* @param predicates  an array of predicates to check, may not be null"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,328,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,329,* @throws IllegalArgumentException if the predicates array is null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,330,* @throws IllegalArgumentException if the predicates array has less than 2 elements
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,331,* @throws IllegalArgumentException if any predicate in the array is null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,333,public static Predicate anyPredicate(Predicate[] predicates) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,334,return new AnyPredicate(validate(predicates));
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,338,* Create a new Predicate that returns true if any of the specified
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,339,* predicates are true. The predicates are checked in iterator order.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,341,"* @param predicates  a collection of predicates to check, may not be null"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,342,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,343,* @throws IllegalArgumentException if the predicates collection is null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,344,* @throws IllegalArgumentException if the predicates collection has less than 2 elements
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,345,* @throws IllegalArgumentException if any predicate in the collection is null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,347,public static Predicate anyPredicate(Collection predicates) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,348,return new AnyPredicate(validate(predicates));
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,352,"* Create a new Predicate that returns true if one, but not both, of the"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,353,* specified predicates are true.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,355,"* @param predicate1  the first predicate, may not be null"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,356,"* @param predicate2  the second predicate, may not be null"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,357,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,358,* @throws IllegalArgumentException if either predicate is null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,360,"public static Predicate eitherPredicate(Predicate predicate1, Predicate predicate2) {"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,361,"return onePredicate(new Predicate[] { predicate1, predicate2 });"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,365,* Create a new Predicate that returns true if only one of the specified
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,366,* predicates are true.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,368,"* @param predicates  an array of predicates to check, may not be null"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,369,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,370,* @throws IllegalArgumentException if the predicates array is null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,371,* @throws IllegalArgumentException if the predicates array has less than 2 elements
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,372,* @throws IllegalArgumentException if any predicate in the array is null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,374,public static Predicate onePredicate(Predicate[] predicates) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,375,return new OnePredicate(validate(predicates));
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,379,* Create a new Predicate that returns true if only one of the specified
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,380,* predicates are true. The predicates are checked in iterator order.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,382,"* @param predicates  a collection of predicates to check, may not be null"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,383,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,384,* @throws IllegalArgumentException if the predicates collection is null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,385,* @throws IllegalArgumentException if the predicates collection has less than 2 elements
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,386,* @throws IllegalArgumentException if any predicate in the collection is null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,388,public static Predicate onePredicate(Collection predicates) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,389,return new OnePredicate(validate(predicates));
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,393,* Create a new Predicate that returns true if neither of the specified
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,394,* predicates are true.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,396,"* @param predicate1  the first predicate, may not be null"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,397,"* @param predicate2  the second predicate, may not be null"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,398,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,399,* @throws IllegalArgumentException if either predicate is null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,401,"public static Predicate neitherPredicate(Predicate predicate1, Predicate predicate2) {"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,402,"return nonePredicate(new Predicate[] { predicate1, predicate2 });"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,406,* Create a new Predicate that returns true if none of the specified
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,407,* predicates are true.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,409,"* @param predicates  an array of predicates to check, may not be null"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,410,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,411,* @throws IllegalArgumentException if the predicates array is null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,412,* @throws IllegalArgumentException if the predicates array has less than 2 elements
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,413,* @throws IllegalArgumentException if any predicate in the array is null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,415,public static Predicate nonePredicate(Predicate[] predicates) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,416,Predicate[] preds = validate(predicates);
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,417,for (int i = 0; i < preds.length; i++) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,418,preds[i] = notPredicate(preds[i]);
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,420,return new AllPredicate(preds);
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,424,* Create a new Predicate that returns true if none of the specified
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,425,* predicates are true. The predicates are checked in iterator order.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,427,"* @param predicates  a collection of predicates to check, may not be null"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,428,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,429,* @throws IllegalArgumentException if the predicates collection is null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,430,* @throws IllegalArgumentException if the predicates collection has less than 2 elements
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,431,* @throws IllegalArgumentException if any predicate in the collection is null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,433,public static Predicate nonePredicate(Collection predicates) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,434,Predicate[] preds = validate(predicates);
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,435,for (int i = 0; i < preds.length; i++) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,436,preds[i] = notPredicate(preds[i]);
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,438,return new AllPredicate(preds);
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,442,* Create a new Predicate that returns true if the specified predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,443,* returns false and vice versa.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,445,* @param predicate  the predicate to not
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,446,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,447,* @throws IllegalArgumentException if the predicate is null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,449,public static Predicate notPredicate(Predicate predicate) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,450,if (predicate == null) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,451,"throw new IllegalArgumentException(""NotPredicate: The predicate must not be null"");"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,453,return new NotPredicate(predicate);
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,456,// Adaptors
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,460,* Create a new Predicate that wraps a Transformer. The Transformer must
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,461,* return either Boolean.TRUE or Boolean.FALSE otherwise a PredicateException
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,462,* will be thrown.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,464,"* @param transformer  the transformer to wrap, may not be null"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,465,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,466,* @throws IllegalArgumentException if the transformer is null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,468,public static Predicate asPredicate(Transformer transformer) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,469,if (transformer == null) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,470,"throw new IllegalArgumentException(""TransformerPredicate: The transformer to call must not be null"");"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,472,return new TransformerPredicate(transformer);
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,475,// Null handlers
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,479,"* Gets a Predicate that throws an exception if the input object is null,"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,480,* otherwise it calls the specified Predicate. This allows null handling
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,481,* behaviour to be added to Predicates that don't support nulls.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,483,"* @param predicate  the predicate to wrap, may not be null"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,484,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,485,* @throws IllegalArgumentException if the predicate is null.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,487,public static Predicate nullIsExceptionPredicate(Predicate predicate){
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,488,if (predicate == null) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,489,"throw new IllegalArgumentException(""The predicate must not be null"");"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,491,return new NullIsExceptionPredicate( predicate);
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,495,"* Gets a Predicate that returns false if the input object is null, otherwise"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,496,* it calls the specified Predicate. This allows null handling behaviour to
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,497,* be added to Predicates that don't support nulls.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,499,"* @param predicate  the predicate to wrap, may not be null"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,500,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,501,* @throws IllegalArgumentException if the predicate is null.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,503,public static Predicate nullIsFalsePredicate(Predicate predicate){
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,504,if (predicate == null) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,505,"throw new IllegalArgumentException(""The predicate must not be null"");"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,507,return new NullIsFalsePredicate(predicate);
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,511,"* Gets a Predicate that returns true if the input object is null, otherwise"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,512,* it calls the specified Predicate. This allows null handling behaviour to
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,513,* be added to Predicates that don't support nulls.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,515,"* @param predicate  the predicate to wrap, may not be null"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,516,* @return the predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,517,* @throws IllegalArgumentException if the predicate is null.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,519,public static Predicate nullIsTruePredicate(Predicate predicate){
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,520,if (predicate == null) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,521,"throw new IllegalArgumentException(""The predicate must not be null"");"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,523,return new NullIsTruePredicate(predicate);
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,527,* Convert a collection to an array using the iterator.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,529,* @param predicates  the predicates to validate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,530,* @return predicate array
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,532,private static Predicate[] validate(Collection predicates) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,533,if (predicates == null) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,534,"throw new IllegalArgumentException(""PredicateUtils: The predicate collection must not be null"");"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,536,if (predicates.size() < 2) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,537,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,538,"""PredicateUtils: At least 2 predicates must be specified in the predicate collection, size was "" + predicates.size());"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,540,// convert to array like this to guarantee iterator() ordering
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,541,Predicate[] preds = new Predicate[predicates.size()];
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,542,int i = 0;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,543,for (Iterator it = predicates.iterator(); it.hasNext();) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,544,preds[i] = (Predicate) it.next();
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,545,if (preds[i] == null) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,546,"throw new IllegalArgumentException(""PredicateUtils: The predicate collection must not contain a null predicate, index "" + i + "" was null"");"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,548,i++;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,550,return preds;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,554,* Validate method shared amongst predicate implementations.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,556,* @param predicates  the predicates to validate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,557,* @return predicate array (copy)
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,559,private static Predicate[] validate(Predicate[] predicates) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,560,if (predicates == null) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,561,"throw new IllegalArgumentException(""PredicateUtils: The predicate array must not be null"");"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,563,if (predicates.length < 2) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,564,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,565,"""PredicateUtils: At least 2 predicates must be specified in the predicate array, size was "" + predicates.length);"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,567,Predicate[] preds = new Predicate[predicates.length];
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,568,for (int i = 0; i < predicates.length; i++) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,569,if (predicates[i] == null) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,570,"throw new IllegalArgumentException(""PredicateUtils: The predicate array must not contain a null predicate, index "" + i + "" was null"");"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,572,preds[i] = predicates[i];
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,574,return preds;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,577,// ExceptionPredicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,581,* ExceptionPredicate always throws an exception
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,583,"private static class ExceptionPredicate implements Predicate, Serializable {"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,586,* Constructor
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,588,private ExceptionPredicate() {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,589,super();
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,593,* Always throw an exception
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,595,public boolean evaluate(Object object) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,596,"throw new PredicateException(""ExceptionPredicate invoked"");"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,600,// ConstantPredicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,604,* ConstantPredicate returns the same instance each time.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,606,"private static class ConstantPredicate implements Predicate, Serializable {"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,608,private final boolean iConstant;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,611,* Constructor to store constant
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,613,private ConstantPredicate(boolean constant) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,614,super();
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,615,iConstant = constant;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,619,* Always return constant
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,621,public boolean evaluate(Object object) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,622,return iConstant;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,626,// AllPredicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,630,* AllPredicate returns true if all predicates return true
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,632,"private static class AllPredicate implements Predicate, Serializable {"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,633,private final Predicate[] iPredicates;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,636,* Constructor
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,638,private AllPredicate(Predicate[] predicates) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,639,super();
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,640,iPredicates = predicates;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,644,* Return true if all predicates return true
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,646,public boolean evaluate(Object object) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,647,for (int i = 0; i < iPredicates.length; i++) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,648,if (iPredicates[i].evaluate(object) == false) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,649,return false;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,652,return true;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,656,// AnyPredicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,660,* AnyPredicate returns true if one of the predicates return true
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,662,"private static class AnyPredicate implements Predicate, Serializable {"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,663,private final Predicate[] iPredicates;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,666,* Constructor
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,668,private AnyPredicate(Predicate[] predicates) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,669,super();
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,670,iPredicates = predicates;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,674,* Return true if one of the predicates returns true
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,676,public boolean evaluate(Object object) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,677,for (int i = 0; i < iPredicates.length; i++) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,678,if (iPredicates[i].evaluate(object)) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,679,return true;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,682,return false;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,686,// OnePredicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,690,* OnePredicate returns true if only one of the predicates return true
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,692,"private static class OnePredicate implements Predicate, Serializable {"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,693,private final Predicate[] iPredicates;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,696,* Constructor
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,698,private OnePredicate(Predicate[] predicates) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,699,super();
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,700,iPredicates = predicates;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,704,* Return true if only one of the predicates returns true
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,706,public boolean evaluate(Object object) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,707,boolean match = false;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,708,for (int i = 0; i < iPredicates.length; i++) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,709,if (iPredicates[i].evaluate(object)) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,710,if (match) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,711,return false;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,713,match = true;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,716,return match;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,720,// NotPredicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,724,* NotPredicate returns the opposite of the wrapped predicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,726,"private static class NotPredicate implements Predicate, Serializable {"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,727,private final Predicate iPredicate;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,730,* Constructor
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,732,private NotPredicate(Predicate predicate) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,733,super();
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,734,iPredicate = predicate;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,738,"* Return true if the wrapped predicate returns false, and vice versa"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,740,public boolean evaluate(Object object) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,741,return !iPredicate.evaluate(object);
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,745,// InstanceofPredicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,749,* InstanceofPredicate checks the type of an object
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,751,"private static class InstanceofPredicate implements Predicate, Serializable {"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,752,private final Class iType;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,755,* Constructor
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,757,public InstanceofPredicate(Class type) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,758,super();
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,759,iType = type;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,763,* Return true if the object is an instanceof the type of the predicate.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,765,public boolean evaluate(Object object) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,766,return iType.isInstance(object);
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,770,// EqualPredicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,774,* EqualPredicate that checks if the object is a particular value by equals().
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,776,"private static class EqualPredicate implements Predicate, Serializable {"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,777,private final Object iValue;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,780,* Constructor
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,782,public EqualPredicate(Object value) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,783,super();
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,784,iValue = value;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,788,* Return true if the object is equals() to the value stored in the predicate.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,790,public boolean evaluate(Object object) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,791,return iValue.equals(object);
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,795,// IdentityPredicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,799,* IdentityPredicate that checks if the object is a particular value by identity.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,801,"private static class IdentityPredicate implements Predicate, Serializable {"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,802,private final Object iValue;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,805,* Constructor
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,807,public IdentityPredicate(Object value) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,808,super();
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,809,iValue = value;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,813,* Return true if the object is equals() to the value stored in the predicate.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,815,public boolean evaluate(Object object) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,816,return iValue == object;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,820,// UniquePredicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,824,* UniquePredicate returns true the first time an object is
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,825,"* encoutered, and false if the same object is received"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,826,* again using equals().
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,828,"private static class UniquePredicate implements Predicate, Serializable {"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,829,private final Set iSet = new HashSet();
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,832,* Constructor
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,834,public UniquePredicate() {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,835,super();
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,839,"* Return true the first time, and false subsequant times"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,840,"* that an object is encountered, using equals()."
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,842,public boolean evaluate(Object object) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,843,return iSet.add(object);
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,847,// TransformerPredicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,851,* TransformerPredicate returns the result of the Transformer as a boolean.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,853,"private static class TransformerPredicate implements Predicate, Serializable {"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,855,private final Transformer iTransformer;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,858,* Constructor
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,860,public TransformerPredicate(Transformer transformer) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,861,super();
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,862,iTransformer = transformer;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,866,* Return the boolean result of a Transformer
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,868,public boolean evaluate(Object object) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,869,Object result = null;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,870,try {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,871,result = iTransformer.transform(object);
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,873,} catch (TransformerException ex) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,874,"throw new PredicateException(""TransformerPredicate: "" + ex.getMessage(), ex);"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,876,if (result instanceof Boolean == false) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,877,throw new PredicateException(
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,878,"""TransformerPredicate: Transformer must return an instanceof Boolean, it was a """
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,879,"+ (result == null ? ""null object"" : result.getClass().getName()));"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,881,return ((Boolean) result).booleanValue();
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,885,// NullIsExceptionPredicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,889,* NullIsExceptionPredicate returns an exception if null is passed in.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,891,"private static class NullIsExceptionPredicate implements Predicate, Serializable {"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,892,private final Predicate iPredicate;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,895,* Constructor
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,897,private NullIsExceptionPredicate(Predicate predicate){
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,898,super();
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,899,iPredicate = predicate;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,903,* Return an exception if null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,905,public boolean evaluate(Object object){
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,906,if (object == null) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,907,"throw new PredicateException(""NullIsExceptionPredicate: Input Object must not be null"");"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,909,return iPredicate.evaluate(object);
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,913,// NullIsFalsePredicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,917,* NullIsFalsePredicate returns false if null is passed in.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,919,"private static class NullIsFalsePredicate implements Predicate, Serializable {"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,920,private final Predicate iPredicate;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,923,* Constructor
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,925,private NullIsFalsePredicate(Predicate predicate){
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,926,super();
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,927,iPredicate = predicate;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,931,* Return false if null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,933,public boolean evaluate(Object object){
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,934,if (object == null) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,935,return false;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,937,return iPredicate.evaluate(object);
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,941,// NullIsTruePredicate
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,945,* NullIsTruePredicate returns true if null is passed in.
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,947,"private static class NullIsTruePredicate implements Predicate, Serializable {"
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,948,private final Predicate iPredicate;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,951,* Constructor
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,953,private NullIsTruePredicate(Predicate predicate){
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,954,super();
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,955,iPredicate = predicate;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,959,* Return true if null
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,961,public boolean evaluate(Object object){
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,962,if (object == null) {
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,963,return true;
True,src/java/org/apache/commons/lang/functor/PredicateUtils.java,src/java/org/apache/commons/lang/functor/PredicateUtils.java,965,return iPredicate.evaluate(object);
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,5,* reserved.
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,9,* are met:
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,17,*    distribution.
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,54,package org.apache.commons.lang.functor;
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,57,* <code>Transformer</code> defines an interface implemented by classes that
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,58,* transform one object into another. The original object is left unchanged.
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,59,"* Transformers are typically used for type conversions, or extracting data"
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,60,* from an object.
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,62,"* @author <a href=""mailto:jstrachan@apache.org"">James Strachan</a>"
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,63,"* @author <a href=""mailto:scolebourne@joda.org"">Stephen Colebourne</a>"
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,64,"* @version $Id: Transformer.java,v 1.1 2002/11/05 16:44:28 bayard Exp $"
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,66,public interface Transformer {
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,69,* Transforms the input object (leaving it unchanged) into some output object.
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,71,* @param input  the object to be transformed
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,72,* @return a transformed object
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,73,* @throws TransformException (runtime) if the transform cannot be completed
True,src/java/org/apache/commons/lang/functor/Transformer.java,src/java/org/apache/commons/lang/functor/Transformer.java,75,public Object transform(Object input);
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,5,* reserved.
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,9,* are met:
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,17,*    distribution.
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,54,package org.apache.commons.lang.functor;
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,56,import org.apache.commons.lang.exception.NestableRuntimeException;
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,58,* Exception thrown when the a Transformer encounters a problem.
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,59,"* If required, a root cause error can be wrapped within this one."
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,61,"* @author <a href=""mailto:scolebourne@joda.org"">Stephen Colebourne</a>"
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,62,"* @version $Id: TransformerException.java,v 1.1 2002/11/05 16:44:28 bayard Exp $"
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,64,public class TransformerException extends NestableRuntimeException {
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,67,* Constructs a new <code>TransformerException</code> without specified
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,68,* detail message.
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,70,public TransformerException() {
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,71,super();
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,75,* Constructs a new <code>TransformerException</code> with specified
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,76,* detail message.
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,78,* @param msg  the error message.
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,80,public TransformerException(String msg) {
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,81,super(msg);
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,85,* Constructs a new <code>TransformerException</code> with specified
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,86,* nested <code>Throwable</code> root cause.
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,88,* @param rootCause  the exception or error that caused this exception
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,89,*                   to be thrown.
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,91,public TransformerException(Throwable rootCause) {
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,92,super(rootCause);
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,96,* Constructs a new <code>TransformerException</code> with specified
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,97,* detail message and nested <code>Throwable</code> root cause.
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,99,* @param msg        the error message.
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,100,* @param rootCause  the exception or error that caused this exception
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,101,*                   to be thrown.
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,103,"public TransformerException(String msg, Throwable rootCause) {"
True,src/java/org/apache/commons/lang/functor/TransformerException.java,src/java/org/apache/commons/lang/functor/TransformerException.java,104,"super(msg, rootCause);"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,5,* reserved.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,9,* are met:
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,17,*    distribution.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,54,package org.apache.commons.lang.functor;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,56,import java.io.Serializable;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,57,import java.lang.reflect.InvocationTargetException;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,58,import java.lang.reflect.Method;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,59,import java.util.Collection;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,60,import java.util.Iterator;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,61,import java.util.Map;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,64,* <code>TransformerUtils</code> provides reference implementations and
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,65,* utilities for the Transformer pattern interface. The supplied transformers are:
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,66,* <ul>
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,67,* <li>Invoker - returns the result of a method call on the input object
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,68,* <li>Clone - returns a clone of the input object
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,69,* <li>Constant - always returns the same object
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,70,* <li>Closure - performs a Closure and returns the input object
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,71,* <li>Predicate - returns the result of the predicate as a Boolean
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,72,* <li>Factory - returns a new object from a factory
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,73,* <li>Chained - chains two or more transformers together
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,74,* <li>Switch - calls one transformer based on one or more predicates
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,75,* <li>SwitchMap - calls one transformer looked up from a Map
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,76,* <li>Instantiate - the Class input object is instantiated
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,77,* <li>Map - returns an object from a supplied Map
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,78,* <li>Null - always returns null
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,79,"* <li>NOP - returns the input object, which should be immutable"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,80,* <li>Exception - always throws an exception
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,81,* </ul>
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,82,* All the supplied transformers are Serializable.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,84,"* @author <a href=""mailto:scolebourne@joda.org"">Stephen Colebourne</a>"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,85,"* @version $Id: TransformerUtils.java,v 1.1 2002/11/05 16:44:28 bayard Exp $"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,87,public class TransformerUtils {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,90,* A transformer that always throws an exception
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,92,private static final Transformer EXCEPTION_TRANSFORMER = new ExceptionTransformer();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,94,* A transformer that always returns null
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,96,private static final Transformer NULL_TRANSFORMER = new ConstantTransformer(null);
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,98,* A transformer that returns the input object
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,100,private static final Transformer NOP_TRANSFORMER = new NOPTransformer();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,102,* A transformer that clones the input object
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,104,private static final Transformer CLONE_TRANSFORMER = new CloneTransformer();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,106,* A transformer that creates an object from a Class
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,108,"private static final Transformer INSTANTIATE_TRANSFORMER = new InstantiateTransformer(null, null);"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,111,* Restrictive constructor
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,113,protected TransformerUtils() {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,114,super();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,118,* Gets a transformer that always throws an exception.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,119,* This could be useful during testing as a placeholder.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,121,* @return the transformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,123,public static Transformer exceptionTransformer() {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,124,return EXCEPTION_TRANSFORMER;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,128,* Gets a transformer that always returns null.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,130,* @return the transformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,132,public static Transformer nullTransformer() {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,133,return NULL_TRANSFORMER;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,137,* Gets a transformer that returns the input object.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,138,* The input object should be immutable to maintain the
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,139,* contract of Transformer (although this is not checked).
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,141,* @return the transformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,143,public static Transformer nopTransformer() {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,144,return NOP_TRANSFORMER;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,148,* Gets a transformer that returns a clone of the input
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,149,* object. The input object will be cloned using one of these
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,150,* techniques (in order):
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,151,* <ul>
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,152,* <li>public clone method
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,153,* <li>public copy constructor
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,154,* <li>serialization clone
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,155,* <ul>
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,157,* @return the transformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,159,public static Transformer cloneTransformer() {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,160,return CLONE_TRANSFORMER;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,164,* Creates a Transformer that will return the same object each time the
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,165,* transformer is used.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,167,* @param constantToReturn  the constant object to return each time in the transformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,168,* @return the transformer.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,170,public static Transformer constantTransformer(Object constantToReturn) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,171,return new ConstantTransformer(constantToReturn);
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,175,* Creates a Transformer that calls a Closure each time the transformer is used.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,176,* The transformer returns the input object.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,178,* @param command  the command to run each time in the transformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,179,* @return the transformer.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,181,public static Transformer asTransformer(Closure command) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,182,if (command == null) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,183,"throw new IllegalArgumentException(""ClosureTransformer: The command must not be null"");"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,185,return new ClosureTransformer(command);
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,189,* Creates a Transformer that calls a Predicate each time the transformer is used.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,190,* The transformer will return either Boolean.TRUE or Boolean.FALSE.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,192,* @param predicate  the predicate to run each time in the transformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,193,* @return the transformer.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,195,public static Transformer asTransformer(Predicate predicate) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,196,if (predicate == null) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,197,"throw new IllegalArgumentException(""PredicateTransformer: The predicate must not be null"");"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,199,return new PredicateTransformer(predicate);
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,203,* Creates a Transformer that calls a Factory each time the transformer is used.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,204,* The transformer will return the value returned by the factory.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,206,* @param factory  the factory to run each time in the transformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,207,* @return the transformer.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,209,public static Transformer asTransformer(Factory factory) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,210,if (factory == null) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,211,"throw new IllegalArgumentException(""FactoryTransformer: The factory must not be null"");"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,213,return new FactoryTransformer(factory);
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,217,"* Create a new Transformer that calls two transformers, passing the result of"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,218,* the first into the second.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,220,* @param transformer1  the first transformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,221,* @param transformer2  the second transformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,222,* @return the transformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,223,* @throws IllegalArgumentException if either transformer is null
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,225,"public static Transformer chainedTransformer(Transformer transformer1, Transformer transformer2) {"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,226,"Transformer[] trs = new Transformer[] {transformer1, transformer2};"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,227,validate(trs);
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,228,return new ChainedTransformer(trs);
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,232,"* Create a new Transformer that calls each transformer in turn, passing the"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,233,* result into the next transformer.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,235,* @param transformers  an array of transformers to chain
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,236,* @return the transformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,237,* @throws IllegalArgumentException if the transformers array is null
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,238,* @throws IllegalArgumentException if the transformers array has 0 elements
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,239,* @throws IllegalArgumentException if any transformer in the array is null
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,241,public static Transformer chainedTransformer(Transformer[] transformers) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,242,Transformer[] trs = copy(transformers);
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,243,validate(trs);
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,244,return new ChainedTransformer(trs);
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,248,"* Create a new Transformer that calls each transformer in turn, passing the"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,249,* result into the next transformer. The ordering is that of the iterator()
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,250,* method on the collection.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,252,* @param transformers  a collection of transformers to chain
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,253,* @return the transformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,254,* @throws IllegalArgumentException if the transformers collection is null
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,255,* @throws IllegalArgumentException if the transformers collection is empty
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,256,* @throws IllegalArgumentException if any transformer in the collection is null
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,258,public static Transformer chainedTransformer(Collection transformers) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,259,Transformer[] trs = null;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,260,if (transformers == null) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,261,"throw new IllegalArgumentException(""ChainedTransformer: The transformer collection must not be null"");"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,263,// convert to array like this to guarantee iterator() ordering
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,264,trs = new Transformer[transformers.size()];
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,265,int i = 0;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,266,for (Iterator it = transformers.iterator(); it.hasNext();) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,267,trs[i++] = (Transformer) it.next();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,269,validate(trs);
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,270,return new ChainedTransformer(trs);
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,274,* Create a new Transformer that calls one of two transformers depending
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,275,* on the specified predicate.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,277,* @param predicate  the predicate to switch on
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,278,* @param trueTransformer  the transformer called if the predicate is true
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,279,* @param falseTransformer  the transformer called if the predicate is false
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,280,* @return the transformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,281,* @throws IllegalArgumentException if the predicate is null
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,282,* @throws IllegalArgumentException if either transformer is null
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,284,"public static Transformer switchTransformer(Predicate predicate, Transformer trueTransformer, Transformer falseTransformer) {"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,285,"return switchTransformerInternal(new Predicate[] { predicate }, new Transformer[] { trueTransformer }, falseTransformer);"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,289,* Create a new Transformer that calls one of the transformers depending
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,290,* on the predicates. The transformer at array location 0 is called if the
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,291,* predicate at array location 0 returned true. Each predicate is evaluated
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,292,"* until one returns true. If no predicates evaluate to true, null is returned."
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,294,* @param predicates  an array of predicates to check
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,295,* @param transformers  an array of transformers to call
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,296,* @return the transformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,297,* @throws IllegalArgumentException if the either array is null
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,298,* @throws IllegalArgumentException if the either array has 0 elements
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,299,* @throws IllegalArgumentException if any element in the arrays is null
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,300,* @throws IllegalArgumentException if the arrays are different sizes
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,302,"public static Transformer switchTransformer(Predicate[] predicates, Transformer[] transformers) {"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,303,"return switchTransformerInternal(copy(predicates), copy(transformers), null);"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,307,* Create a new Transformer that calls one of the transformers depending
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,308,* on the predicates. The transformer at array location 0 is called if the
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,309,* predicate at array location 0 returned true. Each predicate is evaluated
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,310,"* until one returns true. If no predicates evaluate to true, the default"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,311,* transformer is called.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,313,* @param predicates  an array of predicates to check
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,314,* @param transformers  an array of transformers to call
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,315,* @param defaultTransformer  the default to call if no predicate matches
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,316,* @return the transformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,317,* @throws IllegalArgumentException if the either array is null
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,318,* @throws IllegalArgumentException if the either array has 0 elements
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,319,* @throws IllegalArgumentException if any element in the arrays is null
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,320,* @throws IllegalArgumentException if the arrays are different sizes
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,322,"public static Transformer switchTransformer(Predicate[] predicates, Transformer[] transformers, Transformer defaultTransformer) {"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,323,"return switchTransformerInternal(copy(predicates), copy(transformers), defaultTransformer);"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,327,* Create a new Transformer that calls one of the transformers depending
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,328,* on the predicates.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,329,* <p>
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,330,* The Map consists of Predicate keys and Transformer values. A transformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,331,* is called if its matching predicate returns true. Each predicate is evaluated
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,332,"* until one returns true. If no predicates evaluate to true, the default"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,333,* transformer is called. The default transformer is set in the map with a
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,334,"* null key. If no default transformer is set, null will be returned in a default"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,335,* case. The ordering is that of the iterator() method on the entryset collection
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,336,* of the map.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,338,* @param predicatesAndTransformers  a map of predicates to transformers
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,339,* @return the transformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,340,* @throws IllegalArgumentException if the map is null
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,341,* @throws IllegalArgumentException if the map is empty
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,342,* @throws IllegalArgumentException if any transformer in the map is null
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,343,* @throws ClassCastException  if the map elements are of the wrong type
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,345,public static Transformer switchTransformer(Map predicatesAndTransformers) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,346,Transformer[] trs = null;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,347,Predicate[] preds = null;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,348,if (predicatesAndTransformers == null) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,349,"throw new IllegalArgumentException(""SwitchTransformer: The predicate and transformer map must not be null"");"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,351,// convert to array like this to guarantee iterator() ordering
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,352,Transformer def = (Transformer) predicatesAndTransformers.remove(null);
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,353,int size = predicatesAndTransformers.size();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,354,trs = new Transformer[size];
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,355,preds = new Predicate[size];
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,356,int i = 0;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,357,for (Iterator it = predicatesAndTransformers.entrySet().iterator(); it.hasNext();) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,358,Map.Entry entry = (Map.Entry) it.next();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,359,preds[i] = (Predicate) entry.getKey();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,360,trs[i] = (Transformer) entry.getValue();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,361,i++;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,363,"return switchTransformerInternal(preds, trs, def);"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,367,* Validate input and create transformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,369,"private static Transformer switchTransformerInternal(Predicate[] predicates, Transformer[] transformers, Transformer defaultTransformer) {"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,370,validate(predicates);
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,371,validate(transformers);
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,372,if (predicates.length != transformers.length) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,373,"throw new IllegalArgumentException(""SwitchTransformer: The predicate and transformer arrays must be the same size"");"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,375,if (defaultTransformer == null) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,376,defaultTransformer = nullTransformer();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,378,"return new SwitchTransformer(predicates, transformers, defaultTransformer);"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,382,* Create a new Transformer that uses the input object as a key to find the
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,383,* transformer to call.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,384,* <p>
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,385,* The Map consists of object keys and Transformer values. A transformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,386,"* is called if the input object equals the key. If there is no match, the"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,387,* default transformer is called. The default transformer is set in the map
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,388,"* using a null key. If no default is set, null will be returned in a default case."
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,390,* @param objectsAndTransformers  a map of objects to transformers
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,391,* @return the transformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,392,* @throws IllegalArgumentException if the map is null
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,393,* @throws IllegalArgumentException if the map is empty
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,394,* @throws IllegalArgumentException if any transformer in the map is null
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,396,public static Transformer switchMapTransformer(Map objectsAndTransformers) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,397,Transformer[] trs = null;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,398,Predicate[] preds = null;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,399,if (objectsAndTransformers == null) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,400,"throw new IllegalArgumentException(""SwitchEqualsTransformer: The obejct and transformer map must not be null"");"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,402,Transformer def = (Transformer) objectsAndTransformers.remove(null);
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,403,int size = objectsAndTransformers.size();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,404,trs = new Transformer[size];
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,405,preds = new Predicate[size];
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,406,int i = 0;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,407,for (Iterator it = objectsAndTransformers.entrySet().iterator(); it.hasNext();) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,408,Map.Entry entry = (Map.Entry) it.next();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,409,preds[i] = PredicateUtils.equalPredicate(entry.getKey());
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,410,trs[i] = (Transformer) entry.getValue();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,411,i++;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,413,"return switchTransformer(preds, trs, def);"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,417,* Gets a Transformer that expects an input Class object that it will instantiate.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,419,* @return the transformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,421,public static Transformer instantiateTransformer() {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,422,return INSTANTIATE_TRANSFORMER;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,426,* Creates a Transformer that expects an input Class object that it will
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,427,* instantiate. The constructor used is determined by the arguments specified
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,428,* to this method.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,430,"* @param paramTypes  parameter types for the constructor, can be null"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,431,"* @param args  the arguments to pass to the constructor, can be null"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,432,* @return the transformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,433,* @throws IllegalArgumentException if the paramTypes and args don't match
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,435,"public static Transformer instantiateTransformer(Class[] paramTypes, Object[] args) {"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,436,"return new InstantiateTransformer(paramTypes, args);"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,440,* Creates a Transformer that uses the passed in Map to transform the input
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,441,* object (as a simple lookup).
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,443,* @param map  the map to use to transform the objects
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,444,* @return the transformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,445,* @throws IllegalArgumentException if the map is null
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,447,public static Transformer mapTransformer(Map map) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,448,if (map == null) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,449,"throw new IllegalArgumentException(""MapTransformer: The map must not be null"");"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,451,return new MapTransformer(map);
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,455,* Gets a Transformer that invokes a method on the input object.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,456,"* The method must have no parameters. If the input object is null,"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,457,* null is returned.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,458,* <p>
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,459,"* For example, <code>TransformerUtils.invokerTransformer(""getName"");</code>"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,460,* will call the <code>getName/code> method on the input object to
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,461,* determine the transformer result.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,463,"* @param methodName  the method name to call on the input object, may not be null"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,464,* @return the transformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,465,* @throws IllegalArgumentException if the methodName is null.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,467,public static Transformer invokerTransformer(String methodName){
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,468,"return new InvokerTransformer(methodName, null, null);"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,472,* Gets a Transformer that invokes a method on the input object.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,473,"* The method parameters are specified. If the input object is null,"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,474,* null is returned.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,476,* @param methodName  the name of the method
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,477,* @param paramTypes  the parameter types
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,478,* @param args  the arguments
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,479,* @return the transformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,480,* @throws IllegalArgumentException if the method name is null
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,481,* @throws IllegalArgumentException if the paramTypes and args don't match
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,483,"public static Transformer invokerTransformer(String methodName, Class[] paramTypes, Object[] args){"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,484,"return new InvokerTransformer(methodName, paramTypes, args);"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,488,* Copy method
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,490,* @param predicates  the predicates to copy
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,492,private static Predicate[] copy(Predicate[] predicates) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,493,if (predicates == null) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,494,return null;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,496,return (Predicate[]) predicates.clone();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,500,* Validate method
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,502,* @param predicates  the predicates to validate
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,504,private static void validate(Predicate[] predicates) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,505,if (predicates == null) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,506,"throw new IllegalArgumentException(""TransformerUtils: The predicate array must not be null"");"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,508,if (predicates.length < 1) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,509,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,510,"""TransformerUtils: At least 1 predicate must be specified in the predicate array, size was "" + predicates.length);"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,512,for (int i = 0; i < predicates.length; i++) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,513,if (predicates[i] == null) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,514,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,515,"""TransformerUtils: The predicate array must not contain a null predicate, index "" + i + "" was null"");"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,521,* Copy method
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,523,* @param transformers  the transformers to copy
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,525,private static Transformer[] copy(Transformer[] transformers) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,526,if (transformers == null) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,527,return null;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,529,return (Transformer[]) transformers.clone();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,533,* Validate method
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,535,* @param transformers  the transformers to validate
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,537,private static void validate(Transformer[] transformers) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,538,if (transformers == null) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,539,"throw new IllegalArgumentException(""TransformerUtils: The transformer array must not be null"");"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,541,if (transformers.length < 1) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,542,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,543,"""TransformerUtils: At least 1 transformer must be specified in the transformer array, size was "" + transformers.length);"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,545,for (int i = 0; i < transformers.length; i++) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,546,if (transformers[i] == null) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,547,throw new IllegalArgumentException(
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,548,"""TransformerUtils: The transformer array must not contain a null transformer, index "" + i + "" was null"");"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,553,// ExceptionTransformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,557,* ExceptionTransformer always throws an exception.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,559,"private static class ExceptionTransformer implements Transformer, Serializable {"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,562,* Constructor
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,564,private ExceptionTransformer() {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,565,super();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,569,* Always throw exception
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,571,public Object transform(Object input) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,572,"throw new TransformerException(""ExceptionTransformer invoked"");"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,576,// NOPTransformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,580,* NOPTransformer returns the input object.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,582,"private static class NOPTransformer implements Transformer, Serializable {"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,585,* Constructor
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,587,private NOPTransformer() {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,588,super();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,592,* Return the input object
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,594,public Object transform(Object input) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,595,return input;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,599,// CloneTransformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,603,* CloneTransformer returns a clone of the input object.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,605,"private static class CloneTransformer implements Transformer, Serializable {"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,608,* Constructor
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,610,private CloneTransformer() {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,611,super();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,615,* Returns a clone of the input object
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,617,public Object transform(Object input) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,618,if (input == null) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,619,return null;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,621,try {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,622,return FactoryUtils.prototypeFactory(input).create();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,624,} catch (IllegalArgumentException ex) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,625,"throw new TransformerException(""CloneTransformer"", ex);"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,626,} catch (FactoryException ex) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,627,"throw new TransformerException(""CloneTransformer"", ex);"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,632,// ConstantTransformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,636,* ConstantTransformer returns the same instance each time.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,638,"private static class ConstantTransformer implements Transformer, Serializable {"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,640,private final Object iConstant;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,643,* Constructor to store constant
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,645,private ConstantTransformer(Object constant) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,646,super();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,647,iConstant = constant;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,651,* Always return constant
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,653,public Object transform(Object input) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,654,return iConstant;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,658,// ClosureTransformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,662,* ClosureTransformer executes a Closure object.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,664,"private static class ClosureTransformer implements Transformer, Serializable {"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,666,private final Closure iClosure;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,669,* Constructor to store command
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,671,private ClosureTransformer(Closure command) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,672,super();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,673,iClosure = command;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,677,* Exceute the command and return the input
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,679,public Object transform(Object input) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,680,try {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,681,iClosure.execute(input);
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,682,return input;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,684,} catch (ClosureException ex) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,685,"throw new TransformerException(""ClosureTransformer: "" + ex.getMessage(), ex);"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,690,// PredicateTransformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,694,* PredicateTransformer evaluates a Predicate object.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,696,"private static class PredicateTransformer implements Transformer, Serializable {"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,698,private final Predicate iPredicate;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,701,* Constructor to store predicate
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,703,private PredicateTransformer(Predicate predicate) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,704,super();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,705,iPredicate = predicate;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,709,* Evaluate the predicate and return the result as a Boolean
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,711,public Object transform(Object input) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,712,try {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,713,return new Boolean(iPredicate.evaluate(input));
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,715,} catch (PredicateException ex) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,716,"throw new TransformerException(""PredicateTransformer: "" + ex.getMessage(), ex);"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,721,// FactoryTransformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,725,* FactoryTransformer returns the result of calling a Factory.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,727,"private static class FactoryTransformer implements Transformer, Serializable {"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,729,private final Factory iFactory;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,732,* Constructor to store factory
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,734,private FactoryTransformer(Factory factory) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,735,super();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,736,iFactory = factory;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,740,* Return the result of calling the factory
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,742,public Object transform(Object input) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,743,try {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,744,return iFactory.create();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,746,} catch (FactoryException ex) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,747,"throw new TransformerException(""FactoryTransformer: "" + ex.getMessage(), ex);"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,752,// ChainedTransformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,756,* ChainedTransformer returns the result of calling a list of transformers.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,758,"private static class ChainedTransformer implements Transformer, Serializable {"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,760,private final Transformer[] iTransformers;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,763,* Constructor to store params
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,765,private ChainedTransformer(Transformer[] transformers) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,766,super();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,767,iTransformers = transformers;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,771,* Returns the result of calling a list of transformers
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,773,public Object transform(Object object) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,774,for (int i = 0; i < iTransformers.length; i++) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,775,object = iTransformers[i].transform(object);
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,777,return object;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,781,// SwitchTransformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,785,* SwitchTransformer returns the result of the transformer whose predicate returns true.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,787,"private static class SwitchTransformer implements Transformer, Serializable {"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,789,private final Predicate[] iPredicates;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,790,private final Transformer[] iTransformers;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,791,private final Transformer iDefault;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,794,* Constructor to store params
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,796,"private SwitchTransformer(Predicate[] predicates, Transformer[] transformers, Transformer defaultTransformer) {"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,797,super();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,798,iPredicates = predicates;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,799,iTransformers = transformers;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,800,iDefault = defaultTransformer;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,804,* Returns the result of the transformer whose predicate returns true
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,806,public Object transform(Object input) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,807,for (int i = 0; i < iPredicates.length; i++) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,808,if (iPredicates[i].evaluate(input) == true) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,809,return iTransformers[i].transform(input);
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,812,return iDefault.transform(input);
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,816,// InstantiateTransformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,820,* InstantiateTransformer returns the result of calling a Factory.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,822,"private static class InstantiateTransformer implements Transformer, Serializable {"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,824,private final Class[] iParamTypes;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,825,private final Object[] iArgs;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,828,* Constructor to store params
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,830,"private InstantiateTransformer(Class[] paramTypes, Object[] args) {"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,831,super();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,832,if (((paramTypes == null) && (args != null))
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,833,|| ((paramTypes != null) && (args == null))
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,834,|| ((paramTypes != null) && (args != null) && (paramTypes.length != args.length))) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,835,"throw new IllegalArgumentException(""InstantiateTransformer: The parameter types must match the arguments"");"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,837,if ((paramTypes == null) && (args == null)) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,838,iParamTypes = null;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,839,iArgs = null;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,840,} else {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,841,iParamTypes = (Class[]) paramTypes.clone();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,842,iArgs = (Object[]) args.clone();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,847,* Return the result of calling the factory
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,849,public Object transform(Object input) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,850,try {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,851,if (input instanceof Class == false) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,852,throw new TransformerException(
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,853,"""InstantiateTransformer: Input object was not an instanceof Class, it was a """
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,854,"+ (input == null ? ""null object"" : input.getClass().getName()));"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,856,"return FactoryUtils.reflectionFactory((Class) input, iParamTypes, iArgs).create();"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,858,} catch (IllegalArgumentException ex) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,859,"throw new TransformerException(""InstantiateTransformer"", ex);"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,860,} catch (FactoryException ex) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,861,"throw new TransformerException(""InstantiateTransformer"", ex);"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,866,// MapTransformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,870,* MapTransformer returns the result by looking up in the map.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,872,"private static class MapTransformer implements Transformer, Serializable {"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,874,private final Map iMap;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,877,* Constructor to store map
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,879,private MapTransformer(Map map) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,880,super();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,881,iMap = map;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,885,* Returns the result by looking up in the map
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,887,public Object transform(Object input) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,888,return iMap.get(input);
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,892,// InvokerTransformer
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,896,* InvokerTransformer returns the result of invoking the specified method on
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,897,* the input object.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,899,"private static class InvokerTransformer implements Transformer, Serializable {"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,900,private final String iMethodName;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,901,private final Class[] iParamTypes;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,902,private final Object[] iArgs;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,905,* Constructor
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,907,"public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args) {"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,908,super();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,909,if (methodName == null) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,910,"throw new IllegalArgumentException(""InvokerTransformer: The method to invoke must not be null"");"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,912,if (((paramTypes == null) && (args != null))
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,913,|| ((paramTypes != null) && (args == null))
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,914,|| ((paramTypes != null) && (args != null) && (paramTypes.length != args.length))) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,915,"throw new IllegalArgumentException(""InvokerTransformer: The parameter types must match the arguments"");"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,918,iMethodName = methodName;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,919,if ((paramTypes == null) && (args == null)) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,920,iParamTypes = null;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,921,iArgs = null;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,922,} else {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,923,iParamTypes = (Class[]) paramTypes.clone();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,924,iArgs = (Object[]) args.clone();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,929,* Execute the command based on the input object.
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,931,public Object transform(Object input) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,932,if (input == null) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,933,return null;
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,935,try {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,936,Class cls = input.getClass();
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,937,"Method method = cls.getMethod(iMethodName, iParamTypes);"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,938,"return method.invoke(input, iArgs);"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,940,} catch (NoSuchMethodException ex) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,941,"throw new TransformerException(""InvokerTransformer: The method '"" + iMethodName + ""' on '"" + input.getClass() + ""' does not exist"");"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,942,} catch (IllegalAccessException ex) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,943,"throw new TransformerException(""InvokerTransformer: The method '"" + iMethodName + ""' on '"" + input.getClass() + ""' cannot be accessed"");"
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,944,} catch (InvocationTargetException ex) {
True,src/java/org/apache/commons/lang/functor/TransformerUtils.java,src/java/org/apache/commons/lang/functor/TransformerUtils.java,945,"throw new TransformerException(""InvokerTransformer: The method '"" + iMethodName + ""' on '"" + input.getClass() + ""' threw an exception"", ex);"

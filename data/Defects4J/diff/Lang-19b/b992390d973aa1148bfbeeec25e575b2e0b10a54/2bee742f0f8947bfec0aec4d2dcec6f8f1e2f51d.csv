is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,44,* @throws ClassCastException if the value is not Comparable
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,45,/ TODO: Ideally this would only support <T extends Comparable<? super T>>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,46,// TODO: Ideally the ClassCastException would be compile-time via generics
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,47,"his(element, element);"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,48,"this( element, element);"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,63,* @throws ClassCastException if either value is not Comparable
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,63,/ TODO: Ideally this would only support <T extends Comparable<? super T>>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,65,// TODO: Ideally the ClassCastException would be compile-time via generics
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,65,"his(element1, element2, ComparableComparator.INSTANCE);"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,67,"this( element1, element2, ComparableComparator.INSTANCE);"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,56,public void testComparableConstructors() {
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,57,try {
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,58,Range range = new Range(new Object());
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,59,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,60,} catch(ClassCastException cce) {
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,61,// expected
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,64,try {
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,65,"Range range = new Range(new Object(), new Object());"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,66,"fail(""ClassCastException expected"");"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,67,} catch(ClassCastException cce) {
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,68,// expected

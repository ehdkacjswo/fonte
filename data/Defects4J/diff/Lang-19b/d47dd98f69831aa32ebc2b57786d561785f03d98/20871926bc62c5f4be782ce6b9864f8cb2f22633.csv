is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,20, Immutable concrete manifestation of the {@link Pair} type.
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,20,* <p>An immutable pair consisting of two {@code Object} elements.</p>
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,22,"* <p>Although the implementation is immutable, there is no restriction on the objects"
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,23,"* that may be stored. If mutable objects are stored in the pair, then the pair"
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,24,"* itself effectively becomes mutable. The class is also not {@code final}, so a subclass"
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,25,* could add undesirable behaviour.</p>
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,29,* @param <L> the first element type
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,30,* @param <R> the second element type
False,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,26, @param <L> left generic type
False,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,27, @param <R> right generic type
False,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,39, Create a new ImmutablePair instance.
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,46,* <p>Obtains an immutable pair of from two objects inferring the generic types.</p>
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,48,* <p>This factory allows the pair to be created using inference to
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,49,* obtain the generic types.</p>
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,51,* @param <L> the left element type
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,52,* @param <R> the right element type
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,53,"* @param left  the left element, may be null"
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,54,"* @param right  the right element, may be null"
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,55,"* @return a pair formed from the two parameters, not null"
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,57,"public static <L, R> ImmutablePair<L, R> of(L left, R right) {"
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,58,"return new ImmutablePair<L, R>(left, right);"
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,62,* Create a new pair instance.
False,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,41, @param left the left value
False,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,42, @param right the right value
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,64,"* @param left  the left value, may be null"
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,65,"* @param right  the right value, may be null"
False,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,67, {@link java.util.Map.Entry#setValue(Object)} implementation. Because this
False,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,68, class is immutable the {@code setValue()} operation is not supported.
False,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,69, Therefore always an exception is thrown.
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,91,* <p>Throws {@code UnsupportedOperationException}.</p>
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,93,"* <p>This pair is immutable, so this operation is not supported.</p>"
False,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,71, @param value the value to set
False,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,72, @return the old right value
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,95,* @param value  the value to set
True,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,96,* @return never
False,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,80," Static fluent creation method for an {@link ImmutablePair}<L, R>:"
False,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,81," <code>ImmutablePair.of(left, right)</code>"
False,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,83, @param <L> the left generic type
False,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,84, @param <R> the right generic type
False,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,85, @param left the let value
False,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,86, @param right the right value
False,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,87," @return ImmutablePair<L, R>(left, right)"
False,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,89,"ublic static <L, R> ImmutablePair<L, R> of(L left, R right) {"
False,src/main/java/org/apache/commons/lang3/ImmutablePair.java,src/main/java/org/apache/commons/lang3/ImmutablePair.java,90,"eturn new ImmutablePair<L, R>(left, right);"
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,20, Mutable concrete manifestation of the {@link Pair} type.
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,20,* <p>A mutable pair consisting of two {@code Object} elements.</p>
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,22,* <p>Not #ThreadSafe#</p>
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,24,* @param <L> the first element type
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,25,* @param <R> the second element type
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,22, <p>#ThreadSafe# if the objects are threadsafe</p>
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,26, @param <L> left generic type
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,27, @param <R> right generic type
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,33,rivate L leftElement;
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,34,rivate R rightElement;
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,35,/** Left object */
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,36,public L left;
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,37,/** Right object */
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,38,public R right;
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,41,* <p>Obtains an immutable pair of from two objects inferring the generic types.</p>
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,43,* <p>This factory allows the pair to be created using inference to
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,44,* obtain the generic types.</p>
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,46,* @param <L> the left element type
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,47,* @param <R> the right element type
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,48,"* @param left  the left element, may be null"
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,49,"* @param right  the right element, may be null"
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,50,"* @return a pair formed from the two parameters, not null"
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,52,"public static <L, R> MutablePair<L, R> of(L left, R right) {"
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,53,"return new MutablePair<L, R>(left, right);"
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,37, Create a new MutablePair instance.
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,57,* Create a new pair instance of two nulls.
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,44, Create a new MutablePair instance.
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,64,* Create a new pair instance.
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,46, @param leftElement the left value
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,47, @param rightElement the right value
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,66,"* @param left  the left value, may be null"
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,67,"* @param right  the right value, may be null"
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,49,"ublic MutablePair(L leftElement, R rightElement) {"
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,69,"public MutablePair(L left, R right) {"
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,51,his.leftElement = leftElement;
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,52,his.rightElement = rightElement;
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,71,this.left = left;
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,72,this.right = right;
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,60,eturn leftElement;
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,81,return left;
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,65, @param leftElement the value of the left element
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,87,"* @param left  the new value of the left element, may be null"
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,67,ublic void setLeftElement(L leftElement) {
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,68,his.leftElement = leftElement;
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,89,public void setLeftElement(L left) {
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,90,this.left = left;
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,76,eturn rightElement;
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,98,return right;
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,81, @param rightElement the value of the right element
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,104,* @param right  the value of the right element
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,83,ublic void setRightElement(R rightElement) {
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,84,his.rightElement = rightElement;
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,106,public void setRightElement(R right) {
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,107,this.right = right;
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,88, Implement {@link java.util.Map.Entry#setValue(Object)}.
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,89, @param value value (<code>rightElement</code>) to set
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,111,* Sets the {@code Map.Entry} value.
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,112,* This sets the right element of the pair.
True,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,114,"* @param value  the right value to set, not null"
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,99," Static fluent creation method for a {@link MutablePair}<L, R>:"
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,100," <code>MutablePair.of(left, right)</code>"
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,101, @param <L> the left generic type
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,102, @param <R> the right generic type
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,103, @param left the left value
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,104, @param right the right value
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,105," @return MutablePair<L, R>(left, right)"
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,107,"ublic static <L, R> MutablePair<L, R> of(L left, R right) {"
False,src/main/java/org/apache/commons/lang3/MutablePair.java,src/main/java/org/apache/commons/lang3/MutablePair.java,108,"eturn new MutablePair<L, R>(left, right);"
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,22,mport org.apache.commons.lang3.builder.HashCodeBuilder;
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,22,import org.apache.commons.lang3.builder.CompareToBuilder;
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,25, Abstract Pair (or 2-element Tuple).
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,25,* <p>A pair consisting of two elements.</p>
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,27,* <p>This class is an abstract implementation defining the basic API.
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,28,* It refers to the elements as 'left' and 'right'. It also implements the
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,29,* {@code Map.Entry} interface where the key is 'left' and the value is 'right'.</p>
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,31,* <p>Subclass implementations may be mutable or immutable.
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,32,"* However, there is no restriction on the type of the stored objects that may be stored."
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,33,"* If mutable objects are stored in the pair, then the pair itself effectively becomes mutable.</p>"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,35,* @param <L> the first element type
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,36,* @param <R> the second element type
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,30,"ublic abstract class Pair<L, R> implements Serializable, Map.Entry<L, R> {"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,41,"public abstract class Pair<L, R> implements Map.Entry<L, R>, Comparable<Pair<L, R>>, Serializable {"
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,35," Get the ""left"" element of the pair."
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,36, @return L
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,47,* <p>Obtains an immutable pair of from two objects inferring the generic types.</p>
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,49,* <p>This factory allows the pair to be created using inference to
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,50,* obtain the generic types.</p>
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,52,* @param <L> the left element type
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,53,* @param <R> the right element type
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,54,"* @param left  the left element, may be null"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,55,"* @param right  the right element, may be null"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,56,"* @return a pair formed from the two parameters, not null"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,58,"public static <L, R> Pair<L, R> of(L left, R right) {"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,59,"return new ImmutablePair<L, R>(left, right);"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,64,* <p>Gets the left element from this pair.</p>
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,66,"* <p>When treated as a key-value pair, this is the key.</p>"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,68,"* @return the left element, may be null"
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,41," Get the ""right"" element of the pair."
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,42, @return R
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,73,* <p>Gets the right element from this pair.</p>
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,75,"* <p>When treated as a key-value pair, this is the value.</p>"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,77,"* @return the right element, may be null"
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,47, Return {@link #getLeftElement()} as a {@link java.util.Map.Entry}'s key.
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,48, @return L
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,82,* <p>Gets the key from this pair.</p>
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,84,* <p>This method implements the {@code Map.Entry} interface returning the
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,85,* left element as the key.</p>
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,87,"* @return the left element as the key, may be null"
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,55, Return {@link #getRightElement()} as a {@link java.util.Map.Entry}'s value.
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,56, @return R
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,94,* <p>Gets the value from this pair.</p>
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,96,* <p>This method implements the {@code Map.Entry} interface returning the
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,97,* right element as the value.</p>
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,99,"* @return the right element as the value, may be null"
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,63, {@inheritDoc}
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,107,* <p>Compares the pair based on the first element followed by the second element.
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,108,* The types must be {@code Comparable}.</p>
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,110,"* @param other  the other pair, not null"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,111,"* @return negative if this is less, zero if equal, positive if greater"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,113,"public int compareTo(Pair<L, R> other) {"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,114,"return new CompareToBuilder().append(getLeftElement(), other.getLeftElement())"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,115,".append(getRightElement(), other.getRightElement()).toComparison();"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,119,* <p>Compares this pair to another based on the two elements.</p>
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,121,"* @param obj  the object to compare to, null returns false"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,122,* @return true if the elements of the pair are equal
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,70,"f (obj instanceof Pair<?, ?> == false) {"
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,71,eturn false;
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,129,"if (obj instanceof Map.Entry<?, ?>) {"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,130,"Map.Entry<?, ?> other = (Map.Entry<?, ?>) obj;"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,131,"return ObjectUtils.equals(getKey(), other.getKey())"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,132,"&& ObjectUtils.equals(getValue(), other.getValue());"
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,73,"air<?, ?> other = (Pair<?, ?>) obj;"
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,74,"eturn ObjectUtils.equals(getLeftElement(), other.getLeftElement())"
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,75,"& ObjectUtils.equals(getRightElement(), other.getRightElement());"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,134,return false;
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,79, {@inheritDoc}
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,138,* <p>Returns a suitable hash code.
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,139,* The hash code follows the definition in {@code Map.Entry}.</p>
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,141,* @return the hash code
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,83,/ TODO should the hashCodeBuilder be seeded per concrete type?
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,84,eturn new HashCodeBuilder().append(getLeftElement()).append(getRightElement())
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,85,toHashCode();
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,145,// see Map.Entry API specification
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,146,return (getKey() == null ? 0 : getKey().hashCode()) ^
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,147,(getValue() == null ? 0 : getValue().hashCode());
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,89," Returns a String representation of the Pair in the form: (L,R)"
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,151,"* <p>Returns a String representation of the Pair in the form: (L,R).</p>"
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,94,tringBuilder builder = new StringBuilder(this.getClass().getSimpleName());
True,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,157,StringBuilder builder = new StringBuilder();
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,104," Static fluent creation method for a {@link Pair}<L, R>:"
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,105," <code>Pair.of(left, right)</code>"
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,106, @param <L> the left generic type
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,107, @param <R> the right generic type
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,108, @param left the left value
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,109, @param right the right value
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,110," @return ImmutablePair<L, R>(left, right)"
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,112,"ublic static <L, R> Pair<L, R> of(L left, R right) {"
False,src/main/java/org/apache/commons/lang3/Pair.java,src/main/java/org/apache/commons/lang3/Pair.java,113,"eturn new ImmutablePair<L, R>(left, right);"
False,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,83,"ssertEquals(""ImmutablePair(null,null)"", ImmutablePair.of(null, null).toString());"
False,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,84,"ssertEquals(""ImmutablePair(null,two)"", ImmutablePair.of(null, ""two"").toString());"
False,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,85,"ssertEquals(""ImmutablePair(one,null)"", ImmutablePair.of(""one"", null).toString());"
False,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,86,"ssertEquals(""ImmutablePair(one,two)"", ImmutablePair.of(""one"", ""two"").toString());"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,83,"assertEquals(""(null,null)"", ImmutablePair.of(null, null).toString());"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,84,"assertEquals(""(null,two)"", ImmutablePair.of(null, ""two"").toString());"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,85,"assertEquals(""(one,null)"", ImmutablePair.of(""one"", null).toString());"
True,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,src/test/java/org/apache/commons/lang3/ImmutablePairTest.java,86,"assertEquals(""(one,two)"", ImmutablePair.of(""one"", ""two"").toString());"
False,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,91,"ssertEquals(""MutablePair(null,null)"", MutablePair.of(null, null).toString());"
False,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,92,"ssertEquals(""MutablePair(null,two)"", MutablePair.of(null, ""two"").toString());"
False,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,93,"ssertEquals(""MutablePair(one,null)"", MutablePair.of(""one"", null).toString());"
False,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,94,"ssertEquals(""MutablePair(one,two)"", MutablePair.of(""one"", ""two"").toString());"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,91,"assertEquals(""(null,null)"", MutablePair.of(null, null).toString());"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,92,"assertEquals(""(null,two)"", MutablePair.of(null, ""two"").toString());"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,93,"assertEquals(""(one,null)"", MutablePair.of(""one"", null).toString());"
True,src/test/java/org/apache/commons/lang3/MutablePairTest.java,src/test/java/org/apache/commons/lang3/MutablePairTest.java,94,"assertEquals(""(one,two)"", MutablePair.of(""one"", ""two"").toString());"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,24,import java.util.HashMap;
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,26,import java.util.Map.Entry;
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,47,ublic void testCompatibility() throws Exception {
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,49,public void testCompatibilityBetweenPairs() throws Exception {
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,63,@Test
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,64,public void testMapEntry() throws Exception {
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,65,"Pair<Integer, String> pair = ImmutablePair.of(0, ""foo"");"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,66,"HashMap<Integer, String> map = new HashMap<Integer, String>();"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,67,"map.put(0, ""foo"");"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,68,"Entry<Integer, String> entry = map.entrySet().iterator().next();"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,69,"assertEquals(pair, entry);"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,70,"assertEquals(pair.hashCode(), entry.hashCode());"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,73,@Test
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,74,public void testComparable1() throws Exception {
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,75,"Pair<String, String> pair1 = Pair.of(""A"", ""D"");"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,76,"Pair<String, String> pair2 = Pair.of(""B"", ""C"");"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,77,"assertEquals(true, pair1.compareTo(pair1) == 0);"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,78,"assertEquals(true, pair1.compareTo(pair2) < 0);"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,79,"assertEquals(true, pair2.compareTo(pair2) == 0);"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,80,"assertEquals(true, pair2.compareTo(pair1) > 0);"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,83,@Test
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,84,public void testComparable2() throws Exception {
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,85,"Pair<String, String> pair1 = Pair.of(""A"", ""C"");"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,86,"Pair<String, String> pair2 = Pair.of(""A"", ""D"");"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,87,"assertEquals(true, pair1.compareTo(pair1) == 0);"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,88,"assertEquals(true, pair1.compareTo(pair2) < 0);"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,89,"assertEquals(true, pair2.compareTo(pair2) == 0);"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,90,"assertEquals(true, pair2.compareTo(pair1) > 0);"
False,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,64,"ssertEquals(""ImmutablePair(Key,Value)"", pair.toString());"
True,src/test/java/org/apache/commons/lang3/PairTest.java,src/test/java/org/apache/commons/lang3/PairTest.java,96,"assertEquals(""(Key,Value)"", pair.toString());"

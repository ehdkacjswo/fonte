is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,181,f (charset.isEmpty()) return null;
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,181,if (charset.length() == 0) return null;
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,18,import java.util.regex.Pattern;
False,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,22, @see org.jsoup.Jsoup#connect(String)
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,23,* @see org.jsoup.Jsoup#connect(String)
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,26,"private static final int HTTP_TEMP_REDIR = 307; // http/1.1 temporary redirect, not in Java's set."
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,414,* For example {@code application/atom+xml;charset=utf-8}.
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,415,"* Stepping through it: start with {@code ""application/""}, follow with word"
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,416,"* characters up to a {@code ""+xml""}, and then maybe more ({@code .*})."
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,418,"private static final Pattern xmlContentTypeRxp = Pattern.compile(""application/\\w+\\+xml.*"");"
False,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,446,f (status == HttpURLConnection.HTTP_MOVED_TEMP || status == HttpURLConnection.HTTP_MOVED_PERM || status == HttpURLConnection.HTTP_SEE_OTHER)
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,456,if (status == HttpURLConnection.HTTP_MOVED_TEMP || status == HttpURLConnection.HTTP_MOVED_PERM || status == HttpURLConnection.HTTP_SEE_OTHER || status == HTTP_TEMP_REDIR)
False,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,471,"f (contentType != null && !req.ignoreContentType() && (!(contentType.startsWith(""text/"") || contentType.startsWith(""application/xml"") || contentType.startsWith(""application/xhtml+xml""))))"
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,481,if (contentType != null
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,482,&& !req.ignoreContentType()
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,483,"&& !contentType.startsWith(""text/"")"
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,484,"&& !contentType.startsWith(""application/xml"")"
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,485,&& !xmlContentTypeRxp.matcher(contentType).matches()
False,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,609,f (!first)
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,624,if (!first)
False,src/main/java/org/jsoup/helper/StringUtil.java,src/main/java/org/jsoup/helper/StringUtil.java,123, @return
False,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,22,alidate.notEmpty(name);
False,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,35,"ccum.append(""<!DOCTYPE "").append(attr(""name""));"
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,34,"accum.append(""<!DOCTYPE"");"
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,35,"if (!StringUtil.isBlank(attr(""name"")))"
True,src/main/java/org/jsoup/nodes/DocumentType.java,src/main/java/org/jsoup/nodes/DocumentType.java,36,"accum.append("" "").append(attr(""name""));"
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,184,ist<Element> elements = new ArrayList<Element>();
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,184,List<Element> elements = new ArrayList<Element>(childNodes.size());
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,448,* Get a CSS selector that will uniquely select this element.
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,449,"* <p/>If the element has an ID, returns #id;"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,450,"* otherwise returns the parent (if any) CSS selector, followed by '>',"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,451,* followed by a unique selector for the element (tag.class.class:nth-child(n)).
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,453,* @return the CSS Path that can be used to retrieve the element in a selector.
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,455,public String cssSelector() {
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,456,if (id().length() > 0)
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,457,"return ""#"" + id();"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,459,StringBuilder selector = new StringBuilder(tagName());
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,460,"String classes = StringUtil.join(classNames(), ""."");"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,461,if (classes.length() > 0)
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,462,selector.append('.').append(classes);
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,464,"if (parent() == null || parent() instanceof Document) // don't add Document to selector, as will always have a html node"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,465,return selector.toString();
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,467,"selector.insert(0, "" > "");"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,468,if (parent().select(selector.toString()).size() > 1)
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,469,selector.append(String.format(
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,470,""":nth-child(%d)"", elementSiblingIndex() + 1));"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,472,return parent().cssSelector() + selector.toString();
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,809, Gets the combined text of this element and all its children.
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,837,* Gets the combined text of this element and all its children. Whitespace is normalized and trimmed.
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,811," For example, given HTML {@code <p>Hello <b>there</b> now!</p>}, {@code p.text()} returns {@code ""Hello there now!""}"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,839,"* For example, given HTML {@code <p>Hello  <b>there</b> now! </p>}, {@code p.text()} returns {@code ""Hello there now!""}"
True,src/main/java/org/jsoup/parser/HtmlTreeBuilder.java,src/main/java/org/jsoup/parser/HtmlTreeBuilder.java,54,baseUriSetFromDoc = false;
False,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,81,alidate.isFalse(tagName.length() == 0);
True,src/main/java/org/jsoup/parser/Token.java,src/main/java/org/jsoup/parser/Token.java,81,Validate.isFalse(tagName == null || tagName.length() == 0);
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,198,if (lastStartTag == null)
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,199,return null;
False,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,219," else if (r.matchesLetter() && !r.containsIgnoreCase(""</"" + t.appropriateEndTagName())) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,219,"} else if (r.matchesLetter() && t.appropriateEndTagName() != null && !r.containsIgnoreCase(""</"" + t.appropriateEndTagName())) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1140,// note: fall through to > case
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1141,case '>': // catch invalid <!DOCTYPE>
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1142,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,1171,t.createDoctypePending();
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,100,} else if (source instanceof DataNode && whitelist.isSafeTag(source.parent().nodeName())) {
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,101,DataNode sourceData = (DataNode) source;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,102,"DataNode destData = new DataNode(sourceData.getWholeData(), source.baseUri());"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,103,destination.appendChild(destData);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,39,You can remove any setting from an existing whitelist with:
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,40,<ul>
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,41,<li>{@link #removeTags}
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,42,<li>{@link #removeAttributes}
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,43,<li>{@link #removeEnforcedAttribute}
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,44,<li>{@link #removeProtocols}
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,45,</ul>
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,46,<p/>
False,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,80,"l, p, pre, q, small, strike, strong, sub, sup, u, ul</code>, and appropriate attributes."
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,88,"ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul</code>, and appropriate attributes."
False,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,93,"i"", ""li"", ""ol"", ""p"", ""pre"", ""q"", ""small"", ""strike"", ""strong"", ""sub"","
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,101,"""i"", ""li"", ""ol"", ""p"", ""pre"", ""q"", ""small"", ""span"", ""strike"", ""strong"", ""sub"","
False,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,125,"ode, col, colgroup, dd, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, strike, strong, sub,"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,133,"code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub,"
False,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,137,"i"", ""img"", ""li"", ""ol"", ""p"", ""pre"", ""q"", ""small"", ""strike"", ""strong"","
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,145,"""i"", ""img"", ""li"", ""ol"", ""p"", ""pre"", ""q"", ""small"", ""span"", ""strike"", ""strong"","
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,204,"Remove a list of allowed elements from a whitelist. (If a tag is not allowed, it will be removed from the HTML.)"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,206,@param tags tag names to disallow
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,207,@return this (for chaining)
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,209,public Whitelist removeTags(String... tags) {
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,210,Validate.notNull(tags);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,212,for(String tag: tags) {
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,213,Validate.notEmpty(tag);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,214,TagName tagName = TagName.valueOf(tag);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,216,if(tagNames.remove(tagName)) { // Only look in sub-maps if tag was allowed
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,217,attributes.remove(tagName);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,218,enforcedAttributes.remove(tagName);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,219,protocols.remove(tagName);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,222,return this;
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,261,"Remove a list of allowed attributes from a tag. (If an attribute is not allowed on an element, it will be removed.)"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,262,<p/>
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,263,"E.g.: <code>removeAttributes(""a"", ""href"", ""class"")</code> disallows <code>href</code> and <code>class</code>"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,264,attributes on <code>a</code> tags.
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,265,<p/>
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,266,"To make an attribute invalid for <b>all tags</b>, use the pseudo tag <code>:all</code>, e.g."
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,267,"<code>removeAttributes("":all"", ""class"")</code>."
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,269,@param tag  The tag the attributes are for.
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,270,@param keys List of invalid attributes for the tag
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,271,@return this (for chaining)
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,273,"public Whitelist removeAttributes(String tag, String... keys) {"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,274,Validate.notEmpty(tag);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,275,Validate.notNull(keys);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,276,"Validate.isTrue(keys.length > 0, ""No attributes supplied."");"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,278,TagName tagName = TagName.valueOf(tag);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,279,Set<AttributeKey> attributeSet = new HashSet<AttributeKey>();
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,280,for (String key : keys) {
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,281,Validate.notEmpty(key);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,282,attributeSet.add(AttributeKey.valueOf(key));
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,284,if(tagNames.contains(tagName) && attributes.containsKey(tagName)) { // Only look in sub-maps if tag was allowed
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,285,Set<AttributeKey> currentSet = attributes.get(tagName);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,286,currentSet.removeAll(attributeSet);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,288,if(currentSet.isEmpty()) // Remove tag from attribute map if no attributes are allowed for tag
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,289,attributes.remove(tagName);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,291,"if(tag.equals("":all"")) // Attribute needs to be removed from all individually set tags"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,292,for(TagName name: attributes.keySet()) {
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,293,Set<AttributeKey> currentSet = attributes.get(name);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,294,currentSet.removeAll(attributeSet);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,296,if(currentSet.isEmpty()) // Remove tag from attribute map if no attributes are allowed for tag
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,297,attributes.remove(name);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,299,return this;
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,336,Remove a previously configured enforced attribute from a tag.
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,338,@param tag   The tag the enforced attribute is for.
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,339,@param key   The attribute key
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,340,@return this (for chaining)
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,342,"public Whitelist removeEnforcedAttribute(String tag, String key) {"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,343,Validate.notEmpty(tag);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,344,Validate.notEmpty(key);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,346,TagName tagName = TagName.valueOf(tag);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,347,if(tagNames.contains(tagName) && enforcedAttributes.containsKey(tagName)) {
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,348,AttributeKey attrKey = AttributeKey.valueOf(key);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,349,"Map<AttributeKey, AttributeValue> attrMap = enforcedAttributes.get(tagName);"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,350,attrMap.remove(attrKey);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,352,if(attrMap.isEmpty()) // Remove tag from enforced attribute map if no enforced attributes are present
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,353,enforcedAttributes.remove(tagName);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,355,return this;
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,382,<p/>
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,383,"To allow a link to an in-page URL anchor (i.e. <code>&lt;a href=""#anchor""&gt;</code>, add a <code>#</code>:<br>"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,384,"E.g.: <code>addProtocols(""a"", ""href"", ""#"")</code>"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,422,Remove allowed URL protocols for an element's URL attribute.
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,423,<p/>
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,424,"E.g.: <code>removeProtocols(""a"", ""href"", ""ftp"")</code>"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,426,@param tag       Tag the URL protocol is for
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,427,@param key       Attribute key
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,428,@param protocols List of invalid protocols
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,429,"@return this, for chaining"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,431,"public Whitelist removeProtocols(String tag, String key, String... protocols) {"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,432,Validate.notEmpty(tag);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,433,Validate.notEmpty(key);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,434,Validate.notNull(protocols);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,436,TagName tagName = TagName.valueOf(tag);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,437,AttributeKey attrKey = AttributeKey.valueOf(key);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,439,if(this.protocols.containsKey(tagName)) {
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,440,"Map<AttributeKey, Set<Protocol>> attrMap = this.protocols.get(tagName);"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,441,if(attrMap.containsKey(attrKey)) {
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,442,Set<Protocol> protSet = attrMap.get(attrKey);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,443,for (String protocol : protocols) {
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,444,Validate.notEmpty(protocol);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,445,Protocol prot = Protocol.valueOf(protocol);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,446,protSet.remove(prot);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,449,if(protSet.isEmpty()) { // Remove protocol set if empty
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,450,attrMap.remove(attrKey);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,451,if(attrMap.isEmpty()) // Remove entry for tag if empty
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,452,this.protocols.remove(tagName);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,456,return this;
False,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,368,"tring prot = protocol.toString() + "":"";"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,504,String prot = protocol.toString();
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,506,"if (prot.equals(""#"")) { // allows anchor links"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,507,if (isValidAnchor(value)) {
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,508,return true;
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,509,} else {
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,510,continue;
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,514,"prot += "":"";"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,523,private boolean isValidAnchor(String value) {
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,524,"return value.startsWith(""#"") && !value.matches("".*\\s.*"");"
False,src/main/java/org/jsoup/select/Elements.java,src/main/java/org/jsoup/select/Elements.java,11," list of {@link Element Elements}, with methods that act on every element in the list."
True,src/main/java/org/jsoup/select/Elements.java,src/main/java/org/jsoup/select/Elements.java,11,"A list of {@link Element}s, with methods that act on every element in the list."
False,src/main/java/org/jsoup/select/Elements.java,src/main/java/org/jsoup/select/Elements.java,13,"o get an Elements object, use the {@link Element#select(String)} method."
True,src/main/java/org/jsoup/select/Elements.java,src/main/java/org/jsoup/select/Elements.java,13,"To get an {@code Elements} object, use the {@link Element#select(String)} method."
False,src/main/java/org/jsoup/select/Elements.java,src/main/java/org/jsoup/select/Elements.java,500, @return a list of FormElements pulled from the matched elements. The list will be empty if the elements contain
True,src/main/java/org/jsoup/select/Elements.java,src/main/java/org/jsoup/select/Elements.java,500,* @return a list of {@link FormElement}s pulled from the matched elements. The list will be empty if the elements contain
True,src/main/java/org/jsoup/select/Evaluator.java,src/main/java/org/jsoup/select/Evaluator.java,281,"if (value.startsWith(""\"""") && value.endsWith(""\"""")) {"
True,src/main/java/org/jsoup/select/Evaluator.java,src/main/java/org/jsoup/select/Evaluator.java,282,"value = value.substring(1, value.length()-1);"
False,src/main/java/org/jsoup/select/Evaluator.java,src/main/java/org/jsoup/select/Evaluator.java,489,f (family.get(i).tag() == element.tag()) pos++;
True,src/main/java/org/jsoup/select/Evaluator.java,src/main/java/org/jsoup/select/Evaluator.java,492,if (family.get(i).tag().equals(element.tag())) pos++;
False,src/main/java/org/jsoup/select/Evaluator.java,src/main/java/org/jsoup/select/Evaluator.java,512,f (family.get(i).tag() == element.tag()) pos++;
True,src/main/java/org/jsoup/select/Evaluator.java,src/main/java/org/jsoup/select/Evaluator.java,515,if (family.get(i).tag().equals(element.tag())) pos++;
True,src/main/java/org/jsoup/select/Selector.java,src/main/java/org/jsoup/select/Selector.java,29,"* <tr><td><code>[attr=&quot;val&quot;]</code></td><td>elements with an attribute named ""attr"", and value equal to ""val""</td><td><code>span[hello=""Cleveland""][goodbye=""Columbus""]</code>, <code>a[rel=&quot;nofollow&quot;]</code></td></tr>"
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,127,@Test
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,128,public void followsNewTempRedirect() throws IOException {
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,129,"Connection con = Jsoup.connect(""http://direct.infohound.net/tools/307.pl""); // http://jsoup.org"
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,130,Document doc = con.get();
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,131,"assertTrue(doc.title().contains(""jsoup""));"
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,132,"assertEquals(""http://jsoup.org"", con.response().url().toString());"
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,320,@Test
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,321,public void baseHrefCorrectAfterHttpEquiv() throws IOException {
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,322,// https://github.com/jhy/jsoup/issues/440
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,323,"Connection.Response res = Jsoup.connect(""http://direct.infohound.net/tools/charset-base.html"").execute();"
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,324,Document doc = res.parse();
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,325,"assertEquals(""http://example.com/foo.jpg"", doc.select(""img"").first().absUrl(""src""));"
False,src/test/java/org/jsoup/nodes/DocumentTypeTest.java,src/test/java/org/jsoup/nodes/DocumentTypeTest.java,13,Test(expected = IllegalArgumentException.class)
False,src/test/java/org/jsoup/nodes/DocumentTypeTest.java,src/test/java/org/jsoup/nodes/DocumentTypeTest.java,14,ublic void constructorValidationThrowsExceptionOnBlankName() {
True,src/test/java/org/jsoup/nodes/DocumentTypeTest.java,src/test/java/org/jsoup/nodes/DocumentTypeTest.java,13,@Test
True,src/test/java/org/jsoup/nodes/DocumentTypeTest.java,src/test/java/org/jsoup/nodes/DocumentTypeTest.java,14,public void constructorValidationOkWithBlankName() {
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,373,@Test public void testSetHtmlTitle() {
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,374,"Document doc = Jsoup.parse(""<html><head id=2><title id=1></title></head></html>"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,376,"Element title = doc.getElementById(""1"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,377,"title.html(""good"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,378,"assertEquals(""good"", title.html());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,379,"title.html(""<i>bad</i>"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,380,"assertEquals(""&lt;i&gt;bad&lt;/i&gt;"", title.html());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,382,"Element head = doc.getElementById(""2"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,383,"head.html(""<title><i>bad</i></title>"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,384,"assertEquals(""<title>&lt;i&gt;bad&lt;/i&gt;</title>"", head.html());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,698,@Test
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,699,public void testCssPath() {
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,700,"Document doc = Jsoup.parse(""<div id=\""id1\"">A</div><div>B</div><div class=\""c1 c2\"">C</div>"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,701,"Element divA = doc.select(""div"").get(0);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,702,"Element divB = doc.select(""div"").get(1);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,703,"Element divC = doc.select(""div"").get(2);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,704,"assertEquals(divA.cssSelector(), ""#id1"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,705,"assertEquals(divB.cssSelector(), ""html > body > div:nth-child(2)"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,706,"assertEquals(divC.cssSelector(), ""html > body > div.c1.c2"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,708,assertTrue(divA == doc.select(divA.cssSelector()).first());
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,709,assertTrue(divB == doc.select(divB.cssSelector()).first());
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,710,assertTrue(divC == doc.select(divC.cssSelector()).first());
False,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,14,"tring text = ""Hello &<> Å å π 新 there ¾ ©"";"
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,14,"String text = ""Hello &<> Å å π 新 there ¾ © »"";"
False,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,21,"ssertEquals(""Hello &amp;&lt;&gt; &Aring; &aring; &#x3c0; &#x65b0; there &frac34; &copy;"", escapedAscii);"
False,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,22,"ssertEquals(""Hello &amp;&lt;&gt; &angst; &aring; &pi; &#x65b0; there &frac34; &copy;"", escapedAsciiFull);"
False,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,23,"ssertEquals(""Hello &amp;&lt;&gt; &#xc5; &#xe5; &#x3c0; &#x65b0; there &#xbe; &#xa9;"", escapedAsciiXhtml);"
False,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,24,"ssertEquals(""Hello &amp;&lt;&gt; Å å π 新 there ¾ ©"", escapedUtfFull);"
False,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,25,"ssertEquals(""Hello &amp;&lt;&gt; Å å π 新 there ¾ ©"", escapedUtfMin);"
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,21,"assertEquals(""Hello &amp;&lt;&gt; &Aring; &aring; &#x3c0; &#x65b0; there &frac34; &copy; &raquo;"", escapedAscii);"
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,22,"assertEquals(""Hello &amp;&lt;&gt; &angst; &aring; &pi; &#x65b0; there &frac34; &copy; &raquo;"", escapedAsciiFull);"
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,23,"assertEquals(""Hello &amp;&lt;&gt; &#xc5; &#xe5; &#x3c0; &#x65b0; there &#xbe; &#xa9; &#xbb;"", escapedAsciiXhtml);"
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,24,"assertEquals(""Hello &amp;&lt;&gt; Å å π 新 there ¾ © »"", escapedUtfFull);"
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,25,"assertEquals(""Hello &amp;&lt;&gt; Å å π 新 there ¾ © »"", escapedUtfMin);"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,280,@Test public void handlesProtocolRelativeUrl() {
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,281,"String base = ""https://example.com/"";"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,282,"String html = ""<img src='//example.net/img.jpg'>"";"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,283,"Document doc = Jsoup.parse(html, base);"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,284,"Element el = doc.select(""img"").first();"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,285,"assertEquals(""https://example.net/img.jpg"", el.absUrl(""src""));"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,818,@Test public void handlesInvalidDoctypes() {
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,819,// would previously throw invalid name exception on empty doctype
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,820,"Document doc = Jsoup.parse(""<!DOCTYPE>"");"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,821,assertEquals(
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,822,"""<!DOCTYPE> <html> <head></head> <body></body> </html>"","
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,823,StringUtil.normaliseWhitespace(doc.outerHtml()));
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,825,"doc = Jsoup.parse(""<!DOCTYPE><html><p>Foo</p></html>"");"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,826,assertEquals(
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,827,"""<!DOCTYPE> <html> <head></head> <body> <p>Foo</p> </body> </html>"","
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,828,StringUtil.normaliseWhitespace(doc.outerHtml()));
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,830,"doc = Jsoup.parse(""<!DOCTYPE \u0000>"");"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,831,assertEquals(
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,832,"""<!DOCTYPE �> <html> <head></head> <body></body> </html>"","
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,833,StringUtil.normaliseWhitespace(doc.outerHtml()));
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,49,@Test public void testRemoveTags() {
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,50,"String h = ""<div><p><A HREF='HTTP://nice.com'>Nice</a></p><blockquote>Hello</blockquote>"";"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,51,"String cleanHtml = Jsoup.clean(h, Whitelist.basic().removeTags(""a""));"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,53,"assertEquals(""<p>Nice</p><blockquote>Hello</blockquote>"", TextUtil.stripNewlines(cleanHtml));"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,56,@Test public void testRemoveAttributes() {
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,57,"String h = ""<div><p>Nice</p><blockquote cite='http://example.com/quotations'>Hello</blockquote>"";"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,58,"String cleanHtml = Jsoup.clean(h, Whitelist.basic().removeAttributes(""blockquote"", ""cite""));"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,60,"assertEquals(""<p>Nice</p><blockquote>Hello</blockquote>"", TextUtil.stripNewlines(cleanHtml));"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,63,@Test public void testRemoveEnforcedAttributes() {
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,64,"String h = ""<div><p><A HREF='HTTP://nice.com'>Nice</a></p><blockquote>Hello</blockquote>"";"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,65,"String cleanHtml = Jsoup.clean(h, Whitelist.basic().removeEnforcedAttribute(""a"", ""rel""));"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,67,"assertEquals(""<p><a href=\""http://nice.com\"">Nice</a></p><blockquote>Hello</blockquote>"","
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,68,TextUtil.stripNewlines(cleanHtml));
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,71,@Test public void testRemoveProtocols() {
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,72,"String h = ""<p>Contact me <a href='mailto:info@example.com'>here</a></p>"";"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,73,"String cleanHtml = Jsoup.clean(h, Whitelist.basic().removeProtocols(""a"", ""href"", ""ftp"", ""mailto""));"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,75,"assertEquals(""<p>Contact me <a rel=\""nofollow\"">here</a></p>"","
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,76,TextUtil.stripNewlines(cleanHtml));
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,109,@Test public void testCleanAnchorProtocol() {
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,110,"String validAnchor = ""<a href=\""#valid\"">Valid anchor</a>"";"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,111,"String invalidAnchor = ""<a href=\""#anchor with spaces\"">Invalid anchor</a>"";"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,113,// A Whitelist that does not allow anchors will strip them out.
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,114,"String cleanHtml = Jsoup.clean(validAnchor, Whitelist.relaxed());"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,115,"assertEquals(""<a>Valid anchor</a>"", cleanHtml);"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,117,"cleanHtml = Jsoup.clean(invalidAnchor, Whitelist.relaxed());"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,118,"assertEquals(""<a>Invalid anchor</a>"", cleanHtml);"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,120,// A Whitelist that allows them will keep them.
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,121,"Whitelist relaxedWithAnchor = Whitelist.relaxed().addProtocols(""a"", ""href"", ""#"");"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,123,"cleanHtml = Jsoup.clean(validAnchor, relaxedWithAnchor);"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,124,"assertEquals(validAnchor, cleanHtml);"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,126,// An invalid anchor is never valid.
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,127,"cleanHtml = Jsoup.clean(invalidAnchor, relaxedWithAnchor);"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,128,"assertEquals(""<a>Invalid anchor</a>"", cleanHtml);"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,239,@Test
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,240,public void testScriptTagInWhiteList() {
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,241,Whitelist whitelist = Whitelist.relaxed();
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,242,"whitelist.addTags( ""script"" );"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,243,"assertTrue( Jsoup.isValid(""Hello<script>alert('Doh')</script>World !"", whitelist ) );"
True,src/test/java/org/jsoup/select/CssTest.java,src/test/java/org/jsoup/select/CssTest.java,32,"sb.append(String.format(""<svg>%d</svg>"",i));"
True,src/test/java/org/jsoup/select/CssTest.java,src/test/java/org/jsoup/select/CssTest.java,71,@Test
True,src/test/java/org/jsoup/select/CssTest.java,src/test/java/org/jsoup/select/CssTest.java,72,public void nthOfType_unknownTag() {
True,src/test/java/org/jsoup/select/CssTest.java,src/test/java/org/jsoup/select/CssTest.java,73,for(int i = 1; i <=10; i++) {
True,src/test/java/org/jsoup/select/CssTest.java,src/test/java/org/jsoup/select/CssTest.java,74,"check(html.select(String.format(""#type svg:nth-of-type(%d)"", i)), String.valueOf(i));"
False,src/test/java/org/jsoup/select/CssTest.java,src/test/java/org/jsoup/select/CssTest.java,88,"heck(html.select(String.format(""#type :nth-last-of-type(%d)"", i)), String.valueOf(11-i),String.valueOf(11-i),String.valueOf(11-i));"
True,src/test/java/org/jsoup/select/CssTest.java,src/test/java/org/jsoup/select/CssTest.java,95,"check(html.select(String.format(""#type :nth-last-of-type(%d)"", i)), String.valueOf(11-i),String.valueOf(11-i),String.valueOf(11-i),String.valueOf(11-i));"
False,src/test/java/org/jsoup/select/CssTest.java,src/test/java/org/jsoup/select/CssTest.java,117,"heck(html.select(""#type :nth-of-type(+5)""), ""5"", ""5"", ""5"");"
True,src/test/java/org/jsoup/select/CssTest.java,src/test/java/org/jsoup/select/CssTest.java,124,"check(html.select(""#type :nth-of-type(+5)""), ""5"", ""5"", ""5"", ""5"");"
False,src/test/java/org/jsoup/select/CssTest.java,src/test/java/org/jsoup/select/CssTest.java,148,"heck(html.select(""#type :nth-last-of-type(+5)""), ""6"", ""6"", ""6"");"
True,src/test/java/org/jsoup/select/CssTest.java,src/test/java/org/jsoup/select/CssTest.java,155,"check(html.select(""#type :nth-last-of-type(+5)""), ""6"", ""6"", ""6"", ""6"");"
False,src/test/java/org/jsoup/select/CssTest.java,src/test/java/org/jsoup/select/CssTest.java,153,"heck(html.select(""div:not(#only) :first-of-type""), ""1"", ""1"", ""1"", ""1"");"
True,src/test/java/org/jsoup/select/CssTest.java,src/test/java/org/jsoup/select/CssTest.java,160,"check(html.select(""div:not(#only) :first-of-type""), ""1"", ""1"", ""1"", ""1"", ""1"");"
False,src/test/java/org/jsoup/select/CssTest.java,src/test/java/org/jsoup/select/CssTest.java,158,"heck(html.select(""div:not(#only) :last-of-type""), ""10"", ""10"", ""10"", ""10"");"
True,src/test/java/org/jsoup/select/CssTest.java,src/test/java/org/jsoup/select/CssTest.java,165,"check(html.select(""div:not(#only) :last-of-type""), ""10"", ""10"", ""10"", ""10"", ""10"");"
False,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,51,"tring h = ""<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />"";"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,51,"String h = ""<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM />"" +"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,52,"""<div data-name='with spaces'/>"";"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,61,"Elements foo2 = doc.select(""[title=\""foo\""]"");"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,62,"assertEquals(1, foo2.size());"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,64,"Elements foo3 = doc.select(""[title=\""Foo\""]"");"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,65,"assertEquals(1, foo3.size());"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,67,"Elements dataName = doc.select(""[data-name=\""with spaces\""]"");"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,68,"assertEquals(1, dataName.size());"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,69,"assertEquals(""with spaces"", dataName.first().attr(""data-name""));"

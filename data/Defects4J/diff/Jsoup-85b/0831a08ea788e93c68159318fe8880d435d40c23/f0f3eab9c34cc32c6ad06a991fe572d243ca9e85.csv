is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/jsoup/nodes/Attribute.java,src/main/java/org/jsoup/nodes/Attribute.java,66,"eturn String.format(""%s=\""%s\"""", key, StringEscapeUtils.escapeHtml(value));"
True,src/main/java/org/jsoup/nodes/Attribute.java,src/main/java/org/jsoup/nodes/Attribute.java,66,"return key + ""=\"""" + StringEscapeUtils.escapeHtml(value) + ""\"""";"
True,src/main/java/org/jsoup/nodes/Attribute.java,src/main/java/org/jsoup/nodes/Attribute.java,67,"// return String.format(""%s=\""%s\"""", key, StringEscapeUtils.escapeHtml(value));"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,160,"tring data = tq.chompTo(""</"" + tagName);"
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,160,"String data = tq.chompToIgnoreCase(""</"" + tagName);"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,298,"reateInline(""OPTION"").setParent(""SELECT"").setContainDataOnly();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,298,"createInline(""OPTION"").setParent(""SELECT"").setOptionalClosing();"
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,12,"rivate StringBuilder lcQueue; // lower-cased clone of the queue, for faster matching"
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,25,cQueue = new StringBuilder(data.toLowerCase());
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,41, Retrieves but does not remove the first characater from the queue.
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,38,* Retrieves but does not remove the first character from the queue.
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,54,"cQueue.insert(pos, Character.toLowerCase(c));"
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,63,"cQueue.insert(pos, seq.toLowerCase());"
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,72,nt len = seq.length();
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,73,f (len > remainingLength())
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,67,int count = seq.length();
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,68,if (count > remainingLength())
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,75,"tring check = lcQueue.substring(pos, pos+len);"
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,76,eturn seq.toLowerCase().equals(check);
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,71,while (--count >= 0) {
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,72,if (Character.toLowerCase(seq.charAt(count)) != Character.toLowerCase(queue.charAt(pos+count)))
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,73,return false;
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,75,return true;
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,153," @param seq String to end on (and not include in return, but leave on queue)"
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,152,"* @param seq String to end on (and not include in return, but leave on queue). <b>Case sensitive.</b>"
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,157,"nt offset = lcQueue.indexOf(seq.toLowerCase(), pos);"
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,156,"int offset = queue.indexOf(seq, pos);"
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,166,public String consumeToIgnoreCase(String seq) {
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,167,int start = pos;
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,168,"String first = seq.substring(0, 1);"
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,169,"boolean canScan = first.toLowerCase().equals(first.toUpperCase()); // if first is not cased, use index of"
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,170,while (!isEmpty() && !matches(seq)) {
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,171,if (canScan) {
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,172,"int skip = queue.indexOf(first, pos) - pos;"
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,173,if (skip <= 0)
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,174,pos++;
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,175,"else if (skip < 0) // no chance of finding, grab to end"
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,176,pos = queue.length() - 1;
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,177,else
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,178,pos += skip;
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,180,else
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,181,pos++;
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,184,"String data = queue.substring(start, pos);"
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,185,return data;
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,169,param seq any number of terminators to consume to
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,170,return consumed string
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,190,@param seq any number of terminators to consume to. <b>Case insensitive.</b>
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,191,@return consumed string
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,193,"// todo: method name. not good that consumeTo cares for case, and consume to any doesn't. And the only use for this"
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,194,// is is a case sensitive time...
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,173,tringBuilder accum = new StringBuilder();
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,174,hile (!isEmpty() && !matchesAny(seq))
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,175,ccum.append(consume());
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,196,int start = pos;
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,197,while (!isEmpty() && !matchesAny(seq)) {
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,198,pos++;
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,177,eturn accum.toString();
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,201,"String data = queue.substring(start, pos);"
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,202,return data;
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,185," @param seq String to match up to, and not include in return, and to pull off queue"
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,210,"* @param seq String to match up to, and not include in return, and to pull off queue. <b>Case sensitive.</b>"
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,219,public String chompToIgnoreCase(String seq) {
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,220,String data = consumeToIgnoreCase(seq); // case insensitive scan
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,221,matchChomp(seq);
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,222,return data;
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,309,eturn queue.toString();
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,340,return queue.substring(pos);
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,87,@Test public void parsesUnterminatedTextarea() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,88,"Document doc = Jsoup.parse(""<body><p><textarea>one<p>two"");"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,89,"Element t = doc.select(""textarea"").first();"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,90,"assertEquals(""one<p>two"", t.text());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,93,@Test public void parsesUnterminatedOption() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,94,"Document doc = Jsoup.parse(""<body><p><select><option>One<option>Two</p><p>Three</p>"");"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,95,"Elements options = doc.select(""option"");"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,96,"assertEquals(2, options.size());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,97,"assertEquals(""One"", options.first().text());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,98,"assertEquals(""Two"", options.last().text());"
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,44,@Test public void chompToIgnoreCase() {
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,45,"String t = ""<textarea>one < two </TEXTarea>"";"
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,46,TokenQueue tq = new TokenQueue(t);
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,47,"String data = tq.chompToIgnoreCase(""</textarea"");"
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,48,"assertEquals(""<textarea>one < two "", data);"
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,50,"tq = new TokenQueue(""<textarea> one two < three </oops>"");"
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,51,"data = tq.chompToIgnoreCase(""</textarea"");"
True,src/test/java/org/jsoup/parser/TokenQueueTest.java,src/test/java/org/jsoup/parser/TokenQueueTest.java,52,"assertEquals(""<textarea> one two < three </oops>"", data);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,3,import org.jsoup.parser.Parser;
True,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,39,"private static final Map<String, Character> base;"
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,46," @param name the possible entity name (e.g. ""lt"" or ""amp"""
True,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,49,"* @param name the possible entity name (e.g. ""lt"" or ""amp"")"
True,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,57,* Check if the input is a known named entity in the base entity set.
True,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,58,"* @param name the possible entity name (e.g. ""lt"" or ""amp"")"
True,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,59,* @return true if a known named entity in the base set
True,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,60,* @see #isNamedEntity(String)
True,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,62,public static boolean isBaseNamedEntity(String name) {
True,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,63,return base.containsKey(name);
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,94,/ todo: change this method to use Tokeniser.consumeCharacterReference
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,95,"f (!string.contains(""&""))"
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,96,eturn string;
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,98,atcher m = strict? strictUnescapePattern.matcher(string) : unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]\\d*);?
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,99,"tringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs"
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,100,"/ todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required"
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,102,hile (m.find()) {
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,103,nt charval = -1;
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,104,tring num = m.group(3);
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,105,f (num != null) {
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,106,ry {
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,107,nt base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,108,"harval = Integer.valueOf(num, base);"
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,109, catch (NumberFormatException e) {
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,110, // skip
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,111, else {
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,112,tring name = m.group(1);
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,113,f (full.containsKey(name))
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,114,harval = full.get(name);
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,117,f (charval != -1 || charval > 0xFFFF) { // out of range
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,118,tring c = Character.toString((char) charval);
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,119,".appendReplacement(accum, Matcher.quoteReplacement(c));"
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,120, else {
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,121,".appendReplacement(accum, Matcher.quoteReplacement(m.group(0))); // replace with original string"
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,124,.appendTail(accum);
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,125,eturn accum.toString();
True,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,107,"return Parser.unescapeEntities(string, strict);"
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,139,"aseByVal = toCharacterKey(loadEntities(""entities-base.properties"")); // most common / default"
True,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,121,"base = loadEntities(""entities-base.properties"");  // most common / default"
True,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,122,baseByVal = toCharacterKey(base);
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,128,* Utility method to unescape HTML entities from a string
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,129,* @param string HTML escaped string
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,130,* @param inAttribute if the string is to be escaped in strict mode (as attributes are)
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,131,* @return an unescaped string
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,133,"public static String unescapeEntities(String string, boolean inAttribute) {"
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,134,"Tokeniser tokeniser = new Tokeniser(new CharacterReader(string), ParseErrorList.noTracking());"
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,135,return tokeniser.unescapeEntities(inAttribute);
False,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,134,"/ get as many letters as possible, and look for matching entities. unconsume backwards till a match is found"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,134,"// get as many letters as possible, and look for matching entities."
False,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,136,tring origNameRef = new String(nameRef); // for error reporting. nameRef gets chomped looking for matches
False,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,138,oolean found = false;
False,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,139,hile (nameRef.length() > 0 && !found) {
False,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,140,f (Entities.isNamedEntity(nameRef))
False,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,141,ound = true;
False,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,142,lse {
False,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,143,"ameRef = nameRef.substring(0, nameRef.length()-1);"
False,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,144,eader.unconsume();
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,137,"// found if a base named entity without a ;, or an extended entity with the ;."
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,138,boolean found = (Entities.isBaseNamedEntity(nameRef) || (Entities.isNamedEntity(nameRef) && looksLegit));
False,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,148,f (looksLegit) // named with semicolon
False,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,149,"haracterReferenceError(String.format(""invalid named referenece '%s'"", origNameRef));"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,142,if (looksLegit) // named with semicolon
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,143,"characterReferenceError(String.format(""invalid named referenece '%s'"", nameRef));"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,225,* Utility method to consume reader and unescape entities found within.
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,226,* @param inAttribute
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,227,* @return unescaped string from reader
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,229,String unescapeEntities(boolean inAttribute) {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,230,StringBuilder builder = new StringBuilder();
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,231,while (!reader.isEmpty()) {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,232,builder.append(reader.consumeTo('&'));
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,233,if (reader.matches('&')) {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,234,reader.consume();
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,235,"Character c = consumeCharacterReference(null, inAttribute);"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,236,if (c == null)
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,237,builder.append('&');
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,238,else
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,239,builder.append(c);
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,242,return builder.toString();
False,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,7,mport org.jsoup.nodes.Entities;
False,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,27,"tring text = ""Hello &amp;&LT&gt; &angst &#960; &#960 &#x65B0; there &! &frac34; &copy; &COPY;"";"
False,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,28,"ssertEquals(""Hello &<> Å π π 新 there &! ¾ © ©"", Entities.unescape(text));"
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,26,"String text = ""Hello &amp;&LT&gt; &reg &angst; &angst &#960; &#960 &#x65B0; there &! &frac34; &copy; &COPY;"";"
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,27,"assertEquals(""Hello &<> ® Å &angst π π 新 there &! ¾ © ©"", Entities.unescape(text));"
False,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,34,"tring text = ""Hello &mid &amp;"";"
False,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,35,"ssertEquals(""Hello &mid &"", Entities.unescape(text, true));"
False,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,36,"ssertEquals(""Hello ∣ &"", Entities.unescape(text));"
False,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,37,"ssertEquals(""Hello ∣ &"", Entities.unescape(text, false));"
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,33,"String text = ""Hello &amp= &amp;"";"
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,34,"assertEquals(""Hello &amp= &"", Entities.unescape(text, true));"
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,35,"assertEquals(""Hello &= &"", Entities.unescape(text));"
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,36,"assertEquals(""Hello &= &"", Entities.unescape(text, false));"
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,63,@Test public void noSpuriousDecodes() {
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,64,"String string = ""http://www.foo.com?a=1&num_rooms=1&children=0&int=VA&b=2"";"
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,65,"assertEquals(string, Entities.unescape(string));"
False,src/test/java/org/jsoup/parser/AttributeParseTest.java,src/test/java/org/jsoup/parser/AttributeParseTest.java,60,"ssertEquals(""?foo=bar∣&lt=true"", els.first().attr(""href"")); // &mid gets to ∣ because not tailed by =; lt is so not unescaped"
True,src/test/java/org/jsoup/parser/AttributeParseTest.java,src/test/java/org/jsoup/parser/AttributeParseTest.java,60,"assertEquals(""?foo=bar&mid&lt=true"", els.first().attr(""href""));"
False,src/test/java/org/jsoup/parser/AttributeParseTest.java,src/test/java/org/jsoup/parser/AttributeParseTest.java,67,"ssertEquals(""&wr_id=123&mid-size=true&ok=≀"", els.first().attr(""href""));"
True,src/test/java/org/jsoup/parser/AttributeParseTest.java,src/test/java/org/jsoup/parser/AttributeParseTest.java,67,"assertEquals(""&wr_id=123&mid-size=true&ok=&wr"", els.first().attr(""href""));"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,724,@Test public void doesNotFindShortestMatchingEntity() {
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,725,"// previous behaviour was to identify a possible entity, then chomp down the string until a match was found."
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,726,// (as defined in html5.) However in practise that lead to spurious matches against the author's intent.
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,727,"String html = ""One &clubsuite; &clubsuit;"";"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,728,Document doc = Jsoup.parse(html);
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,729,"assertEquals(StringUtil.normaliseWhitespace(""One &amp;clubsuite; ♣""), doc.body().html());"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,732,@Test public void relaxedBaseEntityMatchAndStrictExtendedMatch() {
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,733,"// extended entities need a ; at the end to match, base does not"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,734,"String html = ""&amp &quot &reg &icy &hopf &icy; &hopf;"";"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,735,Document doc = Jsoup.parse(html);
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,736,doc.outputSettings().escapeMode(Entities.EscapeMode.extended); // modifies output only to clarify test
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,737,"assertEquals(StringUtil.normaliseWhitespace(""&amp; &quot; &reg; &amp;icy &amp;hopf &icy; &hopf;""), doc.body().html());"

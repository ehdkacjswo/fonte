is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/jsoup/Jsoup.java,src/main/java/org/jsoup/Jsoup.java,220, permitted
False,src/main/java/org/jsoup/Jsoup.java,src/main/java/org/jsoup/Jsoup.java,221, tags and attributes.
True,src/main/java/org/jsoup/Jsoup.java,src/main/java/org/jsoup/Jsoup.java,220,* permitted tags and attributes.
True,src/main/java/org/jsoup/Jsoup.java,src/main/java/org/jsoup/Jsoup.java,221,* <p>The HTML is treated as a body fragment; it's expected the cleaned HTML will be used within the body of an
True,src/main/java/org/jsoup/Jsoup.java,src/main/java/org/jsoup/Jsoup.java,222,"* existing document. If you want to clean full documents, use {@link Cleaner#clean(Document)} instead, and add"
True,src/main/java/org/jsoup/Jsoup.java,src/main/java/org/jsoup/Jsoup.java,223,"* structural tags (<code>html, head, body</code> etc) to the whitelist."
False,src/main/java/org/jsoup/Jsoup.java,src/main/java/org/jsoup/Jsoup.java,239,est if the input HTML has only tags and attributes allowed by the Whitelist. Useful for form validation. The input HTML should
False,src/main/java/org/jsoup/Jsoup.java,src/main/java/org/jsoup/Jsoup.java,240,"till be run through the cleaner to set up enforced attributes, and to tidy the output."
True,src/main/java/org/jsoup/Jsoup.java,src/main/java/org/jsoup/Jsoup.java,241,Test if the input body HTML has only tags and attributes allowed by the Whitelist. Useful for form validation.
True,src/main/java/org/jsoup/Jsoup.java,src/main/java/org/jsoup/Jsoup.java,242,"<p>The input HTML should still be run through the cleaner to set up enforced attributes, and to tidy the output."
True,src/main/java/org/jsoup/Jsoup.java,src/main/java/org/jsoup/Jsoup.java,243,<p>Assumes the HTML is a body fragment (i.e. will be used in an existing HTML document body.)
False,src/main/java/org/jsoup/Jsoup.java,src/main/java/org/jsoup/Jsoup.java,247,"ocument dirty = parseBodyFragment(bodyHtml, """");"
False,src/main/java/org/jsoup/Jsoup.java,src/main/java/org/jsoup/Jsoup.java,248,leaner cleaner = new Cleaner(whitelist);
False,src/main/java/org/jsoup/Jsoup.java,src/main/java/org/jsoup/Jsoup.java,249,eturn cleaner.isValid(dirty);
True,src/main/java/org/jsoup/Jsoup.java,src/main/java/org/jsoup/Jsoup.java,250,return new Cleaner(whitelist).isValidBodyHtml(bodyHtml);
False,src/main/java/org/jsoup/parser/ParseErrorList.java,src/main/java/org/jsoup/parser/ParseErrorList.java,10,lass ParseErrorList extends ArrayList<ParseError>{
True,src/main/java/org/jsoup/parser/ParseErrorList.java,src/main/java/org/jsoup/parser/ParseErrorList.java,10,public class ParseErrorList extends ArrayList<ParseError>{
False,src/main/java/org/jsoup/parser/ParseErrorList.java,src/main/java/org/jsoup/parser/ParseErrorList.java,27,tatic ParseErrorList noTracking() {
True,src/main/java/org/jsoup/parser/ParseErrorList.java,src/main/java/org/jsoup/parser/ParseErrorList.java,27,public static ParseErrorList noTracking() {
False,src/main/java/org/jsoup/parser/ParseErrorList.java,src/main/java/org/jsoup/parser/ParseErrorList.java,31,tatic ParseErrorList tracking(int maxSize) {
True,src/main/java/org/jsoup/parser/ParseErrorList.java,src/main/java/org/jsoup/parser/ParseErrorList.java,31,public static ParseErrorList tracking(int maxSize) {
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,119,"* Parse a fragment of HTML into a list of nodes. The context element, if supplied, supplies parsing context."
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,121,* @param fragmentHtml the fragment of HTML to parse
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,122,* @param context (optional) the element that this HTML fragment is being parsed for (i.e. for inner HTML). This
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,123,* provides stack context (for implicit element creation).
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,124,"* @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs."
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,125,* @param errorList list to add errors to
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,127,"* @return list of nodes parsed from the input HTML. Note that the context element, if supplied, is not modified."
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,129,"public static List<Node> parseFragment(String fragmentHtml, Element context, String baseUri, ParseErrorList errorList) {"
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,130,HtmlTreeBuilder treeBuilder = new HtmlTreeBuilder();
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,131,"return treeBuilder.parseFragment(fragmentHtml, context, baseUri, errorList, treeBuilder.defaultSettings());"
False,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,4,mport org.jsoup.nodes.*;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,4,import org.jsoup.nodes.Attribute;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,5,import org.jsoup.nodes.Attributes;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,6,import org.jsoup.nodes.DataNode;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,7,import org.jsoup.nodes.Document;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,8,import org.jsoup.nodes.Element;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,9,import org.jsoup.nodes.Node;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,10,import org.jsoup.nodes.TextNode;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,11,import org.jsoup.parser.ParseErrorList;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,12,import org.jsoup.parser.Parser;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,17,import java.util.List;
False,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,54,"etermines if the input document is valid, against the whitelist. It is considered valid if all the tags and attributes"
False,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,55,n the input HTML are allowed by the whitelist.
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,64,"Determines if the input document <b>body</b>is valid, against the whitelist. It is considered valid if all the tags and attributes"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,65,"in the input HTML are allowed by the whitelist, and that there is no content in the <code>head</code>."
False,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,57,his method can be used as a validator for user input forms. An invalid document will still be cleaned successfully
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,67,This method can be used as a validator for user input. An invalid document will still be cleaned successfully
False,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,69,eturn numDiscarded == 0;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,79,return numDiscarded == 0
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,80,"&& dirtyDocument.head().childNodes().size() == 0; // because we only look at the body, but we start from a shell, make sure there's nothing in the head"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,83,public boolean isValidBodyHtml(String bodyHtml) {
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,84,"Document clean = Document.createShell("""");"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,85,"Document dirty = Document.createShell("""");"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,86,ParseErrorList errorList = ParseErrorList.tracking(1);
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,87,"List<Node> nodes = Parser.parseFragment(bodyHtml, dirty.body(), """", errorList);"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,88,"dirty.body().insertChildren(0, nodes);"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,89,"int numDiscarded = copySafeNodes(dirty.body(), clean.body());"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,90,return numDiscarded == 0 && errorList.size() == 0;
False,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,500,f (attributes.containsKey(tag)) {
False,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,501,f (attributes.get(tag).contains(key)) {
False,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,502,f (protocols.containsKey(tag)) {
False,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,503,"ap<AttributeKey, Set<Protocol>> attrProts = protocols.get(tag);"
False,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,504,/ ok if not defined protocol; otherwise test
False,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,505,"eturn !attrProts.containsKey(key) || testValidProtocol(el, attr, attrProts.get(key));"
False,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,506," else { // attribute found, no protocols defined, so OK"
False,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,507,eturn true;
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,500,Set<AttributeKey> okSet = attributes.get(tag);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,501,if (okSet != null && okSet.contains(key)) {
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,502,if (protocols.containsKey(tag)) {
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,503,"Map<AttributeKey, Set<Protocol>> attrProts = protocols.get(tag);"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,504,// ok if not defined protocol; otherwise test
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,505,"return !attrProts.containsKey(key) || testValidProtocol(el, attr, attrProts.get(key));"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,506,"} else { // attribute found, no protocols defined, so OK"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,507,return true;
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,510,// might be an enforced attribute?
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,511,"Map<AttributeKey, AttributeValue> enforcedSet = enforcedAttributes.get(tag);"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,512,if (enforcedSet != null) {
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,513,Attributes expect = getEnforcedAttributes(tagName);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,514,String attrKey = attr.getKey();
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,515,if (expect.hasKeyIgnoreCase(attrKey)) {
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,516,return expect.getIgnoreCase(attrKey).equals(attr.getValue());
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,6,import org.jsoup.nodes.Element;
False,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,144,Test public void testIsValid() {
False,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,145,"tring ok = ""<p>Test <b><a href='http://example.com/'>OK</a></b></p>"";"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,145,@Test public void testIsValidBodyHtml() {
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,146,"String ok = ""<p>Test <b><a href='http://example.com/' rel='nofollow'>OK</a></b></p>"";"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,147,"String ok1 = ""<p>Test <b><a href='http://example.com/'>OK</a></b></p>""; // missing enforced is OK because still needs run thru cleaner"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,151,"String nok4 = ""<html><head>Foo</head><body><b>OK</b></body></html>""; // not body html"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,152,"String nok5 = ""<p>Test <b><a href='http://example.com/' rel='nofollowme'>OK</a></b></p>"";"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,153,"String nok6 = ""<p>Test <b><a href='http://example.com/'>OK</b></p>""; // missing close tag"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,154,"String nok7 = ""</div>What"";"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,156,"assertTrue(Jsoup.isValid(ok1, Whitelist.basic()));"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,160,"assertFalse(Jsoup.isValid(nok4, Whitelist.basic()));"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,161,"assertFalse(Jsoup.isValid(nok5, Whitelist.basic()));"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,162,"assertFalse(Jsoup.isValid(nok6, Whitelist.basic()));"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,163,"assertFalse(Jsoup.isValid(ok, Whitelist.none()));"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,164,"assertFalse(Jsoup.isValid(nok7, Whitelist.basic()));"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,167,@Test public void testIsValidDocument() {
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,168,"String ok = ""<html><head></head><body><p>Hello</p></body><html>"";"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,169,"String nok = ""<html><head><script>woops</script><title>Hello</title></head><body><p>Hello</p></body><html>"";"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,171,Whitelist relaxed = Whitelist.relaxed();
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,172,Cleaner cleaner = new Cleaner(relaxed);
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,173,Document okDoc = Jsoup.parse(ok);
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,174,assertTrue(cleaner.isValid(okDoc));
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,175,assertFalse(cleaner.isValid(Jsoup.parse(nok)));
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,176,assertFalse(new Cleaner(Whitelist.none()).isValid(okDoc));

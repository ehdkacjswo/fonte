is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,16,// Some illegal character escapes are parsed by browsers as windows-1252 instead. See issue #1034
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,17,// https://html.spec.whatwg.org/multipage/parsing.html#numeric-character-reference-end-state
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,18,static final int win1252ExtensionsStart = 0x80;
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,19,static final int[] win1252Extensions = new int[] {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,20,"// we could build this manually, but Windows-1252 is not a standard java charset so that could break on"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,21,// some platforms - this table is verified with a test
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,22,"0x20AC, 0x0081, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,23,"0x02C6, 0x2030, 0x0160, 0x2039, 0x0152, 0x008D, 0x017D, 0x008F,"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,24,"0x0090, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,25,"0x02DC, 0x2122, 0x0161, 0x203A, 0x0153, 0x009D, 0x017E, 0x0178,"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,163,// fix illegal unicode characters to match browser behavior
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,164,if (charval >= win1252ExtensionsStart && charval < win1252ExtensionsStart + win1252Extensions.length) {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,165,"characterReferenceError(""character is not a valid unicode code point"");"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,166,charval = win1252Extensions[charval - win1252ExtensionsStart];
True,src/test/java/org/jsoup/parser/TokeniserTest.java,src/test/java/org/jsoup/parser/TokeniserTest.java,3,import java.io.UnsupportedEncodingException;
True,src/test/java/org/jsoup/parser/TokeniserTest.java,src/test/java/org/jsoup/parser/TokeniserTest.java,159,@Test public void cp1252Entities() {
True,src/test/java/org/jsoup/parser/TokeniserTest.java,src/test/java/org/jsoup/parser/TokeniserTest.java,160,"assertEquals(""\u20ac"", Jsoup.parse(""&#0128;"").text());"
True,src/test/java/org/jsoup/parser/TokeniserTest.java,src/test/java/org/jsoup/parser/TokeniserTest.java,161,"assertEquals(""\u201a"", Jsoup.parse(""&#0130;"").text());"
True,src/test/java/org/jsoup/parser/TokeniserTest.java,src/test/java/org/jsoup/parser/TokeniserTest.java,162,"assertEquals(""\u20ac"", Jsoup.parse(""&#x80;"").text());"
True,src/test/java/org/jsoup/parser/TokeniserTest.java,src/test/java/org/jsoup/parser/TokeniserTest.java,165,@Test public void cp1252EntitiesProduceError() {
True,src/test/java/org/jsoup/parser/TokeniserTest.java,src/test/java/org/jsoup/parser/TokeniserTest.java,166,Parser parser = new Parser(new HtmlTreeBuilder());
True,src/test/java/org/jsoup/parser/TokeniserTest.java,src/test/java/org/jsoup/parser/TokeniserTest.java,167,parser.setTrackErrors(10);
True,src/test/java/org/jsoup/parser/TokeniserTest.java,src/test/java/org/jsoup/parser/TokeniserTest.java,168,"assertEquals(""\u20ac"", parser.parseInput(""<html><body>&#0128;</body></html>"", """").text());"
True,src/test/java/org/jsoup/parser/TokeniserTest.java,src/test/java/org/jsoup/parser/TokeniserTest.java,169,"assertEquals(1, parser.getErrors().size());"
True,src/test/java/org/jsoup/parser/TokeniserTest.java,src/test/java/org/jsoup/parser/TokeniserTest.java,172,@Test public void cp1252SubstitutionTable() throws UnsupportedEncodingException {
True,src/test/java/org/jsoup/parser/TokeniserTest.java,src/test/java/org/jsoup/parser/TokeniserTest.java,173,for (int i = 0; i < Tokeniser.win1252Extensions.length; i++) {
True,src/test/java/org/jsoup/parser/TokeniserTest.java,src/test/java/org/jsoup/parser/TokeniserTest.java,174,"String s = new String(new byte[]{ (byte) (i + Tokeniser.win1252ExtensionsStart) }, ""Windows-1252"");"
True,src/test/java/org/jsoup/parser/TokeniserTest.java,src/test/java/org/jsoup/parser/TokeniserTest.java,175,"assertEquals(1, s.length());"
True,src/test/java/org/jsoup/parser/TokeniserTest.java,src/test/java/org/jsoup/parser/TokeniserTest.java,177,// some of these characters are illegal
True,src/test/java/org/jsoup/parser/TokeniserTest.java,src/test/java/org/jsoup/parser/TokeniserTest.java,178,if (s.charAt(0) == '\ufffd') { continue; }
True,src/test/java/org/jsoup/parser/TokeniserTest.java,src/test/java/org/jsoup/parser/TokeniserTest.java,180,"assertEquals(""At: "" + i, s.charAt(0), Tokeniser.win1252Extensions[i]);"

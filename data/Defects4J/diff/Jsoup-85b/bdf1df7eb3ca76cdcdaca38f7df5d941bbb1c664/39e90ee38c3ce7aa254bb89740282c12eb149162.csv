is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,246,"// NOTE: out of spec, added '<' to fix common author bugs"
False,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,253,f (c == '\t'|| c ==  '\n'|| c ==  '\r'|| c ==  '\f'|| c ==  ' '|| c ==  '/'|| c ==  '>'|| c ==  TokeniserState.nullChar)
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,254,if (c == '\t'|| c ==  '\n'|| c ==  '\r'|| c ==  '\f'|| c ==  ' '|| c ==  '/'|| c ==  '>'|| c == '<' || c ==  TokeniserState.nullChar)
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,161,"case '<': // NOTE: out of spec, but clear author intent"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,162,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,163,r.unconsume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,164,// intended fall through to next >
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,567,"case '<': // NOTE: out of spec, but clear (spec has this as a part of the attribute name)"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,568,t.error(this);
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,569,r.unconsume();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,570,// intended fall through as if >
False,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,579,ase '<':
False,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,60,/ this gets a <p> with attr '=a' and an <a tag with an attribue named '<p'; and then auto-recreated
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,60,// this (used to; now gets cleaner) gets a <p> with attr '=a' and an <a tag with an attribue named '<p'; and then auto-recreated
False,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,62,"ssertEquals(""<p =a>One<a <p>Something</a></p>\n"" +"
False,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,63,"<a <p>Else</a>"", doc.body().html());"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,63,// NOTE: per spec this should be the test case. but impacts too many ppl
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,64,"// assertEquals(""<p =a>One<a <p>Something</a></p>\n<a <p>Else</a>"", doc.body().html());"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,66,"assertEquals(""<p =a>One<a></a></p><p><a>Something</a></p><a>Else</a>"", TextUtil.stripNewlines(doc.body().html()));"
False,src/test/java/org/jsoup/parser/TokeniserStateTest.java,src/test/java/org/jsoup/parser/TokeniserStateTest.java,3,mport static org.junit.Assert.*;
True,src/test/java/org/jsoup/parser/TokeniserStateTest.java,src/test/java/org/jsoup/parser/TokeniserStateTest.java,4,import org.jsoup.TextUtil;
True,src/test/java/org/jsoup/parser/TokeniserStateTest.java,src/test/java/org/jsoup/parser/TokeniserStateTest.java,14,import static org.junit.Assert.assertArrayEquals;
True,src/test/java/org/jsoup/parser/TokeniserStateTest.java,src/test/java/org/jsoup/parser/TokeniserStateTest.java,15,import static org.junit.Assert.assertEquals;
True,src/test/java/org/jsoup/parser/TokeniserStateTest.java,src/test/java/org/jsoup/parser/TokeniserStateTest.java,203,@Test public void handlesLessInTagThanAsNewTag() {
True,src/test/java/org/jsoup/parser/TokeniserStateTest.java,src/test/java/org/jsoup/parser/TokeniserStateTest.java,204,"// out of spec, but clear author intent"
True,src/test/java/org/jsoup/parser/TokeniserStateTest.java,src/test/java/org/jsoup/parser/TokeniserStateTest.java,205,"String html = ""<p\n<p<div id=one <span>Two"";"
True,src/test/java/org/jsoup/parser/TokeniserStateTest.java,src/test/java/org/jsoup/parser/TokeniserStateTest.java,206,Document doc = Jsoup.parse(html);
True,src/test/java/org/jsoup/parser/TokeniserStateTest.java,src/test/java/org/jsoup/parser/TokeniserStateTest.java,207,"assertEquals(""<p></p><p></p><div id=\""one\""><span>Two</span></div>"", TextUtil.stripNewlines(doc.body().html()));"

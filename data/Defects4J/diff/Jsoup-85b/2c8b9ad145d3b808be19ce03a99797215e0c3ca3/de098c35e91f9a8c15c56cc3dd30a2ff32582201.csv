is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,108,"f (attributeKey.toLowerCase().startsWith(""abs:"")) {"
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,108,"if (attributeKey.startsWith(""abs:"")) {"
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,251,"Gets this node's parent node. Node overridable by extending classes, so useful if you really just need the Node type."
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,252,@return parent node; or null if no parent.
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,254,public final Node parentNode() {
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,255,return parentNode;
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,263,tringBuilder accum = new StringBuilder();
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,263,int start = -1;
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,264,int end = -1;
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,271,f (c.equals(open))
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,272,if (c.equals(open)) {
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,274,if (start == -1)
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,275,start = pos;
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,278,ccum.append(c); // don't include the outer match pair in the return
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,282,end = pos; // don't include the outer match pair in the return
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,281,eturn accum.toString();
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,285,"return (end >= 0) ? queue.substring(start, end) : """";"
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,383,tringBuilder accum = new StringBuilder();
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,384,hile (!isEmpty()) {
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,385,ccum.append(consume());
False,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,387,eturn accum.toString();
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,387,"final String remainder = queue.substring(pos, queue.length());"
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,388,pos = queue.length();
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,389,return remainder;
False,src/main/java/org/jsoup/select/CombiningEvaluator.java,src/main/java/org/jsoup/select/CombiningEvaluator.java,15,inal List<Evaluator> evaluators;
True,src/main/java/org/jsoup/select/CombiningEvaluator.java,src/main/java/org/jsoup/select/CombiningEvaluator.java,15,final ArrayList<Evaluator> evaluators;
True,src/main/java/org/jsoup/select/CombiningEvaluator.java,src/main/java/org/jsoup/select/CombiningEvaluator.java,16,int num = 0;
True,src/main/java/org/jsoup/select/CombiningEvaluator.java,src/main/java/org/jsoup/select/CombiningEvaluator.java,26,updateNumEvaluators();
False,src/main/java/org/jsoup/select/CombiningEvaluator.java,src/main/java/org/jsoup/select/CombiningEvaluator.java,28,eturn evaluators.size() > 0 ? evaluators.get(evaluators.size() - 1) : null;
True,src/main/java/org/jsoup/select/CombiningEvaluator.java,src/main/java/org/jsoup/select/CombiningEvaluator.java,30,return num > 0 ? evaluators.get(num - 1) : null;
False,src/main/java/org/jsoup/select/CombiningEvaluator.java,src/main/java/org/jsoup/select/CombiningEvaluator.java,32,"valuators.set(evaluators.size() - 1, replacement);"
True,src/main/java/org/jsoup/select/CombiningEvaluator.java,src/main/java/org/jsoup/select/CombiningEvaluator.java,34,"evaluators.set(num - 1, replacement);"
True,src/main/java/org/jsoup/select/CombiningEvaluator.java,src/main/java/org/jsoup/select/CombiningEvaluator.java,37,void updateNumEvaluators() {
True,src/main/java/org/jsoup/select/CombiningEvaluator.java,src/main/java/org/jsoup/select/CombiningEvaluator.java,38,// used so we don't need to bash on size() for every match test
True,src/main/java/org/jsoup/select/CombiningEvaluator.java,src/main/java/org/jsoup/select/CombiningEvaluator.java,39,num = evaluators.size();
False,src/main/java/org/jsoup/select/CombiningEvaluator.java,src/main/java/org/jsoup/select/CombiningEvaluator.java,46,or (int i = 0; i < evaluators.size(); i++) {
True,src/main/java/org/jsoup/select/CombiningEvaluator.java,src/main/java/org/jsoup/select/CombiningEvaluator.java,53,for (int i = 0; i < num; i++) {
False,src/main/java/org/jsoup/select/CombiningEvaluator.java,src/main/java/org/jsoup/select/CombiningEvaluator.java,67,f (evaluators.size() > 1)
True,src/main/java/org/jsoup/select/CombiningEvaluator.java,src/main/java/org/jsoup/select/CombiningEvaluator.java,74,if (num > 1)
True,src/main/java/org/jsoup/select/CombiningEvaluator.java,src/main/java/org/jsoup/select/CombiningEvaluator.java,78,updateNumEvaluators();
True,src/main/java/org/jsoup/select/CombiningEvaluator.java,src/main/java/org/jsoup/select/CombiningEvaluator.java,87,updateNumEvaluators();
False,src/main/java/org/jsoup/select/CombiningEvaluator.java,src/main/java/org/jsoup/select/CombiningEvaluator.java,83,or (int i = 0; i < evaluators.size(); i++) {
True,src/main/java/org/jsoup/select/CombiningEvaluator.java,src/main/java/org/jsoup/select/CombiningEvaluator.java,92,for (int i = 0; i < num; i++) {
False,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,37,ode = node.parent();
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,37,node = node.parentNode();
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,17,"private static final String[] AttributeEvals = new String[]{""="", ""!="", ""^="", ""$="", ""*="", ""~=""};"
False,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,224,"tring key = cq.consumeToAny(""="", ""!="", ""^="", ""$="", ""*="", ""~=""); // eq, not, start, end, contain, match, (no val)"
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,225,"String key = cq.consumeToAny(AttributeEvals); // eq, not, start, end, contain, match, (no val)"

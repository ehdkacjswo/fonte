is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,192,boolean containsIgnoreCase(String seq) {
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,193,"// used to check presence of </title>, </style>. only finds consistent case."
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,194,String loScan = seq.toLowerCase();
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,195,String hiScan = seq.toUpperCase();
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,196,"return (input.indexOf(loScan, pos) > -1) || (input.indexOf(hiScan, pos) > -1);"
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,197,String appropriateEndTagName() {
True,src/main/java/org/jsoup/parser/Tokeniser.java,src/main/java/org/jsoup/parser/Tokeniser.java,198,return lastStartTag.tagName;
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,218,"} else if (r.matchesLetter() && !r.containsIgnoreCase(""</"" + t.appropriateEndTagName())) {"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,219,"// diverge from spec: got a start tag, but there's no appropriate end tag (</title>), so rather than"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,220,// consuming to EOF; break out here
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,221,t.tagPending = new Token.EndTag(t.appropriateEndTagName());
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,222,t.emitTagPending();
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,223,"r.unconsume(); // undo ""<"""
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,224,t.transition(Data);
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,98,"// don't parse right to end, but break on <p>"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,100,"ssertEquals(""one<p>two"", t.text());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,101,"assertEquals(""one"", t.text());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,102,"assertEquals(""two"", doc.select(""p"").get(1).text());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,554,@Test public void handlesUnclosedTitle() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,555,"Document one = Jsoup.parse(""<title>One <b>Two <b>Three</TITLE><p>Test</p>""); // has title, so <b> is plain text"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,556,"assertEquals(""One <b>Two <b>Three"", one.title());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,557,"assertEquals(""Test"", one.select(""p"").first().text());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,559,"Document two = Jsoup.parse(""<title>One<b>Two <p>Test</p>""); // no title, so <b> causes </title> breakout"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,560,"assertEquals(""One"", two.title());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,561,"assertEquals(""<b>Two <p>Test</p></b>"", two.body().html());"

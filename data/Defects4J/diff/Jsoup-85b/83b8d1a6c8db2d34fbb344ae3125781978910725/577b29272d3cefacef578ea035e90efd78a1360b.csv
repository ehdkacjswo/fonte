is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/jsoup/Jsoup.java,src/main/java/org/jsoup/Jsoup.java,5,import org.jsoup.safety.Cleaner;
True,src/main/java/org/jsoup/Jsoup.java,src/main/java/org/jsoup/Jsoup.java,6,import org.jsoup.safety.Whitelist;
True,src/main/java/org/jsoup/Jsoup.java,src/main/java/org/jsoup/Jsoup.java,22,"public static String clean(String html, Whitelist whitelist) {"
True,src/main/java/org/jsoup/Jsoup.java,src/main/java/org/jsoup/Jsoup.java,23,Document dirty = Jsoup.parse(html);
True,src/main/java/org/jsoup/Jsoup.java,src/main/java/org/jsoup/Jsoup.java,24,Cleaner cleaner = new Cleaner(whitelist);
True,src/main/java/org/jsoup/Jsoup.java,src/main/java/org/jsoup/Jsoup.java,25,Document clean = cleaner.clean(dirty);
True,src/main/java/org/jsoup/Jsoup.java,src/main/java/org/jsoup/Jsoup.java,26,return clean.getBody().html();
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,3,import org.apache.commons.lang.Validate;
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,19,"Create a valid, empty shell of a document, suitable for adding more elements to (without parsing)."
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,20,@param baseUri baseUri of document
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,21,"@return document with html, head, and body elements."
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,23,static public Document createShell(String baseUri) {
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,24,Validate.notNull(baseUri);
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,26,Document doc = new Document(baseUri);
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,27,"Element html = doc.createElement(Tag.valueOf(""html""));"
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,28,"Element head = doc.createElement(Tag.valueOf(""head""));"
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,29,"Element body = doc.createElement(Tag.valueOf(""body""));"
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,31,doc.addChild(html);
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,32,html.addChild(head);
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,33,html.addChild(body);
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,35,return doc;
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,54,public Element createElement(Tag tag) {
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,55,"return new Element(tag, baseUri());"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,28,"public Element(Tag tag, String baseUri) {"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,29,"this(new StartTag(tag, baseUri));"
False,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,20,inal String baseUri;
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,20,String baseUri;
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,96,public void setBaseUri(String baseUri) {
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,97,Validate.notNull(baseUri);
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,98,this.baseUri = baseUri;
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,135,doc.setBaseUri(baseUri); // set on the doc so doc.createElement(Tag) will get updated base
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,3,import org.apache.commons.lang.Validate;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,4,import org.jsoup.nodes.*;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,5,import org.jsoup.parser.StartTag;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,6,import org.jsoup.parser.Tag;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,8,import java.util.List;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,11,private Whitelist whitelist;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,13,public Cleaner(Whitelist whitelist) {
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,14,Validate.notNull(whitelist);
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,15,this.whitelist = whitelist;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,19,"Creates a new, clean document, from the original dirty document, containing only elements allowed by the whitelist."
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,20,The original document is not modified. Only elements from the dirt document's <code>body</code> are used.
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,21,@param dirtyDocument Untrusted base document to clean.
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,22,@return cleaned document.
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,24,public Document clean(Document dirtyDocument) {
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,25,Validate.notNull(dirtyDocument);
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,27,Document clean = Document.createShell(dirtyDocument.baseUri());
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,28,"copySafeNodes(dirtyDocument.getBody(), clean.getBody());"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,30,return clean;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,33,"private void copySafeNodes(Element source, Element dest) {"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,34,List<Node> sourceChildren = source.childNodes();
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,36,for (Node sourceChild : sourceChildren) {
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,37,if (sourceChild instanceof Element) {
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,38,Element sourceEl = (Element) sourceChild;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,40,"if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,41,Element destChild = createSafeElement(sourceEl);
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,42,dest.addChild(destChild);
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,43,"copySafeNodes(sourceEl, destChild); // recurs"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,44,"} else { // not a safe tag, but it may have children (els or text) that are, so recurse"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,45,"copySafeNodes(sourceEl, dest);"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,47,} else if (sourceChild instanceof TextNode) {
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,48,TextNode sourceText = (TextNode) sourceChild;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,49,"TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,50,dest.addChild(destText);
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,51,"} // else, we don't care about comments, xml proc instructions, etc"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,55,private Element createSafeElement(Element sourceEl) {
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,56,String sourceTag = sourceEl.tagName();
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,57,Attributes destAttrs = new Attributes();
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,58,"Element dest = new Element(new StartTag(Tag.valueOf(sourceTag), sourceEl.baseUri(), destAttrs));"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,60,Attributes sourceAttrs = sourceEl.getAttributes();
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,61,for (Attribute sourceAttr : sourceAttrs) {
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,62,"if (whitelist.isSafeAttribute(sourceTag, sourceAttr))"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,63,destAttrs.put(sourceAttr);
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,65,Attributes enforcedAttrs = whitelist.getEnforcedAttributes(sourceTag);
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,66,destAttrs.mergeAttributes(enforcedAttrs);
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,67,return dest;
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,9,import org.jsoup.nodes.Attribute;
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,10,import org.jsoup.nodes.Attributes;
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,275,boolean isSafeTag(String tag) {
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,276,return tagNames.contains(TagName.valueOf(tag));
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,279,"boolean isSafeAttribute(String tagName, Attribute attr) {"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,280,TagName tag = TagName.valueOf(tagName);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,281,AttributeKey key = AttributeKey.valueOf(attr.getKey());
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,282,AttributeValue value = AttributeValue.valueOf(attr.getValue());
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,284,if (attributes.containsKey(tag)) {
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,285,if (attributes.get(tag).contains(key)) {
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,286,if (protocols.containsKey(tag)) {
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,287,"Map<AttributeKey, Set<Protocol>> attrProts = protocols.get(tag);"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,288,// ok if not defined protocol; otherwise test
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,289,"return !attrProts.containsKey(key) || testValidProtocol(value, attrProts.get(key));"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,290,"} else { // attribute found, no protocols defined, so OK"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,291,return true;
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,294,"} else { // no attributes defined for tag, try :all tag"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,295,"return !tagName.equals("":all"") && isSafeAttribute("":all"", attr);"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,297,return false;
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,300,"private boolean testValidProtocol(AttributeValue value, Set<Protocol> protocols) {"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,301,// todo: use the absUrl method and test this is a good URL
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,302,for (Protocol protocol : protocols) {
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,303,"String prot = protocol.toString() + "":"";"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,304,if (value.toString().toLowerCase().startsWith(prot)) {
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,305,return true;
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,308,return false;
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,311,Attributes getEnforcedAttributes(String tagName) {
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,312,Attributes attrs = new Attributes();
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,313,TagName tag = TagName.valueOf(tagName);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,314,if (enforcedAttributes.containsKey(tag)) {
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,315,"Map<AttributeKey, AttributeValue> keyVals = enforcedAttributes.get(tag);"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,316,"for (Map.Entry<AttributeKey, AttributeValue> entry : keyVals.entrySet()) {"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,317,"attrs.put(entry.getKey().toString(), entry.getValue().toString());"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,320,return attrs;
True,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,1,package org.jsoup.org.jsoup.safety;
True,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,3,import org.jsoup.Jsoup;
True,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,4,import org.jsoup.safety.Whitelist;
True,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,5,import org.junit.Test;
True,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,6,import static org.junit.Assert.*;
True,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,9,Tests for the cleaner.
True,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,11,"@author Jonathan Hedley, jonathan@hedley.net */"
True,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,12,public class CleanerTest {
True,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,13,@Test public void simpleBehaviourTest() {
True,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,14,"String h = ""<div><p class=foo><a href='http://evil.com'>Hello <b id=bar>there</b>!</a></div>"";"
True,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,15,"String cleanHtml = Jsoup.clean(h, Whitelist.simpleText());"
True,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,17,"assertEquals(""Hello <b>there</b>!"", cleanHtml);"
True,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,20,@Test public void basicBehaviourTest() {
True,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,21,"String h = ""<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"";"
True,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,22,"String cleanHtml = Jsoup.clean(h, Whitelist.basic());"
True,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java,24,"assertEquals(""<p><a rel=\""nofollow\"">Dodgy</a> <a href=\""HTTP://nice.com\"" rel=\""nofollow\"">Nice</a></p><blockquote>Hello</blockquote>"", cleanHtml);"
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,151,"ssertEquals(""http://foo/"", doc.baseUri());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,151,"assertEquals(""http://bar"", doc.baseUri()); // gets updated as base changes, so doc.createElement has latest."

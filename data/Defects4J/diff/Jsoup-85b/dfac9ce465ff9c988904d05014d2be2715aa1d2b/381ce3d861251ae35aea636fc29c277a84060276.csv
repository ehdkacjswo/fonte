is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,6,import org.jsoup.select.NodeTraversor;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,7,import org.jsoup.select.NodeVisitor;
False,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,69,param source source of HTML
False,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,70,param dest destination element to copy into
False,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,71,return number of discarded elements (that were considered unsafe)
False,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,73,"rivate int copySafeNodes(Element source, Element dest) {"
False,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,74,ist<Node> sourceChildren = source.childNodes();
False,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,75,nt numDiscarded = 0;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,72,private final class CleaningVisitor implements NodeVisitor {
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,73,private int numDiscarded = 0;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,74,private final Element root;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,75,private Element destination; // current element to append nodes to
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,77,"private CleaningVisitor(Element root, Element destination) {"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,78,this.root = root;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,79,this.destination = destination;
False,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,77,or (Node sourceChild : sourceChildren) {
False,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,78,f (sourceChild instanceof Element) {
False,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,79,lement sourceEl = (Element) sourceChild;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,82,"public void head(Node source, int depth) {"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,83,if (source instanceof Element) {
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,84,Element sourceEl = (Element) source;
False,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,84,est.appendChild(destChild);
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,89,destination.appendChild(destChild);
False,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,87,"umDiscarded += copySafeNodes(sourceEl, destChild); // recurs"
False,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,88," else { // not a safe tag, but it may have children (els or text) that are, so recurse"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,92,destination = destChild;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,93,"} else if (source != root) { // not a safe tag, so don't add. don't count root against discarded."
False,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,90,"umDiscarded += copySafeNodes(sourceEl, dest);"
False,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,92, else if (sourceChild instanceof TextNode) {
False,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,93,extNode sourceText = (TextNode) sourceChild;
False,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,94,"extNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());"
False,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,95,est.appendChild(destText);
False,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,96," // else, we don't care about comments, xml proc instructions, etc"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,96,} else if (source instanceof TextNode) {
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,97,TextNode sourceText = (TextNode) source;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,98,"TextNode destText = new TextNode(sourceText.getWholeText(), source.baseUri());"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,99,destination.appendChild(destText);
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,100,"} else { // else, we don't care about comments, xml proc instructions, etc"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,101,numDiscarded++;
False,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,98,eturn numDiscarded;
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,105,"public void tail(Node source, int depth) {"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,106,if (source instanceof Element && whitelist.isSafeTag(source.nodeName())) {
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,107,"destination = destination.parent(); // would have descended, so pop destination stack"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,112,"private int copySafeNodes(Element source, Element dest) {"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,113,"CleaningVisitor cleaningVisitor = new CleaningVisitor(source, dest);"
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,114,NodeTraversor traversor = new NodeTraversor(cleaningVisitor);
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,115,traversor.traverse(source);
True,src/main/java/org/jsoup/safety/Cleaner.java,src/main/java/org/jsoup/safety/Cleaner.java,116,return cleaningVisitor.numDiscarded;
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,95,"String nok3 = ""<!-- comment --><p>Not OK</p>""; // comments and the like will be cleaned"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,99,"assertFalse(Jsoup.isValid(nok3, Whitelist.basic()));"
False,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,106,Test public void preservesRelatedLinksIfConfigured() {
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,108,@Test public void preservesRelativeLinksIfConfigured() {
